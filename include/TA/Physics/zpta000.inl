//---------------------------------------------------------------------------------
// File Name: zpta000.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

nam\
es\
p\
ace
TA\

{
inl\
i\
ne
void
CarTe\
mp\
late
::
Wheel
::
SetS\
u\
spensio\
nTo\
p
(
const
Ve\
c\
3\

&
lOl\
O\
llll\
Oll
)
{
lOl\
Ol\
OOOllO
=
lOlOll\
llOll
;
}
in\
l\
ine
con\
st
Ve\
c3\

&
Ca\
rTemplate
::
Wheel\

::
GetSu\
spensi\
on\
T\
op\

(
)
const
{
ret\
ur\
n
lOlOl\
O\
O\
Ol\
lO
;
}
in\
line\

void
Car\
Tem\
pl\
at\
e
::
Whe\
e\
l
::
Set\
Su\
s\
p\
e\
nsio\
nB\
o\
tt\
om
(
const
Vec3
&
lOlOlllllOO\

)
{
lO\
lOlOOO\
lll
=
lOlO\
lllll\
OO\

;
}
inl\
ine
const
Ve\
c3\

&
Car\
T\
emplate
::
Wh\
e\
el
::
GetS\
uspensio\
nBot\
tom
(
)
cons\
t
{
retu\
rn
lO\
lO\
lOOOlll
;
}
in\
li\
n\
e
void\

CarTem\
p\
late
::
Wh\
eel
::
Se\
tRadius\

(
flo\
at\

llllOlllll
)
{
lOlOl\
OOlOOO
=
ll\
ll\
O\
lllll\

;
}
inl\
ine
fl\
oat
CarTemplate
::
Wheel
::
GetR\
adi\
us
(
)
const
{
re\
tur\
n
lOlOlOOl\
OOO
;
}
inline
void
Ca\
rTempla\
te
::
Wheel
::
SetIner\
t\
ia
(
fl\
o\
a\
t
lO\
lOll\
lll\
Ol\

)
{
lOlOlO\
Ol\
OOl\

=
lO\
lO\
llll\
l\
Ol\

;
}
inl\
i\
ne\

flo\
at
Ca\
rTe\
mpla\
te
::
Wh\
eel\

::
GetI\
n\
ert\
ia
(
)
const\

{
ret\
urn
lOl\
OlO\
OlOOl\

;
}
inline\

void
Ca\
rTemplat\
e
::
Wheel
::
Set\
Bra\
ke\
Tor\
que\

(
float
lOlOlll\
ll\
lO
)
{
lO\
l\
Ol\
OO\
l\
OlO\

=
lOlO\
lll\
ll\
l\
O
;
}
inl\
ine\

flo\
a\
t
Car\
Template
::
Wheel
::
GetBrakeT\
orqu\
e
(
)
co\
ns\
t
{
return
lOl\
OlOOl\
Ol\
O\

;
}
inline
void\

CarTem\
pla\
t\
e\

::
Wh\
eel\

::
Set\
RollResistan\
c\
e
(
floa\
t\

lOl\
Ol\
llllll\

)
{
lOlOlOOlOl\
l
=
lOlOl\
llll\
ll
;
}
in\
lin\
e\

float\

CarTe\
mp\
l\
a\
t\
e
::
Whe\
el
::
GetRol\
lRe\
s\
i\
stance
(
)
const
{
return\

lO\
lO\
lOO\
l\
O\
l\
l
;
}
inline
void
Ca\
rTe\
mplate
::
Wheel
::
SetSusp\
e\
nsionSpringC\
on\
stan\
t
(
fl\
oat
lO\
l\
lO\
OOOOOO
)
{
lO\
lO\
l\
OOllO\
O
=
lOllOOO\
OOOO\

;
}
inline
floa\
t\

CarTemp\
late\

::
Whe\
el
::
GetS\
us\
p\
en\
s\
i\
onSprin\
g\
Cons\
t\
a\
nt\

(
)
con\
st
{
return\

lOlOlO\
Ol\
lOO\

;
}
inline\

void\

CarTem\
plat\
e
::
Wheel
::
Se\
tSusp\
ensi\
onDamp\
in\
gCon\
st\
a\
nt\

(
float
lOllO\
O\
OOO\
Ol
)
{
lO\
lOlOO\
llOl
=
lO\
ll\
OO\
O\
OOOl\

;
}
inli\
n\
e
float
CarTem\
pl\
a\
te
::
Whee\
l\

::
GetSus\
pe\
nsionDampi\
ngConsta\
n\
t\

(
)
co\
nst\

{
return\

lOlOl\
O\
OllOl
;
}
inline
void
Car\
Templ\
ate\

::
Whe\
el
::
SetSlipR\
atioT\
oN\
o\
rmalise\
d\
Tr\
act\
ion\
CallBack
(
Fn\
SlipRa\
ti\
oTo\
NormalisedT\
ract\
ion\

lOOOOlll\
Ol\

)
{
lO\
lOl\
OOl\
ll\
O\

=
lOOOOl\
llOl
;
}
inli\
ne
Ca\
rT\
e\
m\
pl\
a\
t\
e
::
FnS\
lip\
R\
atioToNorm\
al\
ise\
dTraction\

CarTem\
pl\
a\
t\
e
::
Wheel
::
GetSlipRati\
oT\
oNormalis\
e\
dTrac\
tion\
CallB\
a\
c\
k
(
)
const
{
re\
turn
lOlOlOOll\
l\
O
;
}
in\
line
vo\
id\

CarTe\
mp\
late
::
Wheel
::
Set\
Slip\
A\
ngleToLateralF\
orceCal\
lB\
ack
(
FnSl\
i\
pAn\
g\
l\
eToLate\
ral\
For\
c\
e
lOOO\
O\
ll\
lOl
)
{
lO\
lO\
lO\
O\
l\
ll\
l
=
lOOOOll\
lOl
;
}
inline\

Car\
Templ\
ate
::
FnSlipA\
ngleToLate\
ral\
F\
orce
CarTem\
plate
::
Wh\
eel\

::
GetSl\
i\
pAngle\
ToLa\
t\
eralF\
orc\
eCal\
lBack
(
)
const\

{
return
lO\
lOlOOllll
;
}
inl\
ine\

vo\
i\
d
CarTempla\
te\

::
Whee\
l
::
SetSteerin\
gFlag
(
bool
lOlOl\
O\
OOO\
ll
)
{
lOlOlO\
OO\
O\
lO
.
lO\
lOlOO\
OO\
ll
=
lOlOl\
OO\
OOl\
l
;
}
inli\
ne
bool\

Ca\
r\
Templ\
a\
te
::
Wheel
::
Ge\
tSt\
e\
e\
ri\
ngF\
lag
(
)
const
{
re\
t\
urn
lOlOlOOOO\
l\
O
.
lOlOlO\
O\
OO\
ll
;
}
in\
li\
ne
void
CarTemplat\
e
::
Wheel
::
SetDr\
iv\
ingFlag
(
boo\
l
lOlOlO\
OOlO\
O\

)
{
lOl\
OlOO\
OOlO
.
lO\
lO\
lO\
OOlOO\

=
lOlOlOOOlOO
;
}
inl\
ine
boo\
l
CarTem\
pl\
a\
te
::
Whe\
e\
l
::
GetDriving\
Fl\
ag\

(
)
const
{
re\
t\
urn
lOlOlOOO\
OlO
.
lOlOlO\
OOlO\
O
;
}
inline\

voi\
d\

Ca\
rTempl\
ate
::
Wh\
ee\
l
::
Se\
t\
Hand\
B\
r\
ake\
Flag
(
boo\
l
lOl\
OlOO\
Ol\
Ol
)
{
lOlOlO\
OOOl\
O
.
lO\
lO\
lOOOlO\
l\

=
lOl\
O\
l\
OOOlOl\

;
}
inl\
ine
bo\
ol
CarT\
emplate
::
Whe\
e\
l
::
GetHandBr\
ake\
Flag
(
)
co\
nst\

{
ret\
urn
lOlOl\
OOOOl\
O\

.
lOlOlOO\
OlOl
;
}
inli\
ne
const
Vec3\

&
CarTemp\
lat\
e
::
GetFor\
wa\
rd
(
)
const
{
ret\
u\
r\
n\

lOlOllO\
Ol\
O\
O
;
}
inline
con\
st
Ve\
c3
&
Car\
Tem\
plate
::
Ge\
tUp
(
)
const
{
return\

lOlO\
llO\
OlO\
l\

;
}
inline
int\

CarTemplate
::
Get\
NumGear\
s
(
)
const\

{
ret\
urn
lOlOlOlO\
llO
.
lOOOl\
l\
lOOl
(
)
;
}
in\
li\
ne\

voi\
d\

Car\
Template\

::
Se\
t\
GearRa\
tio
(
int
lOOOlOOlll\

,
floa\
t\

lOllOOOOO\
lO
)
{
lOlOl\
OlOllO
[
lOOO\
lO\
Ol\
ll
]
=
lOllO\
OOOOlO
;
}
inlin\
e
flo\
at
CarTempl\
ate
::
GetG\
e\
ar\
Ra\
ti\
o
(
int\

lOOOlOOlll\

)
cons\
t
{
ret\
ur\
n
lOl\
O\
lO\
l\
Ol\
lO\

[
lO\
OOl\
O\
O\
ll\
l\

]
;
}
inl\
in\
e
void
Car\
Te\
mp\
l\
a\
t\
e\

::
Se\
tDi\
ffere\
ntial\
Ra\
t\
io\

(
flo\
a\
t
lOl\
lOO\
OOOll
)
{
lOlOlOl\
Olll
=
lOllO\
OOO\
Oll
;
}
inline
fl\
o\
at\

Ca\
rTempl\
ate
::
GetDi\
ffe\
ren\
tialRat\
io
(
)
cons\
t
{
return
lOlOl\
OlOl\
l\
l
;
}
inline
voi\
d
CarT\
empla\
te
::
SetM\
a\
s\
s
(
float
lOllOOO\
OlOO\

)
{
lO\
lOlOlOOlO
=
lOll\
OOOOlOO
;
}
in\
lin\
e
flo\
at
CarTem\
plate\

::
GetMa\
ss
(
)
const
{
retu\
rn
lOlOlOlOOl\
O
;
}
inline
void\

Car\
T\
em\
p\
late
::
Set\
Trans\
missi\
onEf\
fici\
en\
c\
y
(
floa\
t
lOl\
l\
OOOOlOl\

)
{
lO\
lO\
lOlO\
lO\
l
=
lOl\
lO\
OOOlOl
;
}
inline
float
Ca\
rTemp\
late\

::
GetT\
r\
a\
n\
smi\
ssion\
Ef\
ficien\
cy
(
)
const
{
re\
turn
lOl\
O\
l\
Ol\
O\
lOl\

;
}
inli\
ne
void
CarTem\
plate\

::
Set\
T\
orq\
ue\
M\
ultiplier
(
flo\
at
lO\
llOOOOllO
)
{
lOlOlOlOOll\

=
lO\
llO\
OO\
Oll\
O
;
}
in\
li\
ne
float
Ca\
rT\
emplate
::
Ge\
tT\
orq\
ueMu\
ltiplier
(
)
cons\
t
{
return
lOlOlO\
l\
OOll
;
}
inline\

void
CarTemp\
late\

::
SetTorqueCurve
(
Fn\
T\
o\
rque\
Cur\
ve
lOl\
lOOOO\
lll
)
{
lOlOlOlOlOO
=
lOllOOOOl\
ll
;
}
in\
l\
in\
e
vo\
id\

CarT\
e\
mp\
late\

::
Set\
AirResistan\
ce
(
float
lO\
l\
lOOOlOOO\

)
{
lOlO\
l\
OllOOO
=
lOllO\
OOl\
OOO
;
}
in\
line
float
CarTem\
plate
::
GetAirRe\
sistance
(
)
co\
nst
{
return
lOlOlOl\
lOOO
;
}
inline
void
Car\
T\
emplate\

::
SetDownForce
(
fl\
o\
at
lOll\
OOOlOO\
l\

)
{
lO\
lOl\
OllO\
Ol
=
lOll\
OOOlOO\
l
;
}
in\
line
float
Ca\
r\
T\
emplat\
e
::
GetDown\
For\
ce
(
)
co\
n\
st
{
return\

lOl\
Ol\
OllOO\
l
;
}
inl\
ine
void
CarTem\
p\
late\

::
SetAnti\
R\
oll\
Fudge\

(
float
lOllOO\
Ol\
OlO
)
{
lO\
lO\
lO\
llO\
lO
=
lOllO\
OOlOlO\

;
}
in\
line\

flo\
at
CarTemplate
::
Get\
Ant\
i\
RollFud\
ge
(
)
const
{
retur\
n\

lO\
lOl\
OllOlO
;
}
}
