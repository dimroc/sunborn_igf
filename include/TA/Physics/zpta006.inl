//---------------------------------------------------------------------------------
// File Name: zpta006.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

namesp\
ace
TA
{
inline
fl\
oat
Dyn\
a\
micObj\
e\
ct\

::
LineIn\
ters\
ecti\
on
::
Ge\
tInte\
r\
s\
ec\
tionDepth
(
)
con\
st\

{
return
lOl\
lO\
Ol\
O\
OOl
;
}
inline
Dyna\
mic\
O\
bj\
e\
c\
t
*
DynamicObject
::
LineI\
n\
t\
er\
s\
ect\
ion
::
GetDynamicObjec\
t
(
)
const\

{
return
lOl\
llOOOllO
;
}
in\
line\

Colli\
s\
ionO\
bj\
ect
*
Dynam\
i\
c\
O\
bject\

::
LineInte\
rs\
ec\
t\
i\
on
::
GetCol\
lisio\
nOb\
ject
(
)
con\
s\
t
{
re\
tu\
rn\

lOlO\
llOOOOl\

;
}
inl\
i\
n\
e\

int
Dynami\
cO\
b\
je\
ct
::
LineInters\
e\
ction
::
Ge\
tAtt\
ribute
(
)
con\
st
{
return\

llOlllO\
OllO
;
}
inline\

co\
n\
s\
t
Vec3
&
Dyn\
a\
micObj\
e\
ct
::
Li\
neInterse\
c\
tion
::
GetPosit\
i\
on
(
)
con\
st
{
return
lOOOO\
ll\
lll
;
}
inl\
ine
con\
st\

Vec3
&
Dy\
namicObject\

::
Li\
ne\
Int\
e\
rsecti\
on
::
Ge\
tNorm\
al
(
)
const
{
ret\
urn
lO\
OOlOO\
O\
OO
;
}
inli\
n\
e
con\
st
MFrame\

&
Dynami\
c\
Obje\
ct
::
Ge\
tF\
r\
ame
(
)
con\
st
{
ret\
urn
lO\
Ol\
lO\
lOOlO\
l
;
}
inline\

const\

MFrame
&
Dyn\
ami\
cObje\
c\
t
::
Ge\
tN\
extFra\
me\

(
)
co\
ns\
t\

{
retur\
n
lOOllOlOO\
l\
lO
;
}
in\
line
con\
st
MFrame
&
Dy\
namicObje\
ct
::
GetP\
reviou\
sFra\
me\

(
)
con\
st
{
ret\
urn
lOO\
llOl\
ll\
l\
Ol
;
}
inl\
ine
con\
s\
t
MFrame\

&
Dyn\
a\
micObj\
e\
ct
::
Get\
GraphicsFrame
(
)
co\
ns\
t
{
re\
turn
lOOllOlOOl\
Ol
;
}
inline
const
Ve\
c3
&
Dynam\
ic\
Object
::
GetPosition
(
)
const
{
ret\
ur\
n
lOO\
l\
lOlOOl\
Ol
.
v3\
T\
ra\
nslat\
ion\

;
}
inlin\
e\

con\
st
Vec3
&
Dy\
namicOb\
ject
::
Ge\
tCen\
te\
r\
OfMas\
s
(
)
const
{
return
lOO\
l\
O\
lllOOl\
l
;
}
in\
line
const
Ve\
c3\

&
Dy\
na\
m\
icObject
::
Ge\
t\
Ne\
xt\
Cent\
er\
O\
fMa\
ss\

(
)
const
{
return
lOOl\
l\
O\
l\
OOl\
OO
;
}
inline
cons\
t
Ve\
c\
3
&
Dyna\
micO\
bjec\
t
::
Get\
C\
e\
nterOff\
s\
e\
t
(
)
cons\
t
{
re\
tu\
rn
lOO\
llOl\
O\
O\
Oll
;
}
inline\

void
DynamicO\
bj\
ec\
t
::
Set\
Fr\
ameDi\
r\
e\
c\
t
(
cons\
t\

MFr\
a\
me
&
lOllO\
lll\
l\
OO
)
{
lOOllOlOOlOl
=
lOllO\
l\
lllO\
O
;
lOOlOl\
ll\
OOl\
l
=
lOOll\
Ol\
OOOll
*
lOO\
l\
lOlOOlOl\

;
}
inl\
i\
ne
float
Dy\
nam\
i\
c\
Object\

::
GetM\
as\
s
(
)
const\

{
ret\
urn\

lOl\
OlOlOOlO
;
}
inline\

float
Dyn\
am\
ic\
Obje\
c\
t
::
GetIn\
verse\
Mas\
s
(
)
co\
nst\

{
re\
turn
lO\
O\
l\
OllllOlO
;
}
in\
l\
i\
ne
co\
n\
st
Mat\
33
&
DynamicObj\
ect
::
GetInerti\
a
(
)
con\
st\

{
retur\
n
lOOll\
OOlOllO\

;
}
in\
lin\
e\

const
Ma\
t\
33
&
Dynami\
cObj\
ect
::
Ge\
tInve\
rseInert\
ia
(
)
const
{
retu\
r\
n\

lO\
O\
ll\
OOlOlll
;
}
inline\

const
Mat33
&
DynamicObj\
e\
ct
::
GetW\
o\
r\
l\
dS\
paceInerti\
a\

(
)
co\
nst
{
return
lO\
Oll\
O\
Ol\
lOll\

;
}
inlin\
e\

co\
n\
st\

Mat33
&
Dy\
n\
amic\
Object
::
GetWorldS\
pa\
ceInver\
seIne\
rtia
(
)
const\

{
ret\
urn
lO\
OllOOlllOO\

;
}
inl\
in\
e
void
Dy\
nami\
cObj\
e\
ct
::
SetFr\
i\
ctio\
n
(
float\

lO\
lO\
l\
OOOOlOl
)
{
lOOll\
O\
OlllOl
=
lOl\
O\
l\
O\
O\
O\
OlOl
;
}
inline
fl\
oat\

Dynam\
ic\
Object
::
GetFricti\
on\

(
)
const
{
ret\
urn\

lOO\
l\
lOOlllOl\

;
}
inl\
ine
voi\
d\

Dynamic\
Ob\
ject\

::
Set\
R\
e\
st\
itut\
io\
n
(
float
lO\
llO\
OlOOl\
l\

)
{
lOO\
l\
lOOllllO
=
lOllO\
O\
l\
O\
O\
ll\

;
Cl\
amp
(
lOO\
llOOllllO
,
-
1.0f
,
1.0f
)
;
}
inl\
in\
e
floa\
t
Dy\
na\
mi\
cObje\
ct
::
Ge\
tR\
es\
titu\
tion\

(
)
co\
n\
st
{
return\

lO\
O\
l\
lOOl\
l\
llO
;
}
in\
line
void
Dy\
nam\
i\
cO\
bjec\
t
::
SetG\
ra\
vity\
Mul\
t
(
fl\
o\
at
lO\
lO\
lOOOOl\
lO
)
{
lOOl\
ll\
OlOO\
l\
l
=
lOl\
OlOOOOllO
;
}
in\
l\
in\
e
float
Dynami\
cO\
bject\

::
GetGravityMult
(
)
con\
s\
t
{
ret\
urn\

lOOll\
lO\
l\
OO\
ll\

;
}
inli\
ne\

bo\
ol
Dy\
nam\
icOb\
jec\
t\

::
Rota\
ti\
onDi\
sabled
(
)
cons\
t
{
return
ll\
lO\
l\
lO\
OOl
(
lllOlOll\
l\
O
,
lOOl\
ll\
OO\
O\
ll\
O\

)
;
}
inl\
in\
e
bool
Dy\
n\
a\
mi\
cO\
bje\
ct
::
Movem\
entDisabled
(
)
co\
ns\
t
{
return
ll\
lO\
llOO\
Ol\

(
ll\
l\
OlOl\
l\
lO\

,
lO\
Oll\
lOOO\
lll\

)
;
}
inl\
ine
vo\
id\

Dyn\
a\
mic\
O\
bj\
ect\

::
Se\
tFo\
rc\
eFastSol\
verEnabled
(
bo\
o\
l
lllO\
llOOOO
)
{
ll\
lOlOl\
lOl
(
lllOl\
O\
lllO
,
lO\
lOl\
OOO\
OOlO
,
lllOllO\
O\
OO\

)
;
}
inlin\
e
bo\
o\
l
Dynam\
icOb\
ject
::
Is\
F\
orc\
eFa\
stSo\
lverEn\
able\
d
(
)
con\
st
{
return
lllO\
llOOOl
(
lllOlO\
lll\
O
,
lOl\
OlOOOOOl\
O
)
;
}
inl\
ine
void\

Dy\
n\
ami\
cObjec\
t
::
SetAll\
D\
am\
pin\
gDi\
s\
abled\

(
bool\

lllOllOO\
OO\

)
{
lllOl\
O\
llOl
(
lllOlO\
lllO
,
lOlO\
l\
OOO\
O\
Oll
,
lllOll\
OOOO
)
;
}
inline\

bool
Dynam\
icOb\
je\
ct
::
IsAllDampi\
ngDisabl\
ed\

(
)
co\
nst
{
return
lll\
OllOOOl
(
lllOl\
O\
lll\
O\

,
lOl\
OlOO\
O\
OOll\

)
;
}
inl\
ine
vo\
id
Dyn\
am\
icObject
::
SetE\
xtra\
Sta\
b\
ility
(
bo\
ol
ll\
lOllOOO\
O\

)
{
ll\
lOlOllOl
(
lllO\
lOlll\
O
,
lOl\
O\
O\
l\
ll\
llOO
,
lllOllO\
OOO
)
;
}
inline
bool
Dynam\
ic\
Ob\
ject
::
Extr\
aSt\
a\
bil\
ity
(
)
cons\
t
{
re\
turn
ll\
lOl\
lOO\
O\
l
(
ll\
l\
OlOl\
llO
,
lO\
lOOlllllOO
)
;
}
inlin\
e
vo\
id
Dynam\
ic\
O\
bj\
ect
::
Se\
tRig\
idFrictio\
nDisab\
le\
d
(
bo\
ol
lll\
OllOOOO
)
{
lll\
OlOllOl
(
ll\
lOl\
Olll\
O\

,
lOlOOl\
l\
llO\
ll
,
lllOllOO\
OO\

)
;
}
inline\

bool
Dy\
namicO\
bj\
ect
::
Ri\
g\
i\
dFrictionDisa\
b\
le\
d
(
)
const
{
return
lllOl\
lO\
OOl
(
lllOlOlll\
O
,
lO\
lO\
O\
llllOl\
l\

)
;
}
inli\
ne
void
Dynam\
icOb\
ject
::
SetCollisi\
onDis\
able\
d
(
bool
lllOl\
lOOO\
O
)
{
lllOl\
Ol\
lOl
(
lll\
OlOlllO
,
lOl\
O\
O\
lll\
llO\
l\

,
lllO\
llOO\
OO
)
;
}
inline\

bo\
o\
l
Dyna\
mi\
cObje\
c\
t
::
Co\
llisio\
n\
Dis\
a\
ble\
d\

(
)
const
{
re\
tur\
n
lll\
Ol\
lO\
OOl
(
lll\
OlOl\
l\
lO
,
lOlOO\
llll\
lOl
)
;
}
in\
line
void
Dyn\
am\
icO\
b\
j\
e\
ct\

::
Set\
U\
pd\
a\
t\
eDi\
s\
abl\
ed\

(
bool
lllOl\
lOOOO\

)
{
ll\
lOlOllO\
l
(
ll\
lOl\
O\
lll\
O
,
lOlOO\
llll\
l\
l\
l
,
lllOllOOOO
)
;
}
inl\
ine
boo\
l\

Dynami\
c\
Ob\
jec\
t
::
Upd\
a\
te\
Disa\
bled
(
)
cons\
t
{
return
ll\
lOllOO\
Ol
(
ll\
l\
Ol\
Oll\
l\
O\

,
lOlOO\
ll\
l\
l\
lll
)
;
}
inl\
ine
void
Dynamic\
Object
::
Se\
tG\
host
(
boo\
l
lllO\
llOOO\
O
)
{
lll\
OlOllOl\

(
lll\
Ol\
Oll\
lO
,
lO\
lOOll\
llllO\

,
lllOllOOOO
)
;
}
inl\
in\
e
bo\
ol
Dy\
namic\
Obje\
c\
t
::
Ghos\
t
(
)
co\
n\
st
{
retur\
n\

lll\
Oll\
OOO\
l
(
lllO\
lOll\
lO
,
lOlOOl\
lllll\
O
)
;
}
inl\
i\
ne
bool
Dy\
na\
micObje\
ct
::
In\
fi\
n\
it\
eMa\
ss
(
)
const\

{
re\
turn
lll\
Ol\
lO\
OOl
(
ll\
lO\
l\
OlllO\

,
lO\
Oll\
lO\
O\
l\
OO\
l
)
;
}
inline
voi\
d\

Dyna\
micOb\
j\
ec\
t
::
Se\
tFi\
ndV\
elocityFrom\
NextF\
ram\
e
(
bool
lllOllOO\
O\
O
)
{
lllO\
lOllOl
(
lllOlOlllO
,
lOl\
OlOOOOOOl
,
lllOllO\
OOO
)
;
}
in\
l\
ine\

bo\
ol\

Dyna\
micObject
::
Get\
F\
i\
n\
d\
V\
elocityF\
romNex\
tF\
r\
am\
e
(
)
const\

{
return\

lllOllOO\
Ol
(
lllO\
lOll\
lO
,
lOlOlOOOO\
OOl
)
;
}
inline\

bool
DynamicObject
::
IsWorldObject
(
)
const\

{
re\
tu\
r\
n
ll\
lOllOOOl
(
ll\
lOl\
Ol\
llO
,
lO\
lOOlOOO\
llO\

)
;
}
inli\
ne
vo\
id
Dy\
nam\
ic\
Object
::
SetRes\
t\
Ti\
meMu\
l\
ti\
p\
lie\
r\

(
fl\
oat\

lO\
l\
OlOOOOlll\

)
{
lOOl\
lOl\
OO\
O\
O\
O
=
lO\
l\
O\
lOOO\
O\
lll
;
}
inl\
ine
flo\
at
DynamicObject
::
GetR\
e\
s\
tT\
imeMul\
tipli\
er
(
)
const
{
return
lOOl\
l\
O\
lOOO\
OO
;
}
inline
vo\
id
Dyna\
micObjec\
t\

::
Se\
tID
(
int
lOl\
OlOOOlOOO
)
{
lO\
l\
OOOll\
Ol\
Ol\

=
lOlOl\
OO\
O\
lOOO\

;
}
inl\
ine
int
Dyna\
mi\
cObj\
ect\

::
GetI\
D
(
)
co\
nst
{
re\
turn
lO\
l\
OOOllO\
lOl
;
}
inl\
i\
ne
bo\
ol
Dyn\
am\
icOb\
ject\

::
IsIn\
Movi\
ng\
Li\
s\
t
(
)
cons\
t
{
re\
t\
ur\
n\

lO\
OllO\
lO\
l\
O\
O\
l\

!=
0
;
}
inli\
ne
cons\
t
Ve\
c3\

&
Dyn\
am\
ic\
Obje\
ct
::
GetLinearVe\
locity
(
)
con\
s\
t\

{
retu\
rn
lOOl\
O\
llllOOl\

;
}
inline
void
DynamicObject\

::
Se\
tLinearVel\
oci\
t\
y\

(
const
Vec\
3
&
lOlOlO\
OOl\
O\
O\
l
)
{
lOO\
lOl\
lllOOl
=
lO\
lOlO\
OOlO\
Ol
;
}
in\
lin\
e
co\
n\
st
Ve\
c\
3\

&
Dyn\
a\
micObject
::
GetAn\
gu\
larVel\
oc\
i\
ty\

(
)
co\
nst
{
retu\
rn
lOOlOllllOll\

;
}
inl\
i\
ne
vo\
id
Dy\
namic\
Ob\
ject\

::
Set\
Angu\
larVeloc\
ity
(
con\
s\
t
Vec3
&
lOlOlOOOl\
O\
lO
)
{
lO\
OlO\
l\
lllOll
=
lOlOlOOOlOl\
O\

;
}
inlin\
e\

void
Dy\
nami\
cObject\

::
Apply\
LinearImpuls\
e\

(
co\
n\
st
Vec3
&
lOlOlOOOlOl\
l\

)
{
if
(
lOOlll\
O\
l\
OOOl
(
)
)
{
lOOlOllllOO\
l
+=
lOlOl\
OOOl\
Oll\

*
lOOlOllll\
OlO
;
}
}
inl\
ine
voi\
d
Dy\
namicO\
bje\
ct
::
ApplyAn\
gularIm\
pulse
(
con\
st\

Vec\
3
&
lOlO\
lOO\
OllOO
)
{
if\

(
lOO\
lllOlOOOl\

(
)
)
{
lOOlOllllOll
+=
lO\
l\
OlO\
OOl\
lOO
*
GetI\
nverseInertia
(
)
;
}
}
in\
line
vo\
id
Dyna\
micO\
bject
::
As\
ser\
tForce\
An\
d\
Tor\
qu\
e\
C\
lear\
e\
d
(
)
cons\
t
{
TA\
_ASS\
ERT
(
lOOl\
l\
l\
OlOOl\
O\

.
Is\
Zer\
o\

(
)
)
;
TA_ASSERT\

(
lOOlll\
Ol\
Ol\
Ol\

.
IsZero
(
)
)
;
}
inline
cons\
t\

AAB\
B\

&
Dynamic\
Obj\
ec\
t
::
GetWorldAABB\

(
)
{
return\

lOOllOl\
Ol\
Ol\
l
;
}
#ifndef TA_WRAPPER	
inl\
ine
Col\
lis\
ion\
Ob\
ject\

&
Dy\
namic\
Ob\
je\
ct
::
GetCo\
llisi\
onObj\
ect
(
)
{
TA_A\
SSE\
RT
(
lO\
OllOOl\
OlO\
O
)
;
retu\
r\
n\

*
lOOllOOlOlO\
O\

;
}
#endif //
in\
line\

Colli\
s\
ionObje\
c\
tCo\
mbo
*
Dyn\
amicObje\
ct
::
Ge\
tCo\
l\
lis\
ion\
Ob\
jectCombo\

(
)
{
TA_ASSERT\

(
lOO\
llOO\
l\
OlOO
)
;
return\

lO\
O\
ll\
O\
OlOlOO\

->
Ge\
tColl\
ision\
Obj\
ec\
tType\

(
)
==
Co\
ll\
is\
io\
nOb\
ject
::
TYP\
E_\
CO\
M\
B\
O\

?
(
Collisi\
onO\
bjec\
tCo\
mbo\

*
)
lOO\
llOOl\
O\
lOO
:
0
;
}
in\
li\
ne\

Collision\
O\
bjectC\
omple\
x\

*
DynamicObj\
ec\
t
::
GetC\
ollis\
i\
on\
Obje\
ctCo\
mp\
le\
x
(
)
{
TA\
_\
AS\
S\
E\
R\
T\

(
lO\
O\
llOOlOlOO\

)
;
return
lOOl\
lOOlOlOO\

->
Ge\
tCo\
llisi\
onOb\
je\
ctType\

(
)
==
Colli\
sionObj\
ect\

::
TYPE_COMPLE\
X
?
(
CollisionO\
bj\
ect\
Com\
plex
*
)
lOOllO\
OlOlOO
:
0
;
}
#ifndef TA_WRAPPER
inlin\
e
Dyna\
micObj\
ect
::
Coll\
is\
ionItera\
t\
or\

Dyn\
amicOb\
je\
ct\

::
GetCo\
ll\
ision\
It\
erato\
r
(
)
{
return
Dynam\
icObjectCol\
lision\
Ite\
r\
a\
t\
or
(
this\

,
lO\
O\
llO\
llO\
Ol\
O
)
;
}
#ifndef TA_REMOVE_DEPRECATED
inl\
in\
e
void
Dynami\
c\
Object
::
SetColli\
sion\
ListEnabl\
e\
d
(
boo\
l
ll\
l\
Oll\
OOOO
)
{
lllOlO\
l\
lOl
(
lllOlO\
lllO
,
lOlOlOOOOO\
OO\

,
lll\
O\
l\
lOO\
OO
)
;
}
inl\
i\
ne
bo\
ol
Dy\
namic\
Object\

::
Colli\
sionLis\
tEna\
ble\
d
(
)
con\
st\

{
retu\
rn\

lllOllO\
O\
Ol
(
lllOlOlllO\

,
lOlOlOOOO\
OOO
)
;
}
#endif
#endif //
in\
li\
ne
int
Dyna\
micObjec\
t
::
GetNumLine\
Coll\
is\
ions
(
)
{
re\
turn
lOOllOll\
OllO
.
lOOOlllOOl
(
)
;
}
inli\
ne
const
Dyn\
amicObj\
ec\
t
::
LineI\
nte\
r\
section
&
DynamicObject
::
GetL\
ine\
Collisio\
n
(
int\

lOO\
O\
lOOl\
ll\

)
const\

{
ret\
u\
rn\

lOOllO\
l\
l\
O\
ll\
O
[
lOOO\
lOOll\
l
]
;
}
#ifndef TA_WRAPPER
in\
lin\
e\

Dynam\
i\
c\
Ob\
j\
ect
::
Join\
tItera\
tor
Dy\
namicOb\
ject\

::
GetJointI\
terat\
or\

(
)
{
ret\
urn
lOOllOllOlll
.
lOlOOOOlOO
(
)
;
}
#endif //
inli\
ne
void
Dynamic\
Obje\
ct
::
SetUserGroup
(
in\
t
lO\
lO\
l\
OOOllO\
l
)
{
lOOll\
Ol\
Ol\
l\
OO
=
lOlO\
lOOOllOl
;
}
inline
int
Dynamic\
Object\

::
GetU\
serGroup
(
)
con\
st
{
return
lOOl\
l\
O\
lOll\
OO\

;
}
inl\
ine
in\
t\

Dynam\
ic\
Ob\
j\
ect
::
GetU\
s\
erGroup\
I\
temId
(
)
co\
nst
{
ret\
urn
lOOllO\
lO\
llO\
l
;
}
#ifndef TA_REMOVE_DEPRECATED
inlin\
e
void
Dy\
na\
micObject\

::
SetColl\
i\
si\
onUs\
erDat\
a
(
void
*
lOO\
l\
l\
lO\
OOO
)
{
lOOllOllOOOl
=
lOOlll\
O\
OOO\

;
}
inline
void
*
DynamicO\
b\
j\
ect\

::
GetCol\
li\
s\
ionUse\
rData\

(
)
co\
nst
{
ret\
urn
lOO\
llOllOOOl
;
}
#endif //
inline\

vo\
id\

Dy\
na\
micObject
::
SetU\
se\
rData
(
void
*
lOOlllOO\
OO
)
{
lOOllOl\
lOOOl\

=
lOOlllOOOO
;
}
inl\
i\
ne\

void
*
Dy\
nam\
ic\
Object
::
GetUser\
Da\
ta
(
)
con\
st
{
ret\
u\
r\
n
lOOllOl\
lOOOl
;
}
}
