//---------------------------------------------------------------------------------
// File Name: zpta004.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

{
bool\

lOl\
l\
lO\
OlOl\
l
=
fal\
se
;
TA_AS\
SERT
(
lOl\
ll\
OO\
l\
OO\
l\

<
32
)
;
TA_ASSERT
(
llO\
OOlOOlO
->
lOl\
lOllOl\
l
<
32
)
;
int
lO\
lll\
OOlO\
lO
=
0
;
int
lOl\
llOOl\
l\
OO
=
0
;
int\

lOOOllO\
O\
O\
l
;
{
const\

Vec3
&
lO\
lll\
OOl\
lO\
l
=
lOOlO\
lOlll
;
float
lOlllOllOO
=
lO\
ll\
lOOllll
(
lOlllOOllOl
)
;
if\

(
lOlllOllOO
<=
lllO\
llllOOO\

.
lOl\
OlOOl\
O\
OO
&&
lOlllO\
llO\
O
>=
-
ll\
lOlll\
l\
OOO
.
lOlO\
lO\
OlOO\
O
)
{
floa\
t\

lO\
lll\
OlOOOl\

=
lllOl\
lllOOO
.
lOlOlOOlOO\
O\

*
lll\
Ol\
ll\
lO\
OO\

.
lOl\
O\
l\
OO\
lO\
OO
-
lOlll\
Ol\
lOO
*
lOl\
l\
l\
OllO\
O\

;
lOl\
llO\
OlOll
=
tr\
ue
;
for\

(
lOOOll\
O\
O\
Ol
=
0
;
lOOO\
llOOOl
<
llOOOl\
OOlO
->
lOllOll\
O\
ll\

;
lO\
OOl\
lOOOl
++
)
{
const
Ve\
c3
&
lOl\
ll\
OlOOlO
=
lOlllOlOO\
ll\

(
lOOOllOOOl
)
;
float\

lOl\
ll\
OlO\
lOO
=
llO\
O\
OlOOlO\

->
llO\
llll\
OOO
[
lOOO\
l\
l\
OO\
O\
l\

]
.
lOlllOlOlOl\

.
Dot\

(
lOlllOlOOl\
O
-
lO\
ll\
lOOllOl
)
;
if\

(
lOlllOlOl\
OO
*
Fabs
(
lOlllO\
lOlOO
)
>
lO\
lllOl\
OO\
Ol
)
{
lOl\
llOOlOll
=
false
;
break
;
}
if\

(
lOlll\
OlOl\
OO
<
0.0f
)
{
#ifndef lOOOOlllOllO
if\

(
lOlllO\
l\
OlOO\

*
Fabs
(
lOlll\
O\
lOlOO
)
<
lO\
l\
llOl\
OO\
Ol
+
0.001f
)
{
int
lO\
lllOlOllO\

=
lOll\
lO\
lO\
lll
(
lOO\
O\
llOOO\
l
,
llOOOlOOlO
->
lOllOllOl\
l
)
;
co\
nst\

Vec3
&
lO\
lll\
Oll\
OOO
=
lO\
l\
l\
lOlOOl\
l
(
lOlllOlOllO
)
;
if\

(
(
lOl\
llO\
lOO\
lO\

-
lOlllOl\
lOO\
O\

)
.
Dot
(
lOlllOl\
lOOO\

-
lOl\
llOOllOl
)
<=
0.0f
)
{
if
(
(
lOlllOlOOlO\

-
lO\
ll\
lOl\
lOO\
O\

)
.
Do\
t
(
lO\
l\
llOlO\
OlO
-
lOl\
l\
l\
OOllO\
l
)
>=
0.0f
)
{
lO\
lllOllOOl
(
lO\
ll\
l\
O\
l\
OO\
lO
,
lOlllOl\
lO\
OO
,
1
)
;
lO\
ll\
lOO\
llO\
O
|=
1
<<
lO\
OOllOOOl
;
}
}
}
#endif //
}
else
{
lOlllO\
OlOl\
l
=
fal\
s\
e
;
int
lOlllOl\
OllO
=
lOlllOl\
O\
lll\

(
lO\
OOllOOO\
l
,
ll\
O\
O\
OlOOlO
->
lOllO\
l\
lOll
)
;
cons\
t\

Vec3
&
lOll\
lOl\
lO\
OO
=
lOll\
lOl\
OOl\
l\

(
lO\
ll\
lOlOl\
lO\

)
;
if
(
(
lOll\
lOl\
O\
OlO
-
lOlllOllOOO
)
.
Do\
t\

(
lOl\
l\
lOl\
lOOO
-
lOl\
llOOl\
lOl\

)
<=
0.0f
)
{
if
(
(
lOlllOlO\
O\
lO\

-
lOlllOllOO\
O
)
.
Dot
(
lOlll\
OlOOlO
-
lO\
l\
llO\
OllO\
l\

)
>=
0.0f
)
{
Ve\
c3
lOlll\
OllOlO\

=
lO\
l\
llO\
OllOl
-
llOOO\
lO\
Ol\
O\

->
lOOOlOO\
O\
OO
*
lO\
lllO\
ll\
OO
+
llOOOlOOlO
->
llOll\
ll\
O\
OO
[
lOOOllOOOl
]
.
lOll\
lOl\
OlOl
*
lO\
ll\
lOlO\
l\
OO
;
Ve\
c\
3
lOOO\
lOOO\
OO\

=
lOlllO\
OllO\
l
-
lO\
l\
ll\
O\
llOlO
;
flo\
at
lO\
lll\
lO\
Ol\
l\

=
lOOOlOOO\
O\
O
.
Get\
Magn\
itude\

(
)
;
if
(
lO\
lll\
l\
O\
Oll
>
0.0001f
)
lOO\
OlO\
OO\
OO
/=
lOll\
ll\
OOll
;
el\
s\
e\

lOOO\
lOOOOO
=
llOOOlO\
OlO
->
lOOOl\
OOOO\
O
;
lOlll\
OllO\
ll
(
0.0f
,
lOl\
lllOO\
ll
,
ll\
OOOlOOlO\

,
lOll\
lOlOOlO\

,
lOlllOllOOO
,
lOlllOll\
O\
lO
,
lOOOl\
OOOO\
O\

,
1
)
;
lO\
ll\
lO\
OllO\
O
|=
1
<<
lO\
OO\
ll\
O\
OOl\

;
}
}
}
}
if\

(
lO\
OOl\
lOO\
O\
l
==
llOO\
O\
l\
OOl\
O
->
lOllOll\
O\
ll\

)
{
fo\
r
(
lOOOllOOOl
=
0
;
lOOOll\
O\
OO\
l\

<
ll\
O\
OOlO\
Ol\
O
->
lO\
llOllOll
;
lO\
OOllOOOl
++
)
{
co\
nst\

Ve\
c3
&
llOOl\
l\
llO\
O
=
lOlllOlOOl\
l
(
lOOOll\
O\
OOl
)
;
if\

(
(
lOlllOO\
llOl\

-
llO\
O\
l\
lllOO
)
.
Ge\
tMagnitud\
eSqr\
d
(
)
>
lllOllllO\
OO
.
lOlO\
lOO\
l\
OOO
*
lll\
Ol\
lll\
OO\
O
.
lOlOlOOlO\
OO
)
con\
tin\
u\
e
;
cons\
t
int\

lOlll\
O\
lll\
OO
=
lOl\
ll\
OlllOl
(
lO\
OOl\
lOOOl
,
llO\
OOlOOlO
->
lOl\
lOllO\
ll\

)
;
if
(
lO\
lllO\
O\
lO\
ll\

||
(
lOll\
l\
OOl\
lOO
&
(
(
1
<<
lOl\
llO\
lllO\
O\

)
|
(
1
<<
lOOO\
ll\
OOOl
)
)
)
)
{
lOl\
l\
lOlll\
lO
(
llOOllllOO
)
;
}
el\
se
{
Vec3
lOOOlO\
O\
OO\
O
=
lOlll\
OO\
l\
lO\
l
-
ll\
O\
O\
lll\
lOO
;
fl\
oat\

lOl\
ll\
lOO\
ll\

=
lOOO\
lOO\
OOO
.
GetM\
a\
g\
n\
itud\
e
(
)
;
if\

(
lOll\
l\
lOOl\
l
>
0.0001f
)
lOOOlOOOO\
O\

/=
lOlll\
lOO\
l\
l
;
els\
e\

lOOOl\
O\
OOOO\

=
llOO\
OlOOl\
O\

->
lOOOlOOOOO
;
lOlllOllll\
l
(
0.0f
,
lOllllOO\
ll
,
ll\
OOO\
lOOlO
,
lOOOll\
OO\
Ol
,
false
,
llOO\
l\
l\
llO\
O
,
llOOll\
ll\
OO
,
lOOOlOOOOO
)
;
}
lOlllO\
OlOl\
O
|=
1
<<
lOOOl\
lOOOl\

;
}
}
if
(
lOl\
llO\
OlO\
ll
)
{
lO\
lll\
lOOOOO\

(
0.0f
,
lll\
O\
llll\
OOO
.
lOlOlO\
O\
lOOO
-
lOlllO\
l\
lOO
,
llO\
OO\
lO\
O\
lO\

,
lOlllOOll\
Ol
-
llOO\
OlOOlO
->
lOOOlOOOOO
*
lO\
lllO\
llOO
,
llOOOlOOl\
O
->
lOO\
Ol\
O\
OO\
OO
)
;
}
}
}
if
(
lOlllO\
OOOO\
l
->
lOl\
lOlllOOl
)
{
float
lO\
l\
OllO\
OlO
=
lOll\
l\
O\
O\
llll
(
lO\
Ol\
OlOlll
)
-
lll\
OllllOOO
.
lOl\
OlOOlOOO\

;
fl\
oat
lO\
lOllOOll
=
lO\
l\
llO\
O\
l\
lll
(
lO\
Ol\
Oll\
OOl
)
-
lllOllllOOO\

.
lOlO\
lO\
Ol\
OOO\

;
#ifdef lOOOOlllOllO
if
(
lOlOl\
lO\
O\
ll
!=
lOlOl\
lO\
OlO\

)
#else
if
(
lO\
lO\
llOOll\

<
0
&&
lOlOllO\
OlO\

>
0
)
#endif
{
fl\
oa\
t
lOll\
llOO\
O\
lO\

=
lOl\
Ol\
l\
O\
OlO
/
(
lOlOl\
lO\
O\
lO
-
lOlOllOOll
)
;
Vec3
lO\
l\
l\
l\
Ol\
lO\
lO
=
lOOlOlOlll
+
(
lO\
O\
l\
O\
l\
lOOl
-
lOOlO\
lO\
l\
ll
)
*
lOll\
l\
lOOOl\
O\

;
boo\
l\

lOllllOOOll
=
!
lOlllOOlOl\
l
&&
lOll\
l\
OOllOO
==
0
&&
lOl\
llOOlOlO
==
0
;
for
(
lOOOl\
lOOOl\

=
0
;
lO\
OOllOOO\
l
<
llOOOlOOlO\

->
lOllOll\
O\
ll
;
lOO\
OllOO\
Ol
++
)
{
const\

Vec3
&
lO\
llll\
OO\
lOO\

=
lOll\
l\
OlO\
Ol\
l\

(
lOOOl\
lO\
O\
O\
l
)
;
int
lO\
lllOlOllO
=
lOl\
l\
lOlOll\
l
(
lOOO\
llOO\
Ol
,
llOOOl\
OO\
l\
O
->
lOllO\
llOll
)
;
const
Vec3
&
lOl\
llOllOOO\

=
lOlllOlOO\
ll\

(
lO\
lll\
OlOllO
)
;
float\

lOl\
llOlOl\
OO
=
llO\
O\
OlOOlO
->
llOllllOOO
[
lO\
OOllOOOl
]
.
lO\
lllOlOl\
O\
l\

.
Do\
t
(
lOll\
llOO\
lOO\

-
lOll\
lOllOl\
O
)
;
floa\
t\

ll\
llOl\
O\
OO\
l
;
Vec3\

lO\
ll\
l\
lOOO\
l
;
Vec3\

lOl\
l\
l\
lOOlO
;
floa\
t\

lll\
lOll\
lll
=
lllOllllO\
OO
.
lOl\
OlOO\
lO\
OO
;
if
(
lOlllOlO\
lO\
O
<
0.0f
)
llllOll\
ll\
l
+=
0.001f
;
if
(
!
(
lO\
ll\
lOO\
llOO\

&
1
<<
lOOO\
l\
lOOOl
)
&&
Ge\
ometry
::
TestSphere\
Movemen\
tAgai\
nstL\
in\
e
(
lO\
OlOlOlll
,
lOOl\
Oll\
OOl
,
lO\
ll\
l\
lOO\
lOO
,
lOlllOllO\
O\
O
,
lll\
l\
Oll\
lll\

,
lll\
l\
O\
lOOOl
,
lOl\
l\
llOOOl
,
lOllllOO\
l\
O\

)
)
{
lOll\
lOOllOO
|=
1
<<
lO\
OOl\
l\
OOOl
;
if
(
lOlll\
Ol\
O\
lOO
<
0.0f
)
{
lOlll\
Ol\
lOO\
l
(
lO\
l\
l\
ll\
OOlO\
O
,
lOlllOllOO\
O
,
1
)
;
}
els\
e
{
lO\
lllO\
llOll\

(
ll\
ll\
Ol\
OOOl
,
0.0f
,
ll\
O\
O\
OlO\
OlO\

,
lOlll\
lOOlO\
O\

,
lOl\
llOllO\
OO
,
lOO\
lOl\
O\
lll
-
lO\
llll\
OOlO
*
lllOllll\
O\
O\
O
.
lOl\
OlOOl\
O\
OO\

,
lOlll\
lO\
OlO
,
1
)
;
lOllllOO\
Ol\
l
=
fa\
l\
s\
e\

;
}
}
else
{
if
(
lOlllOlOl\
O\
O
>
0.0f
)
{
lOllll\
O\
O\
Oll
=
fa\
ls\
e
;
}
}
}
#ifdef lOOOOlllOllO
if
(
lOlOllOOll
<
0
&&
lOlOllO\
OlO
>
0
)
#endif
if
(
lO\
llll\
O\
OO\
ll
)
{
if
(
lO\
OOl\
lOOOl
==
llOOOlO\
Ol\
O
->
lOllOllOll\

)
{
TA_AS\
SE\
RT
(
lO\
llll\
OOOlO
>=
0.0f
)
;
TA_AS\
SE\
RT
(
lO\
ll\
llOOOl\
O
<=
1.0f
)
;
lO\
llllO\
OO\
OO\

(
lOl\
l\
l\
lOO\
OlO
,
0.0f
,
llOOOlO\
O\
lO
,
lOOlOlO\
lll
-
llOOO\
lOO\
lO
->
lOOOl\
OO\
OOO
*
lllOllll\
OOO
.
lO\
lOl\
OOlOOO\

,
llO\
OOlOOlO
->
lO\
OOlOOOO\
O
)
;
lOl\
l\
lO\
Ol\
Oll
=
tru\
e\

;
}
}
for
(
lOOO\
llO\
O\
Ol\

=
0
;
lO\
OOll\
OO\
O\
l
<
llOOOlOOlO\

->
lOllO\
llOll
;
lOOOll\
O\
OOl\

++
)
{
cons\
t
Vec3\

&
lO\
l\
l\
l\
OlOOlO\

=
lOlllOlOOl\
l
(
lOO\
O\
llOOO\
l
)
;
flo\
at
lll\
lO\
lOO\
Ol\

;
Vec3
lOl\
l\
llO\
OO\
l\

;
Ve\
c3
lOlll\
lOO\
lO
;
if\

(
!
(
lO\
l\
llOOlOlO
&
1
<<
lOOO\
l\
l\
O\
OOl
)
&&
Geo\
metry\

::
TestPoin\
tMove\
ment\
AgainstS\
phere
(
lOOl\
O\
lOl\
ll\

,
lOOlO\
llOOl
,
lO\
lllOl\
OOlO
,
lllOl\
lll\
OO\
O\

.
lO\
lOlOOlOOO\

,
ll\
llOlOOOl
,
lOllllO\
OO\
l
,
lOlll\
lO\
OlO
)
)
{
co\
nst
int
lO\
lll\
O\
l\
llOO\

=
lOlllOlllOl
(
lOOOllOOOl\

,
llOOOl\
OOlO
->
lOll\
O\
l\
lOll
)
;
if
(
lO\
lllO\
OlOll
||
(
lOlllOOl\
lOO
&
(
(
1
<<
lOlll\
OlllOO
)
|
(
1
<<
lO\
OO\
l\
l\
OOO\
l
)
)
)
)
{
lO\
l\
ll\
Oll\
llO\

(
lO\
ll\
lOlOOlO
)
;
}
el\
s\
e
{
lOlllOl\
llll\

(
ll\
llOl\
O\
OOl
,
0.0f
,
ll\
OO\
O\
lO\
OlO
,
lOOO\
llOOO\
l
,
false
,
lOl\
ll\
OlOOl\
O\

,
lO\
OlOlOlll\

-
lOl\
ll\
l\
O\
OlO
*
lllOllllOOO
.
lOlO\
l\
OOlOO\
O
,
lOllllOOlO
)
;
}
}
}
}
}
}
