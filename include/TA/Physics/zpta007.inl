//---------------------------------------------------------------------------------
// File Name: zpta007.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

name\
spa\
ce
TA
{
inl\
i\
ne
const
MFra\
me
&
Dyn\
amicObject\
Ca\
r
::
Wheel
::
GetLo\
cal\
Grap\
hi\
cs\
Fra\
me
(
)
co\
nst
{
retur\
n
lOlOlOO\
lOlll
;
}
inli\
ne\

void\

Dy\
nami\
cObjec\
tCar\

::
Whe\
el\

::
Se\
tRadius
(
fl\
oat
ll\
llO\
ll\
ll\
l\

)
{
lOl\
OlO\
O\
lOOO
=
ll\
l\
lOl\
ll\
l\
l
;
}
inli\
ne\

floa\
t
Dyn\
a\
micObj\
ectC\
ar\

::
Wheel
::
Get\
R\
adi\
u\
s\

(
)
const\

{
return
lO\
lOl\
O\
O\
lOOO\

;
}
in\
lin\
e
void
Dyn\
ami\
cObjectC\
ar
::
Wh\
ee\
l
::
SetInvIne\
r\
ti\
a\

(
flo\
at
lOlO\
llOllOOO\

)
{
lOlOlOOl\
lll\
l
=
lO\
lOllO\
l\
lOOO
;
}
inl\
in\
e\

float\

Dynam\
icO\
bj\
ectCar\

::
Wheel
::
GetInv\
I\
ne\
rt\
ia
(
)
const
{
return
lOlOlOOlll\
ll
;
}
inline
void
Dy\
namicObjectCa\
r
::
Wheel\

::
Se\
t\
B\
ra\
keT\
orq\
ue
(
flo\
at
lOlOlll\
l\
llO\

)
{
lO\
lOl\
OOlOl\
O\

=
lOlOll\
llllO
;
}
inli\
ne
float
Dyn\
ami\
cO\
bjec\
tCa\
r
::
Whee\
l
::
Get\
Br\
akeTo\
rque
(
)
const
{
return
lOlO\
lOOlOlO\

;
}
inl\
ine
void
Dyna\
micO\
b\
je\
ctCa\
r
::
Whee\
l\

::
SetRol\
lResista\
nce\

(
fl\
oat
lOlO\
ll\
l\
lll\
l
)
{
lOl\
Ol\
O\
OlOll
=
lO\
lOl\
ll\
llll\

;
}
inline
float
Dy\
n\
a\
mic\
ObjectC\
ar\

::
Wheel
::
Ge\
tRo\
l\
lR\
esist\
ance
(
)
co\
nst
{
ret\
urn
lOl\
OlO\
O\
l\
Oll
;
}
in\
l\
ine
void
Dynami\
cO\
bject\
Car
::
Whee\
l
::
Se\
tS\
uspens\
ionSp\
r\
i\
ngC\
onstant
(
floa\
t\

lOl\
l\
O\
OOOOO\
O\

)
{
lO\
lOlO\
Oll\
OO
=
lOl\
lOOOOOOO
;
}
inl\
ine
fl\
oa\
t
Dynami\
cOb\
jec\
tCar\

::
Whee\
l\

::
Ge\
tS\
u\
spens\
i\
o\
nSpringCon\
s\
t\
an\
t\

(
)
const
{
re\
t\
ur\
n
lO\
l\
OlOO\
l\
lOO\

;
}
inli\
ne
vo\
i\
d
DynamicObjectCar
::
Whee\
l\

::
Set\
Suspensi\
onD\
ampingConstant
(
flo\
at\

lOll\
OO\
OOOOl
)
{
lOlO\
lOOl\
l\
Ol
=
lOllOO\
OOO\
Ol
;
}
inline
fl\
oat
DynamicObjectC\
ar
::
Whee\
l
::
GetSus\
pensionD\
amp\
ing\
Constan\
t
(
)
const
{
re\
turn
lOl\
O\
lOOllO\
l
;
}
inl\
ine\

void\

DynamicObjectCar
::
Wh\
eel
::
Se\
tSl\
ipRati\
o\
To\
N\
orm\
ali\
sedTract\
ionCallB\
ac\
k
(
Fn\
SlipRatio\
ToNo\
rm\
al\
is\
e\
d\
Trac\
t\
ion\

lO\
OOO\
lllOl
)
{
lOlOlOOlll\
O
=
lO\
OO\
Ol\
llOl
;
}
inli\
ne
Dy\
namicOb\
jec\
t\
Car
::
Wheel
::
FnSlipRatioT\
oN\
orm\
a\
l\
isedT\
ract\
ion\

Dyna\
micObjectCa\
r
::
Wheel
::
GetS\
li\
p\
Rat\
ioToNorm\
alis\
edTr\
actionCallBac\
k
(
)
const\

{
return
lOlO\
l\
O\
OlllO
;
}
inline
vo\
i\
d
DynamicObj\
ec\
tCar
::
Whe\
el
::
Se\
tS\
l\
ipA\
ngleToL\
a\
tera\
lF\
or\
ceCa\
l\
lB\
a\
ck\

(
FnSlipA\
n\
gle\
To\
L\
a\
te\
ralFo\
rc\
e
lOOOOl\
l\
lOl\

)
{
lOlOlOOllll\

=
lOOOOl\
llOl
;
}
inline
Dyna\
mi\
c\
Obje\
ct\
Car
::
Wh\
e\
e\
l
::
FnSli\
pAng\
leT\
oLateralFo\
rc\
e
Dynamic\
Obj\
ectCar
::
Wheel
::
GetSlipA\
ngl\
e\
ToL\
ateral\
Fo\
r\
c\
e\
Ca\
llB\
a\
ck
(
)
con\
st
{
retur\
n
lO\
l\
Ol\
OO\
llll
;
}
in\
li\
ne
void
Dy\
nami\
cOb\
jectCar
::
Wheel
::
Set\
Stee\
ri\
n\
gFlag
(
bool\

lOlOlOOOOll\

)
{
lllOlOllOl
(
lllOl\
Olll\
O\

,
lOlOl\
O\
OlOlOO
,
lOlOl\
OOOO\
ll
)
;
}
in\
line\

bool
Dyn\
amicO\
bje\
ctCar
::
Wheel\

::
Get\
Stee\
ri\
ng\
Flag
(
)
con\
st\

{
re\
turn
lll\
OllOOOl
(
lll\
O\
l\
O\
l\
l\
l\
O
,
lOlO\
lOOlOlOO
)
;
}
inli\
ne\

vo\
id
Dyn\
a\
micObjectCa\
r
::
Wheel
::
Se\
tDr\
iving\
Flag\

(
bool
lOl\
OlOOOl\
O\
O\

)
{
ll\
lOl\
OllOl
(
lllO\
l\
Oll\
lO\

,
lOl\
OlO\
O\
lOlOl\

,
lOl\
Ol\
OOOlO\
O\

)
;
}
inlin\
e\

bool\

Dyn\
am\
i\
cObj\
e\
ctCar
::
Whe\
el
::
Ge\
tD\
r\
i\
v\
i\
n\
gFlag
(
)
co\
nst
{
re\
t\
ur\
n
lllOl\
l\
OOOl
(
lllOlO\
lllO
,
lOl\
Ol\
O\
OlOlOl
)
;
}
in\
line
void
Dyn\
amicObj\
e\
ctC\
a\
r
::
Whe\
e\
l
::
SetHand\
B\
r\
akeFlag\

(
bool
lOl\
O\
l\
OOOlOl
)
{
lllOlOllOl\

(
lllO\
lOlllO
,
lOl\
Ol\
O\
OlOllO
,
lOlOlOOO\
l\
Ol
)
;
}
inli\
ne
bool\

Dyn\
a\
mi\
cObject\
Car\

::
Wh\
e\
el
::
GetHa\
n\
dBr\
ak\
eFla\
g
(
)
const
{
return\

lllOllOOOl
(
lll\
OlOlllO\

,
lOl\
OlOOlO\
l\
l\
O\

)
;
}
in\
line
void\

DynamicO\
bjectC\
ar
::
Wh\
e\
el
::
SetYa\
w
(
fl\
oat\

lOl\
OllOllOO\
l
)
{
lOlOlOO\
llll\
O
=
lOl\
OllOllOO\
l
;
}
inlin\
e
float
Dy\
nami\
cO\
bjectCa\
r
::
Wh\
e\
el\

::
GetYaw
(
)
co\
ns\
t
{
retur\
n\

lOlO\
lO\
Ollll\
O\

;
}
in\
li\
ne
void
DynamicObjectCar
::
Whe\
el
::
SetPitc\
h
(
floa\
t
lOlOllOllOlO
)
{
lOlO\
l\
O\
OlllO\
O\

=
lO\
lOl\
l\
OllOlO
;
}
inline
float
Dyna\
micObje\
ctC\
ar
::
Wheel\

::
GetP\
it\
ch
(
)
co\
nst
{
return\

lO\
l\
OlO\
O\
lll\
O\
O\

;
}
inlin\
e\

voi\
d\

Dynam\
i\
cObj\
ec\
tCar
::
Whee\
l
::
Set\
Pi\
t\
c\
h\
V\
eloc\
ity
(
flo\
at
lOlOl\
l\
OllO\
l\
l
)
{
lO\
lOl\
OOllOll
=
lOl\
OllO\
llO\
ll\

;
}
in\
l\
ine
floa\
t
Dy\
na\
mi\
cOb\
jectCa\
r
::
Wheel
::
Get\
PitchVe\
l\
o\
city
(
)
co\
ns\
t
{
retu\
rn
lOlO\
lOO\
llOl\
l
;
}
in\
line
void
DynamicO\
bject\
Car
::
Whe\
el
::
Set\
C\
a\
mberA\
n\
gle
(
fl\
o\
a\
t
lOl\
OllO\
l\
ll\
O\
O
)
{
lOlOl\
O\
O\
l\
ll\
O\
l
=
lOlOl\
lO\
ll\
lOO
;
lllOl\
O\
lllO
|=
lOlO\
lOll\
OOO\
l\

;
}
inl\
ine
fl\
o\
at
Dyna\
m\
i\
cObje\
c\
tCa\
r
::
Whee\
l
::
GetC\
amb\
e\
rAngl\
e
(
)
const
{
return
lO\
lOlOOlll\
Ol
;
}
in\
l\
in\
e\

void
Initialise
(
Car\
Templ\
a\
t\
e
*
lO\
lO\
lOOl\
OOlO\

)
;
inli\
ne\

void
Ini\
tialis\
e
(
con\
st
Ch\
ar
*
lll\
OO\
O\
lOOl
)
;
inlin\
e\

vo\
id\

Fi\
n\
alis\
e
(
)
;
in\
line
float
Dyn\
amicOb\
jectCar
::
Get\
RPM
(
)
const
{
retur\
n
lOlO\
lOlO\
OO\
l\
l\

*
(
60.0f
/
(
2.0f
*
k_\
f\
Pi
)
)
;
}
inl\
ine\

int
Dyna\
mic\
Object\
C\
ar
::
Ge\
t\
Gear
(
)
const
{
ret\
urn
lOlOlOl\
lO\
llO
;
}
inli\
ne
int
DynamicObj\
ectCar
::
Ge\
t\
NumGears
(
)
const
{
retur\
n\

lOlO\
lOlOO\
OOl
.
lOOOlllO\
O\
l
(
)
;
}
inlin\
e
vo\
i\
d\

Dyna\
m\
icObjec\
tC\
ar
::
SetTor\
qu\
eMultipl\
ie\
r
(
flo\
at
lOllOO\
OOl\
lO
)
{
lOl\
OlO\
l\
OOll\

=
lOllOOOO\
llO
;
}
in\
line
fl\
oa\
t\

Dynamic\
ObjectCar
::
GetTor\
q\
ue\
M\
ultip\
l\
ie\
r
(
)
co\
n\
st
{
return
lO\
lOlOlOOl\
l
;
}
inline
void\

DynamicO\
bjec\
t\
Ca\
r\

::
Se\
t\
An\
ti\
R\
ollFudge
(
floa\
t\

lOll\
OOOlOlO
)
{
lOlOl\
OllO\
lO
=
lO\
llOOO\
l\
OlO
;
}
inlin\
e
floa\
t
Dyna\
micOb\
je\
ct\
Car
::
Ge\
tAntiRol\
lFud\
ge
(
)
co\
nst
{
return
lOl\
OlOllOlO
;
}
inline
const
Dy\
namicOb\
jec\
t\
Car
::
Whe\
el
&
Dynam\
icObjectCar\

::
Get\
Wheel
(
int
lOOO\
l\
O\
Olll
)
con\
s\
t
{
ret\
ur\
n
lOlOlOOlOOO\
l
[
lO\
O\
OlO\
Ol\
ll
]
;
}
inline
Dy\
namicOb\
j\
e\
ctC\
ar
::
Wh\
e\
el
&
Dynam\
icOb\
jectCar
::
Get\
Wheel
(
int
lOO\
Ol\
OOlll
)
{
return
lOlOl\
OO\
lOOOl
[
lO\
OO\
lOO\
lll
]
;
}
inline
in\
t
Dyn\
amicOb\
jectCar
::
Ge\
tNumWhe\
el\
s\

(
)
const
{
return\

lO\
lOlOOl\
OO\
Ol
.
lOOOlllO\
O\
l
(
)
;
}
inline
co\
nst\

Vec\
3
&
Dyn\
a\
mi\
cObject\
C\
ar
::
GetForward\

(
)
const
{
retu\
rn
lO\
l\
Ol\
lOOl\
OO\

;
}
inli\
ne
con\
st
Vec3
&
Dynamic\
ObjectC\
ar
::
GetUp
(
)
const
{
retur\
n
lOlOllOOlOl\

;
}
}
