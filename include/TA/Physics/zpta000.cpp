//---------------------------------------------------------------------------------
// File Name: zpta000.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#include "CarTemplate.h"
#ifndef TA_GEOMETRY_H
#include "../Common/Geometry.h"
#endif //
#ifndef TA_COLLISIONOBJECTCOMBO_H
#include "CollisionObjectCombo.h"
#endif //
#ifndef TA_COLLISIONOBJECTLINELIST_H
#include "CollisionObjectLineList.h"
#endif //
#ifndef TA_COLLISIONOBJECTCAPSULE_H
#include "CollisionObjectCapsule.h"
#endif //
#ifndef TA_COLLISIONOBJECTCONVEX_H
#include "CollisionObjectConvex.h"
#endif //
#ifndef lOlOlOOOOOl
#include "CollisionObjectCylinder.h"
#endif //
#ifndef TA_COLLISIONOBJECTSPHERE_H
#include "CollisionObjectSphere.h"
#endif //
nam\
espace
TA\

{
CarTem\
p\
la\
te
::
Whe\
el
::
Whe\
el
(
)
{
Clear
(
)
;
}
voi\
d
CarTemplat\
e\

::
Whe\
e\
l
::
Cle\
ar
(
)
{
lOl\
OlOO\
O\
OlO
.
lOlOlOOO\
O\
l\
l\

=
fal\
s\
e\

;
lOlOlOOO\
Ol\
O
.
lOlOlOOOl\
O\
O
=
false\

;
lOlOlOOOO\
lO\

.
lOlO\
lOO\
O\
lO\
l\

=
fal\
se
;
lOlOlO\
OOllO
=
k_v\
3UnitZ\

;
lOlOlO\
OOll\
l
=
-
k_v3U\
nitY
;
lOl\
O\
lOOl\
O\
OO
=
0.35f
;
lOlO\
lOOlOOl
=
4.1f
;
lOlO\
l\
OOlOlO
=
4000.0f
;
lOlOlOOlOll
=
0.0f
;
lOlOlO\
O\
l\
l\
OO
=
40000.0f
;
lOlOlOO\
ll\
Ol\

=
9000.0f
;
lOlOlOOll\
lO
=
Sta\
ndardSli\
p\
Ratio\
To\
Nor\
malisedTr\
act\
i\
o\
n\

;
lOlOlO\
Oll\
ll\

=
Standard\
SlipAng\
leToL\
ateralFo\
r\
ce\

;
}
void
Ca\
rTemplate
::
Begi\
nInit\
ial\
i\
se
(
)
{
if
(
lOlOlO\
l\
OOOO
)
{
lOOOlllOlO
(
0
,
"CarTemplate::BeginInitialise. Already Initialised")
;
Fin\
al\
ise
(
)
;
}
lOOOOOOllO
(
!
lO\
lO\
lO\
lOOOl
,
"CarTemplate::BeginInitialise. Already called CarTemplate::BeginInitialise, waiting for CarTemplate::EndInitialise.")
;
lO\
l\
Ol\
Ol\
OOOO\

=
Coll\
i\
sionObject\
Combo
::
Cr\
eateN\
ew
(
)
;
lOl\
Ol\
OlOO\
OO\

->
Initia\
lise
(
)
;
lO\
lOlOlOOO\
l
=
tru\
e\

;
lOlO\
lOlOOlO\

=
1500.0f
;
lO\
lOlOl\
OO\
l\
l
=
1.0f
;
lO\
l\
O\
l\
OlOlO\
O\

=
Standa\
r\
d\
TorqueC\
urve
;
lO\
lOlOlOlOl
=
0.7f
;
lO\
lOl\
OlOllO\

.
In\
itialise
(
7
,
7
)
;
lO\
lO\
lO\
lOll\
O
[
0
]
=
-
2.9f
;
lOl\
OlO\
l\
Ol\
lO
[
1
]
=
2.66f
;
lOlOlO\
lOllO\

[
2
]
=
1.78f
;
lOlOlOlOllO
[
3
]
=
1.3f
;
lO\
l\
OlOl\
Ol\
lO
[
4
]
=
1.0f
;
lO\
lOlOlOl\
lO
[
5
]
=
0.74f
;
lO\
lOl\
O\
lOllO\

[
6
]
=
0.5f
;
lOlOlOlOlll
=
4.4f
;
lO\
l\
O\
lOllO\
OO\

=
0.3f
*
2.2f
*
1.29f
;
lOlOlOllO\
Ol
=
4.0f
;
lOlOlOllOlO
=
0.0f
;
}
void
CarTem\
p\
late
::
EndInitia\
l\
ise
(
)
{
if
(
!
lOlOlOlOOOl
)
{
lOO\
O\
OOOllO
(
!
lO\
lOlO\
lO\
OOl
,
"CarTemplate::EndInitialise. No call to CarTemplate::BeginInitialise was made.")
;
retu\
r\
n\

;
}
in\
t
lO\
lOl\
OllO\
l\
l
=
lO\
lOl\
OlllOO
.
lOOOlllOO\
l
(
)
;
if\

(
lOlOl\
Ol\
lO\
ll\

>
0
)
{
lOOOOl\
OllO
<
Vec3
,
false
>
lOllOOlllO
;
lOl\
lOO\
lllO
.
In\
i\
ti\
al\
is\
e
(
lO\
lOlO\
llOll
*
2
,
lOlO\
lOllOll
*
2
)
;
List
<
Wheel
>
::
lOO\
OOOlOOOl\

lOl\
O\
O\
lOO\
l\
O
=
lOlOlOlll\
OO
.
lOO\
OOOlOllO
(
)
;
for
(
int
lOlOlOll\
lOl
=
0
;
!
lOlOOlOOlO
.
At\
E\
nd
(
)
;
++
lO\
lOO\
l\
OOlO
,
++
lOlOl\
OlllOl
)
{
co\
nst
Wh\
eel\

&
lO\
lOlO\
lll\
lO
=
*
lOl\
OOlOOlO
;
lOllOOl\
llO
[
lO\
lOl\
OlllO\
l
*
2
]
=
lOlO\
l\
O\
l\
lllO
.
GetS\
uspensi\
onTo\
p
(
)
;
lOl\
lOOlllO
[
lOl\
O\
l\
OlllOl
*
2
+
1
]
=
lOlOlOl\
lll\
O
.
GetSuspensi\
onBottom
(
)
;
}
Col\
li\
s\
ionObj\
ec\
tL\
in\
eList\

*
lOlO\
lOlllll
=
CollisionOb\
jectLi\
n\
eLis\
t\

::
CreateNew
(
)
;
lOl\
Ol\
Olllll
->
Init\
i\
a\
lis\
e
(
&
lOl\
lO\
O\
ll\
lO
[
0
]
,
lO\
lOlOll\
Oll\

)
;
lOl\
Ol\
OlO\
OOO
->
Add\
Col\
l\
isionObject
(
lOlOlO\
ll\
l\
ll
)
;
lOl\
Ol\
Ollll\
l\

->
Rel\
ea\
se
(
)
;
lO\
lOlOlllll
=
0
;
lOl\
l\
OOlll\
O
.
Fi\
na\
l\
ise\

(
)
;
}
}
vo\
id
CarTe\
mplate
::
Finali\
s\
e
(
)
{
lOlOlOlO\
OOl\

=
fal\
se
;
lO\
lO\
lO\
ll\
lOO\

.
Cl\
ear
(
)
;
if
(
lOlOlO\
l\
O\
O\
O\
O
)
{
lO\
lOlOl\
OOOO
->
Rele\
ase
(
)
;
lOlO\
l\
OlOOOO
=
0
;
}
lOlOllOOOOO
(
)
;
}
void
Ca\
rTe\
mplat\
e
::
AddCollisionObjec\
t\

(
Col\
lisio\
nObjectCon\
ve\
x
*
lOl\
OllOOOOl
)
{
lOOOOOOllO
(
lOlOlOlOOOl\

,
"CarTemplate::AddCollisionObject. Only allowed between calls to BeginInitialise and EndInitialise")
;
if\

(
lOl\
OlOlOO\
O\
l
)
{
TA_A\
SS\
ER\
T
(
lOlO\
lOlOOOO
)
;
lOlOlOlOOOO
->
AddColl\
isi\
on\
Ob\
je\
ct
(
lOl\
Ol\
lO\
OO\
O\
l\

)
;
}
}
vo\
id
CarTempl\
a\
t\
e
::
Ad\
d\
Col\
li\
si\
o\
nObjec\
t
(
Col\
lisi\
onObj\
ectCap\
sule
*
lOlOllOOOOl
)
{
lOOOOOO\
ll\
O
(
lOl\
OlOl\
O\
OOl
,
"CarTemplate::AddCollisionObject. Only allowed between calls to BeginInitialise and EndInitialise")
;
if
(
lOlOlOlO\
OOl
)
lOlOlOlO\
O\
OO
->
AddC\
ollisionObject\

(
lOlOll\
OO\
OOl\

)
;
}
void
Ca\
rTe\
mpl\
ate
::
AddCollisio\
nObject\

(
CollisionObj\
e\
ct\
Cy\
l\
in\
der
*
lOlOl\
l\
OOO\
Ol
)
{
lOOOOO\
O\
l\
l\
O
(
lOlOlO\
lO\
OO\
l
,
"CarTemplate::AddCollisionObject. Only allowed between calls to BeginInitialise and EndInitialise")
;
if
(
lO\
lOlOlOO\
O\
l\

)
lOl\
Ol\
O\
lOOOO\

->
AddCollis\
ion\
O\
bje\
c\
t
(
lOl\
OllOOOOl
)
;
}
vo\
id\

CarT\
empla\
te
::
AddCol\
lisi\
onO\
bj\
ect
(
Col\
li\
sionObj\
ectS\
ph\
er\
e\

*
lOlO\
llOOOO\
l
)
{
lOOOO\
OOllO\

(
lOl\
O\
lOlOOOl
,
"CarTemplate::AddCollisionObject. Only allowed between calls to BeginInitialise and EndInitialise")
;
if
(
lOlOl\
OlOOOl\

)
lOlOlOlOOO\
O
->
Add\
C\
o\
l\
lisionOb\
ject
(
lOlO\
ll\
O\
OO\
Ol
)
;
}
vo\
id
CarTe\
m\
p\
l\
a\
te\

::
AddWheel
(
con\
s\
t
Wheel
&
lOlOlOll\
llO\

)
{
lOOO\
OOOllO
(
lOlOlOl\
OOOl
,
"CarTemplate::AddCollisionObject. Only allowed between calls to BeginInitialise and EndInitialise")
;
if\

(
lOl\
O\
lOl\
OO\
Ol
)
lOlOlO\
ll\
lO\
O\

.
lOO\
OlllOOO\

(
lO\
lOlOllllO
)
;
}
vo\
id
CarTempl\
ate
::
SetOr\
ien\
tation\

(
con\
st\

Ve\
c3
&
lOlOl\
lOO\
OlO
,
const
Vec\
3\

&
lOlOll\
OOOll
)
{
lOO\
OOO\
O\
ll\
O\

(
lO\
lO\
llOO\
OlO
.
Is\
Norma\
li\
se\
d
(
)
,
"CarTemplate::SetOrientation. v3Forward must be normalised.")
;
lOOOOOOll\
O
(
lOlOllOOOl\
l
.
IsNor\
m\
a\
lis\
ed
(
)
,
"CarTemplate::SetOrientation. v3Up must be normalised")
;
lOO\
OOOOllO
(
lOlOllOO\
Ol\
O
.
Cro\
ss
(
lO\
lO\
l\
lOOO\
ll\

)
.
IsNor\
ma\
l\
ised\

(
)
,
" CarTemplate::SetOrientation. v3Forward and v3Up must be orthogonal.")
;
lO\
l\
OllOOlOO
=
lOlOllOOOlO
;
lOl\
Ol\
l\
OOl\
Ol\

=
lOlOllOOO\
l\
l
;
}
void
Ca\
r\
Template
::
SetNum\
Ge\
ars
(
int
lO\
lOllOO\
llO\

)
{
while
(
lOlO\
lO\
lOllO
.
lOOO\
l\
l\
lOO\
l
(
)
>
lOlOllOOllO
)
lOlOlO\
l\
O\
llO
.
lO\
Olllllll
(
lOlOlOlOll\
O\

.
lO\
OOlll\
OOl
(
)
-
1
)
;
}
CarT\
e\
mpla\
te
*
TA\
C_CALL\

CarT\
emplate\

::
Cr\
eateN\
ew\

(
)
{
CarTempla\
te
*
lO\
lOl\
lOOl\
ll\

;
lOOOO\
O\
llO\
OO
(
lOlOllOOlll
,
Car\
Te\
mplate
)
;
retur\
n
lO\
lOl\
lOO\
l\
ll\

;
}
floa\
t
Ca\
r\
Tem\
plate\

::
Stan\
dardT\
orqu\
eC\
urve
(
float\

lOlOll\
OlOOO
)
{
float
lOlOl\
l\
OlOOl\

=
lOlO\
llOlO\
OO
*
60.0f
/
(
2.0f
*
k_fPi\

)
;
if
(
lOlO\
llOl\
OOl
<
0.0f
)
lOlOllOlOO\
l
=
0.0f
;
if\

(
lOlOllOl\
OOl
>
9000.0f
)
lOl\
OllO\
l\
O\
Ol\

=
9000.0f
;
flo\
a\
t
lll\
OOlOlll
=
(
lO\
lOl\
lOlOOl
*
(
0.22f
*
0.001f
)
)
;
ll\
l\
O\
Ol\
Oll\
l
*=
lll\
OOlO\
l\
ll
;
ll\
lOO\
lOll\
l
-=
0.9f
;
lllOOlOlll
*=
lllO\
OlO\
lll
;
retu\
rn
(
4.75f
-
lllO\
OlOll\
l\

)
*
100.0f
;
}
float\

TAC_CALL
CarTem\
pla\
t\
e\

::
Sta\
n\
dard\
Slip\
Ra\
tioToN\
ormalisedTr\
act\
ion
(
fl\
oat
lO\
lOllOl\
OlO
,
co\
ns\
t\

Sur\
fa\
c\
e\
At\
t\
ri\
b\
ute\

&
lOlOllO\
lO\
ll\

)
{
const
float\

lOlO\
ll\
O\
l\
lOO
=
7.0f
;
co\
nst
fl\
oat
lOlOll\
O\
llOl
=
-
0.2f
;
cons\
t
float
lO\
l\
OllOlllO
=
1.2f
;
const
float
lO\
lOllOllll\

=
0.12f
;
con\
s\
t
float
lOlOlllOOO\
O
=
0.25f
;
const
float
lOlOlllOOO\
l\

=
lOlO\
l\
lOllO\
O
*
lOl\
Ol\
lOllll\

;
const
flo\
at
lOlOl\
ll\
OOlO
=
lOl\
Oll\
Ol\
lOl\

*
lOlOlllO\
OOO
+
lOlOl\
lO\
l\
llO
;
const
float
lO\
lOll\
lO\
Oll
=
1.0f
/
(
lOlO\
lllOOOO
-
lOlOllOll\
ll
)
;
const\

fl\
oat
lOlO\
l\
llOlOO
=
lOl\
O\
l\
lO\
llOO
*
(
lOlOlllOOO\
O\

-
lOlO\
l\
l\
Oll\
l\
l
)
;
const\

flo\
at
lOlOlll\
Ol\
Ol
=
lOlOllOl\
l\
Ol
*
(
lOlO\
lll\
O\
OOO\

-
lOlOllOll\
ll
)
;
flo\
a\
t
lOO\
OOOll\
ll\

=
Sig\
n\

(
lOlOllOlOl\
O
)
;
lOlO\
llO\
lOl\
O\

*=
lOOOO\
Ollll\

;
lO\
O\
O\
OO\
llll\

*=
8.0f
;
if
(
lOlOllO\
lOlO\

<
lOl\
Oll\
Olll\
l\

)
{
return
lO\
OOOOl\
lll\

*
lO\
l\
Ol\
lOll\
O\
O
*
lOl\
O\
l\
l\
OlOl\
O\

;
}
else
if\

(
lOlOllO\
l\
O\
lO
<
lOl\
Ol\
llOOOO
)
{
return
lOOOOOl\
ll\
l
*
Geome\
try
::
Cub\
icInt\
er\
polat\
e
(
lOlOl\
l\
lOO\
O\
l
,
lO\
lOlllO\
OlO
,
lOlO\
lllOlOO
,
lO\
l\
OlllOl\
Ol
,
(
lOlO\
llO\
lO\
lO
-
lO\
lOl\
lOllll\

)
*
lOlOlllO\
Oll
)
;
}
el\
se
{
flo\
at\

lOOO\
lOOllO
=
lOlOll\
O\
llO\
l
*
lOlO\
llOlO\
l\
O
+
lO\
l\
O\
llO\
l\
llO
;
if
(
lOOOlO\
Ol\
lO
<
0.0f
)
lOOOlOOllO
=
0.0f
;
retur\
n
lOOOOOll\
ll\

*
lOOO\
lO\
OllO
;
}
}
flo\
at
TAC_CA\
L\
L
CarTem\
plate\

::
Stand\
a\
rdSlip\
An\
gle\
ToLateralF\
or\
ce\

(
floa\
t
lO\
lOl\
ll\
O\
l\
lO
,
fl\
oat
lO\
lOlllOll\
l
,
const
Surfa\
ceAt\
tribute
&
lOlOl\
lOlOll
)
{
con\
st
float
lOlO\
llOllOO\

=
14.0f
;
const
float\

lOl\
OllO\
l\
lOl
=
-
0.1f
;
const\

flo\
at\

lOlOll\
OlllO
=
2.0f
;
co\
nst
float\

lO\
lOllO\
ll\
ll
=
0.08f
;
const
flo\
at
lOlOl\
llOO\
OO\

=
0.27f
;
con\
st
fl\
o\
a\
t
lO\
lOll\
lO\
O\
Ol
=
lO\
lO\
ll\
OllOO
*
lOlOllOlll\
l
;
const
flo\
at\

lO\
lOlll\
OOlO
=
lOlOllOl\
lOl\

*
lOl\
Ol\
ll\
O\
OOO\

+
lO\
lO\
llO\
ll\
lO
;
cons\
t
fl\
oat
lOl\
Oll\
lOOll
=
1.0f
/
(
lOlOll\
lOOOO\

-
lOlOl\
lOll\
ll
)
;
const
float
lOlOl\
llO\
lOO
=
lOl\
Oll\
OllO\
O
*
(
lOl\
O\
lllOOOO
-
lO\
lO\
llOl\
lll
)
;
con\
st
float\

lO\
lOl\
ll\
OlOl
=
lOlO\
llOllOl
*
(
lO\
lOlllOOOO
-
lOlOllOll\
ll
)
;
flo\
at\

lOOOOOlll\
l
=
Si\
gn
(
lOlOlll\
Ol\
lO\

)
;
lOlOlllOllO
*=
lOOOOOl\
lll
;
float
lOlOll\
ll\
OO\
O
;
if\

(
lO\
lOlll\
O\
llO
<
lOlOllOllll
)
{
lOl\
Ol\
lllOOO
=
lOOOOOllll\

*
lO\
lOllOll\
OO\

*
lOlOl\
llOllO
;
}
else
if
(
lO\
lO\
ll\
lOllO
<
lOlO\
ll\
lOOOO
)
{
lOlOlll\
lOOO
=
lO\
OO\
OOllll
*
Geometry
::
Cub\
icInterpola\
te
(
lO\
lO\
ll\
lOOO\
l
,
lOlOlll\
O\
OlO
,
lO\
l\
OlllO\
l\
OO\

,
lO\
lOlllOlO\
l
,
(
lOlOl\
l\
l\
O\
l\
lO\

-
lOlOllOl\
lll
)
*
lOl\
O\
l\
llOOl\
l
)
;
}
else
{
fl\
oat
lOO\
OlO\
OllO
=
lO\
l\
OllOllOl
*
lO\
lOl\
llOllO
+
lOlO\
llO\
lllO\

;
if
(
lO\
OOlOOll\
O
<
0.0f
)
lOOO\
l\
OOllO
=
0.0f
;
lOlOll\
llOO\
O
=
lOOOOO\
ll\
l\
l
*
lOO\
OlO\
Oll\
O
;
}
lOl\
O\
lll\
lOOO
*=
2.5f
;
lOlOllll\
O\
OO
/=
(
Fab\
s
(
lO\
l\
O\
l\
l\
l\
Olll
)
*
8.5f
+
1.0f
)
;
retu\
rn
lOlOllllO\
OO
;
}
CarT\
emp\
la\
te\

::
CarTempl\
at\
e\

(
)
{
lOlOlOlO\
OO\
l\

=
false
;
lOlOlOlOOO\
O\

=
0
;
lOlOllO\
OlOO
=
k_v\
3Un\
i\
tZ\

;
lOl\
O\
l\
lOOl\
O\
l
=
k_\
v3UnitY\

;
lOl\
OllOO\
OOO\

(
)
;
}
CarTemp\
l\
a\
t\
e
::
~
CarTe\
mplat\
e
(
)
{
Finali\
se
(
)
;
}
void
CarTemp\
late
::
lO\
lO\
llOOO\
OO\

(
)
{
lO\
lOl\
Ol\
OO\
l\
O
=
0.0f
;
lO\
l\
OlOl\
Ol\
O\
l\

=
0.0f
;
lOlOlO\
l\
OOl\
l
=
0.0f
;
lOlOlO\
lO\
lOO
=
0
;
lOlOlOllOOO\

=
0.0f
;
}
}
