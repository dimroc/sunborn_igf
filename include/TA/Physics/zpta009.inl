//---------------------------------------------------------------------------------
// File Name: zpta009.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

na\
me\
space
TA
{
inline
bool
Physics\
Jo\
int
::
Is\
Obje\
c\
tASo\
lid
(
)
co\
ns\
t
{
retu\
rn
lll\
OllOOOl
(
lllOlOl\
llO
,
FLAG_\
OB\
JECTA_SOL\
ID
)
;
}
inline
void
Physics\
Joi\
nt
::
SetObjec\
t\
ASol\
id
(
bool
lll\
O\
llOOO\
O\

)
{
lllOlO\
l\
lOl
(
lllO\
lOlllO
,
FLA\
G\
_OBJ\
E\
CT\
A\
_SOLID
,
lllOll\
OOO\
O
)
;
}
inline
bo\
ol
Ph\
ysicsJ\
oint
::
IsOb\
jectB\
S\
olid
(
)
cons\
t
{
retu\
rn
lllOl\
lOOO\
l
(
lllOlOll\
lO\

,
FLA\
G\
_OB\
JEC\
TB_SO\
LID
)
;
}
inl\
i\
ne
void
Phy\
s\
ics\
Jo\
i\
n\
t\

::
Se\
t\
ObjectB\
Solid
(
bool
lllOl\
lO\
O\
OO
)
{
lllOlOl\
lO\
l\

(
lllOlOlllO\

,
FLAG\
_OBJ\
E\
C\
TB_SOLID\

,
lllOl\
lO\
OOO
)
;
}
in\
li\
ne
bool
Ph\
ysicsJoi\
n\
t\

::
IsC\
oll\
isi\
onDi\
s\
a\
ble\
dBetw\
een\
Ob\
jects\

(
)
con\
st
{
re\
t\
ur\
n\

ll\
l\
OllOOOl
(
ll\
lOlO\
lllO
,
ll\
Ol\
OO\
lO\
Oll\
l\

)
;
}
inline
vo\
id
Phy\
sicsJo\
i\
nt\

::
SetCo\
ll\
is\
ionDis\
a\
bledBetwe\
en\
Obje\
cts\

(
boo\
l\

lllO\
ll\
OO\
O\
O
)
{
lllOl\
O\
llOl
(
ll\
lOl\
O\
lllO\

,
ll\
OlOOlO\
Oll\
l\

,
ll\
lOllO\
OO\
O
)
;
}
inline
float
Physics\
Jo\
in\
t
::
Ge\
tBreakForc\
e
(
)
con\
st
{
return\

llOlOOOOOOOl
;
}
in\
line
void
PhysicsJoint
::
Se\
tBreakForce
(
float\

llO\
lOOlOl\
O\
Ol
)
{
llOl\
OO\
OOO\
OO\
l
=
llOlOOlO\
lOO\
l\

;
}
inlin\
e
void\

Phys\
ic\
sJoint
::
Set\
Bre\
ak\
able\

(
bool\

lllOllOOOO\

)
{
lllOl\
Oll\
Ol
(
lll\
O\
lO\
lllO
,
llOlOOlO\
lOO\
O\

,
lllOl\
l\
OO\
OO
)
;
}
inlin\
e
bool
PhysicsJ\
oint
::
IsB\
reakable\

(
)
co\
nst
{
return\

lllOl\
l\
OOO\
l\

(
ll\
lO\
l\
Oll\
l\
O
,
llOlOOlOl\
OOO
)
;
}
in\
l\
ine\

vo\
i\
d
Phys\
ics\
Joi\
nt\

::
Se\
tB\
ro\
ke\
n\

(
bo\
ol
lllOllO\
OOO
)
{
lllOlOll\
Ol
(
lllOlOll\
l\
O
,
llOOll\
l\
lOl\
OO
,
lllOllOOOO\

)
;
}
inli\
ne
bo\
ol
Phys\
i\
c\
sJ\
oi\
nt
::
Is\
Brok\
en\

(
)
cons\
t
{
retur\
n
lll\
O\
llOOO\
l
(
ll\
lO\
lOll\
l\
O
,
ll\
OO\
l\
lllO\
lOO
)
;
}
inli\
n\
e
voi\
d
*
Physics\
Join\
t\

::
Get\
Use\
r\
Data
(
)
co\
ns\
t
{
return
lOO\
l\
l\
Oll\
OO\
Ol
;
}
inli\
ne
void\

PhysicsJoi\
nt\

::
SetUse\
rDat\
a
(
void
*
llOlOO\
l\
Ol\
Ol\
O
)
{
lOOllOllOOO\
l
=
llO\
lOOlOlOlO
;
}
in\
line
Physics\
Join\
t
::
Ty\
pe
Physi\
cs\
Joint\

::
GetType
(
)
const
{
return
(
Typ\
e
)
llO\
l\
O\
OOO\
Ol\
ll\

;
}
inlin\
e\

Dynam\
icOb\
ject
*
Phy\
sicsJoint\

::
Ge\
t\
Obj\
ect\
A
(
)
{
re\
turn\

llO\
OllllOll\
l
;
}
inline
Dynamic\
Ob\
ject
*
Physic\
sJo\
in\
t
::
GetObjectB
(
)
{
ret\
urn
llOOlllll\
OOO
;
}
inline\

co\
nst
Vec\
3
&
Physic\
s\
J\
oint
::
GetPos\
O\
nOb\
j\
e\
ct\
A
(
)
const
{
ret\
u\
rn
llOO\
ll\
llOlOl
;
}
in\
line
co\
n\
st
Vec\
3
&
Ph\
ys\
icsJoi\
nt
::
Get\
Po\
s\
O\
n\
O\
bjectB
(
)
cons\
t
{
re\
t\
urn
llOOl\
lllOllO
;
}
inli\
n\
e\

const\

Ve\
c\
3\

&
PhysicsJoint
::
Get\
Lim\
itNormalOnObje\
c\
tA\

(
)
con\
st\

{
return\

llOO\
llll\
lOOl
;
}
inli\
n\
e
con\
st\

Ve\
c3
&
Phy\
s\
ic\
sJoint
::
Ge\
tLimitNor\
m\
alOnO\
b\
jectB
(
)
cons\
t\

{
ret\
urn
llOOll\
lllOlO\

;
}
inli\
ne
const
Vec3
&
Phys\
icsJoint
::
GetCen\
ter\
D\
ir\
ection\
O\
nObjectA
(
)
co\
nst\

{
return
llOOll\
lllOOl
;
}
inlin\
e
con\
st
Vec3
&
Ph\
y\
si\
cs\
Jo\
int\

::
GetCenter\
Dir\
ectionOn\
O\
b\
je\
ctB
(
)
co\
n\
s\
t\

{
return
ll\
OOlllll\
O\
lO\

;
}
inlin\
e
float
Physi\
csJ\
o\
i\
nt
::
GetMaxAng\
l\
e
(
)
const
{
retu\
rn\

ll\
OOll\
l\
llOll
;
}
inline
con\
st
Ma\
t33
&
Phys\
icsJ\
o\
int
::
GetJointOrie\
ntationA\

(
)
{
ret\
urn\

llO\
Ol\
ll\
lll\
OO\

;
}
in\
l\
ine
const
Mat33
&
Phy\
si\
csJo\
int\

::
GetJ\
oin\
t\
O\
r\
ie\
ntationB
(
)
{
re\
tu\
rn
llOOllll\
llOl
;
}
inline
con\
st\

Eu\
ler\
Angles
&
Phy\
sicsJoint
::
GetMinAn\
gl\
es
(
)
{
re\
turn
ll\
OOllll\
ll\
lO
;
}
inlin\
e
cons\
t
EulerAngles\

&
Phys\
ic\
sJoi\
n\
t\

::
Ge\
t\
M\
axAng\
les
(
)
{
return
llO\
Ollllllll
;
}
inline
const
Ve\
c3
&
Physics\
Joint
::
GetSli\
derP\
os0
(
)
co\
n\
st
{
re\
turn
llOOllllOllO\

;
}
in\
l\
i\
n\
e
co\
nst
Vec3\

&
Phy\
si\
csJoi\
n\
t
::
GetSl\
id\
e\
r\
P\
os1
(
)
const
{
return
llOOlll\
llOO\
l\

;
}
}
