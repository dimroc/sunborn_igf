//---------------------------------------------------------------------------------
// File Name: zpta000.h
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifndef llOOlOlOlOl
#define llOOlOlOlOl
#ifndef lOlOlOlOlO
#include "../Common/zcta009.h"
#endif //
#ifndef TA_AABB_H
#include "../Common/AABB.h"
#endif //
#ifndef llOOlOlOllO
#include "../Physics/zpta015.h"
#endif //
names\
pac\
e\

TA\

{
st\
ruct\

AAB\
B
;
class
lOl\
OllllOlO\

lOl\
l\
lll\
O\
Ol\
l\

:
pu\
bli\
c
ll\
O\
OlO\
lO\
lll
{
public\

:
lO\
lll\
llO\
Oll\

(
)
;
~
lO\
lll\
llOOll
(
)
;
void\

Initi\
alis\
e
(
const
Vec3
&
v3Cen\
te\
r
,
fl\
o\
a\
t\

lOlll\
lll\
l\
OO
)
;
void\

Fi\
nalise\

(
)
;
void\

lO\
lOlO\
OOO\
l
(
Sp\
aceDi\
visio\
nOb\
je\
ct
&
lO\
llllllllO\

)
;
void
lOOlllll\
ll\

(
Spa\
ceDi\
v\
isionO\
bject\

&
lOll\
l\
lllllO
)
;
void\

lOllll\
l\
l\
lOl
(
Sp\
aceD\
i\
vi\
s\
ionObjec\
t
&
lO\
ll\
llllllO\

)
;
voi\
d
ll\
OOO\
OOOlO\
l
(
Spa\
ceDi\
vis\
ionObj\
ect
&
lOllllllll\
O
)
;
voi\
d
llO\
O\
O\
lOOlOO\

(
const
AABB
&
lO\
OO\
OOOlll\

,
voi\
d\

(
TAC_CA\
LL\

*
llOOlOllOO\
O\

)
(
Space\
Divisi\
on\
Obje\
ct\

&
lOllll\
lll\
lO
,
voi\
d
*
lO\
OlllOOOO
)
,
vo\
id
*
lOO\
OOllllO
)
;
void
ll\
OOO\
l\
O\
llOO\

(
cons\
t
Ve\
c3\

&
lO\
OlOlOlll
,
const
Vec3
&
lOOl\
O\
llOOl
,
void\

(
TAC_C\
ALL
*
llOOlOllO\
O\
O
)
(
Sp\
aceD\
i\
v\
isionOb\
ject
&
lOll\
ll\
l\
lllO\

,
vo\
id\

*
lOOl\
l\
l\
OO\
O\
O
)
,
void
*
lOOOOlll\
l\
O
)
;
priva\
te\

:
en\
u\
m
Flags
{
ll\
OOOOO\
OOO\
l
=
1
,
llO\
OO\
O\
OO\
lOO
=
2
,
llOOOOOlOOO
=
4
,
llOOlOOOllO\

=
8
,
}
;
str\
uc\
t
llO\
O\
O\
O\
O\
O\
llO
{
u3\
2
llO\
OOOllOOO\

;
u32\

llOOOOllOlO\

;
u32
llO\
OOOllO\
ll\

;
u32
llOOOOll\
lOO\

;
llOOOOOOllO
*
llOOOOOlO\
ll
;
Sp\
aceDi\
v\
i\
sio\
nObj\
ect
*
llOOOO\
lOlOO\

;
u8
lOl\
Ol\
l\
OO\
Ol
;
u8
ll\
OOOO\
lOOlO\

;
u8
llOO\
OOl\
OOO\
O
;
u8
llOl\
l\
OOl\
Ol
;
llOOOOO\
Ol\
l\
O\

*
llO\
OOOlOOOl
[
8
]
;
}
;
struct
ll\
O\
OOOlllO\
l
{
u32
llOOO\
OllOOO
;
u32
llO\
O\
OOll\
OlO\

;
u32
llOOOOllO\
ll
;
u32
llO\
OO\
O\
lllOO\

;
llOOOOOOll\
O\

*
ll\
OOOOO\
l\
O\
l\
l
;
Spac\
eD\
ivisi\
on\
O\
b\
ject\

*
llOOOOl\
Ol\
OO
;
u8
lOlOllOOOl
;
u8
llO\
OO\
OlO\
OlO
;
u8
llOO\
OOlOO\
O\
O
;
u8
llOll\
OOlOl
;
}
;
struct\

llOOO\
OOl\
O\
O\
l\

{
u3\
2
llOOlOllOO\
l
;
u3\
2
llOOlOl\
lO\
lO
;
u32\

ll\
O\
Ol\
Ol\
lOl\
l
;
u32\

llO\
O\
l\
Ol\
llOO
;
llOO\
O\
OOlOOl
*
ll\
O\
O\
O\
O\
OllOO
;
llOOO\
OOl\
OO\
l
*
ll\
OOO\
O\
Ol\
O\
ll
;
u8
lOlOllO\
O\
O\
l
;
u8\

llOO\
OO\
l\
O\
Ol\
O
;
u8
llOOOO\
lOOOO
;
u8
ll\
OllOO\
lO\
l
;
llOO\
O\
OOO\
ll\
O
*
llO\
O\
OOlO\
OO\
l
[
8
]
;
}
;
st\
ruct
lOl\
llllllll
{
llOO\
OOlllO\
l
llOOO\
OOOOll\

;
llOOOOOOllO
ll\
OOOOOOOO\
O
;
}
;
struct
llO\
OOl\
OOllO
{
AABB\

lOOOO\
OOl\
ll
;
u32
llOOOO\
ll\
OlO
;
u3\
2
llOO\
OOl\
lOll
;
u32
ll\
OOO\
Ol\
llOO
;
u3\
2
llO\
OOlO\
lOOO\

;
u32
llOO\
OlOlOOl
;
u32\

llO\
OOlOlOlO
;
void
(
TA\
C_\
CALL\

*
ll\
O\
O\
O\
lOOlOl
)
(
Sp\
a\
ce\
DivisionO\
bject
&
lO\
lll\
llll\
lO\

,
void\

*
lOO\
OOl\
lllO
)
;
vo\
id
*
lOO\
O\
Ol\
lllO
;
}
;
stru\
ct
llOOOlO\
llll
{
vo\
id
(
TAC_CA\
LL
*
llOOOlO\
OlO\
l\

)
(
Spac\
eDivi\
sionObje\
ct
&
lOllll\
llll\
O
,
vo\
id
*
lOO\
O\
O\
llllO
)
;
void
*
lOO\
OOllllO
;
float\

lO\
Ol\
O\
l\
l\
O\
OO\

;
Vec3
lOOlO\
lOlll
;
Vec\
3\

lOOlOll\
OO\
l\

;
struc\
t\

Ax\
is
{
float
llOOOllOOO\
l
;
flo\
at\

ll\
OOOll\
O\
OOO
;
fl\
oat
llO\
OO\
llOO\
lO
;
in\
t
ll\
OOOll\
OOll
;
flo\
at
ll\
OOOll\
O\
lO\
O
;
float
ll\
OOOllOl\
O\
l
;
}
;
Axis
lOOOO\
Ol\
lO\
l\

[
3
]
;
}
;
Vec3\

lOl\
ll\
llO\
lOO
;
fl\
o\
at
lOll\
l\
l\
lOl\
Ol\

;
ll\
OO\
OOOO\
llO
*
lOll\
l\
lOllOO\

;
ll\
OOOOOlOOl
*
lOl\
l\
l\
l\
l\
Ol\
lO\

;
#ifdef _DEBUG
in\
t
lOl\
llll\
Ol\
ll\

;
int\

lOllllllOOO\

;
in\
t\

lOl\
lll\
llO\
O\
l
;
int
lOllllllO\
ll
;
int\

lOl\
lllllO\
lO
;
#endif //
bo\
ol
lOlllllOOOl
(
llO\
OOOOOllO
*
ll\
OO\
O\
lllOOO
)
;
bo\
ol
lOllll\
Ollll
(
Space\
Divisi\
onObj\
ec\
t
*
ll\
OOO\
OlOllO
)
;
bo\
ol
lO\
ll\
llOlll\
l
(
co\
nst
llOOOO\
OO\
llO\

*
llOOO\
llOlll
)
;
void
ll\
OOOlO\
lOll
(
ll\
O\
OOOO\
OllO
*
ll\
OO\
O\
O\
OOl\
ll\

,
llOOOlOOllO
&
ll\
OOOlOOlll\

)
;
void
ll\
OOOl\
l\
OllO\

(
llOO\
OOO\
OllO
*
llOOO\
O\
O\
O\
lll
,
llOOOlOllll
&
llOOOlOO\
l\
ll
)
;
void
llOOOO\
llllO
(
ll\
OOOOl\
l\
lOl
&
lOOl\
OOl\
ll\
OO
)
;
voi\
d\

llOOOlO\
O\
OlO
(
ll\
OOOOO\
O\
llO\

*
llOOOO\
OOl\
l\
l
)
;
void
ll\
OOOlOOOll
(
llO\
OO\
OOOllO\

*
llOOOOOOl\
ll\

)
;
llO\
OOOO\
OllO\

*
ll\
O\
OOlll\
Oll
(
ll\
OOOOOO\
llO
*
llOO\
OOOOlll
,
ll\
O\
OOOO\
O\
llO
*
*
llO\
O\
l\
OOlOlO
,
llO\
OO\
Olll\
Ol\

&
lO\
OlOOl\
llOO
)
;
void
ll\
O\
Ol\
OOO\
OOO
(
ll\
O\
OOOO\
Oll\
O
*
llOO\
OOO\
Oll\
l
,
llOOO\
OlllOl\

&
lOO\
lOOlllOO\

,
u32
llOOOlllll\
l
)
;
void
llOO\
lOOOOOl
(
llOOOOOOl\
l\
O\

*
llOOOO\
OOlll
,
llO\
OOO\
lll\
Ol
&
lOOlO\
OlllO\
O
)
;
voi\
d\

llOOlO\
O\
OOlO\

(
llOOOO\
OO\
l\
lO
*
llO\
OOOO\
Ol\
ll
,
llO\
OOOll\
l\
Ol
&
lO\
Ol\
OOlllOO\

)
;
llOOOOOO\
ll\
O
*
llOOOOOll\
lO
(
)
;
vo\
id
ll\
OO\
OOOOOl\
O\

(
ll\
OO\
OOOOl\
lO
*
ll\
OOOOO\
Olll\

)
;
void
ll\
OOlOO\
Ol\
Ol
(
llO\
OOO\
O\
Oll\
O\

*
ll\
O\
OOO\
OOlll
)
;
void\

llOOlOOll\
l\
l\

(
llOOOO\
O\
OllO
*
llOOlOlOOOO
)
;
voi\
d
llO\
OlOOOlOO
(
ll\
O\
OOOO\
O\
ll\
O
*
*
ll\
OO\
l\
Ol\
OOOl
)
;
voi\
d
ll\
O\
OlOOOlll
(
llOO\
O\
OOOllO
*
*
llOOlOOlOl\
O
)
;
voi\
d
lO\
l\
lllO\
ll\
O\
l
(
)
;
voi\
d
lO\
l\
l\
ll\
OlOl\
l
(
llOOOOOOll\
O
*
llOOOO\
OO\
lll
)
;
void
lO\
llllO\
lO\
ll
(
ll\
O\
O\
OO\
OOllO
*
llOO\
OO\
OOlll
,
int
&
llO\
ll\
O\
OlOl
)
;
boo\
l\

lO\
l\
lll\
Ollll
(
con\
s\
t
llO\
OOOOOllO\

*
llOO\
OOOO\
ll\
l\

,
const\

ll\
OO\
OOOOllO\

*
llOOOl\
lOlll\

)
;
bo\
ol
lOllllO\
llll\

(
con\
st\

llOOOOOOl\
lO
*
llOOOOOO\
l\
ll
,
const\

Sp\
aceDivision\
O\
bjec\
t
*
llOOOllOlll
)
;
void
llOOlOll\
lOl
(
llO\
OOOOOl\
l\
O
*
llOOOOO\
Ol\
l\
l\

)
;
bo\
o\
l
llOOOO\
Ollll
(
co\
ns\
t
llOOOOOOllO\

*
llO\
O\
OO\
OOl\
l\
l
)
{
retu\
rn
(
llOOO\
OOOl\
ll\

->
lOlOllOOOl\

&
(
llOO\
OOOOOOl
|
llOOOO\
O\
OlOO
)
)
==
llOOOOOOO\
Ol
;
}
boo\
l
llOO\
lO\
OOOll\

(
cons\
t
llOOOOOOll\
O
*
llO\
O\
OOOOlll
)
{
return
(
llO\
OO\
O\
O\
O\
ll\
l
->
lOlOll\
OOOl
&
(
llO\
O\
OOOO\
OOl
|
llOO\
OOOO\
l\
OO
)
)
==
ll\
O\
O\
OOOOlOO\

;
}
st\
a\
t\
ic\

u32
TA\
_FAST_\
C\
AL\
L
ll\
O\
OOOllO\
O\
l
(
u32
lOO\
llO\
Oll\
lO\

)
{
#ifdef TA_ASM_LOG2
re\
turn
2
<<
Log2
(
lO\
O\
llO\
O\
ll\
l\
O
|
1
)
;
#else
lO\
O\
ll\
O\
Ol\
llO
--
;
lOO\
l\
lOOlllO
|=
lOO\
llO\
Ol\
llO
>>
1
;
lOOllOOl\
llO
|=
lO\
O\
ll\
OOlllO
>>
2
;
lOOllO\
Olll\
O\

|=
lO\
OllOOl\
l\
lO
>>
4
;
lO\
OllOO\
lllO
|=
lOOl\
lOO\
ll\
lO
>>
8
;
lOOllOOlllO
|=
lO\
Oll\
OOl\
l\
l\
O
>>
16
;
lOOllOOlllO
++
;
ret\
u\
rn\

lOOl\
l\
OOl\
llO
;
#endif
}
st\
ati\
c
u3\
2\

TA_FA\
ST\
_\
CA\
LL
llOO\
l\
OOl\
OOO
(
unsigned\

in\
t
lOOllOOl\
llO
)
{
TA_AS\
SE\
RT
(
(
lOO\
llOOlllO\

&
(
lOOll\
OOlllO
-
1
)
)
==
0
)
;
TA_\
A\
S\
S\
ERT
(
lOOllOO\
lllO
<
0x100
)
;
sta\
tic
con\
st
int
llOOlOllllO
[
8
]
=
{
0
,
1
,
2
,
4
,
7
,
3
,
6
,
5
}
;
return
llOOl\
OllllO
[
(
lOOllO\
OlllO
*
0x17000000
)
>>
29
]
;
}
}
;
}
#endif //
