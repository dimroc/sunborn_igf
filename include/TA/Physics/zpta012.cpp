//---------------------------------------------------------------------------------
// File Name: zpta012.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#define llOllOlOOOl
#define lOllOllOOOO
#include "CollisionObjectCylinder.h"
#ifndef TA_MFRAME_H
#include "../Common/MFrame.h"
#endif //
#ifndef TA_GEOMETRY_H
#include "../Common/Geometry.h"
#endif //
#ifndef llOllOOOllO
#include "../Physics/zpta013.h"
#endif //
#ifndef TA_COLLISIONOBJECTSPHERE_H
#include "CollisionObjectSphere.h"
#endif //
#ifndef TA_COLLISIONOBJECTCAPSULE_H
#include "CollisionObjectCapsule.h"
#endif //
#ifndef TA_COLLISIONOBJECTCACHEDPOLYDATA_H
#include "CollisionObjectCachedPolyData.h"
#endif //
#ifndef TA_COLLISIONOBJECTLINELIST_H
#include "CollisionObjectLineList.h"
#endif //
#ifndef TA_PHYSICSRENDER_H
#include "PhysicsRender.h"
#endif //
#ifndef TA_COLLISION_H
#include "Collision.h"
#endif //
#ifndef lllOOOlOllO
#include "../Physics/zpta007.h"
#endif //
namesp\
a\
ce\

TA
{
void
Co\
llisionObje\
ct\
Cyli\
nder\

::
In\
iti\
alise
(
con\
st
Vec3
&
lllOlOOlllO
,
co\
ns\
t
Ve\
c3
&
ll\
lOlOOllll\

,
fl\
oat
ll\
llOlll\
ll
)
{
lll\
OlOlOOOO
=
lll\
OlOOl\
llO
;
lll\
Ol\
OlOOO\
l\

=
lllOlOO\
llll
;
lO\
lO\
lOOlO\
O\
O
=
lll\
lOlllll
;
lOOO\
OOOllO
(
ll\
llOll\
lll\

>=
0.0f
,
"CollisionObjectCylinder::Initialise. fRadius is < 0.")
;
lOOOO\
OOllO
(
(
lllOlOlOOO\
l\

-
lllO\
lOl\
OOO\
O
)
.
Get\
M\
agni\
t\
ude\

(
)
>
k_f\
MinF\
loat
,
"CollisionObjectCylinder::Initialise. The cylinder length is equal to zero")
;
}
void
Co\
llisionO\
bjectCyl\
ind\
er
::
Fina\
lis\
e
(
)
{
lllOlOl\
O\
O\
OO
.
Clea\
r\

(
)
;
lllOlO\
l\
OOO\
l
.
Cl\
ear\

(
)
;
lOlOlOOl\
OOO
=
0.0f
;
}
void
Co\
llis\
ionOb\
je\
ct\
Cylinder
::
Se\
riali\
se
(
Ser\
ial\
iser
&
lOOOl\
O\
llOl
,
const\

Ve\
rs\
i\
on
&
ll\
lOlO\
OOl\
O
)
{
lOO\
OOOOl\
lO
(
lllOlOOOl\
O\

<=
llOl\
lOO\
lO\
lO
,
"CollisionObjectCylinder::Serialise. The version number is too new.")
;
lOOOlOllOl
.
Se\
ria\
lis\
e\

(
lllOlOlOOOO
)
;
lOOOlO\
ll\
O\
l\

.
Serialise
(
lllOlO\
lOOOl\

)
;
lOO\
OlOl\
lOl\

.
Se\
ria\
li\
s\
e
(
lOlO\
l\
O\
OlOOO\

)
;
}
voi\
d\

Collision\
O\
bj\
ectCy\
li\
nder\

::
Ren\
der\

(
const
MFrame\

&
lOOO\
OOOO\
Ol\

)
{
const
in\
t
lll\
OlO\
lOOlO\

=
16
;
const\

in\
t\

ll\
lOlOlO\
O\
ll
=
1
;
Mat33
lllOlO\
lOlOO
;
ll\
l\
Ol\
O\
l\
Ol\
OO
.
SetToLo\
o\
kDown\
Vector
(
(
ll\
l\
Ol\
O\
l\
O\
OOl
-
lllOlO\
l\
OO\
O\
O
)
.
GetNorm\
a\
l
(
)
)
;
for\

(
int
ll\
l\
Ol\
OlOlOl\

=
0
;
ll\
lOlO\
lOlOl
<
ll\
lOlO\
lOOlO
;
lll\
OlOlOlO\
l\

++
)
{
fl\
o\
at
lOOOOllOOOl\

;
fl\
oat\

lOOOOllOOlO
;
SinA\
ndCos\

(
(
floa\
t\

)
lllOlO\
lO\
lOl
/
(
flo\
at
)
lllOl\
OlOOlO
*
(
k_fPi
*
2.0f
)
,
lOOOOl\
lOOOl
,
lOO\
OOll\
OOlO
)
;
Vec3
lllOlOl\
Oll\
O\

=
(
lllO\
lOl\
O\
lOO\

.
v3X
*
lOOOO\
l\
lOO\
l\
O
+
lll\
Ol\
Ol\
OlOO
.
v3Y
*
lOO\
O\
Oll\
OOO\
l
)
;
SinAndCos\

(
(
float\

)
(
lll\
O\
lOlOlOl
+
1
)
/
(
flo\
at
)
ll\
l\
OlO\
lO\
O\
l\
O
*
(
k_fPi
*
2.0f
)
,
lOOO\
O\
llO\
OOl
,
lOOO\
Oll\
OOlO
)
;
Ve\
c\
3\

lllO\
lOlOlll
=
(
lllOlO\
lOlOO
.
v3X
*
lO\
O\
OOllOOlO
+
lllO\
lOlO\
lOO
.
v3Y\

*
lOOOOllOO\
Ol\

)
;
{
const
Vec3
ll\
lOlOl\
lOO\
O\

[
4
]
=
{
(
lllOlOlO\
OOO\

+
lllOl\
Ol\
O\
llO\

*
lOl\
OlOOlOOO
)
*
lOOOO\
OO\
OOl
,
(
lll\
OlOlOOOO\

+
ll\
lOlOlOl\
ll
*
lOl\
Ol\
OOl\
O\
O\
O
)
*
lOOOOO\
OO\
Ol\

,
(
lllO\
lOlOOOl
+
lllOlOlOl\
ll
*
lOlOlOOlOOO
)
*
lO\
OO\
OOOOOl
,
(
ll\
l\
Ol\
OlOO\
O\
l
+
ll\
l\
Ol\
O\
lO\
llO
*
lOlOlOOl\
O\
OO\

)
*
lOOO\
OOOO\
Ol\

,
}
;
con\
st
Ve\
c\
3
ll\
l\
OlOllOOl
[
4
]
=
{
lllO\
l\
Ol\
O\
llO
*
lOOOO\
OOO\
O\
l\

.
m33R\
ota\
t\
ion
,
lllOlOlOl\
ll
*
lOOOOO\
OOO\
l
.
m33Rotati\
on\

,
lllOlOl\
Olll
*
lOO\
O\
OOOOO\
l
.
m33Rotat\
io\
n
,
lllOlOlO\
llO
*
lOOOOOOO\
Ol\

.
m33\
Ro\
tat\
i\
o\
n\

,
}
;
Physics\
R\
e\
nder
::
Rende\
rPolygon
(
4
,
lllOl\
O\
ll\
OOO\

,
ll\
l\
Ol\
Ol\
lOOl
)
;
}
for
(
in\
t\

lll\
O\
lOllOlO\

=
0
;
ll\
l\
OlOll\
O\
lO
<
lllOl\
OlO\
Oll
;
ll\
lO\
lOl\
lOlO
++
)
{
SinAnd\
Cos
(
(
flo\
a\
t
)
lllOl\
OllOlO\

/
(
float
)
lllOlOl\
O\
Ol\
l
*
(
k_fPi\

)
,
lO\
OOOl\
lOOOl\

,
lOO\
O\
OllOO\
lO
)
;
Vec3
lllOl\
OllOl\
l
=
lllOlOlOl\
l\
O
*
lOOO\
OllOO\
lO
+
ll\
lOl\
O\
lOlOO
.
v3\
Z
*
lOOOO\
l\
l\
OOO\
l\

;
Vec3\

lllOlOlllOO
=
lllOlOlOll\
l
*
lOOOOllO\
O\
lO
+
lllOl\
OlOlO\
O
.
v3Z
*
lOOOOllOOOl
;
Si\
nA\
n\
dCos
(
(
float
)
(
ll\
l\
OlOllOlO
+
1
)
/
(
float\

)
lllOlOl\
OOl\
l
*
(
k_fPi
)
,
lOOOOllOOOl
,
lOOOOllOOlO
)
;
Vec3\

lll\
OlO\
lllOl
=
lllOl\
OlO\
ll\
O
*
lOO\
OOl\
lOOlO
+
lllO\
l\
OlOlOO
.
v3Z
*
lOOOOll\
O\
OOl
;
Vec3
lllOlOlll\
lO
=
lllO\
lOl\
Olll
*
lO\
O\
OOllOOl\
O
+
lllOl\
OlO\
lO\
O
.
v3Z\

*
lOOOOll\
OOOl
;
{
const
Vec3
lllOlO\
l\
lOOO
[
4
]
=
{
(
lllOlOlOOOO\

-
lllOlOllO\
l\
l
*
lOlOlOOlOOO
)
*
lOO\
OO\
O\
OOOl\

,
(
ll\
lO\
lOl\
O\
OOO
-
lllOl\
OlllOl
*
lOlOlOO\
lO\
OO
)
*
lOO\
OOO\
OOO\
l\

,
(
lllO\
l\
OlOO\
O\
O
-
ll\
lOlOll\
l\
l\
O
*
lOlOlOOlOO\
O
)
*
lOOOO\
OO\
OOl
,
(
ll\
lOlOl\
OO\
OO
-
lllOlOll\
lOO
*
lOlOlOOlOOO
)
*
lOOO\
O\
OOOOl
,
}
;
co\
nst
Vec\
3
lllOl\
O\
ll\
OOl
[
4
]
=
{
-
lllO\
lO\
llOll\

*
lOOOO\
OOOO\
l\

.
m33Rotatio\
n
,
-
lllO\
lOlllOl
*
lOOO\
OOOOOl
.
m3\
3\
Rotat\
ion
,
-
lllO\
lOlll\
lO
*
lO\
O\
OOOOO\
Ol\

.
m33R\
otati\
on
,
-
ll\
lOl\
OlllOO
*
lOOOOOOOOl
.
m33Rot\
ation\

,
}
;
Ph\
ysi\
csRend\
er\

::
Ren\
der\
Pol\
ygo\
n
(
4
,
ll\
lOlOll\
OOO
,
ll\
lOlOll\
OOl
)
;
}
{
cons\
t
Ve\
c3
lllOlOllOO\
O\

[
4
]
=
{
(
lllOlO\
lO\
OOl
+
ll\
lOlOllO\
l\
l
*
lOl\
O\
lOOlOO\
O
)
*
lOO\
OOOOOO\
l
,
(
lllOlOlO\
O\
Ol\

+
ll\
lOlOlllO\
l\

*
lOlOlOOlO\
OO
)
*
lOOOOO\
OO\
Ol
,
(
lllO\
lO\
l\
OOO\
l
+
ll\
lO\
l\
Ollll\
O
*
lO\
lO\
lOOlOOO
)
*
lOOO\
OOOO\
Ol\

,
(
lllOlO\
lOOOl\

+
ll\
lOlOl\
l\
l\
OO
*
lOlO\
l\
OOlOO\
O
)
*
lO\
OOO\
OOOOl
,
}
;
con\
st\

Ve\
c3\

lllOlOllOOl
[
4
]
=
{
lllOl\
Ol\
lOll
*
lOOO\
OOOOO\
l
.
m3\
3\
Rot\
ation\

,
lllOlO\
l\
llOl\

*
lOOOOOO\
OOl\

.
m33\
R\
o\
tatio\
n
,
lll\
OlOl\
ll\
lO
*
lOOOOO\
OOOl
.
m33\
R\
o\
tation
,
lllOlOll\
lO\
O\

*
lOOOOOOOO\
l
.
m3\
3R\
ota\
tion
,
}
;
Phys\
icsRender
::
Rend\
erPoly\
gon
(
4
,
ll\
lOlO\
llOO\
O
,
lllOl\
Ol\
lO\
Ol
)
;
}
}
}
}
AABB
Colli\
sio\
nObject\
Cy\
lin\
der\

::
Cal\
culateBound\
i\
ngBox
(
)
co\
ns\
t
{
AAB\
B\

lOOOOO\
Olll\

;
lOO\
OOOO\
lll
.
In\
itialise\
ToFit2P\
oi\
nts
(
lllO\
l\
O\
lOO\
OO\

,
ll\
lOl\
OlOO\
O\
l\

)
;
Vec3\

lOOO\
lOOOO\
O
=
ll\
lOlOlOOOl\

-
lllOlOlOOO\
O
;
TA_\
ASSERT
(
lOO\
OlOOOOO
.
GetMag\
nitude\

(
)
>
k_f\
M\
inF\
loat
)
;
lOO\
OlOO\
OO\
O\

.
Norm\
a\
lis\
e
(
)
;
lOOO\
OOOl\
ll\

.
v3\
Ex\
te\
nt
.
x
+=
lOO\
OlOOOO\
O
.
Cro\
ssWi\
thUnit\
X
(
)
.
Get\
Ma\
g\
nitude
(
)
*
lOlOlOOl\
OOO\

;
lO\
OOO\
OOll\
l\

.
v3Extent
.
y
+=
lO\
O\
OlOOOOO
.
Cro\
ssWit\
hU\
nit\
Y
(
)
.
Get\
Mag\
ni\
tu\
d\
e
(
)
*
lO\
lOlOOlOOO
;
lOO\
OOOOll\
l
.
v3E\
x\
t\
e\
nt\

.
z
+=
lOO\
Ol\
OOOOO
.
CrossWit\
hUnitZ\

(
)
.
GetMagnitu\
d\
e\

(
)
*
lOlOlO\
Ol\
OOO
;
return\

lOOOO\
OOl\
l\
l\

;
}
void
Collision\
Obje\
c\
t\
Cylinder
::
Ca\
lcu\
lateMa\
ss
(
floa\
t
ll\
lOlO\
llll\
l
,
flo\
at
&
lO\
llOO\
O\
Ol\
O\
O
,
Vec3
&
lllOllOO\
OOO
,
Ma\
t3\
3\

&
lllOllOOOO\
l
)
cons\
t
{
fl\
oat
lOO\
lOl\
lOO\
O\

=
(
lllOl\
O\
lOOOO\

-
lllOlOlOOOl
)
.
Ge\
t\
Magn\
itu\
de
(
)
;
lOll\
OOOO\
lOO\

=
lO\
OlO\
llOO\
O
*
k_fPi
*
lO\
lOlOOlOOO
*
lOl\
O\
l\
OOlOOO
*
lllOlO\
ll\
ll\
l
;
lllOl\
lOO\
OOl\

.
SetToIdentit\
y
(
)
;
lllO\
llOOO\
Ol
.
M11\

(
)
=
lOllO\
OO\
OlOO
*
(
0.25f
*
lOlO\
lOOlOOO
*
lOl\
OlOOlOOO
+
(
1.0f
/
12.0f
)
*
lOOlOllOOO
*
lOOlOllOO\
O
)
;
lll\
Ol\
lOO\
OOl
.
M22\

(
)
=
lll\
O\
ll\
OOOOl
.
M11
(
)
;
ll\
lOllOOOOl
.
M33\

(
)
=
lO\
ll\
O\
O\
OOlOO\

*
0.5f
*
lOlO\
lOOlOOO
*
lOlOlO\
Ol\
OO\
O
;
Mat33\

ll\
l\
OlOlO\
lO\
O\

;
ll\
l\
O\
l\
O\
lOlOO
.
Set\
To\
L\
o\
o\
kDo\
wnVector
(
(
lllO\
l\
O\
lO\
OO\
l
-
lllOlOlO\
OOO
)
/
lOOlOl\
lOOO
)
;
Mat\
3\
3\

lllO\
llOOlO\
O
;
lllOl\
lOOOOl
=
lllOl\
OlOlOO
.
Ge\
t\
Tr\
a\
nsposeAs\
In\
vers\
e
(
)
*
lllOllO\
OOOl
*
ll\
lO\
l\
OlOlOO
;
ll\
l\
OllOO\
OOO
=
(
lllOlOlOOO\
O\

+
lllOlOlOOOl
)
*
0.5f
;
}
bool
Co\
l\
lisionObj\
e\
c\
t\
C\
y\
li\
nder\

::
TestLineForC\
ol\
lision
(
con\
s\
t\

Vec\
3
&
lO\
O\
lOl\
Oll\
l\

,
const
Ve\
c3
&
lOOO\
l\
OOO\
O\
O
,
float
lOOl\
Ol\
lOOO
,
Collis\
ion
&
llOl\
ll\
lOlOl
)
cons\
t\

{
Vec\
3\

lOOl\
O\
l\
lOOl\

=
lOO\
lOlO\
l\
ll
+
lOO\
O\
lO\
OOOO
*
lO\
OlO\
l\
lOOO
;
floa\
t\

llllOl\
OO\
Ol
;
Vec\
3
lOl\
l\
ll\
OOOl\

;
Ve\
c3
lOl\
l\
l\
lOO\
lO
;
const
Vec3
llllOOOOOOO
=
lllOlO\
lOOOl
-
lllOlOlOOOO
;
co\
nst
float
lOOO\
lOOOlOOO\

=
lOlOlOOlOOO
*
lOlOlOOlOOO\

;
bool\

lllOllOOlOl
=
false
;
float\

lO\
OOl\
O\
OO\
lOOl
=
llllOOOOOOO
.
Dot
(
lO\
O\
lOlO\
l\
ll
-
ll\
lO\
lOlO\
OOl
)
;
flo\
at
lOOOlOOOlOlO
=
llllOOOOOOO
.
Do\
t
(
lO\
OlOl\
lOOl
-
lllOlOlOOO\
l
)
;
if\

(
lO\
OOl\
OOO\
lOOl\

>
0.0f
&&
lOOOlOOOlOlO
<
0.0f
)
{
llllOlOO\
Ol
=
lOOO\
lOOOlOOl\

/
(
lOOOl\
O\
O\
OlOOl\

-
lOO\
OlOOO\
lOlO\

)
;
lOllllO\
OOl
=
lO\
O\
l\
OlOlll\

+
(
lOO\
l\
Ol\
lO\
O\
l
-
lO\
OlOl\
O\
ll\
l\

)
*
llllOl\
OOOl
;
fl\
oat
lllOOlO\
lOl
=
(
lOllllOOOl\

-
lllOlOl\
O\
OOl\

)
.
GetMagni\
t\
udeS\
qr\
d
(
)
;
if
(
lllOOlO\
lOl\

<
lOOOlOO\
OlOOO
)
{
float\

lOlO\
llOll\
l
=
lOOOlOOOO\
O
.
Do\
t
(
lO\
l\
lllOOOl
-
lOOl\
O\
l\
O\
lll
)
;
if
(
lOlO\
llOll\
l
<
llO\
ll\
ll\
OlO\
l
.
lOllOO\
l\
O\
OO\
l
)
{
Vec3
ll\
l\
OllOO\
llO
=
lOO\
lO\
lOl\
l\
l
+
lO\
lOl\
lOll\
l\

*
lOOO\
lOOOOO
;
llO\
ll\
llOl\
Ol
.
Ini\
ti\
a\
lise\

(
0
,
0
,
lO\
lOl\
lOlll
/
lOOlOllOOO\

,
lO\
lOllOl\
ll
,
lO\
llllO\
OOl
,
ll\
l\
lOOOOO\
O\
O
.
GetNormal
(
)
)
;
llOllllO\
lOl
.
SetCollis\
ionOb\
je\
ctA
(
const_cast
<
Coll\
i\
s\
i\
onO\
b\
jec\
tC\
ylinder
*
>
(
this
)
)
;
lllOllOOlOl
=
true\

;
}
}
}
lO\
OO\
lO\
O\
Ol\
OO\
l
=
llllOOO\
OOOO
.
Dot
(
lO\
O\
l\
OlO\
lll
-
ll\
lOlOl\
OOOO
)
;
lOOOlOOO\
lO\
lO
=
lll\
lOOO\
OO\
OO
.
Dot
(
lOOlOllOOl
-
ll\
l\
O\
lO\
lO\
OOO
)
;
if\

(
lOOOlOO\
OlO\
Ol\

<
0.0f
&&
lO\
OOl\
OOO\
l\
OlO\

>
0.0f
)
{
llllOl\
OO\
Ol
=
lOOOlOO\
O\
lOOl
/
(
lO\
OOlO\
OO\
lO\
Ol
-
lOOO\
lOO\
OlOlO
)
;
lOllll\
O\
OOl\

=
lOO\
lOl\
Olll
+
(
lO\
OlO\
llOO\
l
-
lOO\
lOlOlll\

)
*
ll\
l\
lOlOOO\
l\

;
flo\
at\

ll\
l\
OO\
l\
OlO\
l
=
(
lOllllO\
OO\
l
-
lll\
OlO\
lOOOO
)
.
Ge\
tMag\
nitudeSqrd\

(
)
;
if
(
lllOOlOlOl\

<
lOO\
Ol\
OOOlO\
OO
)
{
fl\
oa\
t\

lOlOllOlll\

=
lOOOlOOOOO
.
Dot
(
lOll\
ll\
OO\
Ol
-
lO\
OlOl\
Olll
)
;
if
(
lOlOllOll\
l
<
llOlll\
lOlOl
.
lO\
llOOlOOOl
)
{
Vec3
lllOllOOllO\

=
lO\
Ol\
O\
lOl\
ll
+
lOlOllO\
lll\

*
lOOOlO\
OOOO
;
llO\
ll\
llOlOl
.
Ini\
ti\
a\
l\
ise
(
0
,
0
,
lO\
lOllOlll
/
lOOlOllO\
O\
O\

,
lOlOll\
Olll
,
lO\
ll\
llOOOl
,
-
llll\
OOO\
OOO\
O
.
GetN\
o\
rm\
a\
l
(
)
)
;
llO\
ll\
llOl\
Ol\

.
SetCo\
ll\
isionObjec\
tA
(
con\
st\
_\
cas\
t
<
Co\
l\
l\
i\
sionO\
bjectCylinder
*
>
(
thi\
s
)
)
;
lllOllOOlOl
=
tru\
e
;
}
}
}
if
(
Geo\
metry
::
Test\
Sph\
ereM\
o\
ve\
men\
tA\
gainstLine
(
lO\
OlOl\
Olll\

,
lOOlOllOOl
,
lll\
OlOl\
O\
OOO
,
lllOl\
OlOOO\
l
,
lOlOlOOlOOO\

,
llll\
OlOOOl
,
lOll\
llOOOl
,
lOlll\
lOOl\
O\

)
)
{
lO\
llllOO\
Ol\

+=
lOll\
llOOl\
O
*
lOlO\
l\
OO\
lOO\
O
;
float
lO\
lOllO\
lll
=
lOOOlOOOOO
.
Dot
(
lOll\
l\
lOOO\
l
-
lOOl\
O\
l\
Olll
)
;
if
(
lO\
lOll\
O\
l\
ll
<
ll\
O\
l\
ll\
l\
OlO\
l
.
lO\
llOO\
lOOOl
)
{
llOllllOl\
O\
l
.
Initialise
(
0
,
0
,
lOl\
OllOl\
l\
l
/
lOOlO\
ll\
O\
O\
O
,
lOlOl\
lO\
lll
,
lOllllOOOl\

,
lOllllO\
O\
l\
O
)
;
ll\
Ollll\
Ol\
Ol
.
SetCo\
l\
lisionOb\
ject\
A
(
co\
n\
s\
t\
_c\
ast\

<
Collisi\
onObj\
ectCylinder\

*
>
(
this
)
)
;
ll\
l\
Ol\
lOOl\
Ol
=
true
;
}
}
retu\
r\
n
lll\
OllOOlOl
;
}
Co\
l\
lisionObjectCylin\
der
*
TAC_CALL
Col\
li\
sionOb\
j\
ectCyli\
nder
::
Cre\
ateNe\
w
(
)
{
Colli\
s\
ionObj\
e\
ctCyli\
n\
de\
r
*
lOlOll\
OOl\
ll
;
lO\
OO\
OOllOOO\

(
lOlOllOOlll
,
Col\
l\
isio\
nOb\
je\
ct\
Cylinder
)
;
return
lO\
lOl\
lOOlll\

;
}
Collis\
ionObjectCylind\
e\
r
::
Col\
li\
s\
io\
nObj\
e\
c\
tCylinder\

(
)
:
Coll\
i\
si\
onO\
b\
j\
e\
ct\
Simple
(
Collis\
i\
on\
Object\

::
TYPE\
_\
C\
YL\
INDER
)
{
lllOlO\
l\
OOOO
.
Cle\
ar\

(
)
;
ll\
lO\
lOlOOOl
.
Cle\
a\
r
(
)
;
lOl\
OlOO\
lOOO\

=
0.0f
;
}
Collisio\
n\
O\
bje\
ctC\
ylinder
::
~
Collisio\
nO\
bje\
c\
tCylind\
e\
r
(
)
{
Finalise
(
)
;
}
#ifndef DOXYGEN
inli\
ne\

flo\
at
TAC_CALL\

lOO\
Ol\
OOOlOll
(
con\
st\

Vec3
&
lOlllOl\
lOl
,
const
Vec\
3
&
ll\
OlO\
O\
OlO\
l\
O
,
flo\
at
lOOOlOOO\
ll\
OO\

,
co\
nst\

Vec\
3
&
lOl\
llO\
llll
,
const
Vec3
&
llO\
l\
O\
OlO\
OO\
O\

)
{
Vec3
llOOllOl\
Ol\
O
=
lOl\
llOllOl\

.
Cross
(
lOll\
lOl\
lll
)
;
flo\
a\
t
lOOOl\
OOOOll\
O
=
lOlllO\
l\
ll\
l
.
Dot
(
llOlO\
OOlOlO\

-
llOlO\
OlO\
OOO
)
+
lO\
O\
OlOOO\
ll\
OO\

*
llOOllOlO\
lO
.
Get\
Magn\
itu\
de
(
)
;
return
lOOOlO\
O\
OOl\
lO
;
}
inl\
ine\

boo\
l
TA\
C\
_C\
A\
LL
lOOOl\
OOOllOl
(
con\
s\
t
Vec3\

&
lOOOOlll\
ll
,
const\

Vec3\

&
lOO\
Ol\
O\
OO\
OO
,
const
Ve\
c3
&
v3\
Center
,
float\

llll\
O\
l\
l\
lll
,
float
&
lO\
O\
OlOOO\
lllO
,
fl\
oa\
t
&
lOOOl\
OO\
Oll\
ll\

)
{
fl\
oat
lOlOOOlOOl\
O\

=
(
v3Cente\
r
-
lOOO\
Olllll
)
.
Dot
(
lO\
OOlOOOOO
)
;
Vec3
llO\
lOOllOOl
=
lOOOOlllll
+
lO\
lOOOlOOlO
*
lOO\
O\
lO\
OOOO
;
float
lOll\
lOOlOl
=
(
ll\
OlO\
Ol\
lOOl
-
v3Center
)
.
GetMa\
gnitud\
eSqrd
(
)
;
if\

(
lOll\
l\
OOlOl\

>
llllOlllll\

*
llllO\
lllll
)
return
fa\
lse
;
flo\
at\

ll\
O\
lOOllOlO
=
Sqr\
t
(
llllO\
lllll
*
llllO\
lllll
-
lOlllOOlOl
)
;
lOOO\
l\
O\
O\
OlllO
=
lOlO\
OOlOOlO
-
llOlOOll\
Ol\
O
;
lOO\
O\
lO\
OO\
lll\
l
=
lO\
lOO\
Ol\
OO\
l\
O
+
llO\
lOOll\
OlO
;
ret\
urn\

true
;
}
inli\
n\
e
void
TAC_CA\
LL
lOOOlO\
Ol\
OOOO
(
co\
n\
st
Vec\
3
&
lOO\
O\
lO\
O\
lOOOl
,
Vec\
3\

&
lOOOlOO\
lOO\
lO
,
co\
nst
Vec3
&
lO\
llOOOl\
lO
,
cons\
t
Vec3
&
lO\
OO\
lO\
Ol\
O\
O\
ll
,
con\
st
Vec\
3
&
llOOllOlOll
,
fl\
oa\
t
lOOOlOOlO\
lOO
)
{
const
fl\
o\
at
lOllOlOlOl
=
0.0001f
;
if
(
(
1.0f
-
Fab\
s\

(
lO\
l\
lOO\
OllO\

.
Dot\

(
ll\
OO\
llO\
lO\
ll
)
)
)
<
lO\
ll\
OlOlOl\

)
ret\
urn
;
Ve\
c3
lllllOlOlO
=
lO\
OOl\
OOlOOl\
O
-
lO\
OOlO\
OlOO\
O\
l\

;
Vec\
3\

lO\
llll\
OllO
=
Ve\
c3\

::
Cr\
oss\

(
ll\
lllOlO\
lO
,
llO\
Oll\
O\
lOll
)
;
Vec3
lOl\
l\
l\
lO\
lll\

=
lOllllOll\
O
.
Cros\
s\

(
ll\
O\
O\
llO\
lOll
)
;
floa\
t\

lOl\
ll\
ll\
OOO\

=
lOll\
ll\
Ol\
ll
.
Dot
(
lO\
OOlOOlO\
OOl
-
lOOOlOOlO\
Oll\

)
;
fl\
oat
lOll\
l\
llOOl
=
lOlll\
lOlll\

.
Dot
(
lO\
O\
Ol\
OOlOOlO
-
lOOOlOOlOO\
ll
)
;
float
lO\
lll\
llOlO
;
if
(
Fa\
bs
(
lOlllll\
OO\
l
-
lOl\
llllOOO
)
<
lOllO\
lOlOl\

)
retur\
n\

;
else\

lOl\
lll\
lOl\
O
=
lOlllll\
OOO\

/
(
lOll\
lllOOO\

-
lOllll\
lOOl\

)
;
Vec3
llll\
lOOlll\

=
lOOOlOOlOOO\
l
+
ll\
lll\
O\
lOl\
O\

*
lOllll\
lOlO
;
lOl\
l\
lllOOO
=
llOOllOl\
O\
ll
.
Do\
t\

(
lllllOOll\
l\

-
lOO\
OlO\
Ol\
OOll
)
;
Ve\
c3
lllll\
OllOl
=
lOOOl\
OOlOO\
ll
+
ll\
O\
OllOl\
Oll\

*
lO\
l\
llllOOO\

;
float
lO\
ll\
lOOlOl
=
(
llll\
lOllOl
-
ll\
lllOOl\
ll\

)
.
GetMag\
nitudeSq\
rd
(
)
;
if
(
lOll\
lOOlOl
>
lOOOlOOlO\
lOO
*
lOO\
Ol\
O\
OlO\
lOO
)
re\
turn\

;
flo\
at
ll\
OlOOllOlO
=
Sqrt
(
lOOOlO\
Ol\
O\
lOO\

*
lOO\
OlOOl\
O\
lOO
-
lO\
lll\
O\
OlO\
l
)
;
flo\
a\
t
lOOOlOOlOlO\
l
=
lOl\
l\
OOO\
ll\
O
.
Cross\

(
llOOllO\
lOll\

)
.
Ge\
t\
Magnitu\
de\

(
)
;
if
(
Fabs\

(
lOO\
O\
l\
OOlOlOl
)
<
lOl\
lOlOlO\
l
)
retur\
n
;
llOlOOllOlO
/=
lOOO\
lOOlO\
lOl
;
Vec3\

lO\
OOlOOl\
Oll\
O
=
lllllOOlll
+
lOllO\
OOllO
*
ll\
OlOOllOl\
O
;
if
(
lOllOOOllO
.
Dot
(
lO\
OOlOOlO\
llO
-
lOO\
OlO\
OlO\
Ol\
O
)
>
0.0f
)
ret\
u\
rn
;
lOO\
OlO\
OlOO\
lO
=
lOO\
O\
lOOlOll\
O
;
}
inlin\
e
floa\
t\

TA\
C_\
CAL\
L\

lO\
OOlOO\
OlOll
(
con\
st\

Ve\
c3
&
lOlll\
OllOl\

,
const
Vec3
&
llOl\
OOO\
l\
OlO\

,
float
lOOOlOOOllOO\

,
con\
s\
t
Vec\
3
&
lOlll\
Oll\
ll\

,
con\
st
Vec3\

&
llOlO\
OlOOOO
,
float
lOOOlO\
OlOlll
,
Vec3
&
lOlllOlOl\
O
,
Vec3
&
lOllllOOl\
O
)
{
if
(
lOlll\
OllOl
.
Dot
(
lOl\
llO\
llll
)
>
0.1f
)
ret\
urn\

-
1.0f
;
Vec3
lOOOlO\
OllOOO\

=
lO\
l\
llOl\
lOl
.
Cross
(
lOlllOllll
)
;
float\

lO\
O\
OlO\
OlO\
lOl
=
lOO\
OlOOllOOO
.
GetMagn\
i\
tude
(
)
;
if
(
Fa\
bs\

(
lOOOlOOlOlOl
)
<
0.000000001f
)
return
-
1.0f
;
lOOOlOOll\
OOO\

/=
lOOOlOOlOlOl\

;
Vec3
lllOlO\
lOllO\

=
-
lO\
l\
llOl\
lOl
.
Cros\
s
(
lOO\
OlO\
Oll\
OOO\

)
*
lOl\
llOl\
lll
.
Do\
t
(
ll\
OlOOl\
O\
OO\
O
-
llO\
lOOO\
l\
OlO
)
/
lOOO\
l\
OOl\
OlOl\

;
Ve\
c3
lO\
O\
O\
lOO\
llOOl\

=
llOl\
OOOlOl\
O
+
ll\
lOlOlOllO\

;
fl\
oat\

lO\
OOlOOl\
lOlO
;
float
lOOO\
lOOll\
Oll
;
if
(
!
lO\
OOl\
O\
O\
O\
llOl\

(
lO\
OO\
lOOl\
l\
OO\
l
,
lOOO\
lOO\
llO\
OO
,
llOlOOO\
lOl\
O
,
lOOOlOOOllO\
O
,
lOO\
OlOO\
ll\
OlO\

,
lOOOl\
O\
O\
llOll
)
)
retu\
rn
-
1.0f
;
float
lO\
OOl\
OO\
ll\
l\
O\
O
;
floa\
t
lOOO\
lOOlllOl
;
if
(
!
lOOOlOOOllO\
l
(
lOOOl\
O\
O\
llOOl
,
lOOOl\
OOllOOO
,
llO\
lOOl\
OOOO
,
lOOOl\
OOlOlll
,
lOO\
OlOO\
ll\
lO\
O
,
lOOOlOOlllOl
)
)
re\
turn\

-
1.0f
;
if
(
lOOOl\
OOllOll\

>
lOO\
OlOO\
ll\
lOO
&&
lOO\
OlOOl\
llO\
l\

>
lOOOlOO\
llO\
l\
O
)
{
fl\
oat\

lOOllOOOOl\

=
lOOOlOOllOlO
>
lOOOlOOlllOO
?
lOOO\
lOO\
llOlO\

:
lOOOl\
OOl\
llOO
;
fl\
o\
at\

lOO\
l\
l\
O\
OO\
l\
O
=
lO\
OOlOOllO\
l\
l
<
lO\
O\
O\
lOOll\
l\
Ol
?
lOO\
Ol\
O\
OllO\
l\
l\

:
lOO\
OlOOlllOl
;
fl\
o\
at
lO\
OOlO\
Ollll\
O
;
flo\
a\
t
lOOO\
l\
OOl\
llll\

;
float\

lOO\
OlOlOOOOO\

=
(
lO\
OllO\
OOOl
+
lO\
OllOO\
OlO
)
*
0.5f
;
Vec\
3
llOllO\
OlO\
O
=
lO\
OOlOO\
llO\
Ol
+
lOOOlOOl\
lO\
OO
*
lOO\
Ol\
OlO\
O\
O\
O\
O
;
Vec3
llOOlllO\
OOO
=
lOOOlOO\
l\
lOO\
O
.
Cr\
o\
s\
s
(
lOlllOllOl
)
;
if
(
ll\
O\
Olll\
OOO\
O\

.
Dot
(
lOlllOl\
ll\
l
)
<
0.0f
)
llO\
O\
l\
l\
lO\
OOO
=
-
ll\
OOlll\
OOO\
O
;
fl\
oat\

lOO\
Ol\
OlO\
OOO\
l
=
k_\
fMax\
Float
;
Ve\
c3
llllOOOOl\
O
;
if
(
lOOO\
lOOO\
llOl
(
llOl\
lOO\
lO\
O
,
llOOlll\
OO\
OO
,
llOlOOOl\
OlO
,
lO\
OO\
lOOOl\
lO\
O
,
lOOOlOOll\
llO
,
lOOOlO\
Oll\
lll
)
)
{
ll\
llOOO\
Ol\
O
=
llOllO\
OlOO
+
llOOlllOOOO\

*
lOO\
OlOOl\
llll
;
lOOOl\
OOlOOOO\

(
llOllOO\
lO\
O
,
llllO\
OO\
OlO
,
llOOlll\
OOO\
O
,
llOlO\
OlO\
OO\
O
,
lOll\
lOll\
ll
,
lOO\
OlO\
O\
lOlll
)
;
lOO\
OlOlO\
O\
OOl\

=
-
lOll\
lOllll
.
Dot
(
ll\
OlOOlOOOO
-
llllO\
OO\
OlO\

)
;
}
llOOl\
llOOOO\

=
lOOOlOOllOO\
O
.
Cr\
oss\

(
lOll\
lOll\
ll
)
;
if
(
ll\
OOlllO\
O\
O\
O
.
Do\
t\

(
lOll\
l\
O\
ll\
Ol\

)
<
0.0f
)
ll\
OOlllO\
OO\
O\

=
-
llO\
Ol\
llO\
O\
OO
;
fl\
oat\

lO\
O\
OlOlO\
O\
Ol\
O
=
k_fMax\
Fl\
oat
;
Vec\
3\

ll\
ll\
O\
OOO\
O\
l
;
if\

(
lO\
OO\
l\
OOOllO\
l\

(
ll\
Ol\
lOOlOO
,
llOOll\
lOO\
OO\

,
llOl\
OOlOO\
O\
O
,
lOO\
OlOOlO\
lll
,
lO\
OO\
l\
OO\
llllO\

,
lOOO\
l\
OOlll\
ll
)
)
{
llllOOOOO\
l
=
llOllOOl\
OO
+
ll\
O\
OlllOOOO
*
lO\
OOlOOll\
lll
;
lOOOl\
OOl\
OOO\
O\

(
ll\
O\
llOOlOO
,
ll\
llOOO\
O\
O\
l
,
ll\
OOl\
llOOOO
,
ll\
OlO\
OOlO\
l\
O
,
lOlll\
OllO\
l
,
lOOOlOOOllO\
O
)
;
lOOOlOlOOO\
lO
=
-
lOlllOll\
O\
l
.
Dot\

(
llO\
lOOO\
lO\
lO
-
llllOOO\
O\
O\
l
)
;
}
if
(
lOO\
O\
lO\
l\
OO\
O\
lO
<
lOOOlOlO\
O\
OO\
l
)
{
if
(
lO\
O\
O\
lOl\
OO\
OlO\

==
k_fMa\
x\
Fl\
oat
)
return\

-
1.0f
;
lOll\
lOlOlO
=
lll\
lOO\
OO\
Ol
;
lOl\
lll\
OOl\
O
=
lOl\
ll\
OllOl
;
re\
turn\

lOOO\
lO\
lO\
O\
O\
lO
;
}
else
{
if
(
lOOO\
lOlOOOOl\

==
k_fMa\
xFloa\
t
)
ret\
u\
rn
-
1.0f
;
lOlllO\
lOl\
O
=
llll\
OOOOlO
;
lOll\
ll\
OOlO
=
-
lOlllO\
llll\

;
return
lOOOl\
OlOOOO\
l
;
}
}
els\
e
{
return
-
1.0f
;
}
}
bo\
o\
l
TA\
C_CALL
lO\
OOlOlOOOl\
l
(
cons\
t\

Ve\
c3\

&
llllO\
OlO\
ll
,
co\
n\
st\

Vec3\

&
llllOOllOO
,
const
Vec3\

&
ll\
llOOllOl\

,
const
Vec3
&
llllOO\
l\
l\
lO
,
Vec3\

&
lllllOOlll
,
Vec3
&
lllllOl\
lO\
l\

)
{
co\
nst\

fl\
oat\

lO\
llO\
lO\
lOl
=
0.0001f
;
Vec\
3
llll\
lOlOlO
=
ll\
llOOl\
lOO\

-
ll\
ll\
O\
O\
l\
O\
ll
;
Ve\
c\
3\

llll\
lOlOl\
l
=
ll\
l\
lOOlllO\

-
lll\
lO\
OllOl
;
Vec3
lOl\
lllOllO
=
Vec3\

::
Cro\
s\
s
(
lllllOl\
OlO
,
llll\
lOl\
Oll
)
;
Vec3
lOllllO\
ll\
l\

=
lOl\
lllOl\
l\
O\

.
Cr\
o\
s\
s
(
lllll\
OlOl\
l
)
;
fl\
oat
lOlllllOOO
=
lO\
lll\
lOl\
ll
.
Dot\

(
lll\
l\
OOlOl\
l
-
llllOOllO\
l\

)
;
floa\
t
lO\
l\
lll\
lO\
Ol
=
lOl\
lllOlll
.
Dot
(
llllOOllOO
-
llllOOllOl\

)
;
flo\
at
lOlllllOlO\

;
if
(
Fabs
(
lOll\
lllOOl
-
lOll\
lllO\
OO
)
<
lOllO\
lOlOl
)
{
fl\
oat
lOllllO\
Oll\

=
ll\
l\
l\
lOl\
O\
ll
.
Ge\
tMagni\
tude
(
)
;
if\

(
lOllllO\
Ol\
l
<
lOll\
OlOlO\
l
)
{
return
false
;
}
else\

{
return
false
;
ll\
lllOlOll
/=
lOll\
llOOll
;
Vec3\

ll\
llO\
Olll\
l
;
Ve\
c3
lll\
lOlOOOO
;
if
(
lllll\
O\
l\
OlO
.
Dot
(
llll\
l\
OlOll
)
<
0.0f
)
{
llll\
lOl\
Oll
=
-
ll\
l\
llOlO\
l\
l
;
llllOOl\
lll
=
ll\
l\
lOOl\
llO
;
llllOlOOO\
O
=
ll\
llOOl\
lOl\

;
}
el\
s\
e
{
lll\
lOOl\
l\
ll
=
llllOO\
l\
lO\
l
;
llll\
OlO\
OOO\

=
ll\
ll\
O\
Oll\
lO\

;
}
lOlll\
llOOO
=
lllll\
OlOll
.
Dot
(
llllOOll\
OO
-
ll\
ll\
O\
O\
lll\
l
)
;
if
(
lO\
lllllO\
OO
<
0.0f
)
retu\
rn
fal\
se
;
lOl\
lll\
lOOl
=
ll\
lll\
OlOl\
l
.
Dot
(
lll\
lOOlOll
-
llllOlOOOO\

)
;
if\

(
lO\
lllllOOl
>
0.0f
)
re\
turn\

fal\
se
;
lO\
ll\
l\
llOO\
O
=
lllllOl\
Ol\
l
.
Dot\

(
llllOO\
lOll\

-
llllOO\
llll
)
;
if\

(
lOlll\
llOOO
<
0.0f
)
lOlllllOOO
=
0.0f
;
lOl\
ll\
llOOl
=
ll\
lll\
OlOll
.
Dot
(
ll\
ll\
OOllO\
O\

-
llllOO\
llll
)
;
if\

(
lOlllllOOl\

>
lOllllOOl\
l
)
lO\
ll\
lllOO\
l
=
lOl\
ll\
lO\
Oll
;
llll\
lOl\
lO\
l\

=
ll\
llOOllll
+
ll\
lll\
OlOl\
l\

*
(
(
lOllll\
lO\
OO\

+
lOll\
l\
llOO\
l
)
*
0.5f
)
;
lOlllllOOO
=
lll\
llOl\
O\
lO
.
Do\
t\

(
llllOOl\
O\
ll
-
lllllOll\
Ol
)
;
lOllll\
lO\
Ol
=
lllll\
OlOlO
.
Dot
(
llllOOll\
OO
-
lll\
ll\
Oll\
Ol
)
;
if
(
Fa\
bs
(
lO\
ll\
lllO\
Ol
-
lOl\
llllO\
O\
O
)
<
lOllOl\
OlOl
)
llll\
lOOll\
l
=
(
llllOOl\
Ol\
l
+
llll\
OO\
l\
lOO
)
*
0.5f
;
else
ll\
lll\
OOl\
ll
=
lll\
lOOl\
Oll
+
ll\
l\
llOlOlO
*
(
lO\
l\
llllOO\
O
/
(
lOlllllOOO
-
lOll\
l\
l\
lOO\
l
)
)
;
re\
t\
urn
tr\
ue
;
}
}
else
{
lO\
l\
llll\
O\
l\
O\

=
lOlllll\
OO\
O
/
(
lOll\
lllOOO
-
lO\
llll\
lO\
Ol
)
;
}
Clam\
p
(
lOl\
llllOlO
,
-
1.0f
,
1.0f
)
;
ll\
l\
l\
lOOl\
ll
=
llllO\
OlOll
+
lllll\
OlOlO
*
lOll\
l\
llO\
lO
;
lOl\
ll\
ll\
O\
OO
=
lll\
llO\
l\
Oll
.
Dot
(
llllO\
OllO\
l
-
lll\
llOO\
l\
ll
)
;
lO\
l\
l\
lll\
OO\
l
=
ll\
l\
l\
lO\
l\
Oll
.
Do\
t\

(
ll\
llO\
Oll\
lO\

-
lllllOOlll
)
;
if
(
Fa\
b\
s
(
lOl\
ll\
l\
lOOl
-
lOll\
lllOO\
O\

)
<
lOllO\
lOlOl
)
return
fa\
ls\
e
;
else
lOl\
ll\
llO\
lO
=
lOlllllOOO\

/
(
lOlllllOO\
O
-
lOllll\
l\
OO\
l\

)
;
if
(
lO\
lllllOlO\

<
0.0f
||
lOlllll\
OlO
>
1.0f
)
ret\
urn
fals\
e\

;
ll\
lll\
O\
llOl
=
llll\
OOll\
Ol
+
ll\
lllOlOl\
l
*
lOlllllOlO
;
ret\
ur\
n
tr\
ue
;
}
float
TAC\
_\
CALL
lOOOlOlOOlOO
(
const
Vec3\

&
lOlllO\
l\
l\
Ol\

,
co\
nst
Vec\
3\

&
llOlOOO\
l\
Ol\
O
,
float\

lOOOlOO\
Ol\
lO\
O
,
con\
st
Vec3
&
lOl\
llOlll\
l\

,
const
Vec3
&
llOlOOOl\
l\
l\
l\

,
co\
n\
st
Vec3
&
llOlOOl\
OOOO
,
flo\
at\

lOOOlOO\
l\
Olll
,
Vec3
&
lOll\
lO\
l\
OlO
,
Ve\
c3
&
lOlll\
lOOlO\

)
{
Vec3
llOO\
lllO\
OO\
O\

=
llOlO\
OlO\
OOO\

-
llO\
lO\
OOlOl\
O
;
llOO\
lllOOO\
O
-=
lOlllO\
l\
lll
*
llO\
O\
ll\
lOOOO
.
Do\
t
(
lO\
lllO\
llll
)
;
ll\
OO\
lllOOOO
-=
lO\
ll\
lOllOl\

*
llOOlllO\
O\
OO
.
Dot\

(
lOl\
llO\
l\
lOl\

)
;
float
lO\
llll\
OOll
=
llOOlllOOOO
.
GetMagnit\
ude
(
)
;
if
(
lOllllOOl\
l
<
0.0001f
)
llO\
Olll\
OOO\
O
.
Cl\
e\
ar
(
)
;
el\
se
llOOlllOOOO
/=
lOll\
ll\
OO\
ll
;
Vec3
ll\
OlOOl\
lOO\
l
;
Vec3
lO\
O\
O\
lO\
l\
OOlO\
l
;
if
(
!
lO\
OO\
lOlOOO\
l\
l
(
llOl\
O\
OO\
l\
O\
lO
,
ll\
O\
l\
O\
OOlO\
lO
+
llOO\
lll\
O\
O\
OO
*
lOOOlOOOll\
O\
O
,
llOlOOO\
ll\
l\
l\

,
llOlOOl\
OOO\
O
,
ll\
O\
lO\
OllOO\
l
,
lO\
OOlO\
l\
OOlO\
l
)
)
return\

-
1.0f
;
Ve\
c3
lOOOlOOO\
OO
=
llOl\
O\
OllOOl\

-
lO\
OOlO\
lOOl\
Ol
;
fl\
oat
lOOO\
lOOOOllO
=
lOOO\
lOOOO\
O
.
GetMag\
n\
it\
ude
(
)
;
if
(
lO\
O\
OlOOOOll\
O
>
lO\
OOlOO\
l\
O\
lll\

)
ret\
u\
rn
-
1.0f
;
if
(
lOO\
OlOOOOllO
<
0.00001f
)
retur\
n
-
1.0f
;
lOO\
OlO\
OO\
O\
O
/=
lOOOlOO\
OO\
llO\

;
if
(
lO\
OOl\
OOOOO\

.
Do\
t
(
llOlOOOl\
OlO
-
llO\
lOO\
lOO\
OO\

)
<
0.0f
)
{
lOOOlOO\
O\
Oll\
O\

=
lO\
OOlO\
O\
lO\
ll\
l
+
lOOO\
lOOOOl\
lO
;
lOOOl\
OOOOO
=
-
lO\
OO\
l\
O\
O\
OOO
;
}
el\
se\

{
lOOOlOOO\
Oll\
O\

=
lOOOlOOlOlll\

-
lO\
OOl\
OOOO\
ll\
O
;
}
if
(
lOOO\
lO\
OO\
OO
.
Dot\

(
lOl\
llOl\
lOl
)
<
0.0f
)
return
-
1.0f
;
if
(
lOOO\
lO\
OO\
Ol\
lO
>
0.0f
)
{
lO\
OOlOOlOOOO
(
lOOOl\
O\
lOOl\
O\
l
,
llO\
lOOllOOl
,
-
lOOO\
lOOO\
OO
,
llOl\
OOlOOOO
,
lOll\
lOllll\

,
lOOOlOO\
lOl\
ll
)
;
float
lO\
lOOOlOOlO\

=
lOlllOlll\
l
.
Dot
(
lOll\
l\
Ol\
l\
Ol\

)
;
if\

(
lO\
lOO\
OlO\
OlO\

<
0.1f
)
{
float\

ll\
OO\
llll\
OOO
=
lOlllOlll\
l
.
Dot\

(
ll\
OlO\
Ol\
lOOl
-
llO\
lOO\
Ol\
lll
)
;
if
(
llOOl\
l\
llOOO
<
lOO\
OlOOOO\
llO
&&
lOlllOlll\
l\

.
Dot
(
ll\
OlO\
Ol\
l\
OOl
-
llOlOO\
Ol\
OlO\

)
>
0.0f
)
{
lOOOlOOOOll\
O
=
llOOll\
llOOO
;
lO\
l\
llOlOl\
O\

=
llOlOOl\
lOO\
l
;
lOllll\
O\
OlO
=
-
lOlllOll\
ll
;
}
else
{
lO\
lllOl\
OlO
=
ll\
OlO\
OllOO\
l
;
lOlll\
lOOlO
=
lOOOlO\
OOOO
;
}
}
if
(
lO\
l\
OOOlOOlO
>
-
0.1f
)
{
float
llO\
O\
ll\
llO\
O\
l
=
lOlllOllll
.
Dot\

(
llOlO\
O\
lO\
OOO
-
llOlOOll\
OOl
)
;
if
(
llOO\
lll\
l\
OOl
<
lOO\
OlO\
OO\
Oll\
O
&&
lOlllO\
ll\
ll\

.
Do\
t
(
llOlOO\
llO\
Ol
-
llO\
lOOOl\
O\
l\
O
)
<
0.0f
)
{
lOOOlOO\
OO\
llO\

=
llO\
Oll\
llO\
Ol
;
lOl\
llOlO\
lO
=
ll\
OlOOllOOl
;
lO\
ll\
ll\
OO\
lO\

=
lOl\
llOl\
lll
;
}
else
{
lO\
lll\
O\
lOl\
O\

=
ll\
OlOOll\
OOl
;
lOlll\
lOOlO
=
lOOOlOOOOO
;
}
}
}
return
lOOO\
lO\
OOOllO
;
}
inl\
ine\

void
TAC_\
CAL\
L
lOOO\
lOlOOllO
(
cons\
t
Vec3
&
ll\
lll\
l\
lll
,
const
Vec3
&
lO\
lll\
OllO\
l
,
con\
st
flo\
at
lOOO\
l\
OOO\
llOO\

,
const
Vec3
&
lOO\
OOO\
OOOO\

,
const
Vec3
&
lOl\
llO\
l\
lll\

,
cons\
t\

fl\
oat
lO\
OOlOOlO\
l\
ll\

,
lO\
llO\
l\
lOllO
*
lOlllO\
OOOOl
)
{
co\
nst
floa\
t
lOll\
O\
l\
O\
l\
Ol
=
0.0001f
;
Ve\
c3
lO\
OOlOlOOlll
[
4
]
;
Vec\
3
lOOOlOlOlOOO
=
lO\
OOOOOOOO
+
lOl\
llOl\
l\
Ol\

*
lO\
l\
ll\
OllOl
.
Dot\

(
llllll\
l\
l\
l
-
lOOO\
OOOOO\
O
)
;
Vec3
llllO\
O\
OOOOO
=
lOOO\
l\
O\
lOl\
OOO
-
lll\
llll\
ll
;
float
lOOOlOlOl\
OO\
l
=
llllOOO\
O\
OOO
.
GetMag\
n\
itude\

(
)
;
if
(
lOO\
OlO\
lOlOOl
<
lOl\
l\
O\
lO\
lOl\

)
{
if
(
Fabs\

(
lOlllOllOl
.
x
)
<
0.707f
)
lll\
lOO\
OOOOO
=
lO\
lllOll\
O\
l
.
Cr\
ossWith\
UnitX
(
)
;
els\
e\

lll\
lOOOOOO\
O
=
lOlllOllOl
.
Cro\
ss\
W\
it\
hUnitY
(
)
;
lOOOl\
OlOl\
OOl
=
llllOOOO\
O\
OO
.
GetMagni\
tud\
e
(
)
;
TA_\
ASSERT
(
lOOOlOlOl\
OOl
>
lO\
llOlOlOl\

)
;
llll\
O\
OOOOOO
/=
lOOOl\
OlOl\
O\
O\
l
;
Vec\
3
lOllllO\
l\
lO
=
llllOOO\
OOOO
.
Cross
(
lOlllOllOl
)
;
if
(
lOOOlOO\
OllOO\

<
lOOO\
lOOlO\
lll
)
{
lOOOlO\
lO\
O\
lll
[
0
]
=
ll\
ll\
llll\
l
+
llllOOOOO\
OO
*
lOOOlOOOllOO
;
lOOO\
lO\
l\
OO\
lll\

[
1
]
=
lll\
l\
lllll\

-
llllOOOOOOO
*
lOOOlOOOllOO
;
lOOO\
l\
OlOOl\
ll
[
2
]
=
lll\
lll\
l\
l\
l\

+
lO\
llllO\
llO
*
lOO\
Ol\
OOOllOO
;
lO\
OOlOlOOlll
[
3
]
=
lllllll\
ll\

-
lOllll\
OllO
*
lOOOlOOOllOO
;
}
els\
e
{
lOOOlOlOOlll
[
0
]
=
lOOOlOlOlO\
OO
+
lll\
lO\
OOO\
OOO
*
lOOOlO\
O\
lOl\
ll\

;
lOOOlOlO\
Olll\

[
1
]
=
lOO\
OlOlO\
l\
OOO
-
ll\
llO\
OOOOOO\

*
lOOOlOOlOll\
l
;
lOO\
O\
l\
O\
lOOlll
[
2
]
=
lOO\
OlOlOl\
OO\
O
+
lOllllO\
llO
*
lOOOl\
OOlOlll
;
lOOOl\
OlOOl\
l\
l
[
3
]
=
lOO\
Ol\
OlOl\
OOO\

-
lOl\
ll\
lOllO\

*
lO\
OOlOO\
lOlll
;
}
}
el\
se
{
lll\
lOOOOOO\
O\

/=
lO\
OOlOlOlO\
O\
l
;
Vec3
lOllllOllO
=
ll\
ll\
OOO\
OOOO
.
Cros\
s
(
lOlllOllOl
)
;
flo\
at
lOOOl\
OlOl\
OlO
=
(
lOOO\
l\
O\
OlO\
ll\
l
*
lOOOlO\
OlOlll\

-
lOOOlOOOll\
O\
O
*
lOOO\
l\
OO\
OllOO
-
lOO\
Ol\
OlOlOOl
*
lO\
OO\
l\
OlO\
lOO\
l
)
/
lOOOl\
OlOl\
OOl\

*
0.5f
;
if\

(
lOO\
OlOlOlOl\
O\

>=
0.0f
||
lOO\
O\
lOlOlOlO\

<=
-
lO\
OO\
l\
OlO\
l\
O\
Ol\

)
{
if
(
lOOOlOOOllOO
<
lO\
O\
OlOOlOlll\

)
{
lOO\
OlOlO\
Oll\
l
[
2
]
=
llll\
ll\
lll
+
lOllllOllO\

*
lOOOlOOOllOO
;
lOOOlOlOOlll
[
3
]
=
lll\
l\
ll\
lll\

-
lOll\
llOl\
l\
O
*
lOO\
OlOOOll\
OO
;
}
else
{
lOOOlO\
lOO\
lll
[
2
]
=
lOO\
Ol\
OlOlOO\
O
+
lOl\
ll\
lOllO
*
lOOOlOOlOll\
l\

;
lOOOlOlOOl\
ll
[
3
]
=
lO\
OOl\
O\
lOlOO\
O
-
lOllllOl\
lO
*
lOOOl\
OO\
lOlll\

;
}
if
(
ll\
llOOO\
O\
OOO\

.
Dot\

(
ll\
ll\
lllll
-
lO\
O\
O\
lOl\
O\
lOOO
)
+
lO\
OO\
lOOlOl\
l\
l
>
lOO\
O\
l\
OOO\
l\
lO\
O
)
lO\
OOl\
OlOOll\
l\

[
0
]
=
lllll\
l\
lll
-
llllOOOOO\
OO
*
lOO\
OlOOOllOO
;
el\
s\
e\

lO\
OOlO\
lOO\
lll
[
0
]
=
lOO\
OlOl\
Ol\
O\
O\
O
-
llllO\
OOOOOO\

*
lO\
OOlOOlO\
lll
;
if\

(
llll\
O\
O\
OOOOO
.
Dot\

(
lOOOlOl\
Ol\
OOO
-
ll\
lllllll\

)
+
lOO\
Ol\
OOlO\
lll\

>
lOOOlOOO\
ll\
OO
)
lO\
OOlO\
lOOl\
ll\

[
1
]
=
lll\
l\
lllll\

+
ll\
ll\
OOO\
OOO\
O
*
lO\
O\
OlO\
OOl\
lOO\

;
else
lO\
OOlO\
l\
OOlll
[
1
]
=
lOOOlOl\
O\
l\
OO\
O
+
lll\
lOOOOOOO
*
lOO\
O\
l\
OOlO\
ll\
l
;
}
else
{
float
lO\
OO\
lOlO\
lO\
ll
=
(
lO\
OOlOO\
Oll\
O\
O
*
lO\
O\
O\
l\
OO\
Ol\
l\
OO
-
lOOOlOl\
OlO\
lO
*
lOO\
OlOlOl\
OlO\

)
;
if
(
lOOOlOlO\
l\
Oll
<
0.0f
)
return
;
lOOOlOlOlO\
ll\

=
Sqrt
(
lO\
O\
OlOlOl\
O\
ll
)
;
lOO\
Ol\
O\
lO\
Olll
[
0
]
=
lllllllll\

-
llllOOOOOOO
*
lOOOl\
OlO\
lOl\
O
+
lOllllO\
llO
*
lOO\
O\
l\
OlOlOll
;
lOOOlO\
lO\
O\
ll\
l
[
1
]
=
lll\
l\
l\
l\
lll
-
ll\
l\
l\
O\
OOOOOO
*
lOOOlOlO\
lOlO
-
lOllllOllO
*
lOOOlOlO\
lOl\
l
;
if
(
llllOOOOOO\
O\

.
Dot\

(
llllll\
lll
-
lOOOlOlOlOOO
)
+
lOOO\
lOOlO\
lll
>
lO\
OO\
l\
OOOllOO
)
lO\
OOlOlOOlll\

[
2
]
=
lllllllll
-
ll\
l\
lOOOOO\
OO
*
lOO\
O\
lOOO\
l\
lOO
;
els\
e
lOO\
O\
lOlOO\
lll\

[
2
]
=
lOOO\
l\
OlOlOOO
-
ll\
l\
lOOOOOOO
*
lO\
OOlO\
OlOlll
;
if
(
ll\
llOOO\
OOOO
.
Do\
t
(
lOOOlOlOlO\
OO\

-
llll\
ll\
lll
)
+
lO\
O\
Ol\
OOlOll\
l
>
lOOOlOOOllOO
)
lOOOlOlOOlll\

[
3
]
=
llll\
lllll\

+
llllO\
O\
O\
OOO\
O
*
lOOOl\
OOOllO\
O
;
else
lOOOlOlOO\
lll\

[
3
]
=
lOOOlOlO\
lOOO
+
lll\
lOOOOOOO
*
lOO\
Ol\
OOlO\
l\
ll
;
}
}
for
(
int\

lO\
OOllOO\
Ol
=
0
;
lOOOllOOOl
<
4
;
lOOO\
llOOO\
l
++
)
{
float\

lll\
Oll\
l\
llOl
=
lOl\
llO\
llll\

.
Dot
(
lOO\
OlOl\
OO\
ll\
l
[
lOOO\
ll\
O\
OOl\

]
-
lO\
OOOOOOOO\

)
;
if\

(
lllOlllllOl\

>
0.0f
)
{
Col\
lisi\
on\

lOllOllOlO\
l
;
lOllO\
llOlO\
l
.
Init\
i\
alise
(
Co\
l\
l\
i\
sion
::
lOllO\
Oll\
llO
,
0.0f
,
lllOl\
l\
lll\
O\
l
,
lOOO\
l\
O\
lOO\
lll
[
lOOOl\
lOO\
Ol
]
,
lOlll\
OllOl
)
;
if
(
!
lllOll\
l\
OllO
(
lOll\
OllOl\
Ol\

,
lOl\
llOOOO\
Ol\

)
)
return
;
}
}
}
vo\
id
TAC_C\
A\
LL\

lO\
O\
OlOlOllOO
(
co\
n\
s\
t\

Vec\
3
&
lOOOlOlO\
llOl
,
con\
st
Ve\
c3\

&
lOOOlO\
l\
Ol\
llO
,
const
Vec3
&
lOOOlO\
l\
O\
llll\

,
const\

Vec3
&
lOOO\
lOl\
lO\
OOO
,
con\
st\

Vec3
&
ll\
OO\
llO\
lOl\
l
,
const
Vec3
&
lOOO\
lOllOOOl\

,
floa\
t
lOOOlO\
ll\
OOlO
,
float\

lOOOlO\
OlOlOO
,
fl\
oat\

lOO\
OOOlll\
l
,
bool
lOOOl\
Oll\
OO\
ll\

,
lOllOl\
l\
OllO\

*
lOlllO\
OO\
OOl\

)
{
const
fl\
oa\
t
lOl\
lOlOlOl
=
0.0001f
;
Vec3
lOOO\
l\
O\
ll\
Ol\
OO
;
Vec\
3
lOOOlOllOlO\
l
;
Geom\
et\
ry
::
Find\
C\
lo\
sestPo\
intOnL\
in\
eToLine
(
lO\
OOlO\
lO\
ll\
Ol
,
lOOO\
l\
OlOll\
lO
,
lOOOlO\
lOllll\

,
lOOOlOllOOO\
O\

,
lOO\
O\
lOllO\
lO\
O\

,
lOOOl\
O\
l\
lOl\
Ol\

)
;
Vec3
lOOOlOOOOO
=
lOOOlOll\
OlOO\

-
lOOOlOllO\
lO\
l\

;
flo\
at
llOl\
OO\
lllOl
=
lOO\
OlO\
OOOO
.
GetMag\
nitude
(
)
;
bool
lOOOlOllOllO
=
fal\
s\
e
;
bo\
ol\

lOOOlOll\
O\
lll
=
fals\
e
;
if
(
llOl\
OOll\
lOl
<
lOll\
O\
lOlOl
)
{
lO\
OOlO\
llO\
llO
=
true
;
lOOOlOOOOO
=
(
lOOOlOlOlll\
O\

-
lOO\
OlOlOl\
l\
Ol\

)
.
Cros\
s
(
lOOOlOllOO\
OO
-
lOOO\
lOlOllll\

)
;
llO\
lO\
OlllOl\

=
lOOOl\
OO\
OOO
.
GetM\
agn\
itu\
de\

(
)
;
if
(
ll\
OlO\
Ol\
llOl\

<
lO\
llOlO\
lOl
*
lOllOlOlO\
l
)
{
lO\
OOlO\
OO\
OO
=
(
lOOO\
lOllOOOl
)
.
Cr\
oss
(
lOOOlOllOO\
O\
O
-
lO\
O\
O\
l\
OlOll\
l\
l
)
;
llOl\
OOl\
ll\
Ol\

=
lOOOlOOO\
OO\

.
GetM\
agn\
itude
(
)
;
if
(
ll\
O\
lOO\
lllOl
<
lOllOl\
Ol\
Ol
*
lOl\
l\
O\
lOlOl\

)
{
lOOOlOllO\
lll
=
true
;
}
}
}
Vec3
lOOO\
l\
O\
ll\
lOO\
O\

=
lOO\
O\
lO\
OOOO
.
Cross
(
lO\
OO\
lO\
llOOOl
)
;
Vec3
lOOOlOl\
llOOl
=
lOOOlO\
ll\
lOOO\

.
Cross\

(
lO\
OOlOllO\
OOl
)
;
flo\
at
lOOOlOlllOlO\

=
lOOOl\
Olll\
O\
Ol
.
GetMagnitude\

(
)
;
Vec3\

lO\
OO\
lOlll\
Ol\
l\

=
lO\
OOlOO\
OOO
.
Cros\
s
(
lO\
O\
O\
lOllOOOl
)
;
Vec3\

lOOO\
lOl\
l\
llOO
=
lOO\
O\
lOl\
l\
lOll
.
Cross
(
lOOOl\
Ol\
l\
O\
OOl\

)
;
floa\
t
llll\
ll\
OlOO
=
lO\
OOlOll\
ll\
OO
.
Ge\
tM\
agni\
tude\

(
)
;
if
(
!
lOOOlO\
llOl\
l\
l
&&
(
llO\
lOOlllOl
<
lOllOlOlOl\

||
lO\
OOl\
OlllO\
l\
O\

<
lOllOl\
OlOl\

*
lOllOlOlOl
||
llll\
l\
lO\
lO\
O\

<
lO\
llOlOlOl
*
lOllOl\
OlOl
)
)
{
}
else
{
Ve\
c3
lOO\
Ol\
OllllOl
;
Vec\
3
lOOOlOlllll\
O\

;
if\

(
lO\
OOlOllOlll
)
{
lOOOl\
OllllOl
=
lOOOlOlOll\
Ol\

;
lOOOlOl\
llll\
O
=
lO\
O\
OlOlOl\
ll\
O
;
}
el\
s\
e
{
lO\
OO\
lOOOOO
/=
llOl\
OO\
l\
l\
l\
Ol
;
if
(
lOOOlOll\
OllO
)
llOlO\
OlllOl
=
0.0f
;
lO\
O\
O\
l\
Ol\
ll\
OO\
l
/=
lOO\
OlO\
lll\
OlO
;
float
lO\
lO\
O\
Ol\
OO\
lO\

=
-
lO\
OOlOlll\
OOl
.
Dot\

(
lOO\
O\
lOOOO\
O
)
;
TA\
_\
AS\
SE\
R\
T
(
Fabs
(
lO\
lOOOlOOlO
)
>
0.0f
)
;
floa\
t
llOlOO\
l\
l\
O\
lO
=
lO\
OO\
l\
OllOOlO
;
float\

lOOOlO\
llllll
=
0.0f
;
if
(
llOlO\
OllOlO\

*
lO\
lOOO\
lOOl\
O
>
llO\
lOOl\
ll\
Ol
)
{
ll\
OlOOllO\
lO
=
llO\
lOO\
lll\
Ol
/
lO\
lO\
OOl\
OOlO\

;
lOOOlOllllll
=
Sq\
r\
t
(
lO\
OOlOllOOlO
*
lOOOlOllOOlO
-
llOlO\
Ol\
lO\
l\
O
*
llOlOO\
l\
lOlO
)
;
}
lO\
OO\
lOlllO\
OO\

.
Norm\
alise
(
)
;
if
(
lOO\
OlOlllO\
OO
.
Dot
(
lOOOlOlOlllO
-
lO\
OO\
lO\
lOllOl
)
<
0.0f
)
lOO\
O\
lO\
lllOOO\

=
-
lO\
OO\
l\
Oll\
lO\
OO
;
lO\
OOlOllll\
O\
O
/=
lll\
lllOl\
OO\

;
lOlOOO\
lOO\
lO\

=
-
lO\
OO\
lOllllOO\

.
Do\
t
(
lOOOlOOO\
OO
)
;
TA_\
ASS\
ERT
(
Fabs
(
lOlOOOl\
OOl\
O
)
>
0.0f
)
;
llO\
lO\
OllO\
l\
O
=
lOO\
O\
lOll\
OOlO
;
lOOO\
lO\
ll\
llll
=
0.0f
;
if
(
llOlOO\
l\
lO\
lO
*
lOlO\
OOl\
O\
OlO
>
llOlOOll\
lOl
)
{
llOlO\
OllOlO
=
ll\
O\
lO\
Oll\
lO\
l
/
lOlOOOlOO\
l\
O\

;
lO\
OOlOlll\
lll\

=
Sqrt
(
lO\
OOlOll\
OOlO
*
lOOOl\
O\
llO\
OlO
-
llOlOO\
l\
l\
OlO
*
ll\
OlOOl\
lOlO
)
;
}
lOOO\
lOl\
ll\
Oll\

.
No\
r\
mali\
se
(
)
;
if\

(
lOOO\
lOlllO\
ll
.
Dot
(
lOOOlOl\
Olll\
O
-
lOOOlO\
lOl\
l\
Ol\

)
<
0.0f
)
lO\
OOl\
Olll\
O\
l\
l
=
-
lO\
O\
OlO\
lll\
Oll
;
lOO\
OlOlll\
lOl
=
lOO\
Ol\
OlOllO\
l\

+
lO\
OO\
lOlllOO\
l
*
ll\
OlO\
OllOlO
+
lOOO\
lOlllOOO
*
lOOO\
lOllll\
ll
;
lOO\
Ol\
OlllllO
=
lOOO\
lOlOlllO
+
lOOO\
lOllllOO\

*
llO\
lO\
OllOl\
O
+
lOO\
Ol\
O\
l\
llOll\

*
lO\
OOlO\
l\
ll\
lll
;
}
fl\
oat
lOOO\
l\
lOO\
OOOO
=
llOOl\
lOlOl\
l
.
Dot\

(
lOOO\
lOll\
ll\
O\
l
)
;
fl\
oa\
t\

lO\
O\
OllOOOO\
Ol
=
llOOllOlOll
.
Do\
t
(
lO\
OOl\
Olll\
ll\
O
)
;
fl\
oat\

lO\
OOl\
lO\
OOO\
lO
=
ll\
OOllO\
lO\
ll\

.
Dot\

(
lOOO\
lOlOllll\

)
;
fl\
oat
lOO\
O\
llOOOO\
ll\

=
llOO\
l\
lOlOll
.
Dot\

(
lOOOlO\
llOOOO
)
;
bool
lOOOll\
O\
OOlOO
=
false\

;
if\

(
lOO\
O\
lOllOOl\
l\

)
{
if\

(
(
lO\
OO\
llOOOOO\
O
-
lO\
OO\
l\
lOOOO\
l\
l
)
>
lOllO\
lOlOl\

&&
(
lO\
OOl\
lOO\
OOOl\

-
lO\
OOllO\
OOOll
)
<
-
lOllOlOlOl
)
{
float
lll\
Oll\
ll\
OO
=
(
(
lOOOllOO\
OO\
OO
-
lOOO\
l\
lO\
OO\
O\
ll
)
/
(
(
lOO\
OllOOOO\
OO
-
lOOOl\
l\
OOOOll
)
-
(
lO\
OOll\
OOOOOl
-
lOO\
Ol\
lO\
OOOll
)
)
)
;
Vec\
3
llO\
O\
llllOO\

=
lOOOlOllllOl
+
(
lOOO\
lOlllllO
-
lOOOlO\
lll\
lO\
l
)
*
lllOll\
llOO
;
fl\
o\
at
lllOOlOlOl
=
(
llOO\
llllO\
O
-
lOOOlO\
llOO\
O\
O\

)
.
GetMa\
g\
nitu\
deS\
q\
r\
d
(
)
;
if
(
lllOO\
lOlO\
l\

<
lOOO\
l\
OOlOl\
OO
*
lO\
OOl\
OOl\
OlOO
)
{
Co\
llis\
ion
lOl\
l\
OllOlOl
;
lOll\
OllO\
lOl\

.
Ini\
tiali\
se
(
Coll\
i\
sio\
n
::
lO\
llOOllllO
,
lllOl\
lllOO\

,
0.0f
,
llOOlll\
l\
OO
,
llO\
Ol\
lOlOl\
l\

*
lO\
OOO\
Ollll
)
;
if\

(
!
lll\
O\
l\
llOllO\

(
lO\
l\
lO\
llOl\
O\
l\

,
lOlllO\
OOO\
Ol\

)
)
retur\
n
;
lOOOllOOOlOO
=
true\

;
}
}
if
(
!
lOOOll\
OOOl\
OO
&&
(
lOOOllOO\
O\
OOO
-
lOOOll\
OOOOlO\

)
<
-
lO\
llOlOl\
Ol\

&&
(
lOOOllO\
OO\
OOl
-
lOOOllOOOOl\
O
)
>
lOll\
Ol\
Ol\
Ol\

)
{
fl\
oa\
t
lllO\
l\
lllO\
O
=
(
(
lO\
O\
O\
llOOOOO\
O\

-
lOOOllO\
O\
O\
Ol\
O
)
/
(
(
lOOOl\
l\
OOOO\
O\
O
-
lOOOllOOOOlO
)
-
(
lOOOllOOOOOl
-
lOO\
OllOOOOlO
)
)
)
;
Vec\
3
llO\
O\
llllO\
O
=
lO\
OOlOl\
lllOl
+
(
lOOO\
lOlllll\
O
-
lOOOlOl\
lll\
Ol\

)
*
lllO\
llllOO\

;
flo\
at
lllOOlOlOl
=
(
llO\
O\
ll\
l\
l\
OO
-
lOOOlOlOlll\
l\

)
.
GetMagnitudeSqr\
d
(
)
;
if\

(
ll\
lOOlOlOl
<
lO\
O\
OlO\
OlO\
lOO
*
lO\
OOlOOl\
OlO\
O
)
{
Coll\
i\
sion
lO\
llO\
llO\
lO\
l\

;
lOllOllOlOl
.
Init\
ialise
(
Colli\
sion
::
lOll\
O\
OllllO
,
lllO\
llllOO
,
0.0f
,
llOOllllOO\

,
-
llO\
Oll\
OlOll
*
lOOOOOllll\

)
;
if
(
!
lllOlllOl\
lO
(
lOllOl\
lO\
lOl
,
lOlllOOOOOl\

)
)
re\
turn\

;
lOO\
Ol\
lOOOl\
O\
O
=
tr\
ue\

;
}
}
}
if
(
!
lO\
O\
Oll\
O\
OO\
lOO
)
{
float
llllOlOOOl
;
Vec3
lOllll\
OOOl
;
Vec3
lOllllOO\
lO
;
if
(
Geo\
met\
ry\

::
Tes\
tS\
phereM\
ovementAg\
ain\
s\
tLin\
e
(
lOOOlOllllO\
l
,
lOOOlO\
lllllO\

,
lOOO\
lOlOllll\

,
lOO\
OlOl\
lOOOO
,
lOO\
OlOOlOlOO
,
lll\
lO\
lOOOl\

,
lOll\
llOOO\
l\

,
lOl\
lllO\
Ol\
O\

)
)
{
Coll\
i\
s\
i\
on
lOll\
OllO\
l\
O\
l
;
lOllO\
llO\
lO\
l
.
Ini\
tiali\
se
(
Collision
::
lOllOOllll\
O
,
lll\
l\
OlOO\
Ol
,
0.0f
,
lOl\
l\
l\
lOOOl
+
lOll\
llOOlO
*
lO\
OOlOOl\
Ol\
OO\

,
lOl\
l\
ll\
O\
Ol\
O
*
lO\
OOOOlll\
l
)
;
if
(
!
lllOl\
ll\
OllO\

(
lOllO\
llOlOl
,
lO\
lllOO\
OOOl\

)
)
return\

;
}
}
}
}
void\

TA\
C\
_C\
AL\
L
ll\
llOO\
llOlO
(
con\
st
MF\
rame\

&
lO\
llO\
l\
lllll
,
const
MF\
r\
a\
me
&
lOl\
l\
lO\
OOOOO
,
lOl\
lOllOll\
O\

*
lOl\
llOOOOOl
)
{
TA\
_A\
S\
SERT
(
lOl\
llOO\
OOO\
l
->
lOllO\
OO\
llOl
->
GetCol\
l\
isionO\
b\
ject\
Type\

(
)
==
Collision\
O\
bject
::
TYP\
E_CY\
LINDER
)
;
co\
n\
st
Col\
li\
s\
io\
nOb\
j\
e\
ctCyl\
in\
d\
er\

&
ll\
l\
Ol\
lO\
llOO
=
*
(
cons\
t
Collisi\
o\
nObject\
Cy\
li\
n\
der\

*
)
lOlllO\
OOOOl
->
lOllOOOllO\
l\

;
TA_\
A\
SSERT
(
lOl\
llOOOOO\
l
->
lO\
llOO\
O\
lllO
->
GetCollisi\
onO\
b\
jectType
(
)
==
Collis\
ionObject\

::
TYPE_\
CY\
LINDER\

)
;
co\
n\
st\

Coll\
isionO\
bjectCy\
lind\
er
&
lllO\
llO\
llOl\

=
*
(
cons\
t
Co\
llisi\
o\
nO\
bject\
C\
yl\
in\
der
*
)
lOlllOO\
OO\
Ol
->
lOll\
OOOll\
lO
;
const\

flo\
at
lOllOl\
OlOl
=
0.0001f
;
Vec3
ll\
l\
OllOlllO
=
ll\
lOllOllOO
.
lllO\
lO\
lOOOO
*
lOll\
Ollllll
;
Vec3
ll\
lOll\
O\
lll\
l\

=
lllOllOllOO\

.
lllOlOlOOOl
*
lO\
llOllll\
l\
l
;
Vec3
ll\
l\
OlllOOOO\

=
lll\
OllOllOO
.
lllOl\
Ol\
OOOO\

*
lOlllOOOOOO
;
Vec\
3
lllOlllOOOl
=
ll\
l\
O\
llOl\
lO\
O
.
lll\
Ol\
Ol\
OOOl
*
lO\
l\
llOOOOOO
;
float
lllOlllO\
O\
lO
=
lllOllOllO\
O
.
lOlOl\
O\
OlOO\
O
+
lllOllOllOl
.
lO\
lOlO\
O\
lOOO
;
bool
lllOlllOOll
=
fals\
e
;
if
(
lllOlllOOll
)
return
;
Ve\
c3\

lOOOO\
OOO\
Oll\
O
=
(
ll\
lOllOllll
-
ll\
lO\
l\
lOlllO
)
;
float\

lO\
OOllOOOlOl
=
lOOOO\
OOOO\
llO
.
GetM\
agnitu\
d\
e
(
)
;
TA_ASSERT
(
lOOOllOOOlO\
l
>
0.0f
)
;
lO\
O\
OOO\
OOOll\
O
/=
lOOO\
l\
lOOOlOl
;
Vec3
lOO\
O\
lO\
O\
OOO\

=
(
lllOllOllO\
l
.
lllO\
lO\
l\
OOO\
l
-
lllOl\
lO\
ll\
O\
l\

.
lllOl\
Ol\
OO\
OO
)
;
floa\
t
lOOOllO\
OOl\
lO
=
lOO\
OlOOOO\
O
.
GetMa\
gnitu\
de
(
)
;
TA_\
ASSE\
R\
T
(
lOOOllO\
OO\
l\
l\
O\

>
0.0f
)
;
lOOOlOOOOO
/=
lOOOllOO\
Ol\
lO\

;
st\
ruct
{
boo\
l\

lOOO\
ll\
O\
OO\
ll\
l
;
boo\
l
lOOO\
llOOlOOO
;
bo\
ol\

lOOOll\
OO\
lOOl
;
bo\
ol
lOO\
Oll\
OO\
l\
OlO
;
bool\

lOOOl\
lO\
OOlOO
;
}
llOOllOlOOO
;
llOOllOlO\
O\
O
.
lOOOl\
lOOOlll
=
false\

;
llOOl\
lOlO\
OO
.
lOOOllOOlO\
O\
O\

=
fa\
lse
;
llO\
O\
llOlOOO
.
lOO\
Ol\
l\
OOlOOl
=
false
;
llOOl\
lO\
lOOO
.
lOOO\
l\
lOO\
lOlO
=
false
;
ll\
OOl\
lOlO\
OO
.
lOOOll\
O\
OOlOO
=
false
;
Ve\
c\
3
lOllllOOlO
;
Ve\
c\
3
lOlllOlOl\
O\

;
fl\
oa\
t
ll\
lOll\
lll\
Ol
=
-
1.0f
;
const\

float
lOO\
OllOOlOll
=
0.25f
;
if
(
lOOOl\
OO\
OOO\

.
Dot
(
lOO\
O\
OOOOO\
llO\

)
>
0.988f
)
{
float
lOlOl\
l\
OOlO\

=
lOOOl\
O\
O\
OOO
.
Do\
t
(
lll\
OllOll\
lO
-
lllO\
llO\
llOl
.
lll\
OlOlOO\
O\
l
)
;
float\

lOlOllOO\
ll
=
lOOO\
O\
O\
OO\
O\
l\
lO\

.
Dot
(
lllO\
l\
lO\
ll\
lO
-
ll\
lOllOl\
lOl\

.
lllOlOl\
OOOl\

)
;
if\

(
lOlOllOOlO
>
0.0f
&&
lOlOll\
OOll
>
0.0f
)
{
}
el\
se\

{
if
(
lOlOllOO\
lO
<=
0.0f
&&
lO\
l\
O\
llOOlO
>
-
lO\
OOllOOOll\
O
*
lOOOllO\
OlOl\
l\

)
{
Vec3
lO\
OO\
OlOOOl
=
lllO\
l\
lOlllO\

-
lOO\
Ol\
OOO\
OO\

*
lOl\
Ol\
lOOlO\

;
floa\
t
lll\
OOlO\
lOl
=
(
lOOO\
OlO\
OOl
-
lllOll\
Ol\
lOl
.
lllOlOlOO\
Ol\

)
.
GetMa\
gnit\
u\
d\
eSq\
rd
(
)
;
if
(
lllOOlOlOl
>
lllOllOl\
lOl
.
lOlOl\
O\
O\
lO\
OO\

*
ll\
lO\
l\
l\
OllOl\

.
lOlO\
lOOl\
O\
OO
)
lOlOllOO\
l\
O\

=
k_fMa\
xFloat
;
}
els\
e\

{
lOlOllO\
O\
lO
=
k_fMaxF\
l\
o\
at\

;
}
if
(
lO\
lOllO\
Ol\
l
<=
0.0f
&&
lOlOllOOll
>
-
lOO\
Oll\
OO\
Ol\
O\
l
*
lOOOllO\
OlOll
)
{
Vec3
lOO\
OOlOO\
O\
l
=
ll\
lO\
llOllOl\

.
lllOlOlOOOl
+
lOOOOOO\
OOllO
*
lOlOll\
OOl\
l\

;
float\

lllOOlOl\
O\
l
=
(
lO\
O\
O\
OlOOOl\

-
ll\
lOl\
lO\
lllO
)
.
Get\
M\
ag\
n\
itudeS\
q\
rd
(
)
;
if\

(
lllOO\
l\
O\
lOl
>
ll\
lOl\
lOl\
lO\
O
.
lO\
lOlO\
Ol\
OOO
*
lllO\
llO\
llOO
.
lOl\
OlO\
OlOOO
)
lOlOllOOll
=
k_fM\
a\
xF\
l\
oat
;
}
else
{
lOl\
Ol\
lOOll\

=
k_fMa\
xFl\
o\
at
;
}
float
lO\
OOll\
O\
OllOO
=
lOlOll\
OO\
lO
<
lOlOll\
OOll
?
lOlOll\
OOl\
O
:
lOlO\
l\
lOOll
;
lOlO\
ll\
OO\
lO
=
lOOOlOOOOO
.
Dot
(
lllOllOl\
lOl\

.
ll\
lOl\
OlOOOO
-
lllOllOllll
)
;
lOlO\
ll\
OOll
=
lOOO\
OO\
O\
O\
OllO\

.
Do\
t
(
lllOl\
l\
OllOl
.
ll\
lO\
lOlOOOO
-
ll\
lOllOllll\

)
;
if
(
lOlOl\
lO\
OlO
>
0.0f
&&
lOlOllO\
Ol\
l
>
0.0f
)
{
}
els\
e
{
if
(
lOl\
OllOOlO
<=
0.0f
&&
lO\
lOll\
OO\
l\
O
>
-
lOO\
Oll\
OOOllO
*
lOOOllOOlOll
)
{
Vec3
lOO\
O\
O\
lOO\
Ol\

=
lllOll\
Ol\
lll
+
lO\
OOl\
OO\
OOO\

*
lOlOll\
OO\
lO\

;
float\

lllOO\
lOlOl\

=
(
lOOO\
OlOOOl
-
lllOllOllOl
.
lllOlO\
lO\
OOO
)
.
GetMagni\
tud\
eSqr\
d
(
)
;
if\

(
ll\
l\
OOlOl\
Ol
>
lllOllOllOl\

.
lOl\
OlO\
OlOOO\

*
lllOllOl\
l\
Ol
.
lOlOlOOlOOO
)
lOlOllOOlO\

=
k_fM\
axF\
loa\
t\

;
}
else\

{
lO\
l\
OllO\
OlO
=
k_fMa\
xFloat
;
}
if\

(
lOlO\
llO\
Oll
<=
0.0f
&&
lOl\
OllO\
Oll
>
-
lOO\
OllOO\
O\
lOl
*
lOOO\
llOO\
lOll
)
{
Vec3
lO\
OOO\
lOO\
Ol\

=
lll\
OllO\
l\
lOl
.
lllOlOlOOOO\

-
lOOO\
OO\
OOOllO\

*
lOlOllOO\
ll
;
float
lllOO\
lOl\
O\
l
=
(
lOOO\
O\
lO\
OOl
-
lllO\
l\
l\
Oll\
ll
)
.
GetMagnitudeSqrd
(
)
;
if\

(
lllO\
OlOlOl\

>
ll\
lOll\
OllO\
O\

.
lO\
lOlOOlOOO\

*
lllOll\
OllOO
.
lOl\
O\
l\
OOlOOO
)
lOlOllOOll\

=
k_f\
MaxF\
loa\
t
;
}
else
{
lOl\
Oll\
OO\
l\
l
=
k_fMa\
xF\
l\
oa\
t
;
}
flo\
at\

lO\
OOll\
O\
OllOl
=
lO\
lOll\
O\
OlO
<
lOl\
OllO\
O\
ll
?
lO\
lOllOOlO
:
lOlOllOO\
ll
;
if
(
lOOO\
llOOllO\
O\

>
0.0f
&&
lO\
O\
Ol\
l\
OOl\
lOl
>
0.0f
)
{
}
else
{
if\

(
lOO\
Oll\
OOl\
l\
O\
O\

<=
0.0f
&&
(
lOO\
O\
llOOllO\
l
>
0.0f
||
lO\
OOllOOllOO
>
lOOOll\
OOll\
O\
l\

)
)
{
lOOOlO\
lO\
Oll\
O\

(
ll\
lOll\
Ol\
ll\
O
,
lOOOOOOOOllO
,
lllOllOll\
O\
O
.
lOlOlOOlOOO
,
ll\
lOl\
lOll\
Ol
.
lllOl\
OlOOOl
,
-
lOOO\
lO\
OO\
OO
,
lllO\
llOllO\
l
.
lO\
lOl\
OOlOO\
O
,
lO\
ll\
lOOOOOl
)
;
return
;
}
el\
se
{
lO\
OO\
lOlOO\
llO
(
lllOll\
Ollll
,
-
lOOOOOOOOl\
lO
,
ll\
lOllO\
l\
lO\
O
.
lO\
lOlOOlOOO
,
lll\
OllO\
llOl
.
lllO\
lOlOOOO
,
lOO\
O\
lO\
OO\
OO\

,
lll\
O\
ll\
OllO\
l\

.
lOlOlOOl\
OOO\

,
lOlllOOO\
O\
Ol\

)
;
retu\
rn
;
}
}
}
}
}
else
if
(
lO\
O\
OlOOOOO
.
Dot
(
lOO\
O\
OO\
OOOllO
)
<
-
0.988f
)
{
flo\
a\
t
lOlOll\
OOlO
=
-
lOO\
OlOOOO\
O
.
Dot
(
lllOllOll\
lO
-
lll\
O\
ll\
O\
llO\
l
.
lllOlO\
l\
OO\
OO
)
;
float\

lOlO\
l\
l\
O\
Ol\
l
=
lOOOOOOO\
Ol\
lO
.
Dot\

(
lllO\
l\
lO\
lllO\

-
lllOll\
O\
llOl
.
lllOl\
OlOOOO\

)
;
if
(
lOlOl\
lOOlO
>
0.0f
&&
lOl\
O\
llO\
Ol\
l
>
0.0f
)
{
}
el\
s\
e\

{
if\

(
lOlO\
ll\
OOlO
<=
0.0f
&&
lOlOl\
lO\
O\
lO\

>
-
lOOOl\
lO\
O\
O\
llO
*
lOOOll\
O\
OlO\
l\
l
)
{
Vec3
lOO\
OO\
lOOOl
=
lllOllO\
l\
l\
lO
+
lOOOl\
OOOO\
O
*
lO\
lOl\
lO\
O\
lO
;
flo\
at\

lllOOlOlOl\

=
(
lO\
OO\
O\
lOOO\
l
-
lll\
OllOl\
lOl\

.
lllOl\
OlOO\
OO
)
.
Ge\
tM\
agnit\
udeSq\
rd
(
)
;
if
(
lllOO\
l\
Ol\
Ol
>
lllOllOl\
l\
Ol
.
lOlOlOO\
lOO\
O
*
lll\
Ol\
lO\
llOl
.
lO\
lOl\
OOlOO\
O
)
lO\
lOllOOlO
=
k_f\
Max\
Float
;
}
el\
s\
e
{
lOlO\
l\
l\
O\
Ol\
O
=
k_f\
Max\
Float
;
}
if
(
lOlOl\
lOOll
<=
0.0f
&&
lO\
l\
OllO\
O\
ll
>
-
lOOOll\
O\
OOl\
Ol\

*
lOOOllO\
O\
lOl\
l
)
{
Vec3
lOOOOlO\
OOl
=
lllO\
l\
lOllOl
.
lllOl\
OlOOOO
+
lOOO\
OO\
O\
OOllO
*
lOl\
OllOOl\
l\

;
floa\
t
ll\
lOOlOlOl
=
(
lO\
OOO\
lOOOl\

-
lllOll\
Olll\
O
)
.
GetMag\
nit\
udeSqrd
(
)
;
if
(
lll\
OOlOlOl\

>
lllO\
llO\
ll\
OO
.
lOl\
OlOOl\
OOO
*
lllOl\
l\
Oll\
O\
O\

.
lOlOlOOlOOO
)
lOl\
Ol\
lO\
O\
ll
=
k_\
fMaxF\
lo\
at\

;
}
els\
e
{
lOlO\
ll\
OOl\
l
=
k_fMax\
Fl\
oat
;
}
flo\
at
lOOOl\
lOOllOO
=
lOlO\
llO\
Ol\
O
<
lOlOllOOll\

?
lOlOl\
lOOl\
O\

:
lO\
lOllOOl\
l
;
lOl\
OllOOlO
=
-
lO\
OOlOOOOO
.
Dot
(
lllOllOllO\
l\

.
lllO\
l\
O\
lOOO\
l\

-
lllOl\
lOlll\
l
)
;
lOlOllOOll\

=
lOOOOOOO\
OllO
.
Dot\

(
lllOllOllOl\

.
lllOl\
OlOO\
Ol
-
lllOl\
l\
O\
lll\
l\

)
;
if
(
lOlOllOOlO
>
0.0f
&&
lO\
lO\
ll\
OOll
>
0.0f
)
{
}
else
{
if\

(
lOlOllOOlO
<=
0.0f
&&
lOl\
OllO\
Oll\

>
-
lOOOll\
O\
OOllO
*
lOOO\
llOO\
lOll\

)
{
Vec3
lOOOO\
lO\
O\
Ol
=
ll\
lOl\
lOllll\

-
lOO\
Ol\
OOOO\
O\

*
lOl\
OllO\
OlO
;
fl\
o\
a\
t\

ll\
lOO\
lOlO\
l
=
(
lOO\
O\
OlO\
OO\
l
-
lll\
OllOllOl
.
ll\
lOlOlO\
OOl
)
.
GetM\
agn\
i\
tudeSqr\
d
(
)
;
if
(
lllOOlO\
lOl
>
lll\
Ol\
lOl\
l\
O\
l
.
lOlO\
l\
O\
OlOO\
O
*
lllOllOll\
Ol
.
lOlOl\
O\
OlOOO
)
lOlO\
llOOlO
=
k_f\
M\
axFl\
o\
at
;
}
else\

{
lOlOll\
OOl\
O
=
k_fM\
axF\
loat\

;
}
if
(
lO\
lO\
llOOl\
l
<=
0.0f
&&
lOl\
OllOOll
>
-
lOOOl\
l\
OOOll\
O
*
lOOOllOOlOll
)
{
Vec3\

lO\
O\
O\
OlOOOl
=
ll\
lOllOllO\
l\

.
lllOlOlOOOl\

-
lOOO\
OOOOOllO\

*
lOlOllO\
Oll\

;
fl\
o\
at\

lll\
OOlOlOl\

=
(
lOOOOlOOOl
-
lll\
OllOllll
)
.
GetMa\
gn\
it\
udeSq\
rd
(
)
;
if
(
lllOOl\
OlO\
l
>
ll\
lO\
ll\
OllO\
O\

.
lOl\
O\
l\
O\
O\
lOOO
*
ll\
lOllOl\
l\
OO
.
lOl\
OlOO\
lO\
O\
O
)
lOl\
OllOOl\
l\

=
k_f\
MaxFloat
;
}
else
{
lOlOllOOll
=
k_f\
Ma\
x\
Flo\
at
;
}
float
lOO\
Ol\
l\
O\
OllOl
=
lOlOl\
lOOlO
<
lO\
lO\
ll\
OOl\
l
?
lOlOllOOl\
O
:
lOlOllOOll
;
if
(
lOOOllOOllOO
>
0.0f
&&
lOOOll\
OOl\
lOl
>
0.0f
)
{
}
el\
s\
e
{
if
(
lO\
OOllOOllOO\

<=
0.0f
&&
(
lOOOllOOl\
l\
O\
l
>
0.0f
||
lOOOllOOll\
O\
O
>
lO\
OO\
ll\
O\
Ol\
lOl
)
)
{
lOOO\
l\
O\
lO\
Ol\
lO
(
ll\
lOl\
lOlllO
,
lOOOO\
OOOOllO
,
lll\
Oll\
Ol\
lO\
O
.
lOlOlOO\
lO\
OO
,
lllOll\
Ol\
lOl\

.
lllOlOl\
OOO\
O
,
lOO\
OlOOO\
OO
,
lllOl\
lO\
l\
lOl
.
lOlOlO\
OlOO\
O
,
lO\
ll\
lOOO\
O\
Ol
)
;
re\
t\
ur\
n
;
}
else\

{
lOO\
OlOlO\
OllO\

(
lllO\
l\
l\
Ol\
ll\
l
,
-
lOOOOO\
O\
OOl\
lO\

,
ll\
lOl\
lOl\
lO\
O
.
lOlO\
lOO\
lO\
OO
,
lllOllOl\
lOl
.
lll\
OlOl\
OOOl
,
-
lOOOlO\
OO\
O\
O
,
ll\
lOl\
lOllOl
.
lOlO\
lOOlOO\
O
,
lOlllO\
O\
OOO\
l
)
;
re\
tu\
rn
;
}
}
}
}
}
lllOlllllOl
=
lO\
OOlOOOl\
Oll
(
lOOOOO\
O\
OO\
ll\
O
,
lllOllO\
lllO
,
ll\
lOllOllOO
.
lO\
lOlO\
O\
l\
O\
OO
,
lOOOlOOOOO
,
lllO\
llO\
llOl
.
lll\
O\
lOlOO\
OO\

,
lllO\
llOllO\
l
.
lOl\
OlOOlO\
OO
,
lOlllO\
lOl\
O
,
lO\
llllOOlO
)
;
if
(
lllO\
lll\
llOl
>=
0
)
{
llOOllO\
lOOO
.
lOOOllO\
O\
Olll\

=
true\

;
llOOllOlOOO
.
lOO\
OllO\
O\
OlOO
=
tr\
u\
e
;
Col\
l\
i\
sion
lOll\
Ol\
lOl\
Ol
;
lOllOll\
O\
l\
Ol
.
Ini\
tial\
i\
se
(
Collis\
i\
on\

::
lOllO\
Oll\
llO
,
0.0f
,
lllOlllllOl
,
lO\
l\
llOl\
OlO\

,
lOllll\
OO\
lO
)
;
if\

(
!
lllOl\
ll\
OllO\

(
lO\
llOllOlO\
l
,
lOl\
llOOO\
OOl
)
)
return
;
}
ll\
lOl\
l\
lll\
O\
l
=
lOOOl\
OOOl\
Oll
(
-
lOOO\
O\
OO\
OOllO
,
lllOllOl\
ll\
l
,
lll\
Oll\
O\
l\
lOO
.
lOlO\
lOOlOO\
O
,
-
lOOOlOOOOO\

,
lllOllOllOl
.
lllO\
lOlOOOl
,
lllOll\
O\
llO\
l
.
lOl\
O\
l\
OOlOOO
,
lOll\
l\
O\
lO\
l\
O
,
lOl\
lllOOlO\

)
;
if
(
lllO\
l\
llllOl
>=
0
)
{
llO\
OllOlOOO\

.
lOOOllOOlOl\
O
=
tru\
e\

;
ll\
OOllOlOOO\

.
lOOO\
llOOOlO\
O
=
tr\
ue\

;
Co\
llision
lOllOllOlO\
l
;
lO\
llOl\
lO\
l\
Ol
.
Initia\
l\
i\
se\

(
Colli\
s\
io\
n
::
lOll\
O\
O\
l\
lllO
,
0.0f
,
lll\
O\
llll\
lOl
,
lOlllO\
lO\
lO
,
lOl\
l\
ll\
OOlO\

)
;
if\

(
!
lll\
Olll\
Oll\
O\

(
lO\
ll\
OllO\
lO\
l
,
lOll\
lO\
OO\
OO\
l
)
)
retu\
rn
;
}
lllOll\
l\
llOl
=
lOOOl\
O\
OO\
lO\
ll
(
lOOOOOOOOllO\

,
lll\
O\
llO\
lllO\

,
lllOllOl\
lOO\

.
lOlOlOOlOOO
,
-
lOO\
O\
lOOOOO
,
lllOll\
O\
ll\
O\
l
.
lllOl\
OlOOOl
,
lllOllOllO\
l\

.
lOl\
OlOOlOO\
O
,
lOl\
llOlO\
lO
,
lOlll\
lOOlO
)
;
if
(
lll\
OlllllOl
>=
0
)
{
ll\
OOllOlOOO
.
lOOOllOOlOO\
O
=
true\

;
llOOl\
l\
O\
lOO\
O
.
lOOOllOOO\
lOO
=
true
;
Collis\
io\
n
lOllOll\
Ol\
Ol
;
lOllO\
l\
lOlOl
.
Init\
ialise
(
Co\
ll\
i\
s\
ion
::
lO\
l\
l\
OOllll\
O
,
0.0f
,
lllO\
l\
l\
ll\
lO\
l
,
lOlll\
Ol\
OlO\

,
lOllllO\
OlO\

)
;
if
(
!
lllOlllOll\
O
(
lOllO\
llOlO\
l\

,
lOl\
l\
l\
OOOOOl
)
)
retu\
rn
;
}
ll\
lOll\
lllOl
=
lOO\
OlOOOl\
Oll
(
-
lOOOOOOOO\
llO
,
lllOllOl\
ll\
l
,
lll\
OllOll\
OO
.
lO\
lOlOO\
lO\
O\
O
,
lO\
OOlOOOO\
O
,
lllO\
llOllOl
.
lllO\
lO\
l\
OOOO
,
lllOl\
lOllOl
.
lO\
l\
Ol\
O\
O\
lOOO\

,
lO\
l\
llOlOlO
,
lOllllO\
OlO
)
;
if
(
ll\
l\
O\
l\
llllOl\

>=
0
)
{
llO\
Ol\
l\
OlOOO
.
lOO\
OllOOlO\
Ol
=
tru\
e\

;
ll\
O\
OllO\
lOOO
.
lOOOll\
OOOlOO
=
true\

;
Colli\
sion
lOllOllOlO\
l\

;
lOllOllOlOl
.
Ini\
tia\
l\
i\
se
(
Co\
llision\

::
lOllO\
OllllO\

,
0.0f
,
lll\
Ollll\
l\
Ol
,
lOl\
l\
lO\
lO\
lO
,
lOllllO\
Ol\
O\

)
;
if
(
!
lll\
OlllOllO
(
lOllOllOl\
Ol
,
lOlll\
OOO\
OO\
l\

)
)
retur\
n
;
}
{
lllOl\
llll\
O\
l
=
lOOOlOlO\
OlO\
O\

(
-
lOOO\
OOOOOll\
O\

,
lllOllOl\
lll\

,
lllO\
llOllOO
.
lO\
lOlO\
OlO\
OO
,
lOOOlOO\
OO\
O\

,
lllOllOll\
O\
l
.
lllOlOl\
OOO\
O
,
lll\
Ol\
l\
Ol\
lOl
.
lllOlOlO\
OOl
,
lllO\
llO\
llOl
.
lOlOlOOlOOO\

,
lOlllOl\
OlO\

,
lOll\
llOOlO
)
;
if
(
lllOllll\
lO\
l
>=
0
)
{
llOOll\
Ol\
OOO
.
lOOOll\
O\
OOlOO\

=
tr\
ue\

;
Co\
lli\
s\
ion
lO\
l\
lOl\
lOlOl
;
lO\
llOllOlOl
.
Initialise
(
Collisio\
n
::
lOllO\
Ol\
lll\
O\

,
0.0f
,
lllOllll\
lOl
,
lO\
ll\
lOlOl\
O
,
lOllllOOl\
O
)
;
if
(
!
lllOll\
lOllO\

(
lOl\
l\
OllOlO\
l\

,
lO\
lllOO\
OOOl
)
)
return
;
}
}
{
ll\
lOll\
lll\
Ol
=
lOOOlO\
lOOlO\
O
(
lOOOO\
OOO\
O\
llO\

,
lllOllOl\
llO
,
lllOllO\
llOO
.
lO\
l\
Ol\
OOlOOO\

,
lOO\
Ol\
OO\
OOO
,
lll\
OllO\
l\
lOl
.
lllOlOl\
O\
OO\
O
,
lll\
Ol\
l\
Oll\
Ol
.
lll\
OlOlOOOl
,
ll\
l\
O\
l\
lOllOl
.
lOl\
Ol\
OOlO\
OO
,
lOlllOlOl\
O
,
lOllll\
OOlO
)
;
if
(
lllO\
lll\
llOl
>=
0
)
{
ll\
OO\
llOlOOO\

.
lOO\
Ol\
l\
OOOlOO
=
true
;
Col\
l\
is\
i\
on\

lOllOllOl\
Ol\

;
lO\
llOllOlO\
l
.
Initia\
lise
(
Col\
lis\
io\
n\

::
lOllOOllllO
,
0.0f
,
ll\
lOl\
l\
lll\
Ol
,
lOlllOlO\
lO
,
lOll\
l\
lOOlO\

)
;
if
(
!
lllOl\
ll\
Ol\
lO
(
lOllOl\
l\
OlOl
,
lOlllOOOOOl
)
)
retu\
rn\

;
}
}
{
lllOllll\
lO\
l
=
lO\
OOlOlOOlOO
(
-
lOOO\
l\
OOOOO\

,
lll\
OllOll\
Ol
.
lll\
OlOl\
OOOl
,
ll\
lOllOll\
Ol
.
lOlOl\
OOlO\
O\
O
,
lOOOO\
OOOOllO
,
lllOllOlllO\

,
lllOl\
lOlll\
l\

,
lllOllO\
llOO
.
lOlOlOO\
lOOO
,
lO\
ll\
lOl\
Ol\
O
,
lOll\
l\
lOOlO
)
;
if
(
lllOl\
l\
lllOl
>=
0
)
{
llOOllOlOOO
.
lOOOllO\
OO\
lOO
=
true
;
Col\
li\
s\
ion\

lOllOl\
lOl\
Ol\

;
lOl\
lOl\
lO\
lOl
.
Initiali\
se
(
Co\
llisio\
n\

::
lOll\
O\
Olll\
lO\

,
0.0f
,
lllOll\
lllOl
,
lO\
lllOlO\
l\
O
,
-
lOll\
l\
l\
O\
OlO
)
;
if
(
!
lll\
Ol\
llO\
l\
lO
(
lOll\
O\
l\
lOlO\
l\

,
lOll\
lOOO\
O\
O\
l
)
)
retu\
rn
;
}
}
{
lllOlll\
l\
lO\
l
=
lOOOlOlO\
Ol\
OO
(
lO\
OOlO\
OOO\
O
,
ll\
lOllOll\
Ol
.
ll\
lOlOlOOO\
O
,
lllO\
l\
lOllO\
l
.
lO\
l\
OlOOlOOO\

,
lOOOOOOOO\
llO
,
lllOl\
l\
OlllO\

,
lllOl\
l\
Ollll
,
lllOllOl\
lOO\

.
lO\
lO\
l\
O\
O\
l\
O\
OO
,
lOl\
ll\
O\
lOlO
,
lOll\
llOOlO
)
;
if
(
lllOlll\
llOl
>=
0
)
{
llOOllO\
lO\
OO
.
lOO\
Ol\
lOOOlOO
=
true
;
Collisi\
on
lOllOllOl\
Ol
;
lOllOl\
lOlOl\

.
Ini\
tialise
(
Collis\
i\
on
::
lO\
llO\
OllllO
,
0.0f
,
lllO\
lllll\
Ol
,
lOlllOlO\
lO
,
-
lOlll\
lO\
O\
lO\

)
;
if
(
!
ll\
lOlllOllO
(
lOll\
Ol\
l\
O\
lOl\

,
lOll\
lOO\
OOO\
l
)
)
return
;
}
}
if
(
!
llOO\
llOlOO\
O
.
lOO\
OllOOOlOO
)
{
Vec3
lOOO\
ll\
OOlllO
;
Vec\
3
lOOOllOO\
l\
lll
;
if
(
Geometry
::
FindCloses\
t\
PointOn\
Li\
neToLine\
UnCl\
am\
p\
ed
(
lllOll\
Ol\
lOl
.
lllOl\
Ol\
OOOO\

,
lllOl\
l\
Ol\
lOl\

.
lllOl\
O\
l\
OOOl
,
lllOl\
lO\
lllO
,
lllOl\
lOl\
ll\
l
,
lO\
O\
OllOOlllO
,
lOOOll\
OOllll
)
)
{
Vec3
lOOOlOOOO\
O
=
lO\
OOl\
l\
OOlll\
l\

-
lOOOllOOl\
l\
lO
;
float
lOlOl\
lOll\
l\

=
lOO\
Ol\
OOO\
OO
.
Get\
Magnitude
(
)
;
if
(
lOlOl\
lO\
l\
l\
l\

>
lOl\
lOlOlOl
)
{
lOOO\
lOO\
OOO
/=
lOlO\
ll\
O\
l\
ll
;
lO\
lOl\
lOlll
=
(
ll\
lO\
llOllOl
.
lOl\
OlOO\
l\
O\
OO
+
lllOll\
OllOO
.
lO\
lO\
lO\
OlO\
OO
-
lOlOllO\
ll\
l\

)
;
Ve\
c3
lOOOOl\
ll\
ll
=
lOO\
Ol\
lOOll\
l\
l
-
lOOOlOOOOO
*
lllOllOllOl
.
lOl\
O\
lOOlO\
OO
;
if
(
lOlOl\
l\
Ol\
ll\

>
0.0f
)
{
Col\
lis\
ion
lOl\
l\
OllO\
l\
Ol
;
lO\
ll\
O\
l\
lOlOl
.
Init\
ia\
lis\
e
(
Colli\
sion
::
lO\
ll\
O\
Oll\
l\
lO
,
0.0f
,
lOlO\
l\
l\
Olll
,
lOOO\
Olll\
ll\

,
lO\
OOlOOOOO
)
;
if\

(
!
lll\
OlllOllO
(
lOll\
OllO\
lOl
,
lO\
lllOOOOOl
)
)
return
;
ll\
O\
OllOlOOO
.
lO\
OOl\
lOOO\
lOO
=
tru\
e
;
}
}
}
}
if\

(
!
lOll\
l\
O\
OOOO\
l\

->
lOll\
OlllOO\
l
)
return
;
if
(
!
llO\
OllOlOOO
.
lO\
O\
Ol\
lOOOl\
OO
)
{
Vec3
ll\
O\
OllOlOl\
l
=
(
ll\
l\
Ol\
lOll\
Ol
.
ll\
l\
O\
lO\
lOOO\
l
-
lll\
Oll\
Oll\
Ol\

.
lllOlOlO\
OO\
O
)
.
GetNo\
rm\
a\
l
(
)
;
Vec3\

lOOOlOllOOO\
l
=
(
lll\
OllOl\
ll\
l\

-
lllOll\
Ol\
llO\

)
.
GetNo\
rmal
(
)
;
Vec3
lOOOl\
lOlOOOO
=
(
ll\
lOlll\
OOOl
-
ll\
lOlllOOOO\

)
.
GetNorm\
al
(
)
;
lOOOlO\
l\
OllOO
(
ll\
lOllO\
lll\
l
,
ll\
lOlll\
O\
OOl
,
lllOl\
l\
OllOl
.
ll\
lOlOlOOOO\

,
lllOllOl\
lOl\

.
lllO\
lOlOO\
Ol
,
ll\
O\
Ol\
lO\
l\
Ol\
l
,
lOOOlOl\
lOOOl
,
ll\
lOllOllOO
.
lOlOlO\
OlO\
OO\

,
lllOllOl\
lO\
l\

.
lOl\
OlOO\
l\
OOO
,
1.0f
,
tr\
ue\

,
lOll\
lO\
OOOOl
)
;
lOOOlOlOll\
OO\

(
lll\
Ol\
lO\
lllO
,
lllOll\
lOOO\
O
,
lllO\
llOllOl
.
lllO\
lOlOOOO\

,
lllOllOl\
lO\
l
.
lll\
OlO\
l\
OO\
Ol
,
ll\
O\
OllOlOll
,
-
lOOOlO\
ll\
OOOl
,
lllO\
llOl\
lO\
O
.
lOlOlOOl\
OOO
,
ll\
lOllOl\
l\
Ol
.
lO\
lOl\
OOlOO\
O
,
1.0f
,
true
,
lOll\
lO\
OOOOl\

)
;
Vec3\

lOOOl\
lO\
l\
OOOl
=
(
lllO\
llOllOl
.
lllOl\
OlO\
OOO
/
lOlllOOOOOO
)
*
lO\
l\
l\
O\
ll\
llll
;
Ve\
c3\

lOOO\
ll\
O\
lO\
Ol\
O
=
(
lllOll\
O\
ll\
O\
l
.
lllO\
l\
O\
l\
O\
O\
O\
l
/
lOlllOOOO\
O\
O
)
*
lOl\
l\
Ollll\
ll
;
ll\
OOll\
OlOl\
l
=
(
ll\
lO\
l\
lOlll\
l
-
lllOll\
Ol\
l\
lO\

)
.
GetNorm\
al
(
)
;
lOO\
OlOllOOO\
l\

=
(
ll\
lOl\
lOllOl
.
ll\
l\
Ol\
Ol\
OOOl
-
ll\
l\
Oll\
Ol\
l\
Ol
.
ll\
lOlO\
lO\
O\
OO
)
.
Ge\
tNorm\
al\

(
)
;
lOOOll\
Ol\
OO\
O\
O
=
(
lOOO\
l\
l\
Ol\
OOlO\

-
lOO\
OllO\
lOOOl
)
.
Ge\
tNormal\

(
)
;
lO\
OO\
l\
Ol\
OllOO
(
lllOllOl\
lO\
l
.
lll\
Ol\
OlOOOl
,
lOOOl\
lOl\
OO\
l\
O
,
lll\
Ol\
l\
OlllO\

,
lllOllO\
llll
,
llO\
Ol\
lO\
l\
O\
ll
,
lO\
OO\
lOll\
OOOl
,
lllOllOllOl
.
lOlO\
lOOlOOO\

,
lllOllO\
llO\
O\

.
lOlOlO\
OlO\
OO
,
-
1.0f
,
tru\
e
,
lOll\
lOOOOOl
)
;
lO\
OOlOlOl\
lOO
(
lllOllO\
llO\
l
.
lllO\
lO\
lOOOO
,
lOOOllOlOO\
O\
l
,
lllOllOll\
l\
O\

,
lllOll\
Ol\
l\
l\
l\

,
llOOll\
O\
lOll
,
-
lOO\
OlOllOOOl
,
lllOllOl\
l\
Ol\

.
lOlO\
l\
OOl\
O\
OO
,
lllOl\
l\
O\
l\
lOO\

.
lOl\
OlOOl\
O\
OO
,
-
1.0f
,
true\

,
lO\
lll\
OO\
O\
OOl
)
;
Vec\
3
lOllllO\
O\
Ol
;
Vec3\

lOllll\
O\
OlO\

;
fl\
o\
at\

lll\
lOlOOOl\

;
if
(
Geometry
::
TestLi\
neMo\
v\
ement\
A\
gainst\
Ca\
psule\

(
lllOll\
Olll\
O
,
lllOllOl\
ll\
l\

,
lllO\
ll\
lOOO\
O\

,
lll\
OlllO\
O\
O\
l
,
ll\
lO\
llOllOl
.
lll\
O\
lO\
lOOOO
,
lll\
Ol\
lOllOl
.
lllO\
l\
O\
lOOOl
,
lllO\
lllOO\
l\
O
,
lll\
lOl\
OOOl
,
lOllllOOOl
,
lOll\
llOOlO
)
)
{
Co\
l\
li\
si\
on
lOl\
lOl\
l\
OlOl
;
lOl\
lOllOlOl
.
Init\
i\
a\
lise
(
Col\
lision
::
lOllO\
Ollll\
O
,
lll\
lO\
l\
OOOl
,
0.0f
,
lO\
llllOO\
Ol\

,
-
lOll\
l\
l\
OOlO
)
;
if
(
!
lllO\
l\
l\
lO\
l\
lO
(
lOl\
lO\
llOlO\
l\

,
lOll\
lOOO\
OO\
l
)
)
return
;
}
}
}
void
TAC\
_CALL
llllO\
O\
llOOl\

(
con\
st
MFrame
&
lOl\
l\
Ollll\
ll
,
const
MFra\
me
&
lOlllOOOOOO
,
lOllOllOllO\

*
lOlllOOOOOl
)
{
TA\
_ASS\
E\
R\
T
(
lOlll\
OOO\
O\
Ol
->
lO\
l\
lOOOll\
Ol
->
Get\
C\
oll\
i\
si\
o\
nObject\
Type
(
)
==
Collisio\
nObje\
c\
t
::
TY\
P\
E_\
SPH\
ER\
E
)
;
const
Co\
l\
l\
is\
ion\
Obje\
ct\
Sphe\
re
&
ll\
l\
OllllOOO
=
*
(
con\
st
Co\
ll\
isi\
onObje\
ctSphere
*
)
lOlllOOO\
O\
Ol
->
lOll\
OO\
OllOl
;
TA_ASSER\
T\

(
lOll\
lOOO\
OO\
l
->
lOllOO\
OlllO\

->
GetCollis\
ionObje\
c\
tType
(
)
==
Co\
ll\
isionObject
::
TYPE_\
CYLIND\
ER
)
;
co\
ns\
t
Col\
li\
sio\
nOb\
je\
c\
tC\
ylin\
d\
er
&
llOOllOlllO
=
*
(
const
Coll\
isi\
o\
n\
O\
bj\
ectCylind\
er
*
)
lOlllOO\
OOOl
->
lO\
llOOOlll\
O\

;
con\
st\

flo\
at
lOllO\
lOlOl\

=
0.0001f
;
Vec\
3
lll\
Ol\
ll\
lOO\
l
=
lllOll\
llOOO
.
ll\
lOO\
OO\
lOlO
*
lO\
ll\
Ol\
lllll
;
fl\
oat
lllOll\
l\
OO\
lO
=
ll\
OOllOlllO
.
lOl\
OlOOlO\
OO\

+
lllOllll\
OOO\

.
lOlOlOOlOO\
O\

;
Vec3\

llllll\
O\
llO
=
ll\
OOl\
lO\
lllO\

.
lllOlOlOOOl
-
ll\
OOl\
lOlllO
.
lllOlOlO\
OOO\

;
floa\
t
lOlOll\
OOlO\

=
llllllOllO
.
Dot
(
llOOllOlllO
.
lllOl\
OlOOOO
-
ll\
lO\
llll\
OOl
)
;
floa\
t
lOlO\
llOOl\
l
=
llllllOllO
.
Dot
(
lllOllllO\
Ol
-
llOOll\
O\
ll\
l\
O
.
lllOlO\
l\
OO\
O\
l
)
;
float
lllOl\
lllOO
=
lOlOllO\
OlO\

/
(
lO\
lOl\
lOOlO\

+
lOl\
Oll\
OO\
ll
)
;
Vec\
3
lOOOllOlO\
Oll
=
llOOllO\
lllO
.
lll\
OlOlO\
OOO
+
llllll\
OllO
*
lllOllllOO\

;
Vec3\

lOO\
OlOOOOO
=
lllOll\
llOOl
-
lOOOl\
lO\
lOOll
;
float
lO\
ll\
l\
lOOll
=
lO\
OOl\
OO\
OOO
.
GetMagnitu\
d\
e\
Sqrd
(
)
;
if\

(
lOl\
lllO\
Ol\
l\

<
lll\
Olll\
OOlO
*
lll\
Oll\
l\
OO\
lO
)
{
lOllllO\
Oll\

=
Sqr\
t
(
lO\
ll\
l\
lOOll
)
;
float
lOO\
Oll\
O\
lOl\
OO\

=
llllllOllO
.
GetMagnitude
(
)
;
bool\

lO\
OOl\
lOlOlO\
l
=
false
;
if
(
lOlOllOOlO
>
lOlOll\
O\
Ol\
l\

&&
lOlO\
ll\
O\
O\
lO
>
-
lOl\
ll\
l\
OO\
ll
*
lO\
OOllOl\
O\
l\
O\
O
)
{
if\

(
lOlO\
llO\
O\
l\
O
<
lllOllllOOO
.
lOlOl\
OOl\
OOO
*
lO\
O\
O\
ll\
OlOl\
OO
)
{
if
(
lOl\
lllOOll\

<
llOOllO\
l\
l\
l\
O
.
lO\
lO\
l\
OOl\
O\
OO
)
{
Ve\
c3\

lO\
O\
Ol\
OOOOO
=
ll\
llll\
Ol\
lO\

/
lOOOll\
OlOlO\
O
;
float
lllOll\
lllOl
=
-
lOlOl\
lO\
OlO
/
lOOOllOlO\
lOO
;
Colli\
sion\

lO\
l\
lO\
ll\
OlOl
;
lOllOllO\
lOl\

.
In\
iti\
al\
ise
(
Collisi\
o\
n
::
lOll\
OO\
llllO
,
0.0f
,
ll\
lOllll\
lOl\

+
lll\
Ollll\
O\
OO
.
lO\
lOlOOlOOO
,
lllOl\
lllO\
Ol
-
lOO\
OlOOOOO\

*
lllOl\
llllOl\

,
-
lOOO\
lO\
OOOO
)
;
lllOlll\
OllO
(
lOllOllOl\
Ol
,
lOlllOOOO\
Ol
)
;
re\
turn
;
}
el\
se
if
(
lOlOllOOl\
O\

>
0.0f
)
{
lO\
O\
OlO\
OOOO
/=
lOl\
lll\
O\
Oll
;
Vec3\

lOOOO\
l\
llll
=
llO\
Oll\
O\
lllO
.
lllOlO\
lO\
OOO
+
lOO\
OlOOO\
OO
*
llO\
Ol\
lOlllO
.
lOlO\
lO\
OlOOO\

;
lOO\
Ol\
OOO\
OO
=
lll\
O\
ll\
l\
l\
OOl\

-
lOOO\
O\
l\
llll
;
fl\
o\
at
ll\
lO\
OlOlOl\

=
lOOOlOOO\
O\
O\

.
Get\
Magnitude\
Sq\
rd\

(
)
;
if
(
ll\
lOOlOl\
O\
l
<
ll\
lOllllOOO\

.
lOlOlOOlOO\
O
*
lllOllllOO\
O
.
lO\
lOlOOlO\
OO
)
{
float
lOllllOO\
ll\

=
Sqrt
(
lllOOlOlO\
l\

)
;
lOOO\
lOOOO\
O
/=
lOll\
llOOll
;
Collision
lOll\
OllO\
lOl
;
lOll\
O\
llOlO\
l
.
Initi\
al\
ise\

(
Collisi\
o\
n
::
lOl\
l\
OOlll\
l\
O
,
0.0f
,
ll\
lOl\
lllOO\
O
.
lOlO\
lOOl\
OOO
-
lOl\
lllO\
Oll
,
lOO\
OOlllll\

,
lOOOlOO\
OOO
)
;
lllOlllOllO\

(
lOll\
OllOlOl
,
lO\
lllOOOOOl\

)
;
retu\
r\
n
;
}
}
else
{
lO\
OOll\
O\
lOlO\
l
=
true
;
}
}
}
else
if
(
lOlOllOO\
ll
>
-
lO\
llll\
OOll
*
lOOOllOlO\
lO\
O
)
{
if
(
lOl\
O\
l\
lO\
Oll\

<
ll\
lOl\
ll\
l\
OO\
O
.
lO\
lO\
lOOlOOO
*
lOOOl\
lOlO\
lOO
)
{
if
(
lOllllOOll
<
llOOllOlllO
.
lOl\
OlOOlOOO
)
{
Vec3
lOOOlOOO\
OO
=
lllll\
lOllO\

/
lOO\
OllOlO\
lOO
;
float\

ll\
lOl\
l\
lllOl\

=
-
lOlO\
llOOll
/
lOOOl\
lOl\
O\
lOO\

;
Col\
lisi\
on\

lOllOllOlOl
;
lO\
llOllOlOl\

.
Initial\
ise
(
Collision
::
lOl\
lO\
Ollll\
O
,
0.0f
,
ll\
l\
Oll\
lllO\
l\

+
lll\
Ollll\
OOO\

.
lO\
lOlOOl\
O\
O\
O
,
lllOll\
llOOl\

+
lO\
OOlOO\
OO\
O
*
lllOl\
llllO\
l\

,
lOOOl\
OO\
OO\
O
)
;
lll\
Ol\
l\
lOllO\

(
lOllOllO\
l\
Ol
,
lOlllOO\
O\
OOl
)
;
return\

;
}
els\
e\

if
(
lO\
lO\
llOOll
>
0.0f
)
{
lOOOlOO\
OOO\

/=
lOll\
l\
lOOl\
l
;
Ve\
c\
3
lO\
O\
OO\
lll\
ll
=
llO\
O\
llOlllO\

.
lll\
OlO\
l\
OOOl
+
lO\
OOlO\
OOOO
*
ll\
OOllOl\
llO\

.
lOl\
O\
l\
OOlOOO
;
lOOO\
l\
OOOOO
=
ll\
lOl\
l\
llOOl
-
lOOO\
Oll\
l\
ll
;
flo\
a\
t
lllOOlOlOl
=
lOOO\
lOOOO\
O
.
GetM\
agni\
tudeSqr\
d\

(
)
;
if
(
lllO\
OlOlOl\

<
lllOl\
lllOOO
.
lOlOlOO\
lOOO\

*
lll\
Ollll\
O\
O\
O
.
lOlOl\
OOlOOO
)
{
fl\
o\
at
lOllll\
O\
O\
ll\

=
Sqrt\

(
lllOOl\
O\
lOl
)
;
lOO\
O\
lOOOOO
/=
lO\
ll\
llOOl\
l
;
Col\
l\
isio\
n
lOllOll\
O\
lO\
l\

;
lOll\
O\
llOlOl
.
Initialis\
e\

(
Collision
::
lOll\
O\
Ollll\
O\

,
0.0f
,
lllOllllOOO\

.
lOlO\
lOO\
lOOO
-
lO\
ll\
l\
lOOll\

,
lOOOOllll\
l
,
lOOOl\
OOOOO
)
;
ll\
l\
OlllO\
llO
(
lOllOl\
lOlOl
,
lOl\
l\
lO\
OOOOl\

)
;
ret\
urn\

;
}
}
els\
e
{
lOOOll\
OlOlO\
l
=
tr\
ue
;
}
}
}
el\
s\
e
{
lOOO\
ll\
O\
lO\
lOl
=
true
;
}
if
(
lOOOll\
OlO\
l\
O\
l\

)
{
if
(
lOl\
ll\
lOO\
ll
>
lOl\
lOlOlO\
l
)
{
lOO\
OlOOOO\
O
/=
lOllllOOll
;
Co\
llision
lOll\
Oll\
O\
lOl
;
lOll\
OllOlO\
l
.
Initi\
alise\

(
Collision
::
lO\
l\
l\
OOllllO
,
0.0f
,
lll\
Olll\
O\
OlO
-
lOllllO\
Ol\
l
,
lOOOllOlOOll
+
lO\
OOlOO\
O\
OO
*
llOOllO\
lll\
O\

.
lOlOlOO\
l\
OOO
,
lOOO\
lOO\
O\
OO
)
;
lllOlllOllO
(
lOllOll\
O\
l\
O\
l\

,
lOlll\
OOO\
O\
Ol\

)
;
return
;
}
}
}
if\

(
!
lOlll\
OO\
O\
OO\
l\

->
lO\
ll\
OlllOOl
)
retur\
n
;
Ve\
c3
lll\
OllllOlO
=
lllOll\
l\
lOOO
.
ll\
lOOOOlOlO
*
lOlllOOO\
OOO
;
fl\
oa\
t
ll\
llOlO\
OOl
=
0.0f
;
Vec3
lOOl\
O\
ll\
OOl
=
llOOllOlllO
.
lllO\
lOlOO\
Ol
;
in\
t
lOOO\
l\
lOOOl
;
for\

(
lOOO\
llOO\
Ol
=
0
;
lOO\
O\
l\
l\
OOOl
<
2
;
lOOOl\
l\
OOO\
l\

++
)
{
ll\
llllO\
llO
.
Normalis\
e
(
)
;
fl\
oat
ll\
lllOOO\
O\
O
=
lll\
ll\
l\
OllO\

.
Dot\

(
lllO\
lll\
lOO\
l
-
lOOl\
OllOOl
)
-
ll\
lOll\
l\
lOOO
.
lOl\
O\
lOOlOO\
O\

;
fl\
o\
at
ll\
l\
ll\
OOO\
O\
l
=
ll\
l\
lllO\
llO
.
Dot
(
ll\
lOl\
lllOlO\

-
lO\
OlOllOOl
)
-
ll\
l\
OllllOO\
O
.
lOlOl\
OOl\
OOO
;
if
(
lllllO\
OOOO
>
lOllOlOlOl\

&&
lllll\
O\
O\
OOl
<
-
lOl\
lOl\
OlOl
)
{
llllO\
lOO\
Ol\

=
lllllOOOOO
/
(
ll\
l\
ll\
OO\
OOO
-
lll\
l\
lOO\
OOl
)
;
Ve\
c3
lOOOl\
l\
O\
lOll\
O
=
lll\
O\
lll\
lOOl
+
(
ll\
lOllllOlO
-
lllOll\
llOO\
l
)
*
lll\
lO\
lOO\
O\
l
;
lOOOll\
Ol\
O\
llO
-=
ll\
llllOll\
O\

*
lllOlll\
l\
OOO
.
lOl\
OlOOlOOO
;
flo\
at
lOllllOOl\
l
=
(
lO\
OO\
ll\
Ol\
O\
llO
-
lO\
Ol\
Ol\
lOOl
)
.
Ge\
tMag\
nitude\
Sqrd
(
)
;
if
(
lOll\
llOOl\
l\

<
ll\
OOl\
lOll\
lO
.
lOl\
O\
lOOl\
O\
OO
*
llOOllO\
lllO
.
lOl\
OlO\
O\
l\
O\
O\
O
)
{
Col\
lision
lO\
llO\
llOlOl\

;
lOllOllOlOl
.
Ini\
ti\
alis\
e
(
Collision\

::
lOl\
lOOllll\
O
,
llll\
OlO\
OOl
,
0.0f
,
lOOO\
llO\
l\
Oll\
O
,
llllll\
O\
l\
lO
)
;
lllO\
lllOllO
(
lO\
llOllOl\
Ol
,
lO\
lllO\
OO\
OOl\

)
;
return\

;
}
}
lOOlOllOO\
l
=
llOOllOll\
lO
.
ll\
lOlOlOOO\
O\

;
lll\
l\
l\
l\
Ol\
lO
=
-
llll\
l\
l\
OllO
;
}
Ve\
c3
lOll\
llOO\
Ol
;
if\

(
Geo\
me\
tr\
y
::
TestSphere\
M\
o\
v\
em\
en\
tAga\
in\
stLi\
ne\

(
ll\
lOll\
llO\
Ol
,
ll\
lO\
lll\
lOlO
,
llO\
O\
llOlllO
.
lll\
O\
lOlO\
OO\
O\

,
llOOllOll\
lO
.
ll\
lOl\
OlOO\
Ol
,
lllO\
l\
l\
lOOlO
,
llll\
OlO\
OOl\

,
lO\
lll\
lOOOl
,
lOOO\
lO\
OOOO
)
)
{
lOlll\
lO\
OOl
+=
lOO\
OlOOOOO
*
llOOllO\
ll\
lO
.
lOlO\
lO\
OlO\
OO
;
Co\
ll\
isio\
n
lOllOllOlOl
;
lOllOllO\
lOl\

.
Ini\
tial\
is\
e
(
Collis\
i\
o\
n\

::
lO\
llOOllllO\

,
lll\
lOlOOOl\

,
0.0f
,
lOl\
l\
llOOOl
,
lOOOlOO\
O\
OO
)
;
ll\
lOlllOl\
lO
(
lOllOllO\
lOl
,
lO\
ll\
l\
O\
OOO\
O\
l
)
;
retur\
n
;
}
lO\
OlOllO\
Ol\

=
llOOllOl\
llO\

.
lllOl\
O\
lO\
O\
Ol
;
for
(
lO\
OOllO\
OOl
=
0
;
lOOOl\
l\
OO\
Ol
<
2
;
lO\
OOllO\
OOl
++
)
{
if
(
llllllOllO
.
Do\
t
(
lllOllllOl\
O
-
lllOl\
l\
llOOl\

)
<
0.0f
)
{
Ve\
c3\

lOll\
l\
lOOO\
l
;
if
(
lOOOllOl\
Ol\
ll\

(
ll\
lOll\
llOOl\

,
lllOll\
llOl\
O
,
lO\
Ol\
OllOO\
l
,
ll\
l\
lll\
Oll\
O
,
llOO\
llOlllO
.
lOlOlOOlOO\
O
,
ll\
lO\
lll\
lOOO
.
lO\
lO\
l\
OO\
lO\
O\
O
,
lll\
lOlOOOl
,
lOllll\
OO\
Ol
,
lOOO\
lO\
OOOO
)
)
{
lOllllOOOl
+=
lO\
OOlO\
OOO\
O
*
llO\
OllOlllO
.
lOlOlOOlO\
OO\

;
Colli\
sion\

lOl\
lOl\
lOl\
O\
l
;
lO\
l\
lOllOlOl
.
Ini\
tialise
(
Coll\
ision\

::
lO\
llO\
OllllO
,
llll\
O\
lOO\
Ol\

,
0.0f
,
lOlll\
lOOO\
l
-
lOOOlOOOOO
*
lllOlllOOlO\

,
lOOOlOO\
OOO
)
;
lllOlllOll\
O
(
lOl\
lOllO\
lOl
,
lOl\
l\
lOOO\
OOl
)
;
retu\
r\
n\

;
}
}
lO\
O\
lOllOOl\

=
llOOllOlllO
.
ll\
lOlOlOOOO
;
lll\
lllOll\
O
=
-
lllll\
lOllO
;
}
}
void\

TAC_CALL\

llllOOOOOll
(
con\
st\

MFr\
ame
&
lOl\
lOll\
llll
,
cons\
t\

MFr\
ame\

&
lOl\
llOOO\
OO\
O
,
lOl\
lOllOllO
*
lOl\
l\
l\
O\
OO\
OOl\

)
{
TA_\
ASSERT\

(
lO\
lllOO\
OOOl
->
lO\
ll\
OOOllOl
->
GetColl\
i\
si\
on\
O\
bject\
T\
y\
pe\

(
)
==
Collisio\
n\
Object
::
TYPE_C\
APSUL\
E
)
;
const
Collisio\
n\
Obje\
c\
tC\
aps\
u\
le
&
lOlll\
OlO\
OOO
=
*
(
co\
nst\

Col\
lisio\
nO\
bje\
ctC\
apsule
*
)
lO\
ll\
lOOO\
OOl\

->
lOl\
l\
OOOllO\
l
;
TA_A\
SSERT
(
lOlllOOO\
OOl
->
lOllOOOlll\
O
->
GetC\
oll\
i\
s\
ionObjectTy\
p\
e
(
)
==
Col\
li\
sio\
n\
O\
bje\
c\
t
::
TYPE_CYLI\
NDER
)
;
cons\
t
Colli\
s\
i\
onObjec\
tC\
y\
lin\
d\
er
&
llOOllO\
l\
llO
=
*
(
const
Col\
l\
i\
si\
onOb\
j\
ect\
Cy\
l\
inde\
r\

*
)
lOll\
lOOOOOl
->
lOl\
lOO\
OlllO\

;
co\
n\
st
fl\
oa\
t
lOll\
OlOlOl
=
0.0001f
;
Vec3
lllOllOl\
llO
=
lOlllOlOOOO
.
lllOl\
OlO\
O\
OO
*
lOllOllll\
l\
l
;
Vec3
lllOl\
lOllll
=
lOlll\
OlOO\
O\
O
.
lllOlOl\
OOOl
*
lO\
llOll\
llll
;
Vec\
3
lOOOllOllO\
OO\

=
lllO\
ll\
Oll\
l\
l\

-
lllO\
l\
lO\
l\
llO
;
fl\
oat
lO\
OOl\
lOllOOl
=
lO\
OOllOllOO\
O
.
Ge\
t\
M\
ag\
nitu\
de
(
)
;
lOOOllOll\
OOO
/=
lOOO\
l\
lOl\
lO\
Ol\

;
Vec3
ll\
O\
O\
ll\
Ol\
O\
ll
=
llO\
OllO\
l\
l\
lO\

.
lll\
OlO\
lO\
OOl
-
llOOllO\
lllO
.
ll\
lOlO\
l\
OOOO
;
fl\
oat
lOO\
Ol\
lOllOlO\

=
ll\
OOllOlOl\
l
.
Get\
Mag\
ni\
tud\
e
(
)
;
llOO\
llO\
lOll
/=
lOOOllOll\
OlO
;
flo\
at\

lO\
Ol\
lO\
OOOl
=
0.0f
;
float
lO\
OOllOl\
lOll
=
0.0f
;
Ve\
c3
llOlOOlO\
lO\
l
=
lllOl\
lOll\
lO
;
Vec3
llOlO\
OOOO\
OO\

(
0.0f
,
0.0f
,
0.0f
)
;
float
lOO\
ll\
OOOlO
=
lOOOl\
lOllOOl
;
float
lOOO\
llOlll\
O\
O
=
0.0f
;
Vec3
llO\
l\
OOl\
O\
llO
=
lll\
Ol\
lOllll
;
Vec3
llOlOOOOlOO
(
0.0f
,
0.0f
,
0.0f
)
;
floa\
t
lOOO\
llOlllO\
l
=
ll\
OOl\
lOlllO\

.
lOlOlOOl\
OOO
+
lO\
ll\
lO\
lOOOO
.
lOlOlOOl\
OOO\

;
bo\
o\
l
lOOOllOl\
lllO
=
fa\
lse\

;
if\

(
(
1.0f
-
Fabs\

(
lOOOllOllOO\
O\

.
Do\
t
(
ll\
OOllO\
lO\
ll
)
)
)
>
lOllOl\
OlOl\

)
{
Vec\
3
lOO\
OllOlllll
=
ll\
OO\
llOlllO\

.
lllO\
l\
OlOO\
Ol
-
llOOllOlllO
.
ll\
lOlO\
lOO\
OO
;
Vec\
3\

lOllll\
O\
llO
=
Ve\
c3
::
Cross
(
llOOll\
OlOll
,
lOOOllOl\
lOO\
O\

)
;
Vec3
lOllllOlll
=
lO\
l\
l\
ll\
O\
llO
.
Cross
(
lOOO\
llOllO\
OO
)
;
float
lOlllllOOO
=
lO\
l\
lllO\
l\
ll
.
Do\
t\

(
ll\
OOllOll\
lO
.
ll\
lO\
lOlO\
OOO\

-
ll\
lO\
llOll\
lO\

)
;
float
lOlllll\
O\
O\
l
=
lO\
l\
ll\
lO\
lll\

.
Dot
(
llOOllOlllO
.
ll\
lOlOlO\
OOl
-
ll\
lO\
llOll\
lO
)
;
TA_A\
SSER\
T
(
Fabs
(
lOlllllO\
Ol
-
lOll\
ll\
lOO\
O
)
>
lOl\
lO\
lOl\
Ol\

)
;
float
lOl\
llll\
O\
lO\

=
lO\
lll\
l\
lO\
O\
O\

/
(
lOlllll\
OO\
O
-
lO\
l\
lll\
lOOl\

)
;
Vec3
lOOOll\
lO\
OOO\
O
=
ll\
OO\
llOl\
ll\
O
.
lllOlO\
lOOOO
+
lO\
OOllOlll\
l\
l\

*
lO\
lllllO\
l\
O
;
float
lOOOl\
llOOO\
Ol
=
lOOOllOll\
O\
OO
.
Do\
t
(
lOOO\
lllOOOOO
-
lllO\
llOlllO
)
;
Vec\
3
lO\
OOlllOOOlO
=
ll\
l\
Ol\
lOlll\
O
+
lOOOll\
Ol\
lOO\
O
*
lOO\
OlllO\
OOOl
;
floa\
t
lOlll\
OOl\
Ol
=
(
lO\
OOlllOOOl\
O
-
lOOOlllOOO\
OO
)
.
Ge\
t\
Magni\
tud\
eSqrd\

(
)
;
if
(
lOl\
ll\
OOlO\
l
>
lOO\
O\
llOl\
llOl
*
lOOO\
l\
l\
Ol\
l\
lO\
l
)
{
lOOOllOllllO
=
true
;
}
else
{
fl\
oa\
t
llOlO\
O\
ll\
Ol\
O
=
Sqr\
t
(
lOOOl\
lOlllO\
l
*
lOOOl\
lOl\
ll\
O\
l
-
lOl\
llOO\
lO\
l
)
;
float
lOO\
OlO\
OlOlO\
l
=
lO\
OOll\
OllO\
OO
.
Cr\
os\
s
(
ll\
OO\
llOlO\
ll
)
.
GetM\
ag\
nitude
(
)
;
if
(
Fa\
bs
(
lOOOlO\
OlO\
lOl
)
>
lOl\
lO\
lOl\
Ol
*
lOllOlO\
lOl
)
{
llOl\
OO\
llOlO
/=
lOOOlOOlOlOl\

;
float
lOO\
llO\
Ol\
lO
=
lOOO\
lllOOOOl
-
ll\
OlOOllOlO\

;
fl\
oat\

lO\
Oll\
OOlll
=
lOOO\
l\
llOO\
OOl
+
llO\
l\
OOllOlO
;
if
(
lO\
OllOOllO
>
lO\
OllO\
O\
Ol\
O
||
lOO\
llOO\
lll
<
lO\
Ol\
lOOO\
Ol
)
{
lOOOllOllllO\

=
true\

;
}
el\
se
{
if
(
lOOll\
OO\
llO\

>
lOO\
l\
l\
OOO\
Ol
)
{
Vec3
lOOOlll\
OOO\
ll
=
ll\
l\
Ol\
l\
OlllO\

+
lOOOllOl\
lOOO\

*
lOO\
l\
lOOllO
;
if
(
ll\
O\
Ol\
lOlOll
.
Dot\

(
lOOOll\
lO\
OOll
-
ll\
OOllOlllO
.
lllOlOlO\
OOO\

)
>
0.0f
&&
llOOll\
O\
lOll
.
Dot
(
lO\
OOl\
l\
lOOOll
-
llO\
OllOl\
ll\
O
.
lllOl\
OlOOO\
l
)
<
0.0f
)
{
lOOll\
OOOOl\

=
lOOl\
lOOllO\

;
ll\
O\
lO\
Ol\
OlO\
l
=
lOOOll\
lOO\
O\
l\
l
;
Vec3\

lO\
OOOlO\
O\
O\
l
=
Geometr\
y
::
FindCl\
o\
se\
stPoi\
ntOnLi\
ne
(
lOOOlllOOO\
ll
,
ll\
OO\
l\
lOlllO
.
ll\
lOlOlOOOO
,
ll\
OOllOll\
l\
O
.
lllO\
l\
OlOOOl
)
;
llOl\
OOOOO\
OO
=
llOlOOl\
OlOl
-
lOO\
O\
OlOOOl\

;
TA_\
A\
S\
SERT
(
llO\
lO\
OOO\
O\
OO
.
GetMagni\
tude
(
)
>
lOllOl\
OlOl
)
;
ll\
OlOOOOOOO
.
No\
rmalise
(
)
;
}
}
if
(
lOOll\
O\
Oll\
l
<
lO\
Oll\
OOOlO
)
{
Ve\
c\
3\

lOOOll\
lOO\
lOO
=
ll\
lOll\
O\
ll\
lO
+
lO\
OOl\
lOllO\
OO
*
lOO\
llOOll\
l\

;
if\

(
llOOll\
OlOll
.
Dot
(
lOOOlll\
O\
Ol\
O\
O\

-
ll\
OOll\
O\
lllO
.
lll\
OlO\
l\
OOO\
O
)
>
0.0f
&&
llOOllOl\
Oll
.
Dot
(
lOOOlll\
O\
OlOO
-
llOO\
llOll\
lO
.
lllO\
lOl\
OOO\
l
)
<
0.0f
)
{
lO\
OllOO\
OlO
=
lOOllO\
O\
lll
;
ll\
O\
lOOlOllO\

=
lOO\
OlllOOlOO
;
Vec3
lOOO\
OlOOO\
l
=
Geometry
::
Find\
Clo\
ses\
tPo\
in\
tOn\
L\
i\
ne
(
lOO\
OlllOOlOO
,
ll\
OOl\
lOlllO
.
ll\
l\
Ol\
OlOOOO\

,
llO\
Ol\
lOlllO\

.
lllOlOl\
OO\
Ol
)
;
llO\
lOO\
OO\
lOO\

=
lOOO\
lllOOlOO\

-
lOOOOlOOOl
;
TA_\
ASS\
ERT
(
llOlOOOOl\
OO\

.
GetM\
agn\
itude\

(
)
>
lOl\
lOlOl\
Ol\

)
;
llOlOOO\
OlOO
.
Norm\
alis\
e
(
)
;
}
}
}
}
}
}
if
(
!
lOO\
Oll\
Oll\
l\
lO
)
{
flo\
at
lOlOOO\
lOO\
lO\

=
llOOllOlOll
.
Dot
(
lOOOl\
lOllOO\
O
)
;
if
(
lOl\
OOOlO\
O\
lO
>
lOl\
lOlOlO\
l
)
{
float\

lOl\
llOllOO
=
llOOl\
lO\
lOll
.
Do\
t
(
llOOllOl\
llO
.
lll\
OlOlO\
OOO
-
lll\
Ol\
lO\
lll\
O
)
;
flo\
at
lOOOll\
lO\
OlO\
l
=
1.0f
/
lOlOOOlOOlO
;
float
lOOl\
l\
OO\
l\
l\
O\

=
(
lO\
lllOllOO
-
lOl\
llOlOOOO
.
lOlOlOO\
lOOO
)
*
lOO\
O\
lllOOlOl
;
flo\
at\

lOO\
ll\
OOlll
=
(
lOlll\
O\
llOO
+
lO\
OOllOllO\
lO
+
lOlllO\
l\
OO\
OO
.
lOlO\
lO\
O\
l\
OOO
)
*
lOOOlll\
OOlOl
;
if
(
lO\
OllOOll\
O
>
lOOll\
OO\
Ol\
O
||
lOOllOOll\
l
<
lOOl\
lOOOOl
)
{
lOOOllOll\
l\
lO\

=
true
;
}
el\
se
{
if\

(
lOOllO\
OO\
Ol
<
lO\
Ol\
lO\
Oll\
O
)
{
Ve\
c3
lOOOlll\
OO\
O\
ll
=
ll\
lO\
llOlll\
O
+
lOO\
O\
l\
lOllOO\
O
*
lOOll\
O\
OllO\

;
Vec\
3\

lOOOlOOOOO
=
lO\
OOlll\
OOO\
l\
l\

-
ll\
OO\
ll\
Ol\
llO
.
ll\
l\
Ol\
OlOO\
OO\

+
llOO\
l\
lOlOll
*
lOlllO\
lOOOO\

.
lOl\
OlOOlO\
O\
O
;
float
lll\
O\
Ol\
Ol\
Ol
=
lO\
OO\
lO\
OO\
OO
.
GetMagnitu\
deS\
qr\
d
(
)
;
if
(
ll\
lOOlOl\
Ol
<
llO\
OllO\
lllO
.
lOl\
OlOOl\
OOO\

*
llOOllOl\
l\
lO
.
lOlO\
lO\
OlO\
OO\

)
{
lOO\
llOOOOl
=
lOOl\
lOOll\
O\

;
llOl\
O\
O\
lOl\
Ol
=
lO\
OOlll\
OOOl\
l
;
llOlOO\
OOOOO
=
-
llOOllOlOll
;
}
}
if
(
lO\
OllOOO\
l\
O
>
lOOl\
l\
OOlll\

)
{
Vec\
3
lOOOl\
llO\
OlO\
O
=
lllOllOl\
llO
+
lO\
OOllO\
llO\
OO\

*
lO\
O\
llO\
Ol\
ll\

;
Vec3
lOOO\
lOO\
OOO
=
lOOOll\
lOO\
lOO
-
llO\
OllOlllO
.
lllOlOlO\
OO\
l
-
llOOll\
O\
lOll
*
lOlllO\
l\
OOOO\

.
lOlOlOO\
lOOO\

;
flo\
a\
t
lllOOlOl\
Ol
=
lO\
OOl\
OOOOO
.
GetMagni\
tu\
deS\
qrd\

(
)
;
if\

(
lllOO\
lOl\
Ol
<
llO\
Oll\
OlllO
.
lOlOlO\
O\
lOO\
O\

*
llOOl\
l\
Ol\
llO\

.
lOl\
O\
lOOlOO\
O
)
{
lO\
OllOO\
OlO
=
lOOllOO\
lll
;
llOl\
OOl\
O\
ll\
O
=
lOOOll\
lOOlOO\

;
llOlO\
OO\
Ol\
OO
=
llOOllOlOll\

;
}
}
}
}
else
if
(
lOlO\
O\
OlOOlO\

<
-
lOllOl\
OlO\
l
)
{
float
lOll\
lOl\
lOO
=
llOOllOlOll
.
Dot\

(
llOO\
llO\
l\
llO\

.
lll\
OlO\
lOOO\
O
-
lll\
OllOlllO
)
;
fl\
oat
lOO\
OlllOOlOl
=
1.0f
/
lO\
lO\
OOl\
OOlO
;
fl\
oat
lO\
OllOOllO
=
(
lOll\
lOll\
OO\

+
lOOOllO\
llO\
lO
+
lOlllOlOOO\
O
.
lOlOl\
OOl\
OO\
O
)
*
lOOOlllO\
OlOl
;
float
lOO\
llOOlll\

=
(
lOlll\
OllOO
-
lOl\
llOl\
OO\
OO\

.
lOlO\
lOO\
lOO\
O
)
*
lOOOlllOOlO\
l
;
if\

(
lOO\
l\
l\
OOllO
>
lOOllO\
OO\
lO
||
lOO\
llOOlll
<
lO\
OllOOO\
Ol\

)
{
lOO\
O\
llOlll\
lO
=
true\

;
}
else
{
if
(
lOOl\
l\
O\
O\
OOl\

<
lOO\
ll\
OOl\
lO
)
{
Vec3
lO\
OOlllOO\
Oll
=
ll\
l\
Ol\
lOlllO
+
lOOOl\
lO\
ll\
OO\
O\

*
lO\
O\
ll\
O\
OllO
;
Ve\
c3\

lOOO\
l\
O\
OO\
OO
=
lOOOlll\
OO\
O\
l\
l
-
llOOll\
OlllO
.
lllOlO\
lOO\
O\
l\

-
llO\
OllO\
l\
O\
l\
l
*
lO\
lllO\
l\
OOOO\

.
lOlO\
lO\
OlO\
OO
;
fl\
o\
at
lllOO\
lOlOl
=
lOOOl\
O\
OOOO
.
GetM\
a\
gnitude\
Sqr\
d
(
)
;
if\

(
ll\
lOOl\
OlOl
<
ll\
OOll\
O\
lllO
.
lOlOlOO\
lO\
OO
*
llOO\
l\
lOl\
l\
lO
.
lO\
lOlOOlOOO
)
{
lO\
O\
llOOO\
Ol
=
lOOllOOl\
lO
;
llOl\
O\
O\
lOlO\
l
=
lOOOl\
ll\
OOOll
;
llO\
lOOO\
OOOO
=
llOOll\
OlOll
;
}
}
if
(
lOO\
llOO\
OlO
>
lO\
O\
llOOlll\

)
{
Vec3
lOO\
Oll\
lO\
OlOO\

=
lllO\
llO\
l\
llO
+
lOOOllOllOOO\

*
lOOllOOl\
ll
;
Vec3
lO\
OOlOOO\
OO
=
lOO\
Olll\
OO\
lOO\

-
llOOllOlll\
O
.
ll\
l\
O\
lOlOOOO
+
llOOl\
lOlOll\

*
lOl\
ll\
OlOO\
OO
.
lOl\
O\
lOOlO\
OO
;
fl\
oa\
t\

lllO\
Ol\
OlOl
=
lO\
OOlOOO\
OO\

.
GetM\
a\
gnitudeS\
qrd
(
)
;
if
(
lllO\
OlOl\
Ol
<
llOOllO\
lllO\

.
lOl\
OlO\
OlOOO
*
llOO\
llOlllO
.
lO\
lOl\
O\
OlOOO
)
{
lOOllOO\
OlO
=
lO\
Oll\
O\
O\
lll
;
llOlOOlO\
l\
lO
=
lO\
OOlll\
OOlOO\

;
ll\
Ol\
OOOOl\
OO
=
-
llO\
OllOl\
Ol\
l
;
}
}
}
}
}
if
(
!
lOOO\
llOlll\
lO
)
{
Ma\
t33
lOO\
OOOOOll
;
lO\
O\
O\
O\
OO\
O\
ll
.
Se\
t\
To\
LookD\
ownV\
ector
(
llOOl\
l\
Ol\
Ol\
l
)
;
Ma\
t33
lOO\
OlllO\
O\
llO
=
lOOO\
OOOOl\
l
;
lOOOlll\
OOllO\

.
Transp\
oseAsInve\
rt
(
)
;
Vec\
3
lll\
lO\
OO\
OOOO\

=
(
(
lllOl\
lOllll\

-
lll\
OllO\
ll\
l\
O
)
*
lOOOlllOO\
l\
lO
)
;
Ve\
c3
lO\
OO\
lOO\
lOOll
=
llOOl\
lOll\
lO
.
ll\
lOlOl\
OOOO
;
for
(
int
lO\
OlOOlOOl
=
0
;
lO\
O\
lOO\
lOOl\

<
2
;
lOOlOO\
lOOl
++
)
{
Ve\
c3
lll\
l\
l\
llll
=
(
ll\
lOllO\
l\
l\
lO
-
lOO\
OlOOlOOll\

)
*
lOOO\
lllOOllO\

;
float
lOOOlllOO\
lll
=
ll\
llO\
OOO\
OOO\

.
GetMagnitud\
eSq\
rd
(
)
;
lllll\
llll
-=
ll\
llOOO\
OO\
OO
*
llll\
OOOOOO\
O\

.
Dot
(
llll\
llll\
l
)
/
lO\
OO\
lllO\
Oll\
l
;
float\

lO\
O\
OlllOlOO\
O
=
2.0f
*
lllll\
l\
lll\

.
Dot
(
lll\
lOOOOOOO
)
;
fl\
oat
lOOO\
l\
l\
lOlOOl
=
lll\
ll\
ll\
ll
.
GetMagnitu\
de\
Sqrd
(
)
-
Po\
w2
(
llO\
OllOlllO
.
lOlOlOOlOOO
)
-
Pow\
2\

(
lO\
lllOlO\
OOO
.
lOlOlOOl\
O\
OO
)
;
const\

fl\
oat\

lllOlllll\
l
=
Pow2
(
lOOOlllOOl\
l\
l\

)
;
const
fl\
o\
at
llllO\
OOOOO
=
2.0f
*
lO\
O\
Olll\
OOlll\

*
lOO\
Ol\
llOlOOO
;
const
float
ll\
lOlllllO\

=
2.0f
*
lOO\
OlllOO\
lll
*
lO\
OOll\
lOlOOl
+
Pow2
(
lOOO\
lllOlOO\
O
)
+
4.0f
*
Po\
w2\

(
llO\
Ol\
lOll\
lO
.
lOlO\
l\
OOlO\
OO
*
lll\
lO\
O\
OOOOO
.
z
)
;
co\
n\
s\
t
fl\
o\
at
ll\
l\
O\
llllO\
l\

=
2.0f
*
lOOO\
l\
llOl\
O\
OO
*
lOOO\
lllOl\
OOl
+
8.0f
*
Pow\
2
(
ll\
OOllOlllO
.
lOl\
OlOOlO\
OO
)
*
lllllllll
.
z
*
llll\
OOOOOOO
.
z
;
con\
st
float
lOOOlllOlOlO
=
Pow2\

(
lO\
OO\
lll\
Ol\
OOl
)
+
4.0f
*
Pow2
(
ll\
OOl\
lOlllO
.
lOlOlOOlO\
OO
)
*
(
Pow\
2
(
llllllll\
l
.
z
)
-
Po\
w2
(
lOlll\
O\
lOO\
OO
.
lOlOlO\
OlOO\
O
)
)
;
cons\
t\

float
lO\
OO\
lll\
OlOll
=
1.0f
/
lllO\
lllll\
l\

;
float
lOOOlllO\
llOO
[
4
]
;
int\

lOOO\
ll\
lO\
ll\
O\
l\

=
lOOOll\
lO\
l\
llO
(
lll\
l\
OOOOOO
*
lO\
OOlllOlOl\
l\

,
ll\
lOl\
llllO
*
lO\
O\
Oll\
lOlOll
,
lll\
OllllOl\

*
lOOO\
lllOlO\
ll\

,
lOOOlllOl\
Ol\
O
*
lOOOlll\
OlOll
,
lO\
O\
Ol\
llO\
llOO
)
;
for
(
in\
t
lO\
O\
OllOOOl
=
0
;
lO\
OOllOOO\
l
<
lO\
OOll\
lO\
llOl
;
lO\
OOllOOO\
l\

++
)
{
Vec\
3
lO\
O\
OlllOlll\
l\

=
ll\
lllllll
+
llllOOOOO\
OO\

*
lOOOlllOllOO
[
lO\
O\
OllOO\
Ol
]
;
if
(
lOOOlllOll\
ll
.
z
*
(
fl\
o\
at
)
(
lOOl\
OOl\
OOl\

*
2
-
1
)
<
0.0f
)
con\
ti\
nue\

;
Vec3\

ll\
OOl\
ll\
lOO
=
(
lOOOll\
l\
Oll\
ll\

)
*
lOOOOOO\
Oll
+
lOOO\
lOO\
lOOll
;
Vec3
llOl\
l\
OOlOO
=
lOOOl\
llOllll
;
ll\
OllOO\
lOO\

.
z
=
0.0f
;
fl\
oat
lO\
ll\
l\
l\
OOll
=
llOl\
lOOlOO
.
Ge\
tM\
a\
gnitude\

(
)
;
if
(
lOlll\
lOOl\
l
<=
ll\
OOll\
OlllO\

.
lO\
l\
OlOOlOOO
)
cont\
inue\

;
llO\
ll\
OOl\
OO\

*=
llOOll\
O\
l\
llO
.
lOl\
Ol\
OOlOOO
/
lOl\
lll\
OOl\
l
;
Vec3
lO\
O\
OlOOOOO
=
lO\
O\
Oll\
lOllll
-
llOllOOl\
OO
;
lOl\
l\
l\
l\
OOll\

=
lO\
OO\
lOOOOO
.
GetMagnitud\
e
(
)
;
TA_A\
SS\
ERT
(
lOl\
lllOOll
>
lOllOl\
Ol\
Ol
)
;
lOO\
Ol\
O\
O\
OO\
O
*=
lOOOO\
O\
OOll\

;
lOOOlOOOO\
O
/=
lOllllOOll
;
flo\
at
lOlOOOl\
OOlO
=
lOOOllO\
ll\
OOO\

.
Dot\

(
lOOOlO\
O\
O\
OO
)
;
if
(
lOlOOO\
lOOlO
<
0.0f
)
{
float
lOO\
llOOl\
lO
=
lOOOllOll\
OO\
O
.
Dot
(
llOOllll\
OO
-
lllOllO\
l\
ll\
O\

)
;
if
(
lO\
OllO\
OllO
>
lOO\
ll\
OOO\
l\
O
)
{
}
el\
se
if
(
lO\
OllOOllO\

>
lOOll\
OOOOl
)
{
lO\
Oll\
O\
OOOl
=
lOO\
l\
l\
OOllO\

;
llO\
lOOl\
O\
lOl
=
llOO\
l\
ll\
lO\
O
;
llOlOOOOOO\
O
=
lOOO\
l\
OOOOO
;
}
}
else
if
(
lOlOO\
OlOO\
lO
>
0.0f
)
{
floa\
t
lOOl\
lOOlll\

=
lOOOllOllO\
OO
.
Dot
(
ll\
OO\
lll\
lOO
-
ll\
lOl\
l\
O\
l\
llO
)
;
if
(
lOOllOOlll
<
lOO\
l\
lOO\
OOl
)
{
}
else
if
(
lO\
Ol\
lOOl\
ll
<
lO\
Ol\
lOO\
OlO
)
{
lO\
O\
l\
lO\
O\
OlO\

=
lO\
OllOOlll
;
llOlOOlOllO\

=
llOOllll\
OO
;
llOlOOOOlOO\

=
lOO\
Ol\
O\
OOOO\

;
}
}
}
lOOO\
lOOl\
OO\
ll
=
llO\
OllO\
l\
ll\
O\

.
lllOl\
Ol\
O\
OO\
l
;
}
}
if
(
!
lOOOl\
lOlll\
lO
)
{
Vec3
lO\
O\
O\
O\
lOOOl
=
lll\
O\
llO\
lllO\

;
fo\
r
(
int
lOOO\
llOOOl
=
0
;
;
lO\
OO\
llOOOl\

++
)
{
floa\
t\

lOlOllOOlO
=
llOOllOlOll
.
Do\
t
(
lOOO\
OlO\
O\
Ol
-
llOOllOl\
llO\

.
lllOlOl\
O\
O\
OO
)
+
lOl\
llOlOOOO
.
lOl\
O\
lOOlOOO
;
float
lOlOl\
lOOll
=
llOOllOlOll
.
Dot
(
lOOO\
OlO\
OOl
-
ll\
OOll\
Ol\
l\
lO
.
lllO\
l\
Ol\
OOO\
l
)
-
lO\
l\
ll\
Ol\
OOO\
O
.
lOlOl\
OOl\
OOO\

;
Vec3\

lOlll\
l\
O\
OlO
;
floa\
t
lOl\
ll\
lOO\
lO\
l
=
0
;
bo\
ol
lOOOOl\
Oll\
O\
O\
l
=
false
;
TA\
_\
A\
SSER\
T
(
lOlOllOOlO\

-
lOlOllOOll
>
0.0f
)
;
fl\
oat
lO\
OO\
llll\
OOOO
=
lOOOllO\
l\
lOl\
O
+
lOl\
ll\
O\
l\
OO\
OO
.
lO\
lO\
lOOlOOO
+
lOlllOlOOOO
.
lO\
l\
OlO\
Ol\
O\
O\
O
;
floa\
t
lllO\
llll\
OO
=
lO\
OOlll\
lOOOO
*
lO\
lOllO\
OlO
/
(
lOl\
OllO\
O\
lO
-
lOlOllOOll
)
;
if\

(
ll\
lOll\
llOO
>
0.0f
&&
lllOll\
ll\
OO
<
lOO\
Oll\
llOO\
O\
O
)
{
Vec3
lO\
O\
Oll\
llOO\
Ol
=
ll\
O\
OllOll\
lO\

.
lllOlO\
lO\
O\
OO
+
ll\
O\
OllO\
l\
Oll
*
(
ll\
l\
Ol\
ll\
lOO\

-
lOl\
llO\
lO\
OO\
O
.
lOlOlOOlOOO
)
;
Vec3
lOOO\
lOOO\
OO
=
lOOOOlO\
OOl
-
lOO\
OllllOOOl\

;
float
lOllllOOll
=
lO\
OOlO\
OO\
OO
.
Ge\
t\
MagnitudeSqr\
d
(
)
;
if\

(
lOllllOO\
ll\

<
lOO\
O\
l\
lOlllOl\

*
lO\
OO\
llOl\
ll\
O\
l
&&
lO\
ll\
llOOll
>
lOl\
lOlOlOl
)
{
lOlll\
lO\
Oll\

=
Sqrt\

(
lOll\
l\
lOOll
)
;
lOOOlOO\
OOO
/=
lO\
l\
lll\
OO\
ll
;
if
(
lOll\
ll\
OOl\
l
>
llOOll\
OlllO\

.
lO\
lOlOOlOOO
)
{
if
(
ll\
l\
O\
lll\
lOO
<
lOl\
llOlOO\
OO
.
lOlOl\
O\
OlO\
OO
)
{
Vec3\

lO\
l\
l\
lOlO\
Ol\
O\

=
llOOllOlll\
O\

.
lllO\
lO\
l\
OOOO
+
lOOOlOOOOO
*
llOOl\
lO\
l\
ll\
O
.
lO\
lOlOOl\
OOO
;
Ve\
c3
lOlllOlOlOl
=
lOO\
O\
OlOOOl
-
lOlllOl\
O\
OlO\

;
lO\
llll\
O\
Ol\
l
=
lO\
lllOlO\
lOl\

.
Get\
Magn\
itud\
e\

(
)
;
lOllllOOlOl
=
lOlllOlOOOO
.
lOl\
O\
l\
O\
OlOOO
-
lO\
ll\
llOOl\
l
;
if
(
lOllll\
OOlOl
>
0.0f
)
{
lOO\
OOlOl\
lOOl\

=
true
;
if\

(
lOllll\
OO\
ll\

>
lOl\
l\
OlOlOl
)
{
lOlllO\
lOlOl\

/=
lOllll\
OOll
;
lO\
ll\
llOOl\
O
=
lO\
lll\
OlOlO\
l
;
}
el\
se\

{
lO\
llll\
OOlO
=
lOOOlOOOOO
;
}
}
}
else
if
(
ll\
lOl\
lllOO
>
lO\
OO\
llOllOlO
+
lOlllOlOOOO
.
lOlOl\
OOlOO\
O\

)
{
Ve\
c3
lOll\
l\
OlOOlO\

=
ll\
OOllOlll\
O
.
ll\
lOlOlO\
OO\
l
+
lOO\
Ol\
OOOO\
O\

*
ll\
OO\
ll\
Ol\
llO
.
lO\
lOl\
OOl\
OOO
;
Vec3
lOlll\
OlOlO\
l
=
lOOOOl\
OOOl\

-
lOlllOlOOlO\

;
lOl\
ll\
lOO\
ll
=
lOlllOl\
O\
lOl
.
GetMag\
n\
itude
(
)
;
lOllll\
OO\
lOl\

=
lOl\
l\
l\
OlOOO\
O
.
lOlOlOOlOO\
O
-
lOlll\
l\
O\
Oll
;
if
(
lOllllOOl\
O\
l
>
0.0f
)
{
lO\
O\
O\
OlOllOOl
=
tru\
e\

;
if
(
lOllllO\
Oll
>
lOllO\
l\
O\
l\
Ol
)
{
lO\
lllOlOlO\
l\

/=
lO\
llllOOl\
l
;
lOl\
lll\
O\
OlO
=
lO\
l\
llOl\
OlOl\

;
}
else
{
lOllllOOl\
O
=
lOOO\
lOOO\
OO
;
}
}
}
else
{
lOllll\
OOl\
O\

=
lOO\
Ol\
OOOOO
;
lO\
l\
lll\
OOl\
Ol
=
lOOOllO\
lllOl
-
lOllllOOll\

;
lOOOOlOll\
OOl
=
tr\
ue
;
}
}
else\

{
flo\
at
lOO\
O\
l\
O\
lO\
O\
OlO
=
lllOllllOO
;
float
lOOO\
lO\
lOOO\
Ol
=
lOOOllllOOOO
-
lllOlll\
lOO
;
floa\
t\

lOO\
Ol\
l\
llOO\
lO
=
lOOOllOlllOl
-
lOl\
lllOO\
ll
;
if
(
lOO\
OlOlOO\
O\
lO
<
lOOOlll\
l\
OOlO
)
{
if
(
lOO\
OlOlO\
OO\
lO
<
lO\
OOllll\
OOlO
)
{
lO\
OOlOOO\
OO
=
-
llOOllOlOll
;
lOll\
llOOl\
O
=
lOOOlOOOO\
O
;
lO\
llllOOlO\
l
=
lO\
OOl\
OlOOOlO
;
lOOO\
OlOllOOl
=
tru\
e
;
}
el\
se\

{
lOl\
lllOOlO
=
lOOOl\
OOOOO\

;
lOllllO\
O\
l\
Ol\

=
lOOOl\
lllOOlO
;
lOO\
OOlO\
l\
l\
OOl\

=
true\

;
}
}
else\

if
(
lOOOlOl\
O\
OOO\
l\

<
lOOOll\
llOOl\
O
)
{
lOO\
OlOOOOO\

=
llOOllOlOl\
l
;
lOllllOO\
lO
=
lO\
OO\
lOO\
OOO
;
lOlll\
lOOlOl
=
lO\
O\
O\
l\
OlOOOOl
;
lOOOO\
lOllOO\
l\

=
true\

;
}
else
{
lOllllO\
OlO
=
lOO\
O\
l\
OOOOO
;
lOllllOOlO\
l
=
lOO\
OllllO\
OlO\

;
lOOOOlOll\
OOl
=
tr\
ue
;
}
}
}
}
if
(
lO\
O\
O\
llO\
OOl
==
0
)
{
if
(
lOOO\
O\
l\
OllOOl
)
{
lOO\
llO\
O\
OO\
l
=
0.0f
;
lO\
OOll\
O\
llOll\

=
lOllllOOlOl
;
llO\
l\
OOlOlOl
=
lOOOO\
l\
OOO\
l
;
llO\
lOO\
OOOOO
=
lOllll\
OO\
lO
;
}
lOOOOlOO\
O\
l\

=
lllO\
llOllll
;
}
else
{
if
(
lO\
OO\
O\
lO\
llOOl\

)
{
lOOllOOO\
l\
O
=
0.0f
;
lOOOllOll\
lOO
=
lO\
llllO\
OlOl
;
llOlOO\
lOllO
=
lOOO\
OlOOO\
l
;
llOlO\
OOO\
l\
O\
O
=
lOlll\
lOOlO
;
}
br\
eak
;
}
}
}
bo\
ol\

lOO\
OOlOllOOl
=
fa\
lse
;
if
(
lOOllOO\
O\
Ol
!=
0.0f
||
lOOOl\
lO\
llO\
ll
>
0.0f
)
{
Collis\
ion
lOllO\
ll\
O\
lO\
l\

;
lOl\
lOl\
l\
OlOl
.
Initi\
a\
l\
is\
e\

(
Col\
lision
::
lOllOOll\
llO
,
0.0f
,
lOO\
OllOl\
l\
Oll
,
llOlOO\
lO\
lO\
l\

+
llOl\
O\
OOOO\
OO
*
(
lO\
O\
O\
llOll\
Oll
-
lOlllOlO\
OOO
.
lOlOl\
O\
O\
lOOO
)
,
llOlOOO\
OOO\
O\

)
;
TA_ASSERT
(
llOlO\
OOO\
O\
OO
.
IsNormali\
se\
d\

(
)
)
;
lllOlllOllO
(
lO\
llOllO\
lO\
l\

,
lOl\
l\
l\
OOO\
OOl
)
;
lO\
OOOl\
OllOO\
l\

=
true
;
}
if
(
lO\
OllOOO\
lO
!=
lOO\
Oll\
OllO\
Ol
||
lOOO\
ll\
OlllOO
>
0.0f
)
{
Co\
llision
lOllO\
llOlOl\

;
lOl\
lOll\
OlOl\

.
Init\
ialise
(
Col\
lision\

::
lOllOOllllO
,
0.0f
,
lOOOllO\
ll\
lO\
O
,
llOl\
OOlOllO
+
llOlOOOO\
lOO
*
(
lOOOllOl\
l\
l\
OO\

-
lOll\
lO\
lOO\
OO
.
lOlOl\
O\
Ol\
OOO
)
,
ll\
OlO\
O\
OOlOO\

)
;
lllO\
ll\
lOllO
(
lOllOllOlOl
,
lO\
lll\
OOOO\
Ol
)
;
lOO\
OO\
lO\
l\
lOOl
=
true
;
}
if
(
lOOO\
Ol\
O\
llO\
Ol
||
!
lOll\
lO\
OOOOl
->
lOllO\
ll\
l\
O\
Ol
)
retu\
rn
;
Vec\
3
lllOl\
ll\
OOOO\

=
lOl\
l\
lO\
lOOOO
.
lllOlOlO\
OOO
*
lOll\
l\
O\
O\
OOO\
O
;
Ve\
c3
lllOlllOOOl
=
lOlll\
OlOO\
OO\

.
lll\
OlOlO\
OOl
*
lOlllOOOOOO
;
Ve\
c3
lllO\
ll\
llOOl
=
lllOl\
l\
O\
lllO
;
Ve\
c3
lllOllll\
OlO\

=
lll\
OlllOO\
OO
;
for\

(
in\
t
lOOl\
OOlOl\
O
=
0
;
lOO\
lOO\
lO\
l\
O
<
2
;
lOOlO\
OlOlO
++
)
{
float
llllOlO\
O\
Ol
=
0.0f
;
boo\
l
lOOOl\
lllOOll\

=
false
;
Vec3\

lOOlOllOOl
=
ll\
OOl\
lOll\
lO
.
lllOlOlOO\
O\
l
;
int
lO\
OOllO\
O\
Ol
;
for
(
lOO\
OllOOOl\

=
0
;
lOOOllO\
OO\
l
<
2
;
lOOOllOOOl\

++
)
{
if
(
!
lOOOlll\
l\
O\
Oll\

)
{
float
lllllO\
OOOO\

=
ll\
OOll\
O\
lOll\

.
Dot
(
ll\
lOll\
ll\
OO\
l
-
lOOlO\
llO\
Ol
)
-
lOlllOlOOOO
.
lOl\
OlOOlOOO
;
fl\
oat
ll\
lll\
OO\
OO\
l
=
llOOllOlOll
.
Do\
t\

(
lll\
Ol\
lllO\
lO
-
lOOlO\
l\
lOOl\

)
-
lOlllOlOO\
OO
.
lOl\
Ol\
OOlOO\
O
;
if
(
ll\
l\
ll\
OO\
OOO
>
lO\
ll\
O\
l\
OlOl\

&&
lll\
llO\
OOOl
<
-
lOll\
OlOl\
O\
l\

)
{
ll\
llOlOOOl
=
llll\
lO\
OO\
OO\

/
(
lllll\
O\
OOO\
O
-
ll\
l\
ll\
OO\
OOl\

)
;
Vec\
3\

lOOOl\
l\
O\
lO\
llO
=
lllOl\
lllO\
O\
l
+
(
lllOllllOlO
-
lllOl\
lll\
O\
Ol\

)
*
ll\
llOl\
O\
OOl
;
lOOOll\
O\
l\
Oll\
O
-=
ll\
OOllOlOll
*
lOlllOl\
OOOO
.
lOl\
O\
lO\
OlO\
OO
;
flo\
at
lOllllOOl\
l\

=
(
lO\
O\
OllOlOllO
-
lOOlO\
l\
lOOl
)
.
GetMagnitude\
Sqrd
(
)
;
if
(
lOllllOO\
ll
<
llO\
Ol\
lOl\
l\
l\
O
.
lOlO\
l\
OOlO\
OO
*
llOOll\
Ol\
ll\
O
.
lOl\
OlOO\
lOOO
)
{
Colli\
s\
ion
lOllOllOlOl\

;
lO\
l\
l\
O\
ll\
OlOl\

.
Initi\
alise
(
Co\
l\
lisi\
on
::
lOll\
OOl\
lllO\

,
ll\
llOlOO\
Ol
,
0.0f
,
lOOO\
l\
l\
O\
lOll\
O
,
llOOllOlOll\

)
;
ll\
lOlllOll\
O
(
lOllO\
llOl\
O\
l\

,
lO\
l\
l\
l\
OO\
OOOl\

)
;
lOOO\
llllO\
O\
ll
=
tru\
e
;
}
}
}
lOOlOl\
lOO\
l\

=
ll\
OOllOl\
llO\

.
lllOlO\
lO\
OO\
O\

;
llO\
OllOl\
Oll
=
-
llOOllOlOll
;
}
if\

(
!
lOOOll\
ll\
OOll
)
{
Vec\
3
lO\
llllOOO\
l
;
Vec3
lOOOlOO\
OOO\

;
if
(
Geometry
::
Te\
stSpher\
eMoveme\
nt\
A\
gain\
stL\
ine
(
lllOlll\
lOOl
,
ll\
lO\
llllOlO
,
llOO\
llOlllO
.
ll\
l\
OlOlOOOO
,
llOO\
l\
lOlllO
.
lllOlOlOOOl\

,
lO\
OOl\
lOl\
l\
lO\
l
,
llll\
O\
l\
OOOl
,
lOlll\
lOOO\
l
,
lO\
O\
OlOOOOO
)
)
{
lOll\
ll\
OOOl\

+=
lOOO\
lOO\
OOO
*
llOOl\
l\
Olll\
O
.
lOlOlOO\
lOO\
O
;
Collision
lO\
ll\
OllOlOl
;
lO\
l\
l\
O\
l\
lO\
lO\
l
.
Initi\
alise\

(
Collisi\
on
::
lOllOOllllO
,
ll\
l\
l\
Ol\
O\
O\
O\
l
,
0.0f
,
lOl\
l\
l\
l\
OO\
Ol\

,
lOOO\
l\
OO\
OOO\

)
;
lllOlllOllO
(
lO\
ll\
Ol\
l\
Ol\
O\
l
,
lOlllO\
OO\
O\
Ol\

)
;
lOO\
Ollll\
OOll\

=
tr\
ue
;
}
}
if
(
!
lOO\
Oll\
llO\
Oll
)
{
lOOlO\
ll\
OOl
=
ll\
OO\
llOlll\
O
.
lllOlOlO\
OOl
;
for
(
lOOO\
llO\
OOl
=
0
;
lOO\
Ol\
lOOOl
<
2
;
lOOO\
llO\
OOl\

++
)
{
if\

(
!
lOO\
Ol\
lll\
OOl\
l
&&
ll\
OOll\
Ol\
Oll
.
Dot\

(
ll\
l\
Olll\
lOl\
O
-
lllOll\
llOOl
)
<
0.0f
)
{
Vec3
lOll\
ll\
O\
OOl\

;
Vec3
lOO\
OlOOOOO\

;
if
(
lOO\
Oll\
Ol\
Olll
(
lllOllllOOl\

,
lll\
O\
llllOl\
O
,
lOO\
lOllO\
Ol
,
ll\
OOl\
lOlOll
,
llOOllOl\
llO
.
lOlOlO\
O\
lOO\
O
,
lO\
lllOlO\
O\
OO
.
lOl\
OlOOlO\
OO
,
llllO\
lOO\
Ol
,
lO\
l\
lllOOOl
,
lOOOlOOOOO
)
)
{
lOl\
ll\
lOOOl
+=
lO\
OOlOOOOO
*
llOOllO\
l\
l\
lO
.
lOlOl\
O\
Ol\
OOO
;
Collision\

lOllOllOlOl
;
lOl\
lOllOlOl
.
Initial\
ise
(
Co\
llision\

::
lOllO\
Ol\
ll\
l\
O
,
llll\
O\
lOOOl
,
0.0f
,
lOl\
lllOOOl\

-
lOOOl\
OOO\
OO\

*
lOOOll\
O\
lll\
Ol
,
lOOOl\
OOOOO\

)
;
lllOlllOllO
(
lOllO\
l\
lOlOl
,
lO\
lllOOOOO\
l
)
;
lOOOllllOO\
ll\

=
tru\
e\

;
}
}
lO\
Ol\
Oll\
OO\
l
=
llOOllO\
ll\
lO
.
ll\
lOlOlOOOO
;
llOOll\
Ol\
Oll
=
-
llOO\
l\
lOlOll
;
}
}
ll\
lOlll\
lO\
Ol\

=
lllO\
llOl\
ll\
l
;
lllOll\
llO\
lO
=
lll\
OlllOOO\
l\

;
}
{
fl\
oat\

llllOl\
OOO\
l
;
Vec3
lOl\
ll\
lO\
OOl
;
Ve\
c\
3
lOO\
O\
lO\
O\
OOO
;
if\

(
Ge\
om\
etry
::
TestLi\
neMo\
vem\
en\
tAgainstCapsule
(
lll\
O\
ll\
OlllO\

,
ll\
lO\
l\
l\
Ol\
lll
,
ll\
l\
OlllOOOO\

,
ll\
lOll\
l\
OOOl\

,
llO\
OllOl\
ll\
O
.
lllOlOlOOO\
O\

,
llOOllO\
lll\
O
.
lll\
OlOl\
OOO\
l
,
lO\
OO\
llOl\
llOl
,
ll\
llOlOOOl
,
lO\
llllO\
OOl
,
lOOOl\
O\
OOOO
)
)
{
lOll\
llOOOl
+=
lOOOl\
O\
OOOO
*
llO\
O\
ll\
Ol\
l\
lO
.
lOlO\
l\
OOlOOO
;
Col\
lis\
i\
on
lOl\
lOllOlOl
;
lOll\
O\
l\
lOl\
Ol
.
Initialise
(
Colli\
sion
::
lOl\
lO\
Ollll\
O
,
lll\
lO\
lO\
OOl
,
0.0f
,
lOlll\
lOOOl
,
lOOOlOOO\
O\
O
)
;
lllO\
l\
ll\
OllO\

(
lOll\
OllOlO\
l
,
lOlllO\
OOO\
Ol\

)
;
}
}
{
Vec3\

lOOO\
l\
l\
O\
lOOOl
=
(
llOOl\
lOll\
lO\

.
lll\
Ol\
OlO\
OOO
/
lOlllOOOO\
O\
O
)
*
lOl\
lOl\
lll\
ll\

;
Vec3\

lO\
OOllO\
lOOlO
=
(
llOO\
ll\
Ol\
l\
l\
O
.
ll\
lOlOlO\
O\
O\
l\

/
lOl\
llOOOOOO\

)
*
lO\
ll\
Oll\
llll
;
llOO\
llOlOll
=
(
lllOllOl\
ll\
l\

-
lllOll\
O\
lllO
)
.
GetNor\
m\
al
(
)
;
Vec3
lOOO\
lOllOOOl
=
(
llO\
OllOlllO\

.
lllOl\
Ol\
OOO\
l
-
ll\
O\
Ol\
lOl\
llO
.
lllOlO\
lO\
OOO
)
.
Ge\
t\
N\
or\
m\
al\

(
)
;
Vec3
lOOO\
llOlOOO\
O
=
(
lOOOllOlOO\
lO
-
lOOOllO\
lOOOl\

)
.
Get\
Norma\
l
(
)
;
lOOO\
l\
Ol\
O\
l\
lO\
O\

(
llOOllOll\
l\
O
.
lllOlOlOOO\
l
,
lO\
OO\
llOlO\
Ol\
O\

,
lllOll\
Ol\
l\
lO\

,
lllOllO\
llll
,
llO\
Oll\
O\
lOll\

,
lOO\
OlOllOOOl
,
llOOl\
lOl\
llO
.
lO\
lOlOOl\
O\
OO
,
lOlllOlOOOO
.
lO\
lO\
lOOlO\
OO
,
-
1.0f
,
fa\
ls\
e
,
lO\
lllOOOOOl
)
;
lOOOl\
OlO\
l\
lOO
(
llO\
O\
llOll\
lO\

.
lllO\
lO\
lO\
OOO
,
lOO\
Oll\
OlOOOl
,
lllOll\
Olll\
O
,
lllOl\
lOl\
lll
,
ll\
OOl\
lO\
lOl\
l
,
-
lOOOl\
OllO\
OOl
,
llOOll\
OlllO
.
lOlOlO\
Ol\
OOO
,
lOlllOlOOOO
.
lOlOlOOlOOO
,
-
1.0f
,
fa\
l\
se\

,
lOlllOOOO\
Ol\

)
;
}
}
void
TAC_C\
ALL
lll\
lOOlllll\

(
const\

MFrame\

&
lO\
llOllllll
,
const\

MFrame
&
lOl\
llO\
O\
O\
OOO\

,
lOllOllOllO
*
lOlllOOO\
OOl
)
{
lllO\
Oll\
OOO\
O\

(
)
;
TA_ASSERT
(
lO\
lll\
O\
OO\
OOl
->
lOllOOOl\
l\
O\
l\

->
GetColl\
i\
s\
io\
nObject\
Ty\
pe
(
)
==
Coll\
isi\
o\
n\
Objec\
t
::
TYPE_C\
YLI\
NDER
)
;
const
Col\
lisionO\
bject\
Cylinder
&
ll\
O\
Oll\
Oll\
lO
=
*
(
con\
st\

Coll\
isi\
onObj\
ectCy\
li\
n\
der
*
)
lO\
l\
llOOOO\
Ol
->
lO\
llOOOllOl
;
TA_A\
SSERT
(
lOlllOOOOO\
l
->
lO\
llOO\
O\
ll\
lO\

->
GetCo\
llision\
Obje\
ctT\
ype\

(
)
==
Coll\
ision\
Object
::
TYPE_CA\
CHED_P\
OLY_DA\
TA
)
;
con\
st\

Collisi\
onO\
bj\
ectCache\
dPo\
l\
yDa\
ta\

&
llOllllOlll
=
*
(
cons\
t\

Col\
li\
sionObjec\
t\
C\
ache\
dPolyDa\
ta
*
)
lOll\
l\
OOOOOl
->
lOllOOO\
lll\
O
;
Vec3
lO\
l\
llO\
Olll\
O
[
2
]
;
lO\
lllOOl\
llO\

[
0
]
=
llOOll\
Olll\
O\

.
lll\
OlO\
lOO\
OO
*
lOl\
lOl\
l\
llll
;
lOlllOOlllO\

[
1
]
=
ll\
OOll\
O\
l\
ll\
O
.
ll\
lOl\
OlOO\
Ol
*
lOllOl\
ll\
ll\
l
;
Vec3
lOl\
ll\
lOOOO\
l\

[
2
]
;
lO\
ll\
llOOO\
Ol
[
0
]
=
ll\
OO\
llOll\
lO
.
lllOlOlO\
OO\
O
*
lOlll\
OO\
OO\
OO
;
lOl\
lll\
OOOOl
[
1
]
=
llO\
O\
llOll\
lO
.
lllOl\
Ol\
O\
OOl
*
lOlllOOOOOO
;
Ve\
c3
llO\
Ol\
lOl\
Oll
=
lOlllOOl\
llO\

[
1
]
-
lOlllOOlll\
O
[
0
]
;
TA_ASSERT
(
llO\
O\
llOlOl\
l
.
GetMa\
g\
nitude\

(
)
>
0.0f
)
;
llOOll\
OlOl\
l
.
Norm\
a\
lise
(
)
;
fo\
r
(
in\
t\

lll\
OlllllOO
=
0
;
lllOlllll\
OO
<
llOll\
ll\
O\
lll
.
lllOlOOlOO\
O
(
)
;
)
{
const\

CollisionO\
bj\
e\
c\
tCache\
d\
PolyData\

::
Po\
lyg\
on\

*
llOOOl\
OOlO
=
(
const
Co\
l\
lis\
i\
onOb\
jectCach\
e\
d\
Po\
lyDa\
ta
::
Polyg\
on
*
)
llOllllOl\
ll\

.
lll\
OlOOOlll
(
ll\
lOlll\
l\
lOO
)
;
lllOlll\
ll\
O\
O\

+=
llOll\
l\
lOl\
ll
.
lllO\
OlO\
ll\
ll
(
llOO\
OlOO\
lO
->
lOll\
Ol\
lOl\
l
)
;
#define lOlllOlOOll(lOOOllOOOl) llOOOlOOlO->llOllllOOO[lOOOllOOOl].lOOOOlllll
#define lOllllOOOOO(lllOllllOO, lllOlllllOl, llOOOlOOlO, lOOOOlllll, lOOOlOOOOO)								\
{																											\
	Collision lOllOllOlOl;																				\
	lOllOllOlOl.Initialise(																				\
		Collision::lOllOOllllO,																				\
		lllOllllOO,																								\
		lllOlllllOl,																								\
		lOOOOlllll,																							\
		lOOOlOOOOO);																							\
	lOllOllOlOl.lOllOOlOOOO = llOOOlOOlO->llOlllOOllO;														\
	lllOOllOlOl(lOllOllOlOl, lOlllOOOOOl);							\
}
#define lOlllOllOll(lllOllllOO, lllOlllllOl, llOOOlOOlO, lllllllll, lOOOOOOOOO, lOOOOlllll, lOOOlOOOOO, lOllOlOlOOO) \
	lllOlOOOlOO(lllOllllOO, lllOlllllOl, llOOOlOOlO->llOlllOOllO, lllllllll, lOOOOOOOOO, lOOOOlllll, lOOOlOOOOO, lOllOlOlOOO)
#define lOlllOlllll(lllOllllOO, lllOlllllOl, llOOOlOOlO, lOlllOOlll, lllOOlllOOl, lllOOOllOlO, lOOOOlllll, lOOOlOOOOO) \
	lllOOlllOOO(lllOllllOO, lllOlllllOl, llOOOlOOlO, lOlllOOlll, lllOOlllOOl, lllOOOllOlO, lOOOOlllll, lOOOlOOOOO)
#define lOlllOllOOl(lllllllll, lOOOOOOOOO, lOllOlOlOOO) \
	lllOlOOOlOl(lllllllll, lOOOOOOOOO, lOllOlOlOOO)
#define lOlllOllllO(lllOOOllOlO) \
	lllOOlllllO(lllOOOllOlO, lllOOllllll)
#define lOlllOOllll(llOOllllOO) (llOOOlOOlO->lOOOlOOOOO.Dot((llOOllllOO) - llOOOlOOlO->llOllllOOO[0].lOOOOlllll))
con\
st\

bool\

lOll\
ll\
OOlll
=
false
;
#include "../Physics/zpta003.inl"
#undef lOlllOlOOll
#undef lOllllOOOOO
#undef lOlllOOllll
#undef lOlllOllOll
#undef lOlllOlllll
#undef lOlllOllOOl
#undef lOlllOllllO
}
lllOO\
llOOOl
(
lOl\
l\
lOO\
OOO\
l\

)
;
}
void\

TAC_\
C\
ALL
llllO\
O\
lO\
lll
(
con\
st
MFrame\

&
lOll\
Ol\
lllll
,
co\
nst\

MFra\
m\
e\

&
lOl\
l\
lOOOOO\
O\

,
lOllOllOllO\

*
lO\
lllO\
OOOOl
)
{
TA\
_ASS\
ERT\

(
lOll\
lO\
OO\
OOl\

->
lOll\
OOOllOl
->
Get\
Colli\
sion\
Objec\
tT\
y\
pe
(
)
==
Co\
ll\
is\
i\
onO\
bject
::
TYPE_CYLINDER\

)
;
TA_ASSE\
R\
T
(
lOl\
llOOOOO\
l
->
lO\
llOOOl\
l\
lO
->
Get\
C\
ol\
l\
i\
sio\
nOb\
j\
ec\
tT\
y\
pe
(
)
==
CollisionO\
b\
j\
ect
::
TYPE_L\
I\
NE_\
L\
IST
)
;
cons\
t\

Collis\
ionObjectC\
yl\
inde\
r
&
ll\
OO\
llOlllO
=
*
(
Col\
lisionObje\
ctCylinder
*
)
lOlllO\
O\
OOOl
->
lOllOOOllOl\

;
const
Collis\
io\
nObjec\
tL\
ineList
&
ll\
lOlllll\
ll\

=
*
(
Coll\
isionOb\
j\
ect\
Line\
Li\
st
*
)
lOll\
lOOOO\
Ol\

->
lOllO\
O\
Oll\
lO
;
Vec\
3
llllll\
ll\
l
=
llOOll\
Oll\
l\
O
.
lllOlOl\
OOOO
*
lOllOll\
llll
;
Vec3
lOOOOO\
OOO\
O
=
llOOl\
l\
OlllO
.
lll\
OlO\
lOOOl
*
lOllOllllll
;
Vec3
llllOOOOOO\
O
=
lOOOOOOOO\
O\

-
llll\
ll\
l\
ll
;
flo\
at
lOOOlOO\
OlOOO
=
llOOll\
OlllO
.
lOlOlO\
OlOOO
*
llOOllOll\
lO
.
lOlO\
lOOl\
O\
OO
;
fo\
r
(
int
lllO\
OOOOl\
O
=
0
;
lllO\
OOOOlO
<
lllO\
llllll\
l
.
ll\
llOOOOO\
Ol
.
lOOOlllOO\
l
(
)
;
lll\
O\
OOOOlO
++
)
{
fl\
oat
llllOlOOOl
;
Vec3\

lOll\
llO\
OOl
;
Vec3\

lOlll\
l\
OOlO
;
con\
s\
t
Vec\
3
&
lOO\
lOlO\
l\
ll\

=
lllOll\
ll\
ll\
l
.
llllO\
O\
OOOOl
[
lllOO\
O\
O\
O\
l\
O
]
.
lO\
OlOlOlll
;
const\

Vec3
&
lOOlO\
llOOl
=
lllOll\
l\
llll\

.
lll\
lOO\
OOOOl
[
lllOOOOOlO
]
.
lOO\
lOllOO\
l
;
float
lO\
OOlO\
O\
OlOOl
=
llllO\
O\
O\
O\
OO\
O
.
Dot
(
lOOlOlOlll\

-
lOOOO\
OOOOO
)
;
flo\
at
lOOOl\
OOOlOl\
O
=
ll\
ll\
OOOOO\
OO
.
Dot
(
lOOlOll\
OOl
-
lO\
OOOOOOOO
)
;
if
(
lOO\
O\
l\
O\
OOlOO\
l
>
0.0f
&&
lOOOlOOO\
l\
Ol\
O
<
0.0f
)
{
ll\
l\
l\
OlOOOl\

=
lOO\
OlOOO\
l\
OOl
/
(
lO\
O\
OlOOO\
lOO\
l\

-
lO\
OO\
lO\
OOlOlO
)
;
lO\
l\
ll\
lO\
OO\
l\

=
lOOl\
OlOlll
+
(
lOO\
lO\
llOOl\

-
lOOl\
O\
lOl\
ll
)
*
llllOlO\
OO\
l
;
float
lllOOlOlOl
=
(
lOl\
l\
llO\
O\
Ol\

-
lOOOOO\
O\
O\
OO\

)
.
Ge\
tMa\
g\
nitudeSqrd\

(
)
;
if\

(
lllOOlOlOl
<
lOOOlOOO\
lOO\
O\

)
{
Collision\

lOl\
l\
OllO\
l\
Ol
;
lOllOllO\
lOl\

.
Init\
ialise
(
Collis\
ion
::
lOllOlO\
OOlO\

,
0.0f
,
ll\
llOl\
OO\
O\
l
,
lOl\
lllOOOl\

,
lll\
lOO\
OOOO\
O
.
GetNorma\
l
(
)
)
;
lOllO\
llO\
lOl
.
lO\
llO\
OO\
ll\
ll
=
ll\
lOOOOO\
lO
;
if
(
!
lOl\
llOO\
OOOl
->
lOllO\
lllO\
lO\

)
lO\
ll\
OllOlO\
l
.
lOllOOlOOOO
=
0
;
els\
e
lOl\
l\
Ol\
lOlOl
.
lO\
l\
lO\
Ol\
O\
OOO
=
1
;
if
(
!
lllOlllO\
llO\

(
lOllOll\
OlOl
,
lOll\
l\
O\
O\
OO\
Ol\

)
)
re\
turn
;
co\
ntinu\
e
;
}
}
lO\
OOlOOOlOOl
=
llll\
OO\
O\
OOO\
O
.
Dot
(
lOOl\
OlOlll
-
lllllll\
ll\

)
;
lOOO\
l\
OOOlO\
lO
=
ll\
llOOOOOO\
O
.
Dot
(
lOOlOl\
l\
OOl
-
llll\
lllll\

)
;
if
(
lOOOlOO\
OlO\
Ol
<
0.0f
&&
lOO\
OlO\
O\
O\
lOl\
O
>
0.0f
)
{
llll\
Ol\
O\
O\
Ol\

=
lOOOl\
O\
O\
OlO\
Ol\

/
(
lOOOlOOOlOOl
-
lOOOl\
O\
OOlOl\
O
)
;
lOl\
ll\
l\
OOOl\

=
lO\
O\
lO\
lOlll
+
(
lOOlOll\
O\
Ol\

-
lOOlOlOlll
)
*
llllOlOOOl
;
floa\
t
lllOO\
lOlOl\

=
(
lOllll\
OOO\
l
-
lll\
l\
ll\
ll\
l
)
.
Get\
Ma\
g\
nit\
ude\
Sqrd
(
)
;
if\

(
ll\
lOOlO\
lOl
<
lOO\
O\
l\
OO\
O\
lOOO
)
{
Coll\
isio\
n\

lO\
l\
lO\
llOlOl
;
lOl\
lOllO\
l\
O\
l
.
In\
i\
tiali\
se
(
Colli\
s\
i\
on
::
lO\
llOl\
OOO\
l\
O
,
0.0f
,
llllO\
lOOO\
l\

,
lO\
lll\
l\
OO\
Ol\

,
-
ll\
l\
lOOOOOOO
.
Ge\
t\
No\
rma\
l
(
)
)
;
lOllOll\
OlO\
l
.
lOllO\
OO\
l\
ll\
l\

=
lllOOOOO\
lO
;
if\

(
!
lOll\
lOOO\
OOl
->
lOll\
Ol\
llOlO
)
lO\
llOllOlOl
.
lOllOOlO\
OOO\

=
0
;
else
lOllOllOlOl
.
lOllOO\
lOOOO\

=
1
;
if\

(
!
lll\
O\
l\
llOllO
(
lO\
llOl\
lOlOl
,
lOlllOOOO\
Ol\

)
)
return
;
co\
nti\
nu\
e
;
}
}
if\

(
Geo\
metr\
y\

::
TestS\
phereMovement\
Agai\
n\
stLi\
n\
e
(
lOOlOlOl\
l\
l
,
lOO\
lOllOOl
,
llll\
l\
l\
ll\
l
,
lOOOO\
O\
OOO\
O
,
llOO\
llOlllO
.
lOlOlOOlO\
OO\

,
ll\
ll\
OlO\
O\
O\
l\

,
lO\
ll\
l\
l\
OOOl\

,
lO\
l\
lllOO\
l\
O
)
)
{
lOllllOOO\
l
+=
lOllllO\
OlO
*
llOOllO\
lllO\

.
lOl\
Ol\
OOlOOO
;
Collis\
io\
n\

lOllOll\
OlOl\

;
lOllOllOlOl
.
Ini\
tiali\
se
(
Collisio\
n
::
lO\
ll\
OlO\
OOl\
O
,
0.0f
,
llllOlOOOl\

,
lOlll\
l\
OOOl\

,
lO\
llllOOlO
)
;
lOll\
Ol\
l\
OlOl
.
lOllOOO\
l\
lll
=
lllOOO\
OOlO
;
if
(
!
lOlllO\
OOOO\
l
->
lOllO\
ll\
lOlO
)
lOllOllOlO\
l
.
lOllO\
O\
lOOOO
=
0
;
els\
e
lO\
l\
lOllO\
lOl
.
lO\
llOOlOO\
OO
=
1
;
if
(
!
lllOl\
llO\
l\
lO
(
lOllOll\
OlOl
,
lOlllOOOO\
Ol
)
)
re\
t\
u\
r\
n\

;
}
}
}
#endif //
}
