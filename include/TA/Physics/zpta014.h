//---------------------------------------------------------------------------------
// File Name: zpta014.h
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifndef lOllOOOlllOO
#define lOllOOOlllOO
#ifndef TA_DEBUG_H
#include "../Common/Debug.h"
#endif //
#ifndef TA_TYPES_H
#include "../Common/Types.h"
#endif //
#ifndef TA_MATRIX_H
#include "../Common/Matrix.h"
#endif //
namesp\
ace
TA
{
na\
mes\
pace
ll\
OlOlOOlOlO\

{
class
llOl\
O\
l\
OlO\
O\
lO
;
cl\
ass
llOlO\
lOllll\
l
;
}
class\

lOl\
lOl\
O\
lO\
O\
Ol\

{
pu\
blic
:
en\
u\
m
ll\
lOOOlO\
O\
l\
OO
{
llOOOOOllOll
=
0x1
,
lllOOOOOOlll
=
0x2
,
llOOOOOlllOO
=
0x4
,
ll\
Ol\
l\
O\
Ol\
Ol\
OO\

=
0x8
,
llO\
llOO\
lOl\
Ol\

=
0x10
,
}
;
lO\
llOlOlOOO\
l\

(
)
;
~
lO\
l\
lOlOl\
O\
OO\
l
(
)
;
vo\
id
Ini\
ti\
al\
is\
e
(
int
lllOOOlOOlOl
,
int
ll\
OlOllOllO\
l
)
;
void\

Finalise
(
)
;
voi\
d
Clear\

(
)
;
voi\
d
llO\
OO\
OlOO\
lO\
O\

(
int
llO\
OO\
OO\
l\
lllO
,
int
lOOOlOOOl\
ll
,
floa\
t
lOOOlOOllO\

)
;
floa\
t\

GetImpu\
l\
se
(
in\
t
llOO\
O\
O\
Ol\
l\
ll\
O
,
int
lOO\
OlOO\
Olll
)
;
void
llO\
OO\
OOllOOO
(
float
llOl\
l\
lllOO\
lO
,
const
Mat33\

&
ll\
Olll\
llOOll\

)
;
float
Get\
Mass
(
in\
t
lO\
OOlOOlll
)
con\
st
{
return
1.0f
/
(
llO\
l\
l\
llOOlOl\

[
lOOOlOOll\
l\

]
.
lO\
O\
Olll\
Ol\
OO\
O
*
llOllllOO\
lO\
l
[
lOOO\
lO\
Olll\

]
.
lOOOl\
llOl\
O\
O\
O
)
;
}
float
lllOO\
OlO\
Ol\
lO
(
in\
t
lOO\
Ol\
OO\
lll\

)
co\
nst
{
re\
turn\

llO\
llllOOlOl
[
lOOOlOOlll
]
.
lO\
OO\
l\
l\
lO\
lOOO
*
ll\
O\
lll\
lOOlOl
[
lOOO\
lO\
Olll
]
.
lOOOlll\
OlO\
O\
O
;
}
int
llOOOOOlllll
(
int\

llOlOlO\
l\
OOll\

,
in\
t
llOllOOOlllO
,
int
llOll\
OOO\
llll
,
u32
lOlOllO\
OO\
l
)
;
void
llOOO\
Ol\
O\
OOOO
(
int
ll\
OOOOO\
ll\
ll\
O
,
int
lOOOlOO\
Oll\
l
,
cons\
t
Vec3
&
llOOl\
ll\
l\
OO
,
const
Vec3\

&
llOllOOO\
OOOl\

)
;
void
llOOOOlOOO\
OO
(
int
llO\
OO\
OOllllO
,
int
lOOOl\
O\
OOlll\

,
co\
nst
Vec3\

&
llllOOOOOl
,
con\
st\

Ve\
c\
3
&
ll\
O\
ll\
OO\
O\
OOlO
,
cons\
t
Vec3
&
lll\
lOOOOlO
,
const
Vec3\

&
llOllO\
OOOO\
l\
l
)
;
voi\
d
ll\
OOO\
Ol\
O\
OOO\
l
(
)
;
bool
llOOOOl\
OlO\
lO
(
)
;
void
llO\
O\
O\
OlO\
l\
lOO
(
)
;
int
llOO\
OOOOlOOl
(
)
con\
st
{
retu\
rn
ll\
Ol\
l\
OOOOllO
;
}
int
ll\
OO\
OOOO\
lOOO
(
)
con\
st\

{
ret\
urn
lO\
l\
OOOlOlO
;
}
void
lllOO\
O\
lOO\
l\
ll
(
)
;
static
void
llOlO\
lO\
lll\
Ol
(
int
lOOlllOll\
O
,
in\
t
llO\
O\
O\
lOl\
llll
,
fl\
o\
at
*
lOOO\
lllOlll
)
;
priv\
at\
e
:
struc\
t
ll\
OlOl\
lOllll
{
float
lOOOlllOlOOO
;
float
llOl\
l\
OlOOOOO
[
1
]
;
flo\
at
ll\
Ol\
l\
OlOOOOl
[
2
]
;
float
llO\
llOl\
OOO\
lO\

[
3
]
;
}
;
st\
ruct
ll\
OlO\
llOOll\
O\

;
st\
ruct
ll\
OlOlll\
lOOO\

;
struc\
t\

ll\
Ol\
lO\
OllllO\

;
st\
r\
u\
ct\

llOllOOlOlll
{
struc\
t\

llOOOOOOllO
;
float
*
llOllOlOO\
Oll
;
fl\
o\
a\
t
*
ll\
OllO\
lO\
O\
lOO
;
floa\
t\

*
llOllO\
lOOl\
Ol
;
int
llO\
l\
lOllOOOO
;
in\
t\

llO\
O\
lOllO\
lOl
;
int
llOllOlOOl\
ll
;
int
llO\
l\
lOlOOllO
;
int
llO\
l\
lO\
lOllOO
;
int
llOll\
OlOl\
O\
OO
;
llOOOOOO\
llO
*
llOl\
l\
OlOlO\
Ol
;
int
llOllOllOlll
;
llOO\
O\
O\
OOllO\

*
*
ll\
OllOl\
OlOlO
;
llOOOOOOllO
*
*
llO\
llOlOlOll
;
llOlO\
l\
O\
OlO\
lO\

::
ll\
OlOlOlllll\

*
llOllOl\
O\
l\
lOl\

;
ll\
OlOl\
OOlOlO
::
ll\
OlO\
lOlO\
O\
l\
O
*
llOllOlO\
lll\
O
;
int
ll\
Ol\
lOO\
O\
OlOO\

;
in\
t
llOl\
lOOO\
OlOl
;
ll\
Oll\
O\
OllllO
*
llOllOlOllll
;
llOl\
l\
O\
Ol\
Oll\
l
(
)
;
~
ll\
O\
ll\
OOlO\
l\
l\
l\

(
)
{
Fi\
nali\
s\
e
(
)
;
}
void
Init\
ial\
ise
(
int\

ll\
OO\
OlO\
lllll
,
int
llOl\
Oll\
OllOl
)
;
void\

Final\
is\
e
(
)
;
voi\
d\

Clear
(
)
;
void
llOllOllO\
OlO
(
llOlO\
llllOOO
*
llOl\
l\
Oll\
OOll
)
;
void\

llOllO\
llO\
llO
(
)
;
void\

llOl\
lOl\
llOl\
O
(
cons\
t\

float
*
llOlll\
Ol\
O\
OO\
O
,
float
*
llOlllOlOOOl
)
;
void
llOllOll\
lOOO\

(
llOOO\
OOOllO\

*
llOOOOO\
Olll
)
;
void
ll\
O\
l\
lO\
lllOOl
(
)
;
void
llOllOlllOlO
(
)
;
void
llOllOll\
ll\
lO
(
llOlO\
l\
OOl\
OlO
::
llOlOl\
O\
lOO\
lO\

&
llOl\
Ol\
lllOO\
l\

,
int
lOO\
Ol\
OOOl\
ll
,
int\

lOO\
OlOOlOOO
)
;
voi\
d\

llOllOllllll
(
llO\
lOl\
OOlOlO
::
ll\
OlO\
lO\
lOOlO
&
llOl\
OllllOOl
,
int
lOOOlOOOlll
,
int
lOOO\
lOOlOOO\

)
;
void
llOlll\
OOOOOO
(
ll\
Ol\
Ol\
O\
OlO\
lO
::
llOlOlO\
lOOlO
&
lO\
lOOll\
OO\
OO
,
const
llOlO\
lOOlOl\
O
::
ll\
OlO\
lO\
lOOlO
&
llO\
l\
llOOOlll
,
const
llOlOlOO\
lOlO
::
ll\
O\
lOlOlOO\
lO
&
lOOlOOlO\
lO
)
;
void
llO\
ll\
lO\
OO\
lOO
(
ll\
O\
lOl\
O\
Ol\
O\
lO
::
llO\
lOlOl\
OOl\
O
&
lOlO\
O\
llOOOO
,
const
llOlO\
lOOlOlO
::
ll\
Ol\
O\
lOlOOlO
&
lllOOllOlO
,
co\
nst
ll\
OlOlO\
OlOl\
O\

::
llOlOlOlOOlO
&
lllO\
OllllO
)
;
vo\
id
ll\
Ol\
llOO\
OOOl
(
ll\
OlOlOOlOlO
::
llOlOl\
OlOOlO
&
ll\
l\
OOll\
O\
lO
,
const
llOlOlOO\
l\
OlO
::
llOlO\
l\
OlO\
OlO\

&
lllOO\
ll\
llO
)
;
vo\
id\

ll\
Olll\
OOOlOO
(
ll\
O\
lO\
lO\
OlOlO
::
llOlOlO\
llll\
l
&
lOlOOl\
lOOOO
,
co\
nst
llOl\
O\
lOOlOlO
::
llOl\
OlOl\
OOlO
&
ll\
Ol\
l\
l\
OOlllO
,
const\

llOlO\
l\
OOl\
Ol\
O\

::
ll\
OlO\
lOll\
l\
ll
&
llO\
ll\
lOOllll
)
;
void
ll\
O\
lllOOOOl\
O
(
llOl\
OlOOl\
O\
lO
::
llO\
lO\
lOlllll
&
lOl\
O\
Oll\
O\
O\
OO
,
const\

llOlOlOO\
lOlO
::
llOlOl\
O\
lO\
OlO
&
ll\
O\
l\
l\
lOOlllO
,
cons\
t
ll\
Ol\
Ol\
OOlOlO
::
llOlOlOllll\
l\

&
ll\
O\
lllOOlll\
l
)
;
vo\
id
llOl\
l\
lO\
OOlO\
l
(
llOlOlO\
O\
lO\
lO\

::
llOlOlOlll\
ll
&
lOlOOll\
OO\
O\
O
,
co\
nst\

ll\
OlOlOOlOlO
::
llOlO\
lOlOOlO\

&
ll\
OlllOOll\
lO
,
const
llOl\
Ol\
O\
O\
lOl\
O
::
llO\
lOlOll\
l\
ll
&
llOlllO\
Ol\
ll\
l
)
;
vo\
id\

llOlllOl\
OOll
(
float
*
llOlll\
Ol\
OlOO
,
float
*
llOl\
l\
lO\
lOl\
Ol
,
llOlO\
llOOllO\

*
ll\
OlllOlO\
llO\

,
int
lOOOl\
OOlOO\
O
)
;
floa\
t
llOll\
lOl\
Ol\
ll
(
llOlO\
l\
lOO\
llO
*
ll\
Ol\
llOlO\
llO
,
int\

lOO\
OlOOO\
lll
)
;
vo\
id
ll\
Olll\
OllOOO
(
llOl\
OllOOl\
l\
O\

*
llOlllOlOl\
lO
,
float\

*
ll\
OlllOl\
lO\
Ol
)
;
vo\
i\
d
llO\
lO\
llOlllO
(
llOl\
OllOllll
*
llOlOl\
ll\
OO\
OO
,
int
ll\
O\
l\
Ol\
llO\
OOl
)
;
}
;
int
lO\
lOOOlOOl
;
in\
t
lOlOOOlOlO
;
int
ll\
OO\
lOll\
OlO\
l
;
int\

llOllOOOOllO
;
flo\
at\

*
ll\
Oll\
l\
OlllOO
;
floa\
t
*
llOll\
l\
OlllO\
l
;
float
*
llOl\
lOlOOOl\
l
;
flo\
a\
t\

*
ll\
O\
llOlOOlOl
;
floa\
t
*
llO\
l\
ll\
Oll\
llO
;
int\

*
llO\
l\
ll\
Olll\
ll\

;
int
*
ll\
Ol\
lllOOO\
OO
;
flo\
at\

*
ll\
O\
l\
l\
llOOO\
Ol
;
float
*
llOllllOO\
Ol\
O
;
int
*
llOllllOOO\
ll
;
int
*
llOl\
lllOO\
lOO
;
void
*
lOlOO\
lO\
ll\
O
;
llO\
lO\
llO\
llll
*
llOllllOOlOl
;
llOlOl\
l\
O\
OllO
*
ll\
OllllOOl\
lO
;
llOllOOlOl\
ll
*
llO\
llll\
OlOOO
;
llOlOllllOO\
O
*
llOllllO\
Ol\
ll\

;
int\

llOllllOlOll
;
int\

*
llOlll\
l\
OllOO\

;
int
llOll\
llOlO\
Ol
;
int
*
llOl\
lllOlOlO
;
float
*
llO\
llllOllOl\

;
float\

*
llOllllOlllO
;
int
llOllllO\
ll\
ll
;
in\
line\

float
&
ll\
lOO\
OOOl\
lO\
l
(
in\
t
lOOOlOO\
O\
l\
ll
,
int
lOOOl\
OOl\
O\
OO\

)
{
return
llO\
ll\
llOOOOl
[
lOOOl\
OO\
Olll
*
lOlOO\
Ol\
OOl\

+
lOOO\
lOO\
lO\
OO
]
;
}
void\

ll\
Oll\
l\
ll\
l\
OO\
l\

(
)
;
bo\
ol
llOlllllll\
Ol
(
in\
t
llO\
l\
l\
ll\
lllOO\

)
;
vo\
id\

ll\
l\
O\
OOOOO\
llO
(
int
llOlllllllO\
O
)
;
void
lllOOO\
OOlllO
(
int
lllOO\
OO\
Ollll
,
int
lllOOOOl\
OO\
O\
O\

,
const\

float\

*
lOOO\
ll\
lOlll\

,
co\
nst
flo\
at
*
llOlOl\
llOO\
l\
l
,
flo\
at\

*
ll\
lO\
O\
OO\
l\
O\
O\
Ol\

)
;
void
lllOOOOOlO\
Ol\

(
in\
t
llOlllllllO\
O
,
fl\
o\
a\
t
&
lOOOOlOlll\
l
,
int
&
llO\
ll\
OllO\
OOl
)
;
static
voi\
d
lllOO\
OOlOlO\
l
(
int
lOOl\
ll\
OllO
,
float
*
lOO\
OlllO\
lll
,
flo\
at
*
llO\
lll\
OlOOO\
O
,
float
*
ll\
Olll\
Ol\
OOOl\

)
;
void
ll\
lOO\
OOlO\
llO\

(
int
lO\
O\
lllOl\
l\
O
,
fl\
oat
*
lO\
O\
Olll\
O\
ll\
l
,
float\

*
ll\
O\
lll\
OlOOOO
,
floa\
t
*
llOl\
ll\
OlOOOl
)
;
st\
atic
void
llOlOlOlllOl
(
int
lOOlllOllO\

,
in\
t
llOOOl\
O\
lllll
,
fl\
oat
*
lOO\
Ol\
ll\
Ol\
ll
,
floa\
t
*
llOl\
llOlO\
OOO\

,
float\

*
llOlllOlO\
OOl
)
;
st\
atic
void
llOllllllll\
O\

(
in\
t
lO\
O\
lllOl\
lO
,
int
llO\
OOlOll\
l\
ll
,
float\

*
lO\
OO\
ll\
lOlll\

,
float
*
ll\
Ol\
ll\
Ol\
OOOO
,
flo\
at\

*
llOlllOl\
O\
OOl
)
;
sta\
tic
void\

lll\
OO\
O\
OlO\
ll\
l\

(
int
lOO\
ll\
l\
Oll\
O
,
int
ll\
OOOlOlllll
,
float
*
lllOO\
OOllOOO\

,
float
*
lll\
OOOO\
llOOl
)
;
void
ll\
lOOO\
O\
Ol\
OlO\

(
int
lOOlllO\
l\
lO\

,
int
llO\
OOlOll\
l\
l\
l
,
float
*
lOOO\
l\
ll\
Ol\
l\
l\

,
int
ll\
lOOOOl\
l\
Ol\
O
)
;
bool
lllOOOO\
OlOll
(
in\
t
lOOlllO\
llO
,
int
llO\
OOlO\
lll\
ll
,
flo\
at
*
lllOOOO\
l\
ll\
ll\

,
con\
st
float
*
ll\
l\
OOOlOOOOO
,
int
lllOOO\
lOOOO\
l
)
;
#ifdef _DEBUG
vo\
i\
d
lO\
ll\
OlOl\
OOOl
::
llOllll\
l\
OOOl
(
)
;
#endif
}
;
}
;
#endif //
