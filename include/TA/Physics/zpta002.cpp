//---------------------------------------------------------------------------------
// File Name: zpta002.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#include "../Physics/zpta000.h"
#include <memory.h>
names\
pac\
e
TA
{
#ifdef lOllllOlOOO
st\
a\
ti\
c\

const\

u3\
2
lOllllOlOOl
[
256
]
=
{
0x00000000
,
0x00000001
,
0x00000011
,
0x00000082
,
0x00000021
,
0x00000102
,
0x00000112
,
0x00000883
,
0x00000031
,
0x00000182
,
0x00000192
,
0x00000c83
,
0x000001a2
,
0x00000d03
,
0x00000d13
,
0x00006884
,
0x00000041
,
0x00000202
,
0x00000212
,
0x00001083
,
0x00000222
,
0x00001103
,
0x00001113
,
0x00008884
,
0x00000232
,
0x00001183
,
0x00001193
,
0x00008c84
,
0x000011a3
,
0x00008d04
,
0x00008d14
,
0x00046885
,
0x00000051
,
0x00000282
,
0x00000292
,
0x00001483
,
0x000002a2
,
0x00001503
,
0x00001513
,
0x0000a884
,
0x000002b2
,
0x00001583
,
0x00001593
,
0x0000ac84
,
0x000015a3
,
0x0000ad04
,
0x0000ad14
,
0x00056885
,
0x000002c2
,
0x00001603
,
0x00001613
,
0x0000b084
,
0x00001623
,
0x0000b104
,
0x0000b114
,
0x00058885
,
0x00001633
,
0x0000b184
,
0x0000b194
,
0x00058c85
,
0x0000b1a4
,
0x00058d05
,
0x00058d15
,
0x002c6886
,
0x00000061
,
0x00000302
,
0x00000312
,
0x00001883
,
0x00000322
,
0x00001903
,
0x00001913
,
0x0000c884
,
0x00000332
,
0x00001983
,
0x00001993
,
0x0000cc84
,
0x000019a3
,
0x0000cd04
,
0x0000cd14
,
0x00066885
,
0x00000342
,
0x00001a03
,
0x00001a13
,
0x0000d084
,
0x00001a23
,
0x0000d104
,
0x0000d114
,
0x00068885
,
0x00001a33
,
0x0000d184
,
0x0000d194
,
0x00068c85
,
0x0000d1a4
,
0x00068d05
,
0x00068d15
,
0x00346886
,
0x00000352
,
0x00001a83
,
0x00001a93
,
0x0000d484
,
0x00001aa3
,
0x0000d504
,
0x0000d514
,
0x0006a885
,
0x00001ab3
,
0x0000d584
,
0x0000d594
,
0x0006ac85
,
0x0000d5a4
,
0x0006ad05
,
0x0006ad15
,
0x00356886
,
0x00001ac3
,
0x0000d604
,
0x0000d614
,
0x0006b085
,
0x0000d624
,
0x0006b105
,
0x0006b115
,
0x00358886
,
0x0000d634
,
0x0006b185
,
0x0006b195
,
0x00358c86
,
0x0006b1a5
,
0x00358d06
,
0x00358d16
,
0x01ac6887
,
0x00000071
,
0x00000382
,
0x00000392
,
0x00001c83
,
0x000003a2
,
0x00001d03
,
0x00001d13
,
0x0000e884
,
0x000003b2
,
0x00001d83
,
0x00001d93
,
0x0000ec84
,
0x00001da3
,
0x0000ed04
,
0x0000ed14
,
0x00076885
,
0x000003c2
,
0x00001e03
,
0x00001e13
,
0x0000f084
,
0x00001e23
,
0x0000f104
,
0x0000f114
,
0x00078885
,
0x00001e33
,
0x0000f184
,
0x0000f194
,
0x00078c85
,
0x0000f1a4
,
0x00078d05
,
0x00078d15
,
0x003c6886
,
0x000003d2
,
0x00001e83
,
0x00001e93
,
0x0000f484
,
0x00001ea3
,
0x0000f504
,
0x0000f514
,
0x0007a885
,
0x00001eb3
,
0x0000f584
,
0x0000f594
,
0x0007ac85
,
0x0000f5a4
,
0x0007ad05
,
0x0007ad15
,
0x003d6886
,
0x00001ec3
,
0x0000f604
,
0x0000f614
,
0x0007b085
,
0x0000f624
,
0x0007b105
,
0x0007b115
,
0x003d8886
,
0x0000f634
,
0x0007b185
,
0x0007b195
,
0x003d8c86
,
0x0007b1a5
,
0x003d8d06
,
0x003d8d16
,
0x01ec6887
,
0x000003e2
,
0x00001f03
,
0x00001f13
,
0x0000f884
,
0x00001f23
,
0x0000f904
,
0x0000f914
,
0x0007c885
,
0x00001f33
,
0x0000f984
,
0x0000f994
,
0x0007cc85
,
0x0000f9a4
,
0x0007cd05
,
0x0007cd15
,
0x003e6886
,
0x00001f43
,
0x0000fa04
,
0x0000fa14
,
0x0007d085
,
0x0000fa24
,
0x0007d105
,
0x0007d115
,
0x003e8886
,
0x0000fa34
,
0x0007d185
,
0x0007d195
,
0x003e8c86
,
0x0007d1a5
,
0x003e8d06
,
0x003e8d16
,
0x01f46887
,
0x00001f53
,
0x0000fa84
,
0x0000fa94
,
0x0007d485
,
0x0000faa4
,
0x0007d505
,
0x0007d515
,
0x003ea886
,
0x0000fab4
,
0x0007d585
,
0x0007d595
,
0x003eac86
,
0x0007d5a5
,
0x003ead06
,
0x003ead16
,
0x01f56887
,
0x0000fac4
,
0x0007d605
,
0x0007d615
,
0x003eb086
,
0x0007d625
,
0x003eb106
,
0x003eb116
,
0x01f58887
,
0x0007d635
,
0x003eb186
,
0x003eb196
,
0x01f58c87
,
0x003eb1a6
,
0x01f58d07
,
0x01f58d17
,
0x0fac6888
,
}
;
#endif
const
fl\
oa\
t
lOOOl\
OO\
Oll
=
0.001f
;
#ifdef _DEBUG
#define lOllllOlOlO() if (lOOlOOOllO){  lOllllOlOll(lOllllOllOO); lOllllOllOl(); }
#define lOllllOlllO(x, y) if (lOOlOOOllO) { TA_ASSERT(lOllllOllll(x, y)); }
#define lOlllllOOOO(x) if (lOOlOOOllO) { TA_ASSERT(lOlllllOOOl(x)); }
#define lOlllllOOlO(x) if (lOOlOOOllO) { x }
#else
#define lOllllOlOlO() 
#define lOllllOlllO(x, y)
#define lOlllllOOOO(x)
#define lOlllllOOlO(x)
#endif
lO\
lllllOOll
::
lO\
lll\
llOOll
(
)
{
lOlllllOlOO\

.
Clear\

(
)
;
lOl\
l\
l\
l\
lOlO\
l
=
0
;
lOllllOll\
O\
O
=
0
;
lOlllllO\
ll\
O
=
0
;
#ifdef _DEBUG
lOlll\
llO\
l\
ll
=
0
;
lO\
ll\
lll\
lOOO
=
0
;
lOl\
l\
llllOOl
=
0
;
lO\
l\
lll\
llO\
lO\

=
0
;
lOllllllOll
=
0
;
#endif //
}
lOl\
lll\
lOO\
ll
::
~
lO\
ll\
lllOOll
(
)
{
Finalise
(
)
;
}
void\

lOl\
lll\
lOOll
::
Initial\
ise
(
con\
st
Vec3\

&
v3Ce\
nter
,
float
lOl\
lll\
l\
llO\
O
)
{
lOOOOO\
Oll\
O
(
lO\
lll\
l\
Oll\
O\
O\

==
0
,
"CTree::Initialise: Already initialised")
;
lOOOOOO\
llO
(
lOlllll\
Ol\
lO\

==
0
,
"CTree::Initialise: Already initialised")
;
lOl\
lll\
lOl\
Ol\

=
1.0f
*
(
flo\
at\

)
(
1
<<
30
)
/
lOl\
lll\
l\
ll\
OO
;
lOllll\
lOl\
OO
.
x
=
lOllll\
lllO\
O
*
0.5f
;
lOlll\
llOlOO
.
y
=
lOllll\
l\
l\
lO\
O
*
0.5f
;
lO\
lll\
llO\
lOO\

.
z
=
lOlllllllOO\

*
0.5f
;
lOlll\
lOllOO\

=
0
;
}
void
lOllll\
lOOl\
l
::
Final\
ise
(
)
{
lO\
llll\
lOlOO
.
Clear
(
)
;
lOll\
lllOlOl
=
0
;
lO\
ll\
l\
lO\
ll\
OO
=
0
;
lO\
ll\
lllOll\
O
=
0
;
#ifdef _DEBUG
lOlllll\
Olll
=
0
;
lOl\
ll\
lllOOO
=
0
;
lOlllll\
lOOl
=
0
;
lO\
lllll\
lOlO
=
0
;
lOllllllOll\

=
0
;
#endif //
}
void
lOl\
l\
l\
l\
lO\
Ol\
l
::
lO\
ll\
lllllOl
(
Space\
D\
i\
v\
i\
sio\
nObje\
c\
t
&
lOllllll\
llO\

)
{
lOl\
ll\
l\
ll\
l\
ll\

*
lOO\
lllOOO\
O\

=
(
lOllll\
l\
llll
*
)
lO\
llllll\
llO\

.
Ge\
tSpa\
ceDivis\
i\
onN\
od\
eM\
em\
or\
y
(
)
;
TA_ASSERT
(
lOll\
llllllO
.
Ge\
tS\
pac\
eDi\
vi\
s\
io\
nNo\
d\
eM\
emorySi\
ze
(
)
>=
size\
of
(
lO\
lll\
lllll\
l
)
)
;
TA_\
AS\
SERT\

(
lO\
Olll\
O\
OO\
O
)
;
lO\
O\
ll\
lO\
OOO
->
llOOOO\
OOOO\
O
.
lOlOl\
lOOOl\

=
ll\
O\
OOOOOOO\
l\

;
#ifdef _DEBUG
lOllllll\
OO\
l
++
;
lOlll\
lllOll\

++
;
#endif //
llOOO\
O\
OOO\
lO\

(
&
lOOll\
lO\
OOO
->
llOOO\
OOOO\
O\
O
)
;
lO\
Olll\
OOOO\

->
llO\
O\
OOO\
O\
O\
ll\

.
lOlOllOOOl
=
llOOO\
OOO\
lOO
;
lO\
l\
l\
llOlOl\
O\

(
)
}
void
lOlllllOOl\
l\

::
llOOOOOOlO\
l
(
Sp\
aceDivi\
s\
i\
onOb\
jec\
t
&
lOl\
lllll\
llO\

)
{
lOl\
lllOlO\
lO
(
)
lOllllll\
ll\
l\

*
lOOlllO\
OOO
=
(
lOlll\
llllll
*
)
lOll\
ll\
lll\
lO
.
Get\
Spa\
ceDi\
v\
isio\
nNod\
eMemory\

(
)
;
TA\
_ASS\
ER\
T
(
lOO\
lllO\
OO\
O\

)
;
llOOOOOOll\
O
*
llOOOOOOlll
=
&
lOOlllOO\
O\
O
->
llOOO\
OOO\
OOO
;
if
(
llOOOOO\
Ol\
ll
->
lOlOll\
O\
OOl\

&
ll\
OOOOOlOO\
O
)
{
lOl\
llll\
O\
O\
OO
(
llO\
O\
O\
OOOlll
)
ll\
OOO\
O\
OlO\
Ol
*
ll\
O\
OO\
O\
OlOlO\

=
(
ll\
OOOO\
O\
lOOl
*
)
llO\
OOO\
OOlll\

;
if
(
llO\
OOOOlOl\
O
->
llOOOO\
OlOll
)
{
llOOOOOlOlO
->
llO\
OO\
OOlOll\

->
llO\
OOO\
O\
llO\
O
=
llOO\
OOOl\
OlO\

->
llOOOOO\
ll\
OO
;
}
els\
e
{
TA_A\
SSERT
(
lOlllllOllO
==
llO\
OOOOlO\
lO
)
;
lOl\
llllOllO
=
ll\
OOOOO\
lOlO\

->
ll\
OO\
OOOl\
lOO
;
}
if\

(
llO\
O\
OOOl\
Ol\
O
->
llOOO\
O\
Oll\
OO\

)
llOOOOO\
lO\
lO\

->
llOOOOOllOO
->
llOOOO\
O\
lOll
=
llO\
OO\
OOl\
O\
lO
->
llOO\
OO\
OlOll
;
#ifdef _DEBUG
lOlll\
ll\
lOOO
--
;
lOllllllOll
--
;
#endif //
lO\
llllOlOlO
(
)
lO\
lll\
ll\
OOl\
O
(
TA_AS\
SER\
T
(
!
lO\
lllll\
O\
OOl
(
llOOOOOOl\
l\
l\

)
)
;
)
lOll\
ll\
l\
OO\
lO
(
TA\
_A\
SS\
ERT
(
!
lO\
llllO\
l\
l\
l\
l
(
llOOO\
O\
OOll\
l
)
)
;
)
}
else
{
lO\
llllOll\
lO
(
lOlll\
lOl\
lOO
,
llOOOOOOlll
)
ll\
O\
OOOOOl\
lO
*
llOOOO\
O\
ll\
Ol
=
llOO\
OOO\
ll\
l\
O
(
)
;
TA_AS\
SERT
(
llOOOOOllll\

(
llO\
OOOOl\
lOl\

)
)
;
memcpy\

(
ll\
O\
OOO\
Ol\
lOl
,
llOOO\
OO\
Oll\
l\

,
si\
zeof\

(
llOOO\
O\
OOl\
lO
)
)
;
TA\
_AS\
SERT
(
(
llOOO\
OOll\
Ol
->
lOlOllOOOl
&
ll\
O\
OO\
OOlOO\
O\

)
==
0
)
;
if
(
ll\
O\
OO\
OO\
l\
l\
Ol
->
llOOOOOlOll
)
{
TA_AS\
SERT\

(
llOO\
OO\
O\
l\
lll
(
llO\
OOOOllOl
->
llOOOO\
O\
lOll
)
)
;
TA_ASSERT\

(
llOOO\
OOllOl
->
llOO\
OO\
OlOll
->
llOOO\
OlOOOO\

)
;
TA\
_ASS\
ERT
(
llOOOOOllOl\

->
llOOOOOlO\
l\
l
->
llOO\
OOlOOOl
[
ll\
OOOOOllOl\

->
llOOOO\
lOOlO
]
==
ll\
OOOOOOl\
ll\

)
;
llOOOOOllOl
->
llO\
OOO\
OlOl\
l\

->
llOOOO\
lOO\
Ol
[
llOOOOOllOl
->
llOOO\
OlOOlO\

]
=
llOOOOOllOl
;
}
else
{
TA\
_AS\
SERT
(
lOllllOll\
OO
==
llOOOOO\
Ol\
l\
l\

)
;
lOllll\
Oll\
OO
=
llOOO\
OO\
l\
lOl
;
}
fo\
r
(
in\
t
ll\
O\
OOO\
lOOll\

=
0
;
llO\
OOOl\
OOl\
l
<
8
;
llOOOOlOO\
ll
++
)
{
if
(
llOO\
O\
OOllOl
->
llO\
O\
OO\
l\
O\
OOO
&
(
1
<<
ll\
OOOOlOOll
)
)
{
TA_ASSERT
(
llO\
O\
OOOllOl
->
llOOOOlOO\
Ol
[
llO\
O\
OOlOOl\
l
]
)
;
llOOOOOl\
lOl
->
llO\
OOO\
lO\
O\
Ol
[
llOOOO\
lO\
Oll
]
->
llO\
OO\
OO\
lOll
=
llOO\
OO\
OllOl
;
}
els\
e
{
TA\
_\
A\
SS\
ERT
(
llOOOOOllOl
->
llOOOOlO\
O\
Ol\

[
llO\
OO\
O\
l\
OOll
]
==
0
)
;
}
}
if\

(
ll\
OOOOO\
llOl\

->
llOOOOlOl\
OO\

)
ll\
O\
OOOOl\
lOl\

->
llOOOOl\
Ol\
OO
->
llOO\
OOl\
Ol\
O\
l
=
&
llOOOO\
OllOl
->
ll\
OOOO\
lOlOO
;
#ifdef _DEBUG		
lOlll\
ll\
lOOl
--
;
lOllllllOll
--
;
#endif //
lOllllOlO\
l\
O
(
)
lO\
ll\
l\
llOOlO
(
TA\
_A\
SSERT
(
!
lOlllllO\
OOl
(
llOOO\
OOOl\
ll
)
)
;
)
lOlllllOOlO\

(
TA_ASSERT
(
!
lOl\
lll\
O\
ll\
ll
(
llO\
OOO\
OOll\
l
)
)
;
)
}
lO\
llllOlO\
lO
(
)
}
vo\
id
lOl\
lll\
lOOl\
l
::
lOlOl\
OO\
OO\
l
(
Sp\
a\
ceDivi\
si\
on\
Ob\
j\
ec\
t
&
lOllllll\
l\
lO\

)
{
SpaceDivi\
si\
on\
Objec\
t
*
llOOOOl\
Oll\
O\

=
&
lOll\
ll\
llllO
;
con\
st
AA\
BB
&
lO\
O\
OOO\
Olll\

=
llOOOOlOllO\

->
GetCo\
llisi\
onGr\
i\
d\
WorldAABB
(
)
;
floa\
t
llO\
llOll\
ll
=
lOOOO\
OOlll
.
v3\
E\
xt\
ent
[
lOO\
O\
O\
O\
Olll
.
v3E\
x\
ten\
t
.
GetGre\
ate\
stA\
x\
i\
s
(
)
]
*
lO\
l\
llllOlOl\

;
const\

flo\
at
llOOOOlO\
l\
l\
l
=
1
<<
30
;
if
(
llO\
llOllll
>
ll\
O\
O\
OOlOll\
l
*
0.5f
)
llOllO\
lll\
l
=
llOOOOl\
Ol\
ll
*
0.5f
;
Ve\
c3
llOOllllOO
=
(
lO\
O\
OO\
OOl\
ll
.
v3\
Center
+
lOlllllOl\
O\
O
)
*
lO\
ll\
l\
llO\
lOl\

;
Clamp\

(
llOOll\
l\
lOO
.
x
,
0.0f
,
ll\
OO\
OOlOl\
ll
)
;
Cla\
m\
p\

(
llOOllll\
OO\

.
y
,
0.0f
,
ll\
OOOOlOlll
)
;
Cla\
mp
(
llOOlll\
lO\
O
.
z
,
0.0f
,
llOO\
OOl\
O\
lll
)
;
u32
llOOOO\
llO\
OO\

=
llO\
OO\
OllO\
O\
l
(
Fa\
st\
Float\
T\
o\
Int\

(
llOl\
lOllll
)
)
;
int
lOllOl\
OllOO
=
~
(
(
ll\
O\
O\
OOllOOO
<<
1
)
+
0xFFFFFFFF
)
;
u32
llOO\
O\
OllOlO
=
Fa\
stFloa\
tT\
o\
In\
t
(
llOOllll\
O\
O
.
x
)
&
lOllO\
l\
Oll\
OO\

;
u32\

ll\
OOOOl\
lOll
=
Fa\
stFloat\
To\
I\
nt
(
llOOlll\
l\
O\
O\

.
y
)
&
lOllO\
lOll\
O\
O
;
u32
llOOOOl\
l\
lOO
=
Fa\
s\
tF\
loatToInt
(
llOO\
ll\
llOO
.
z
)
&
lO\
llOlOllOO
;
llO\
OO\
OllO\
lO\

+=
llOOOOl\
lOO\
O
;
llOO\
O\
O\
l\
l\
O\
ll
+=
llOOOO\
ll\
OOO
;
llOOOOlll\
OO
+=
llOOOOllOOO
;
lO\
lll\
lll\
lll\

*
lO\
OlllO\
OOO\

=
(
lOllllllll\
l\

*
)
llOOOOlOl\
lO\

->
Ge\
tSpaceDivision\
N\
ode\
M\
emor\
y
(
)
;
TA_ASSER\
T
(
lOOlll\
O\
OOO\

)
;
llO\
OOOl\
l\
lOl
&
lOOlO\
OlllOO
=
lO\
OlllOOO\
O
->
llOOOOOOOl\
l
;
if
(
lOllll\
lll\
lO
.
ll\
O\
OOOl\
OlOl
)
{
if\

(
ll\
O\
OOOllO\
l\
O
==
lOOlOOlll\
OO
.
llOO\
O\
OllOlO\

&&
llO\
OOOllO\
ll\

==
lOO\
lOO\
ll\
lO\
O\

.
llOO\
OOll\
Oll
&&
llOO\
OOll\
lOO
==
lOOl\
O\
O\
l\
llOO
.
ll\
O\
OOOll\
l\
OO\

&&
llO\
O\
OOll\
O\
OO
==
lO\
Ol\
OOlllO\
O\

.
llO\
OOO\
ll\
OOO\

)
return
;
lOO\
ll\
lll\
ll
(
lOlll\
llll\
lO\

)
;
}
TA\
_A\
SS\
ERT\

(
!
lOllll\
O\
llll
(
(
llO\
OOOOOl\
l\
O
*
)
&
lO\
Oll\
lO\
O\
OO
->
llOOOOOOOll
)
)
;
lOOlOOl\
ll\
O\
O
.
llO\
OO\
OlO\
l\
OO
=
ll\
OO\
OO\
lOll\
O\

;
lOOl\
O\
Oll\
lOO
.
ll\
O\
OOOl\
lOOO
=
ll\
O\
OOOllOO\
O
;
lOOlOOlllOO
.
llOOOOllOlO
=
llOOOOllOlO
;
lOOlO\
O\
l\
llOO
.
llO\
OOO\
llOll\

=
llOOOO\
l\
l\
Oll
;
lOOl\
O\
O\
l\
llOO
.
llOOOOll\
lOO
=
llO\
O\
OOll\
lOO\

;
lO\
OlOOlllO\
O
.
lOlOllOO\
Ol
=
llOOOOOlOOO
|
llOOOOOOlOO
;
#ifdef _DEBUG
lOlll\
llOl\
ll
++
;
#endif //
llO\
OOOllllO
(
lOO\
lOOl\
llOO\

)
;
}
vo\
i\
d
lOl\
lll\
lOOll\

::
lOOl\
ll\
l\
lll
(
Sp\
aceDivi\
sionObject
&
lO\
l\
ll\
lll\
llO
)
{
if
(
!
lOlll\
lllllO
.
ll\
OO\
OO\
lOlOl\

)
{
TA_AS\
SERT
(
lO\
ll\
l\
lll\
llO
.
ll\
OOOOlllll
==
0
)
;
re\
tu\
rn
;
}
lOllllOlOlO
(
)
SpaceDivi\
sionObje\
ct
*
llO\
OOO\
lOllO
=
&
lOllllllllO
;
TA_ASSE\
RT\

(
llOOO\
O\
lOl\
lO
)
;
TA_ASSERT
(
ll\
OOOOlOllO
->
llOOOOl\
OlO\
l\

)
;
TA_ASSE\
R\
T\

(
*
llOOOO\
l\
Ol\
l\
O
->
ll\
OOOO\
lO\
lOl
==
llOOOOlOllO
)
;
lOl\
l\
lllllll
*
lOO\
lllO\
O\
OO
=
(
lOlllll\
ll\
ll
*
)
ll\
OOOOl\
Ol\
lO
->
Ge\
tS\
paceDivisi\
o\
n\
NodeMe\
mory
(
)
;
TA_A\
S\
SER\
T
(
lOO\
lllOO\
OO
)
;
if\

(
*
(
u32
*
)
(
(
uSiz\
e\

)
llO\
OO\
OlO\
llO
->
ll\
OO\
O\
OlOl\
Ol
+
sizeof\

(
uSi\
ze
)
)
==
0
)
{
uSi\
ze
lOO\
lll\
Ol\
lO
=
(
uSi\
ze\

)
&
llOO\
OOl\
OllO
->
ll\
O\
O\
OOlll\
l\
l
-
(
uSi\
ze
)
llOOO\
OlOllO
;
Sp\
ac\
eDivis\
i\
o\
nOb\
ject
*
llOOOOOlOll
=
(
Spa\
ceD\
ivi\
sionOb\
j\
ec\
t
*
)
(
(
uSiz\
e\

)
llO\
O\
OO\
lOllO\

->
llOOO\
Ol\
Ol\
Ol\

-
(
uSiz\
e
)
lOOll\
lO\
llO
)
;
TA_AS\
SE\
RT\

(
*
llO\
O\
OOO\
l\
O\
l\
l
->
llOOO\
Ol\
O\
lOl
==
llOOOOOlOll
)
;
TA_\
A\
S\
SE\
R\
T
(
llO\
OOOOl\
Oll
->
llO\
O\
O\
Olllll\

==
llOO\
OOl\
Oll\
O\

)
;
TA_AS\
SER\
T\

(
&
llOOOO\
OlOll
->
llOO\
O\
O\
lll\
ll
==
llOO\
O\
Ol\
Ol\
lO
->
llOOOOl\
Ol\
Ol\

)
;
ll\
OOOOOlO\
ll\

->
llOO\
OOl\
llll
=
llO\
O\
OOlOll\
O
->
llOOO\
Ol\
llll
;
if
(
llO\
O\
OOO\
l\
Oll
->
llOOOOlllll
)
llO\
OOOOlOll
->
ll\
O\
OO\
Ol\
l\
lll
->
llOOOOl\
O\
lO\
l\

=
&
ll\
O\
OO\
OO\
l\
O\
l\
l\

->
llO\
O\
O\
Olll\
ll
;
llOO\
OOlOllO
->
llOOOOlllll\

=
0
;
llOOOO\
lOl\
lO\

->
llOO\
OOlOlOl
=
0
;
#ifdef _DEBUG
lOlll\
llOlll
--
;
#endif //
lOll\
ll\
OlOlO
(
)
lO\
lllll\
llll
*
lOOl\
l\
l\
OO\
OO
=
(
lOll\
lllllll
*
)
llO\
O\
OOlOllO
->
GetSpa\
ce\
Divis\
ion\
NodeMemo\
ry\

(
)
;
TA_AS\
SERT
(
lOOl\
llOOOO
)
;
if
(
(
lOOlllOOOO\

->
ll\
OOO\
OOOO\
ll
.
lOl\
Oll\
OO\
Ol
&
ll\
OO\
OO\
OlOOO
)
==
0
)
{
lO\
lllllllll
*
llOOOlOOOOO\

=
(
lOll\
ll\
l\
l\
ll\
l
*
)
llOOOOOlOl\
l
->
GetS\
pace\
Di\
visionNod\
e\
Me\
mory
(
)
;
TA\
_\
ASSE\
RT
(
llOOOlOOO\
OO
)
;
TA_ASSERT\

(
llOOOl\
O\
OOOO
->
llO\
OOOO\
OOll
.
lOlOllOOO\
l
&
llO\
OO\
O\
Ol\
OOO
)
;
memcp\
y
(
&
llOO\
Ol\
OOOO\
O
->
llO\
OOOOO\
Ol\
l
,
&
lOOlllOO\
O\
O
->
ll\
O\
OO\
O\
OOOll
,
size\
of\

(
lOOlllOOOO
->
llO\
OOOO\
OOll
)
)
;
llOOO\
OOO\
llO\

*
llO\
O\
OlOOOO\
l
=
(
ll\
OOOOOOl\
lO
*
)
&
lOOl\
llOO\
OO
->
llOOOOO\
O\
Oll
;
llOOO\
OOO\
llO\

*
llOO\
OO\
O\
O\
l\
ll\

=
(
llOO\
OOOOllO
*
)
&
ll\
O\
OOlOOOOO
->
ll\
O\
OOOOOOl\
l
;
if\

(
ll\
OOOOO\
Olll
->
ll\
O\
O\
OOO\
lOll
)
{
TA_ASSERT
(
ll\
O\
OOOOOll\
l
->
llOOO\
O\
O\
lOll
->
llOOOOlOO\
O\
l
[
llOOOOOOlll\

->
ll\
OO\
OOlO\
OlO
]
==
llOO\
O\
lOO\
OO\
l
)
;
llOOOOOOlll
->
ll\
OOO\
OOl\
Oll
->
ll\
OOOOl\
OOOl
[
llOOOOOO\
lll
->
ll\
OOOOlO\
O\
l\
O
]
=
ll\
OO\
O\
OOOll\
l
;
}
els\
e\

{
TA\
_AS\
SER\
T\

(
lOllllOllOO
==
llOO\
Ol\
O\
O\
OOl
)
;
lOllllOl\
lOO
=
llO\
OOOO\
Olll
;
}
TA\
_ASSER\
T
(
ll\
OO\
OOOO\
lll
->
llOOO\
OlOlOO\

)
;
llOOOOOOlll
->
llOOOOlO\
lOO
->
llOOO\
OlOlOl
=
&
llOOO\
OOOll\
l
->
llOOOOlOlOO
;
}
}
else
{
lOll\
llOlOlO
(
)
llOOOOO\
OllO\

*
llOOOOOOlll
=
(
ll\
OOOOOOl\
lO
*
)
(
(
uSiz\
e
)
llOOOOl\
OllO
->
llO\
O\
OO\
lOl\
Ol
-
20
)
;
TA_ASSERT\

(
llOOOO\
OOl\
ll
->
llOOOO\
l\
OlOO\

==
llO\
OOOl\
OllO
)
;
TA\
_ASSERT
(
(
ll\
O\
OO\
OOO\
lll
->
ll\
O\
OOOll\
OO\
O
&
(
ll\
OOOOOOl\
ll
->
llO\
OOOll\
OOO
-
1
)
)
==
0
)
;
lO\
ll\
ll\
Ol\
ll\
O
(
lOll\
llO\
l\
l\
OO
,
llOO\
OOlOllO
)
lOlll\
lOl\
l\
lO
(
lOllllOllOO
,
llOOOOO\
Olll
)
llOOOOO\
Olll
->
ll\
OOOO\
lOlOO
=
llOOOOlOllO
->
ll\
OOOOllll\
l
;
if
(
ll\
OOOOO\
Ol\
l\
l\

->
llOOOO\
lOl\
OO
)
{
lOll\
llllll\
l\

*
lO\
Ol\
llO\
OOO
=
(
lOll\
lllllll
*
)
ll\
OOOOlOll\
O
->
GetSpac\
eDivi\
si\
on\
Node\
Memory
(
)
;
TA_A\
S\
SERT
(
lO\
OlllOOOO
)
;
if
(
(
lOOl\
llOO\
OO
->
ll\
OOOOOOOl\
l
.
lOlOllO\
O\
Ol
&
ll\
OOOO\
OlOO\
O
)
==
0
)
{
TA_\
AS\
SERT
(
(
llOOOOOOll\
O
*
)
&
lOOl\
llOOOO
->
llOOOOOOO\
ll\

==
llO\
OO\
OO\
Olll
)
;
lOl\
lllllll\
l
*
ll\
O\
O\
O\
lOOOOO
=
(
lOl\
llll\
llll
*
)
llOO\
OOOO\
l\
ll
->
llOOOO\
lO\
lO\
O
->
Get\
S\
pac\
eDivi\
sionNodeMem\
ory
(
)
;
TA_ASSE\
RT
(
llO\
OOlOO\
OOO
)
;
TA\
_ASSERT\

(
ll\
OO\
Ol\
OOO\
OO
->
llO\
O\
OOOOOll
.
lO\
lOll\
OOOl
&
llOOOOOlOOO\

)
;
memcpy
(
&
llOOO\
lOO\
O\
OO
->
llOOOOOOOll
,
&
lOOlllOO\
OO
->
ll\
OOOOOOOll\

,
si\
zeof
(
lOO\
lllO\
OO\
O
->
llO\
OOOOOOl\
l
)
)
;
llO\
OO\
O\
OOl\
l\
O
*
llOOOlOOOO\
l\

=
llO\
OOOOOlll
;
ll\
OOOOOOlll\

=
(
llO\
OOOOOllO
*
)
&
llOO\
O\
lOOOOO
->
llOOOO\
OOO\
ll
;
if\

(
ll\
OOOO\
OO\
lll
->
ll\
OO\
OOO\
lOll
)
{
TA\
_ASSE\
R\
T
(
llO\
OO\
OO\
O\
lll\

->
llOO\
OOOl\
Oll\

->
llOO\
OOlOOO\
l
[
ll\
O\
OOOOOlll
->
llOOO\
O\
lOOlO
]
==
llO\
OOlOOO\
Ol\

)
;
llOOOOO\
O\
l\
l\
l
->
llOOOOOl\
Oll
->
ll\
O\
O\
OO\
l\
O\
OOl
[
llO\
OOOOO\
lll
->
llO\
OOOlOOlO
]
=
llOOOOOOl\
ll
;
}
else
{
TA_ASSER\
T
(
lOl\
lllOll\
OO
==
llOOO\
lOOO\
Ol
)
;
lOl\
l\
llOllOO
=
llO\
OO\
OOO\
lll
;
}
TA_ASSERT
(
ll\
O\
OOOOOlll
->
ll\
OOOOlOl\
OO
)
;
llO\
OOOOOl\
ll
->
llO\
OOOlO\
lOO
->
ll\
O\
OOOlOlOl
=
&
llOOOOO\
Oll\
l
->
llOOO\
O\
lOlOO
;
}
el\
se
{
TA_ASS\
ERT
(
(
llOO\
OO\
OOll\
O
*
)
&
lOOlllOO\
OO
->
ll\
OOOOOO\
O\
l\
l
!=
ll\
OOOOOOlll
)
;
}
llOOO\
OO\
Olll
->
llOOOOl\
O\
lO\
O
->
ll\
OOO\
O\
lO\
l\
O\
l\

=
&
llO\
OOOOO\
lll
->
llOOO\
OlOlOO
;
#ifdef _DEBUG
lOll\
lllO\
lll
--
;
#endif //
lO\
llllOlOlO
(
)
lOl\
l\
lllOOlO
(
TA_\
ASSERT\

(
!
lO\
llllOl\
lll\

(
(
llO\
O\
OOO\
Oll\
O
*
)
&
lOOl\
llOOOO
->
llO\
OO\
OOO\
O\
ll
)
)
;
)
}
else
{
if
(
ll\
OOOOOOll\
l
->
ll\
OllOOl\
Ol\

==
0
)
llOOO\
lOOOlO
(
llOOO\
O\
O\
Ol\
ll
)
;
else\

if\

(
llO\
O\
OOOOlll
->
llOllOOlOl
==
1
)
ll\
OO\
OlO\
OOl\
l
(
llOOOOO\
Oll\
l
)
;
#ifdef _DEBUG
lOllll\
lOll\
l\

--
;
#endif //
lOlll\
lOlOl\
O
(
)
lOlllllOO\
lO\

(
TA\
_\
ASS\
ER\
T\

(
!
lOlll\
lOll\
ll\

(
(
llOOOOOOllO\

*
)
&
lO\
OlllOOO\
O
->
llOOOOOOOl\
l
)
)
;
)
}
llO\
O\
OO\
l\
Ol\
l\
O\

->
ll\
OOOOllll\
l
=
0
;
llOOOOl\
O\
llO
->
llOOOOlOl\
O\
l
=
0
;
}
}
void
lOlllllOOll
::
llOOOlOOlOO\

(
con\
st\

AAB\
B
&
lOOO\
OOOl\
l\
l
,
void
(
TAC\
_CALL
*
llOOOlOOlOl
)
(
Spa\
ceD\
i\
vi\
si\
onObjec\
t\

&
lOlll\
ll\
ll\
l\
O
,
void
*
lOO\
O\
O\
l\
ll\
l\
O
)
,
voi\
d
*
lOO\
OOlll\
l\
O
)
{
if
(
!
lOllllOllOO\

)
return
;
llOOOlOOll\
O
llOOOlOO\
lll\

;
llOOOl\
OOlll
.
lOOOOO\
Ol\
ll
=
lOO\
OOOOlll
;
co\
nst
flo\
at\

llOOOOl\
Ol\
ll\

=
1
<<
30
;
Ve\
c3
v3\
Extent
=
lOOO\
OOOlll
.
v3E\
xt\
en\
t\

*
lOlllllOlOl
;
if\

(
v3Exten\
t
.
x
>
llOOOOl\
O\
l\
ll
*
0.5f
)
v3Ext\
ent
.
x
=
llOO\
OO\
lOlll
*
0.5f
;
if
(
v3E\
xtent\

.
y
>
llO\
OOOl\
O\
l\
l\
l
*
0.5f
)
v3\
E\
xtent
.
y
=
ll\
OO\
OO\
lO\
lll
*
0.5f
;
if
(
v3\
Ext\
ent\

.
z
>
llOOOO\
lOl\
ll
*
0.5f
)
v3E\
x\
tent
.
z
=
llOOOO\
lOl\
ll
*
0.5f
;
Vec\
3
llO\
OllllOO
=
(
lOOO\
O\
OOlll
.
v3C\
e\
nte\
r
+
lOlllll\
OlOO
)
*
lOlllll\
Ol\
Ol
;
Clamp\

(
llOOll\
l\
lOO
.
x
,
0.0f
,
llOOOOlOlll
)
;
Cl\
amp\

(
llOOl\
lllOO\

.
y
,
0.0f
,
ll\
OOOO\
lO\
l\
ll
)
;
Cla\
mp\

(
ll\
OO\
lll\
l\
OO\

.
z
,
0.0f
,
llOOOOlO\
lll
)
;
ll\
O\
OOlOOlll
.
llOOOOllOlO
=
FastFloat\
T\
o\
In\
t
(
llOOllllOO
.
x
)
;
llO\
O\
O\
lOOlll
.
llOO\
O\
O\
llO\
l\
l
=
FastFloat\
ToIn\
t\

(
llOOllllO\
O
.
y
)
;
ll\
OO\
Ol\
OOlll\

.
llOOOOlllO\
O
=
FastFloat\
To\
Int
(
llOOllllOO
.
z
)
;
ll\
OOOl\
OOlll\

.
llOOOlOl\
OOO
=
Fa\
stFlo\
atToInt
(
lOOOOO\
O\
l\
l\
l
.
v3E\
xten\
t
.
x
*
lOlllllOlOl
)
;
llOOO\
lOOlll
.
llOOO\
lOl\
OO\
l
=
FastFloatToI\
nt
(
lOO\
O\
O\
OOlll
.
v3E\
xtent
.
y
*
lOllll\
l\
OlOl
)
;
llOO\
O\
lO\
Olll
.
llOOOl\
OlO\
lO
=
Fa\
stFl\
oa\
tToI\
nt
(
lOOOOOOll\
l
.
v3Exte\
n\
t
.
z
*
lOl\
lll\
lOlOl\

)
;
llOOOlOO\
l\
l\
l
.
ll\
OOO\
lOOl\
Ol
=
llOOO\
lO\
O\
lOl
;
llO\
OOl\
OOll\
l
.
lOOOOllllO
=
lOO\
O\
OllllO
;
llOOOl\
Ol\
O\
l\
l
(
lOllllOll\
OO
,
llOO\
OlOOlll
)
;
}
void
lOlllllO\
Oll
::
llOOOlOllOO
(
const
Vec\
3
&
ll\
OOOlOll\
Ol\

,
const
Vec\
3
&
llOOOlOlllO
,
void
(
TAC\
_CALL\

*
ll\
OO\
Ol\
OOlO\
l\

)
(
Space\
Divis\
ionObj\
ect
&
lOlllllll\
lO
,
void
*
lOOll\
lOOO\
O\

)
,
void
*
lOOO\
O\
llllO
)
{
if
(
!
lOl\
lllOl\
lO\
O\

)
retu\
rn
;
Vec\
3
lOO\
lO\
lOll\
l
=
(
llO\
OOlOllOl\

+
lOllll\
lOl\
OO
)
*
lOllll\
l\
OlOl
;
Ve\
c3
lO\
OlO\
llOOl
=
(
llOOO\
lO\
lllO
+
lO\
lllll\
OlOO
)
*
lOlllll\
OlOl
;
llOOOlO\
llll
llOO\
O\
l\
O\
Oll\
l
;
llO\
O\
Ol\
OOll\
l
.
llOO\
O\
l\
OOlO\
l
=
llO\
OO\
l\
OOlO\
l\

;
llOOOlO\
O\
lll
.
lOO\
OO\
lll\
lO
=
lOOOOll\
llO
;
Vec3
lOOOlOOOO\
O
=
lOO\
lOll\
OO\
l
-
lO\
OlOl\
Oll\
l
;
llOOOlOOlll\

.
lO\
O\
lOllOO\
O\

=
lOOOlOO\
O\
O\
O
.
GetM\
ag\
nit\
ude
(
)
;
llOOOlOO\
lll
.
lO\
OOOOll\
O\
l
[
0
]
.
ll\
OOOl\
lOOOO\

=
lO\
OlOlO\
ll\
l
.
x
;
llO\
OOl\
OOll\
l
.
lOOOOOl\
lOl
[
1
]
.
ll\
OOOll\
OOOO
=
lOO\
lOl\
Olll
.
y
;
ll\
OOOlO\
O\
ll\
l
.
lOOOOOllOl
[
2
]
.
llOOOllOOOO
=
lOO\
lOl\
Oll\
l
.
z
;
llOOOl\
OOll\
l
.
lOOOOOll\
Ol
[
0
]
.
ll\
OOOll\
O\
OO\
l
=
lOOOlOOOOO
.
x
;
llOO\
Ol\
OO\
l\
ll
.
lO\
OOOOllO\
l
[
1
]
.
llOOOll\
OOOl
=
lOO\
OlOO\
OOO
.
y
;
llO\
O\
OlOOlll
.
lOOOOOll\
Ol
[
2
]
.
ll\
OOO\
ll\
OO\
Ol
=
lO\
OOlOOOOO
.
z
;
if
(
Fabs\

(
lOOOlOOO\
OO
.
x
)
>
lOO\
OlOOOl\
l\

)
{
llOOO\
l\
O\
Ol\
ll\

.
lOOOO\
O\
l\
lOl
[
0
]
.
llOOOllOO\
lO
=
1.0f
/
lOOOlOO\
O\
OO\

.
x
;
ll\
OOOlOO\
ll\
l
.
lO\
OO\
OOl\
lOl
[
0
]
.
ll\
OOOllOOll
=
1
;
}
el\
se
{
llOOO\
lOOl\
ll\

.
lOOOOO\
ll\
Ol\

[
0
]
.
ll\
O\
OOll\
OOll
=
0
;
ll\
O\
OOl\
OO\
lll
.
lO\
OOOO\
llO\
l
[
0
]
.
llOOOllOlOO\

=
(
lO\
OlO\
lOlll
.
x
+
lOO\
lOllOOl
.
x
)
*
0.5f
;
llO\
OO\
lOOlll
.
lO\
OOOOllOl
[
0
]
.
llOOO\
llOlOl
=
Fabs
(
lOOlOlO\
l\
ll
.
x
-
lOO\
lOllO\
O\
l
.
x
)
*
0.5f
;
}
if
(
Fa\
bs\

(
lOOOlOOOOO
.
y
)
>
lOOO\
lO\
OOll
)
{
llO\
OOlOOl\
l\
l
.
lOOOOOl\
lOl\

[
1
]
.
llOO\
O\
llOOlO
=
1.0f
/
lOOO\
lOOOOO
.
y
;
llO\
O\
OlOOll\
l
.
lO\
O\
OOOllOl
[
1
]
.
llOOOllO\
Oll
=
1
;
}
else\

{
llOOOlO\
Olll
.
lO\
O\
O\
O\
Oll\
Ol
[
1
]
.
llOOOl\
lOO\
l\
l
=
0
;
ll\
OOOlOOl\
ll
.
lOOOOOll\
Ol\

[
1
]
.
llO\
OO\
llOlOO
=
(
lOOlOlO\
lll
.
y
+
lOOlOllOOl
.
y
)
*
0.5f
;
llO\
O\
Ol\
OO\
lll\

.
lOO\
OOOl\
lOl
[
1
]
.
llOOO\
llOlO\
l
=
Fabs\

(
lOOlOlOl\
l\
l
.
y
-
lOOlO\
llO\
Ol
.
y
)
*
0.5f
;
}
if
(
Fabs\

(
lO\
OO\
lOOOO\
O
.
z
)
>
lO\
OOl\
O\
OOll
)
{
llO\
OOlOOlll\

.
lOO\
OOOl\
l\
Ol\

[
2
]
.
llOOOl\
l\
O\
O\
lO
=
1.0f
/
lO\
OOlOO\
OO\
O\

.
z
;
llOO\
O\
lOOlll
.
lOOOOOllOl
[
2
]
.
llOOO\
l\
lO\
O\
ll
=
1
;
}
el\
se
{
llO\
OOl\
OOlll
.
lOOOOOllOl
[
2
]
.
llOOOllO\
Ol\
l\

=
0
;
llOO\
OlO\
Oll\
l\

.
lOO\
OO\
O\
l\
lO\
l
[
2
]
.
llO\
OO\
l\
lO\
lO\
O
=
(
lOOlOlOll\
l
.
z
+
lOOlOllOO\
l
.
z
)
*
0.5f
;
ll\
O\
OOlO\
Ol\
ll\

.
lO\
O\
O\
OOll\
Ol
[
2
]
.
llO\
O\
OllOlOl
=
Fa\
bs
(
lOOl\
Ol\
Olll
.
z
-
lOOlO\
llOOl\

.
z
)
*
0.5f
;
}
llO\
O\
Oll\
OllO
(
lOlll\
lOllOO
,
ll\
OOOlO\
Olll
)
;
}
bool
lOlllllOOll
::
lO\
l\
lllOlll\
l
(
Sp\
a\
ceDi\
vision\
Obje\
ct
*
ll\
OOOO\
lOllO
)
{
retu\
rn\

lO\
l\
l\
llOll\
ll
(
lOllll\
O\
llO\
O\

,
llO\
OOOlOl\
lO\

)
;
}
boo\
l
lOlllllO\
Oll\

::
lOl\
lll\
Olll\
l
(
con\
s\
t
llOOO\
O\
OOll\
O
*
llOOOl\
lOl\
ll
)
{
ret\
urn\

lOl\
lllOllll
(
lOlll\
lOllOO
,
llOOOllOl\
ll
)
;
}
bool
lOll\
lll\
O\
Oll
::
lOl\
llllO\
O\
Ol\

(
llOOOO\
O\
OllO\

*
llOOO\
lll\
O\
OO\

)
{
ll\
OO\
O\
OOlO\
Ol\

*
llOOOO\
OOlll
=
lOl\
ll\
ll\
Oll\
O
;
fo\
r\

(
llOOO\
OOlOOl
*
llOOO\
OO\
Ol\
ll
=
lOlllllOl\
l\
O
;
llO\
O\
OOOOll\
l\

;
llOOO\
OOOll\
l
=
llOOOOOOll\
l
->
ll\
OOOOOll\
OO\

)
{
if
(
(
llOOOOOOl\
l\
O
*
)
llOOOO\
O\
Ol\
ll\

==
llOOOlll\
OOO
)
retu\
rn\

tr\
u\
e
;
}
ret\
urn
fals\
e
;
}
void
lOlllll\
O\
O\
ll
::
llOO\
OlOlO\
ll
(
llOOOOOOllO
*
llOOOOOOl\
l\
l
,
llOOOlOOl\
lO
&
llOOOlOO\
lll
)
{
co\
n\
st
u3\
2
llOOO\
OllOOO
=
ll\
OOOOOO\
lll
->
ll\
OOOOll\
OOO
<<
1
;
int
llOOOOOOOl\

=
(
in\
t
)
(
llOOOl\
O\
Olll
.
llOOOlOl\
O\
OO
+
llOOOO\
llO\
OO
)
-
Ab\
s
(
ll\
OO\
O\
O\
OO\
ll\
l\

->
llOOOOllOlO\

-
llOO\
OlOOl\
ll
.
ll\
O\
OO\
OllOlO
)
;
int
ll\
O\
OOOOOlO
=
(
int
)
(
ll\
OOO\
lOOlll
.
llOOOlOlOOl
+
llOOO\
OllOOO
)
-
Abs\

(
llOOOO\
OOlll\

->
llOOO\
OllOll\

-
ll\
O\
OOlOOlll
.
llO\
OOOllO\
ll\

)
;
int\

llOOOOOOll
=
(
int
)
(
llOO\
OlOOlll
.
llO\
OOlOlO\
lO\

+
llOOOOllOO\
O
)
-
Ab\
s
(
llOOO\
OOO\
lll
->
llOO\
OOlll\
OO
-
llOOOl\
OOlll
.
llOOOOlllOO
)
;
if
(
(
(
u3\
2
)
(
llO\
O\
O\
OOOOl
|
llO\
OOO\
OOlO\

|
ll\
O\
OOOO\
Ol\
l
)
>>
31
)
)
re\
turn
;
for
(
SpaceDi\
v\
isi\
onOb\
ject
*
llOOOOlO\
l\
l\
O
=
llOOOOOOlll\

->
llO\
OO\
OlOl\
O\
O\

;
llOOOOlOl\
lO
;
llOOOOlOll\
O\

=
llO\
OOOlOl\
lO
->
llOO\
OOll\
ll\
l\

)
{
TA_ASSERT
(
ll\
OOO\
lOO\
l\
ll\

.
ll\
OO\
OlOOlOl
)
;
llOOOlOOlll
.
llO\
O\
OlOO\
lOl
(
*
llOOOO\
lOllO
,
llOOOlOOll\
l
.
lOO\
OOl\
lllO
)
;
}
#ifdef lOllllOlOOO
const
int
ll\
OOOlll\
OOl\

=
(
int
)
lO\
l\
l\
llO\
lOO\
l\

[
llOOOO\
OOlll
->
ll\
OO\
O\
OlO\
OOO\

]
;
con\
st
int
llOOOlll\
OlO
=
(
ll\
OOOlllOOl
&
15
)
;
TA_ASSE\
RT
(
(
llOOOll\
lOOl\

&
15
)
==
llOO\
OOO\
Olll
->
llOllOOlO\
l
)
;
for
(
in\
t\

lOOO\
llOO\
Ol\

=
0
;
lOOOl\
lO\
O\
Ol
<
llO\
OOlllOl\
O\

;
lOOOllO\
OO\
l
++
)
{
in\
t
llOOO\
OlOOll\

=
(
ll\
OOO\
lll\
OOl
>>
(
lOOOl\
lOOOl\

*
3
+
4
)
)
&
7
;
if
(
llOOOOOOlll
->
llOO\
OOlOOOO
&
(
1
<<
llOOOOlO\
Oll
)
)
{
TA_A\
SS\
E\
R\
T
(
llOO\
OOOOlll
->
llOOOOlOOO\
l
[
ll\
O\
OOOl\
OO\
ll\

]
)
;
llOOOlOlO\
ll\

(
llOOOOO\
Olll\

->
llO\
OOOlOOOl\

[
ll\
OOOO\
lOOll
]
,
llOOOlOOll\
l\

)
;
}
}
#else
if
(
ll\
O\
OOOO\
O\
lll
->
llOll\
OO\
lOl
)
fo\
r
(
in\
t\

ll\
O\
OOOlO\
Oll\

=
0
;
ll\
OOO\
OlOOl\
l
<
8
;
llOOOOlO\
Oll
++
)
{
if
(
llOO\
O\
OOOlll
->
llO\
O\
O\
O\
l\
OOOO
&
(
1
<<
llO\
O\
OOlOOll\

)
)
{
TA\
_\
A\
SSER\
T
(
llOO\
OOOOll\
l
->
llOOOO\
lOO\
Ol
[
llO\
OOO\
lOOll
]
)
;
llOOOlOl\
Ol\
l
(
llO\
OO\
O\
O\
Oll\
l
->
ll\
OOOOlO\
OOl
[
llOOOOlOO\
ll
]
,
llOOOlOOll\
l
)
;
}
}
#endif
}
vo\
i\
d
lOl\
lll\
lO\
O\
ll
::
llO\
OOllOll\
O
(
llOO\
O\
OOOllO\

*
llOOO\
O\
OOlll
,
llOO\
OlOl\
lll
&
ll\
OOO\
lOOlll
)
{
floa\
t
lOOOO\
O\
llll
;
const
float
llOll\
Ollll\

=
(
float
)
llOO\
OOO\
O\
lll
->
llOOO\
OllO\
O\
O
;
fl\
o\
at
lOOll\
OOOOl\

=
0.0f
;
float
lOOllOO\
O\
l\
O
=
llO\
OOlOO\
lll\

.
lOOlOllOOO
;
for\

(
int
lO\
OOl\
l\
llOl\

=
0
;
lOOOl\
ll\
lOl
<
3
;
lO\
O\
Ollll\
Ol
++
)
{
float\

llOOOl\
lOl\
Ol
=
ll\
O\
llOllll
*
3.0f
;
llO\
O\
O\
lOllll
::
Ax\
i\
s\

&
lO\
OOO\
OllOl\

=
llOOO\
lOOl\
ll\

.
lO\
OOOOll\
Ol
[
lOOO\
l\
l\
llOl
]
;
fl\
oat\

llOOO\
l\
l\
O\
lO\
O\

=
(
float\

)
(
&
ll\
OOOOOOl\
ll
->
ll\
O\
OO\
OllOlO
)
[
lOOOlll\
lOl\

]
;
lO\
OOO\
O\
llll
=
Sign
(
lOOOOO\
llO\
l
.
llOOOl\
lOO\
l\
O
)
;
if
(
lO\
OOO\
O\
llO\
l\

.
llO\
OOl\
lO\
Ol\
l
)
{
llOOOllO\
lOl\

*=
lO\
O\
OOOl\
l\
l\
l
;
fl\
o\
at
lO\
lOllOll\
l
=
llO\
OO\
ll\
OlOO\

-
lOO\
OO\
OllO\
l
.
llOOOll\
OOOO
;
fl\
oa\
t
lO\
OllO\
O\
llO
=
(
lOlOll\
Olll
-
ll\
OOO\
llOlOl
)
*
lOOOO\
OllOl
.
llOOO\
ll\
O\
OlO
;
if
(
lOOllO\
OO\
lO
<
lOOl\
lOOll\
O
)
return
;
floa\
t
lO\
OllO\
Olll\

=
(
lOl\
Ol\
l\
Oll\
l
+
llOOOllO\
lOl
)
*
lOOOO\
OllOl
.
ll\
OOOllOO\
l\
O
;
if\

(
lOOllOOOOl
>
lOO\
llOO\
l\
l\
l
)
return\

;
Cl\
am\
pIfLess\
Then\

(
lO\
OllO\
O\
O\
Ol
,
lOOllOOllO
)
;
ClampIfGreater\
Th\
e\
n
(
lOO\
ll\
OO\
O\
lO
,
lO\
Oll\
OOlll
)
;
}
else
{
if
(
Fab\
s
(
lOOO\
OOll\
Ol\

.
ll\
O\
OOl\
l\
O\
l\
OO\

-
ll\
OOO\
ll\
Ol\
O\
O
)
>
lO\
OOO\
O\
l\
lOl\

.
ll\
O\
O\
Ol\
lOlO\
l
+
llOOOllO\
l\
Ol
)
ret\
urn
;
}
}
TA_ASSER\
T
(
ll\
OOOOOOlll
)
;
fo\
r
(
SpaceDi\
visionO\
bje\
ct\

*
llOOOOlOllO
=
llOOOOOOlll
->
llOOO\
OlOl\
OO\

;
llO\
OOOlOllO\

;
llOOOO\
l\
Ol\
lO
=
llOOOOlOllO\

->
llOOOOlll\
l\
l
)
{
llOOOl\
OOlll
.
ll\
OOOlOOlO\
l
(
*
ll\
OOOOlO\
llO
,
ll\
O\
OOl\
O\
O\
l\
ll
.
lOOOOl\
l\
llO\

)
;
}
for\

(
Space\
D\
ivisi\
o\
nO\
bject\

*
llOOOOlOl\
lO
=
ll\
O\
OOOOOl\
l\
l\

->
llOO\
OO\
lOl\
OO
;
llOOOOlOll\
O
;
llOOO\
Ol\
Ol\
lO
=
llOOOO\
lO\
ll\
O
->
ll\
OOO\
O\
l\
llll\

)
{
TA_A\
S\
SE\
RT
(
llO\
OOl\
O\
Ol\
ll\

.
ll\
O\
OOlOOlOl
)
;
llOO\
OlOOll\
l
.
ll\
OOO\
l\
OOlO\
l
(
*
llOOO\
O\
lOllO\

,
llOOOlOOl\
ll
.
lO\
O\
O\
Ol\
l\
llO
)
;
}
if\

(
llOOO\
OOO\
l\
ll
->
ll\
O\
ll\
OOlOl\

)
for
(
int\

ll\
OO\
OO\
lOOll
=
0
;
llOOOOlOOll
<
8
;
llOOO\
OlO\
Oll
++
)
{
if
(
ll\
OOOO\
OOlll\

->
llOO\
OOl\
OO\
OO\

&
(
1
<<
llOOO\
Ol\
OOl\
l\

)
)
{
TA_ASS\
ER\
T
(
llOOOOOO\
ll\
l
->
ll\
OOOOlOO\
Ol
[
llO\
O\
O\
OlOOl\
l
]
)
;
llOOOllOl\
lO
(
llOOOOOOlll
->
llO\
OOOlOOO\
l
[
llO\
O\
OOlOOll
]
,
llOOOl\
O\
Oll\
l\

)
;
}
}
}
voi\
d
lOl\
l\
lll\
OOl\
l
::
llOO\
OO\
lll\
l\
O\

(
llOOOOlllOl\

&
lOOlOOl\
llOO
)
{
lOl\
lllO\
lOlO\

(
)
if
(
!
lOl\
lllO\
l\
l\
O\
O
)
{
llO\
OOl\
llO\
ll
(
0
,
&
lOllllOllO\
O
,
lOOl\
O\
Olll\
OO
)
;
lOllllOl\
OlO\

(
)
retur\
n
;
}
llOOOO\
OOll\
O\

*
llOOO\
OOOlll
=
lOl\
ll\
lOllOO
;
for
(
;
;
)
{
u32
llOOOllll\
OO
=
(
ll\
O\
OOOOOl\
ll
->
llOOOOllOlO\

^
lOOlOOlll\
OO
.
llOOO\
O\
llO\
l\
O
)
;
u3\
2
llOOOllll\
Ol
=
(
ll\
OO\
OOOOlll
->
ll\
OOOOllOl\
l
^
lOOl\
OOlllOO\

.
llO\
OOOll\
Oll
)
;
u3\
2
ll\
OOOlllllO\

=
(
llO\
OOOOO\
lll
->
llOO\
OOlllO\
O
^
lO\
OlO\
O\
lllOO
.
llOOOO\
lllOO\

)
;
u32
ll\
OOOl\
lll\
ll
=
ll\
OOOllllO\
O
|
llOOOll\
llO\
l
|
llOO\
Oll\
lllO
;
if
(
(
llO\
OO\
ll\
l\
lll
>>
1
)
>=
llO\
OOOOOl\
l\
l
->
llO\
OOOl\
lOOO\

&&
(
llO\
OOl\
lll\
ll
>>
1
)
>=
lO\
O\
lOOl\
llOO\

.
ll\
OOOO\
llO\
OO
)
{
llOOl\
OOOO\
OO
(
llOOOOOOlll
,
lOOlOO\
ll\
l\
OO
,
llOOOl\
llll\
l
)
;
lOllll\
O\
lOlO
(
)
retu\
rn
;
}
if
(
lOOl\
OOll\
lO\
O\

.
ll\
OO\
OOllOOO
>
llO\
OOO\
OOl\
ll
->
llOOOO\
l\
l\
O\
OO\

)
{
llO\
Ol\
OOOOOl\

(
ll\
O\
OO\
OOO\
lll
,
lOOlOOl\
llOO
)
;
lOllllO\
lO\
l\
O
(
)
retu\
rn\

;
}
if\

(
lO\
OlOOlllOO\

.
llO\
O\
O\
Ol\
lOOO
==
llOO\
O\
OOO\
lll
->
llOOOOll\
O\
O\
O
)
{
ll\
OOlOOOOlO
(
llO\
OOOOOll\
l
,
lO\
Ol\
O\
Oll\
lOO
)
;
lOlll\
lOlOlO
(
)
retur\
n
;
}
if
(
ll\
OOOOO\
Olll\

->
lOlOllOOOl\

&
llO\
O\
OOOOlOO
)
{
lOlll\
lOlO\
lO
(
)
;
TA_AS\
SERT
(
llOOlOOOOl\
l
(
llOOO\
O\
O\
Ol\
ll
)
)
;
llOO\
lO\
O\
OlOO
(
&
llO\
OOOO\
Olll\

)
;
TA\
_A\
SSER\
T
(
llOOOOOllll
(
llOO\
OOOOl\
ll
)
)
;
}
int\

llOOO\
O\
lOOlO
=
(
(
(
llOO\
OO\
OOlll
->
ll\
OOOO\
ll\
OlO
-
lO\
OlOO\
lllOO
.
llOOOO\
llOlO
-
1
)
>>
31
)
<<
2
)
+
(
(
(
llOO\
OO\
OOlll
->
llOOOOllOll\

-
lOOlO\
OlllOO\

.
llOOO\
O\
llOll
-
1
)
>>
31
)
<<
1
)
+
(
(
ll\
OOO\
O\
OO\
ll\
l
->
llO\
O\
O\
Ol\
llOO
-
lOOlOOlllO\
O\

.
ll\
OO\
O\
Ol\
l\
lOO
-
1
)
>>
31
)
;
if
(
!
ll\
OO\
O\
O\
OO\
lll
->
llOOOOl\
OOOl
[
llO\
OOOl\
O\
Ol\
O\

]
)
{
llO\
OOOOOllO\

*
llOO\
O\
OO\
llOl
=
llOOOlll\
Ol\
l
(
llOOOOOOlll
,
&
llO\
OOOOO\
lll
->
llOOOO\
l\
OOO\
l\

[
llOO\
OOlOOlO
]
,
lO\
OlOOlllOO
)
;
llOOOOOllOl
->
llOO\
OO\
lOOlO
=
llOOO\
OlO\
O\
l\
O
;
TA_ASSER\
T
(
llOOOOOllll
(
llOO\
O\
O\
OO\
lll
)
)
;
llOOOOOOl\
ll\

->
llOOO\
OlOOO\
O\

|=
1
<<
ll\
OOO\
O\
l\
OOlO
;
ll\
OOOOOO\
l\
ll
->
llO\
llOO\
lOl
++
;
TA_ASSERT
(
llO\
OOOOllOl\

->
llOllOO\
lOl\

<
8
)
;
lOll\
llO\
l\
Ol\
O
(
)
retu\
rn
;
}
el\
se\

{
ll\
OO\
OOOOlll
=
ll\
OOOO\
OO\
l\
ll
->
ll\
OOOOlO\
O\
Ol
[
llO\
OOOlOOlO
]
;
}
TA_\
ASSERT
(
llO\
OOOOOll\
l
)
;
}
}
void
lOl\
l\
lll\
OO\
l\
l
::
llO\
OOlO\
O\
O\
lO
(
llOOOOOOl\
l\
O
*
llO\
O\
OOOO\
l\
ll
)
{
TA\
_ASS\
ERT
(
llOOOOO\
Olll
)
;
TA_ASSERT
(
ll\
OO\
OOOOll\
l
->
ll\
O\
llO\
OlOl\

==
0
)
;
TA_A\
SSERT\

(
llOOO\
OO\
Oll\
l
->
ll\
OOO\
Ol\
OOOO\

==
0
)
;
lO\
l\
lll\
OlO\
lO
(
)
lOllllOlllO\

(
lOll\
ll\
OllOO
,
llO\
OO\
OO\
Olll\

)
if
(
ll\
OOOO\
OO\
lll
->
llOOO\
OOl\
Ol\
l
==
0
)
{
TA\
_ASSER\
T\

(
lOllllOllO\
O
==
ll\
OOO\
OOOll\
l
)
;
lOll\
llOl\
lOO
=
0
;
ll\
OO\
lOOOl\
O\
l
(
ll\
O\
OOOOOl\
ll
)
;
lOl\
lll\
O\
lOlO
(
)
}
els\
e\

{
lOlll\
lOlOlO
(
)
lOllll\
OlllO
(
lOllll\
Ol\
lOO
,
llO\
OOOOOlll\

)
TA_ASSER\
T\

(
ll\
OOOOOOlll
->
llOO\
OOOl\
Ol\
l\

->
llO\
OOOlOO\
Ol
[
llO\
OO\
OOOl\
ll
->
llOOOO\
lOOlO
]
==
llO\
OOOO\
Oll\
l
)
;
TA\
_ASS\
E\
RT
(
llOO\
OOOOll\
l
->
ll\
OOOOOl\
O\
ll
->
llOO\
OO\
l\
OOOO\

&
(
1
<<
llO\
OO\
O\
OO\
lll
->
ll\
OO\
OOlO\
Ol\
O
)
)
;
TA_ASS\
ERT
(
llO\
OOOO\
Oll\
l
->
llOOO\
OO\
lOll
->
llOl\
l\
OOlOl
>
0
)
;
llOOOOO\
O\
l\
ll
->
llOOO\
O\
OlOll
->
llOOOOlOOOO
&=
~
(
1
<<
llOOOOOOlll
->
llOOOO\
lOOl\
O
)
;
llOOOOOOlll\

->
llOOOO\
Ol\
Oll
->
llOO\
OOl\
OOO\
l
[
llOO\
OO\
OOlll\

->
llOOOOl\
OOl\
O\

]
=
0
;
llOOOOOOlll\

->
llOOOO\
O\
lOll
->
llOll\
OOl\
Ol
--
;
if\

(
llO\
OOO\
OOll\
l\

->
llOO\
O\
OOl\
Oll\

->
ll\
O\
llOOlOl
==
0
)
{
if
(
llOO\
OOO\
O\
ll\
l
->
llOOOOO\
l\
Oll\

->
llOOOO\
lOlOO
==
0
)
{
ll\
OO\
OOOO\
ll\
l
->
llOOOOOl\
Oll
->
lOl\
Ol\
lOO\
Ol
|=
llOOlOOOl\
lO
;
#ifdef _DEBUG
lO\
l\
lllllO\
lO\

++
;
#endif //
llOOO\
lOOO\
l\
O
(
llO\
O\
OO\
OO\
lll\

->
llO\
OOO\
OlOll
)
;
#ifdef _DEBUG
lO\
ll\
llll\
OlO
--
;
#endif //
}
else
{
llO\
OlOO\
Olll
(
&
llOOOO\
OOlll
->
llOOOOOl\
Ol\
l
)
;
}
llOOlOO\
OlOl
(
llO\
O\
OOOOlll
)
;
lOll\
ll\
O\
lOlO\

(
)
}
else
if
(
llOOOOOO\
lll
->
llOO\
OO\
O\
lOll
->
llOOO\
OlOl\
OO
==
0
&&
ll\
O\
OOOOOl\
ll\

->
llOOOOOl\
O\
ll\

->
llOllOOl\
Ol
==
1
)
{
llO\
OOlOOOll
(
ll\
O\
OOO\
OOlll
->
ll\
O\
OOO\
OlOll\

)
;
llOO\
lOOO\
l\
Ol
(
ll\
OO\
O\
OO\
Ol\
ll
)
;
lOl\
lll\
O\
lOlO
(
)
;
}
else
{
TA\
_ASSER\
T
(
llO\
O\
OOO\
O\
lll
->
llOO\
O\
OOlOll
->
ll\
OllOO\
lOl
>
0
)
;
llO\
OlOOO\
lOl
(
llOOO\
OOOlll
)
;
lOllll\
OlO\
l\
O
(
)
}
}
lOll\
l\
lO\
lOl\
O\

(
)
}
void
lOll\
l\
ll\
O\
Ol\
l\

::
llOOOl\
OO\
Oll
(
llO\
OOO\
O\
Oll\
O
*
llOO\
OOO\
Olll
)
{
in\
t
ll\
OOOOl\
OO\
l\
O
=
llO\
OlOOlOOO
(
ll\
OOOOO\
Olll
->
llOOOO\
lO\
OOO
)
;
TA_\
ASS\
ER\
T
(
llOOOOO\
O\
l\
l\
l
->
llO\
OOOlOOO\
l
[
llO\
OO\
Ol\
O\
OlO
]
)
;
ll\
OO\
OOO\
OllO
*
ll\
OO\
lOOlO\
Ol\

=
llOOOO\
OOll\
l\

->
llOOOOl\
OOOl\

[
llO\
OO\
O\
lO\
OlO
]
;
if
(
llO\
OOO\
OOll\
l\

->
ll\
OOO\
O\
OlOll
)
{
TA_A\
SSERT
(
llOOO\
OOOl\
ll
->
llOO\
OOOlOll\

->
llOOOOlOOOl
[
llO\
OOOOOlll\

->
ll\
OOOOlOO\
lO
]
==
llOOOOOOll\
l
)
;
llO\
OOOOOlll\

->
llOOO\
OOlO\
ll
->
llOOO\
OlOOOl\

[
ll\
O\
OO\
OOOlll
->
ll\
OOO\
Ol\
OOlO
]
=
llO\
OlOO\
lOOl
;
llO\
OlO\
O\
lOOl
->
llO\
OO\
OOlOll
=
llOO\
OOOOlll\

->
llOOOOOl\
Oll
;
llOOl\
OOlOO\
l\

->
llOOOOl\
OOlO
=
llO\
O\
O\
OO\
O\
l\
l\
l
->
llOOOOl\
OO\
lO
;
}
else\

{
TA_\
A\
S\
S\
E\
RT
(
lOllllO\
l\
lOO
==
ll\
OO\
OOO\
Olll
)
;
lOllllOl\
l\
OO
=
llOOl\
OO\
lOOl\

;
llOOlOOlO\
O\
l
->
llO\
OOOOlOl\
l
=
0
;
llOOlOOlOO\
l\

->
llOOOOlO\
OlO
=
0
;
}
llOOOO\
OOO\
lO
(
llOOOOOOlll
)
;
}
lO\
lllllOOl\
l
::
llOOOOOO\
l\
lO
*
lO\
lll\
l\
lOOll
::
llOO\
Oll\
l\
Oll\

(
llO\
O\
OO\
OOllO\

*
llOOOO\
O\
Ol\
ll
,
ll\
OOO\
OO\
OllO
*
*
llOOlO\
Ol\
OlO
,
llOOOOl\
l\
lOl\

&
lO\
O\
l\
OOlllO\
O
)
{
llO\
OOOOOllO\

*
llOOOOOllOl
=
(
llOO\
O\
OOO\
llO
*
)
&
lOO\
l\
O\
OlllO\
O
;
ll\
OOOOOllOl
->
lOlOllOOOl
&=
~
llO\
O\
OOO\
lOOO
;
*
llOOl\
O\
Ol\
OlO
=
llOOOO\
Oll\
O\
l
;
ll\
O\
OOOOllO\
l\

->
llO\
OOOlO\
OlO
=
0
;
llOO\
OOOll\
Ol
->
llOllOOlOl
=
0
;
llO\
O\
O\
OOl\
lOl
->
llOOO\
OlO\
OO\
O
=
0
;
TA_ASS\
ERT
(
lOOlOOlllOO
.
llOOOOlOlOO\

)
;
TA\
_\
AS\
SERT
(
lOOlOOlllO\
O
.
llOOOO\
lOlOO\

->
llO\
OO\
Olllll\

==
0
)
;
TA_A\
SS\
ERT
(
lOOlOOlllO\
O
.
llOOO\
OlO\
lO\
O
->
llO\
O\
OOlO\
l\
Ol\

==
0
)
;
ll\
OOO\
O\
Ol\
lO\
l
->
llOO\
OOlOlOO
->
ll\
OOOOlOlOl
=
&
llOOO\
OOllOl\

->
llO\
OOOlOl\
OO
;
ll\
OOO\
OOllO\
l
->
ll\
OOOOOlOll
=
llOO\
OOOOl\
l\
l
;
return
llO\
OOO\
O\
ll\
O\
l
;
}
void\

lO\
l\
l\
lllOO\
ll
::
llO\
OlOOOOOO
(
llOO\
O\
OO\
Ol\
l\
O\

*
llO\
O\
O\
OO\
Olll\

,
ll\
O\
OO\
OlllOl
&
lOOlOOl\
llOO
,
u32
llOOOll\
lll\
l
)
{
TA\
_\
ASSER\
T
(
llOOO\
llllll
!=
0
)
;
llO\
OOl\
l\
llll
=
llOOOOllOO\
l
(
ll\
OO\
Ollllll
)
;
TA_\
ASS\
ERT
(
llOOOllllll
!=
0
)
;
u32
llOO\
lO\
OlOll
=
~
(
(
llOOOllll\
ll
)
+
0xFFFFFFFF
)
;
#ifdef _DEBUG		
TA_ASSERT
(
(
lO\
O\
lOOlllOO
.
ll\
OO\
O\
OllOlO
&
ll\
O\
O\
l\
OOlOll
)
==
(
ll\
O\
OOOOO\
ll\
l
->
ll\
OOOOl\
lOl\
O
&
ll\
O\
O\
l\
O\
OlOll
)
)
;
TA_ASSERT
(
(
lOO\
l\
OOlllOO
.
ll\
OO\
OO\
l\
lO\
ll
&
ll\
OOlOOlOll\

)
==
(
llO\
O\
OOOOl\
ll
->
llOOOOllOll
&
llOOlOOlO\
ll
)
)
;
TA_AS\
SERT
(
(
lOO\
lO\
O\
lllOO\

.
llOOOO\
l\
l\
lOO
&
llO\
OlOOlOl\
l
)
==
(
llOOOOOO\
lll
->
llOO\
OO\
l\
llOO
&
llO\
Ol\
O\
OlOll
)
)
;
u32
lOllOlOllO\
O
=
~
(
(
llOO\
Olll\
l\
ll
>>
1
)
+
0xFFFFFFFF
)
;
TA_AS\
S\
ER\
T\

(
(
lOOlOOl\
llOO
.
llOOOOllO\
lO
&
lOllOlOllOO
)
!=
(
ll\
OOOOOOlll
->
llO\
OO\
OllOl\
O
&
lOl\
lOlOl\
lOO
)
||
(
lOOlO\
Oll\
lO\
O
.
llOOO\
OllOll\

&
lO\
ll\
O\
l\
OllOO
)
!=
(
llO\
O\
OOOO\
lll
->
llO\
OO\
O\
llO\
l\
l
&
lOl\
lO\
lOll\
OO
)
||
(
lOOlO\
Olll\
OO
.
ll\
OOOOll\
l\
OO\

&
lOll\
OlOllOO\

)
!=
(
llOO\
OOOO\
lll
->
ll\
OOO\
OlllOO
&
lOl\
lOl\
Oll\
OO
)
)
;
#endif
llOOO\
OOO\
ll\
O
*
llOOl\
O\
OllOO
=
ll\
O\
OOOO\
l\
llO
(
)
;
llOO\
lOOl\
lOO
->
llOOOOlOOlO
=
ll\
OOO\
OO\
Ol\
ll
->
llOOO\
O\
lOOl\
O\

;
llOOlOO\
ll\
OO
->
llOllOOlOl
=
0
;
ll\
OOlOOllOO
->
llOOO\
O\
lOOOO
=
0
;
llOOlOO\
ll\
OO
->
ll\
OOOOl\
lOOO
=
llO\
OO\
l\
llll\
l\

>>
1
;
TA_\
ASSERT\

(
llOOOO\
O\
Ol\
ll\

->
ll\
OOO\
Oll\
O\
OO
<
llOOlOO\
llOO
->
llOO\
OOll\
OOO\

)
;
TA\
_ASSE\
RT
(
lOOl\
OOlllO\
O
.
llOOOOllOOO
<
llOOl\
OOllOO\

->
llO\
O\
OOllO\
OO
)
;
llO\
OlOOllOO
->
llOOOOl\
lOl\
O\

=
(
lOOlOOl\
llOO
.
llOOOOllO\
lO
&
llOO\
lO\
OlOll
)
+
llO\
OlOOll\
OO
->
llOOO\
OllOOO
;
llOO\
lOOllO\
O\

->
llOO\
OO\
llO\
ll
=
(
lO\
OlOOlllOO
.
llOO\
OOllO\
l\
l\

&
llOOlOO\
l\
Ol\
l
)
+
llOOlOOll\
OO\

->
llOOOO\
ll\
OOO\

;
llO\
OlOOl\
lOO
->
llOO\
O\
OlllOO\

=
(
lOOlO\
Oll\
l\
O\
O
.
ll\
OOOO\
l\
llOO
&
ll\
O\
O\
l\
O\
OlOll
)
+
llOOlOOllOO
->
llOO\
OOllOOO
;
llO\
Ol\
OOll\
OO\

->
llOOOOl\
OlOO
=
0
;
in\
t\

ll\
OOO\
Ol\
OOlO
=
(
(
(
llOOlOOllOO
->
llOOOOll\
OlO
-
llOOOOOO\
lll\

->
llOOO\
O\
llOlO
-
1
)
>>
31
)
<<
2
)
+
(
(
(
llOOlOO\
l\
lOO
->
llOOOO\
l\
lOll
-
llO\
OOOOO\
lll
->
llO\
OOOllO\
ll
-
1
)
>>
31
)
<<
1
)
+
(
(
llOO\
lOO\
l\
lOO
->
llO\
OOOlll\
OO\

-
ll\
OOO\
OOO\
ll\
l
->
llOOOOlll\
OO
-
1
)
>>
31
)
;
TA\
_AS\
SE\
R\
T\

(
llOO\
lOOl\
lO\
O
->
llOllO\
O\
lO\
l
==
0
)
;
TA\
_AS\
SE\
RT
(
llO\
OlOOllOO
->
llO\
OOO\
lOOOO\

==
0
)
;
llOO\
lOOllOO
->
ll\
OOOOlOOOO
|=
1
<<
llOO\
OOl\
O\
OlO
;
llO\
Ol\
OOll\
OO
->
ll\
OllOOl\
Ol
=
2
;
llOOlOO\
ll\
OO
->
llO\
O\
O\
O\
Ol\
Oll
=
llOOO\
OO\
Oll\
l\

->
llOOOOOlOll
;
llO\
OO\
OOOlll\

->
llOOOOOlOl\
l
=
ll\
OO\
lOOllOO\

;
llOOOOOOlll
->
llOO\
O\
Ol\
OOlO
=
llOO\
O\
O\
lO\
OlO
;
llOO\
lOOll\
OO
->
llOOOOlOO\
O\
l
[
llOOOOOOll\
l
->
llOO\
OOl\
OO\
lO\

]
=
llOOOOOOlll
;
if
(
!
ll\
O\
OlOO\
llO\
O
->
llOOOOOlOll
)
{
TA_ASS\
E\
RT
(
lOl\
l\
l\
lOllOO
==
llOOO\
OOOlll\

)
;
lOl\
lll\
Ol\
lO\
O
=
llOO\
l\
OO\
llO\
O
;
}
el\
se
{
TA_A\
SSERT
(
ll\
OOl\
OOl\
l\
OO
->
llO\
OOOO\
lOll\

->
llO\
OO\
OlOOOl\

[
llO\
O\
lOOllOO
->
llOOOO\
lOO\
lO
]
==
llOOO\
OO\
Olll
)
;
llO\
OlO\
Ol\
l\
O\
O
->
llOO\
OOOlO\
ll
->
ll\
O\
O\
OOlOOOl
[
ll\
OOlOOllOO
->
llOOOOl\
OOlO\

]
=
llOO\
lOOllOO
;
}
ll\
OOO\
Ol\
OO\
l\
O\

=
(
(
(
llOOlOOllOO\

->
llOOO\
OllO\
lO
-
lOO\
lOOll\
lOO
.
ll\
OOOOllO\
l\
O
-
1
)
>>
31
)
<<
2
)
+
(
(
(
ll\
OOlOOl\
lOO\

->
llOO\
OOl\
l\
Oll
-
lOO\
lOOl\
llOO
.
llOOOOllO\
ll
-
1
)
>>
31
)
<<
1
)
+
(
(
ll\
OO\
lOO\
llOO
->
ll\
OO\
OOlll\
OO
-
lO\
O\
l\
OOl\
llOO\

.
llOOOOlllOO
-
1
)
>>
31
)
;
llO\
O\
OOlllOl
*
llO\
OlOO\
llOl
=
&
lO\
O\
lO\
Oll\
lOO\

;
ll\
OOlOO\
llO\
l
->
lO\
lO\
ll\
OO\
Ol
&=
~
llO\
O\
OOO\
l\
OO\
O
;
ll\
O\
O\
lOOllO\
l
->
llOOOOlOO\
lO
=
llO\
OOOlOOl\
O\

;
llOOlO\
OllOl
->
llOllOOl\
O\
l
=
0
;
llOO\
lOO\
llOl
->
llOOOOlOOOO
=
0
;
TA\
_ASS\
ERT\

(
llOOlOO\
llOl
->
llO\
O\
OO\
lOOl\
O
!=
ll\
OOOO\
OOlll
->
llOOOOlOOlO
)
;
TA\
_ASSERT
(
ll\
OOlO\
OllOO
->
llO\
OO\
O\
lOOOl\

[
llOOlO\
OllOl\

->
llOOO\
O\
lOO\
lO\

]
==
0
)
;
ll\
OO\
lO\
Ol\
lOO
->
llO\
OOO\
lOOOO
|=
1
<<
llOOOOlO\
OlO
;
ll\
OOlO\
OllO\
O
->
llOOOOlOO\
Ol
[
llOOlOO\
llO\
l
->
llOOO\
Ol\
O\
O\
lO\

]
=
(
llOOOOOOllO
*
)
llOOlOOllO\
l\

;
ll\
OOlOOllOl
->
ll\
OOOOOlOll
=
llOOlOOllOO\

;
TA_A\
SS\
E\
RT
(
lO\
OlOO\
l\
ll\
O\
O
.
llOOOOlOlOO
)
;
TA_ASSERT
(
lOOlO\
O\
l\
ll\
OO
.
llOO\
OOlOlOO
->
llOOO\
Olll\
l\
l
==
0
)
;
TA\
_AS\
SERT
(
lOO\
l\
O\
OlllOO\

.
llOOOOlOl\
OO\

->
llOOOO\
l\
OlOl
==
0
)
;
lOOl\
OOlllOO
.
llOOOOl\
OlO\
O\

->
llOOOOlOlOl\

=
&
llOO\
lO\
OllOl\

->
ll\
OOO\
Ol\
O\
lOO
;
}
void
lOlllllOOll
::
ll\
OOl\
OOOOOl
(
llOOOOO\
OllO\

*
llOOOOOOlll
,
llO\
OOOl\
l\
l\
Ol
&
lO\
OlOOlll\
OO
)
{
ll\
OOOOOO\
ll\
O
*
ll\
OOOO\
Oll\
O\
l
=
llOOOOOll\
lO
(
)
;
llOOOOOllOl
->
ll\
OOOO\
lO\
OlO
=
llOO\
OO\
OOl\
ll\

->
ll\
OOOOlOO\
lO
;
llOO\
OOO\
llOl
->
ll\
OllO\
OlOl\

=
0
;
ll\
O\
OOOOllO\
l
->
llOOO\
O\
lOOOO
=
0
;
llO\
O\
OOOl\
lOl
->
ll\
OOOOll\
OOO
=
lO\
OlOOll\
lO\
O
.
llOOOO\
l\
lOOO
;
ll\
OO\
O\
O\
O\
l\
lOl
->
llOOOOl\
l\
OlO
=
lO\
OlOOlllOO\

.
llO\
O\
OO\
ll\
O\
lO
;
llO\
O\
OOOllO\
l
->
ll\
OOOOllO\
ll
=
lO\
O\
l\
OO\
ll\
lOO\

.
llOOOOl\
lOll\

;
llOOOOOl\
l\
Ol
->
llOOOOl\
llOO\

=
lOOl\
O\
OlllOO
.
llOOOOl\
llO\
O
;
TA\
_A\
SSERT
(
lOOlOOlllO\
O
.
llOOOOlOlOO
)
;
TA\
_A\
SSERT
(
lO\
OlOOlll\
O\
O\

.
ll\
OOOOl\
OlOO
->
llOO\
O\
Ol\
l\
l\
ll\

==
0
)
;
TA_AS\
SERT\

(
lOOlO\
OlllOO
.
llO\
OOOlOlOO\

->
ll\
OOO\
O\
lO\
lOl
==
0
)
;
ll\
OOOOOl\
lOl
->
ll\
OOOOlOlOO
=
lO\
OlOO\
lll\
OO\

.
llOOOOlOlO\
O
;
lO\
OlOO\
lllO\
O
.
llOOOOlOl\
OO\

->
ll\
OO\
OOlOlOl
=
&
ll\
OO\
OOOllO\
l
->
llOOO\
OlOlO\
O
;
int
llOOOOlOOlO
=
(
(
(
ll\
OOO\
O\
O\
llOl
->
llOOOOl\
lOlO\

-
llOOO\
OOOlll\

->
llO\
OO\
Ol\
lOlO
-
1
)
>>
31
)
<<
2
)
+
(
(
(
llOOOO\
Oll\
Ol
->
llOOOOllO\
l\
l\

-
llOOO\
OOOlll
->
ll\
OOOO\
llOl\
l
-
1
)
>>
31
)
<<
1
)
+
(
(
ll\
OOO\
OOll\
O\
l
->
ll\
OOOO\
lll\
O\
O\

-
llOO\
OOOOlll
->
llO\
OOOlllOO
-
1
)
>>
31
)
;
TA_ASSERT
(
ll\
OO\
OOOll\
Ol
->
llOllO\
OlOl
==
0
)
;
TA_\
ASSE\
RT
(
llOOOOOllOl
->
llO\
O\
O\
O\
l\
OO\
O\
O
==
0
)
;
TA_ASSE\
RT
(
llO\
OO\
OOll\
ll\

(
ll\
OOO\
O\
Oll\
Ol\

)
)
;
llO\
OOOOllO\
l\

->
llOOOOl\
OOOO
|=
1
<<
llOOO\
OlO\
O\
l\
O
;
llOOOOOllO\
l
->
llOllOOlOl\

++
;
llO\
OOOOl\
lO\
l
->
llOO\
O\
OOl\
Oll\

=
llOOO\
O\
O\
Olll
->
llOOOOOl\
O\
l\
l
;
llOOOOOOl\
ll
->
llOOOOOlOl\
l
=
llOO\
O\
O\
OllOl
;
llO\
OOOOOl\
ll
->
llOOOO\
lOO\
lO
=
llO\
O\
O\
OlOOlO
;
ll\
OOOOO\
llOl
->
llO\
OO\
OlO\
O\
Ol
[
llO\
OOO\
OO\
lll
->
llOOOOlOOlO
]
=
llO\
OOOOO\
l\
l\
l
;
if\

(
!
llO\
OOOOllO\
l
->
llOOOOOlOl\
l
)
{
TA\
_ASSER\
T
(
lOl\
lllO\
llO\
O
==
llO\
OOOOOlll\

)
;
lOllll\
O\
llOO
=
ll\
OOOOOllOl\

;
}
else
{
TA_\
ASSE\
RT\

(
ll\
OO\
O\
O\
O\
llOl
->
ll\
OOOOOlOll\

->
llOOOOlO\
OO\
l
[
ll\
OO\
OOOl\
l\
Ol
->
ll\
OOO\
O\
lOOlO
]
==
llOOO\
OOOlll
)
;
ll\
OOOOOllOl
->
llO\
OOOOlO\
ll
->
llOOOOl\
OOOl
[
llO\
OOOO\
llOl
->
llOOO\
OlOOl\
O
]
=
llO\
OOOO\
l\
l\
Ol
;
}
}
voi\
d
lO\
lllllOOll
::
ll\
O\
Ol\
O\
OOOlO
(
llO\
OOOOOllO
*
llO\
OO\
OO\
Olll
,
llOOO\
Olll\
Ol
&
lOOl\
O\
OlllOO
)
{
TA_ASSE\
RT
(
lO\
O\
lO\
O\
lll\
OO\

.
llO\
OO\
OlOl\
OO
)
;
TA_ASS\
E\
RT\

(
lOO\
lOOlll\
OO\

.
llOOOO\
lO\
lO\
O
->
ll\
OOOO\
lllll
==
0
)
;
TA\
_AS\
SE\
RT
(
lOOlO\
O\
l\
ll\
OO\

.
llOOOO\
lOl\
O\
O\

->
llOOOOl\
OlOl\

==
0
)
;
lOOlOOl\
l\
l\
OO
.
llOO\
O\
OlOlO\
O\

->
llOOOO\
lO\
lO\
l
=
&
llO\
OOOO\
Olll
->
ll\
OOOO\
lOlOO
;
if
(
llO\
O\
OO\
OOlll
->
llOOOOl\
O\
lOO
)
llOO\
OOOOlll\

->
llOOO\
Ol\
OlOO
->
llOOOO\
l\
OlOl\

=
&
lOOlOOl\
llO\
O
.
llOO\
OOlOl\
OO
->
llOO\
OOlllll
;
lOOlOOll\
l\
O\
O
.
ll\
O\
O\
OOlOl\
OO
->
llOO\
OOlll\
l\
l
=
ll\
OOO\
OO\
Ol\
ll
->
llO\
OOOlOlOO
;
ll\
OOOOOOlll
->
llO\
OOO\
lOl\
OO
=
lOOlOOl\
llO\
O
.
ll\
O\
OOOlOl\
OO
;
}
lOl\
llllOOll
::
llOOOO\
OOll\
O
*
lOlll\
l\
lOO\
ll\

::
llOO\
OO\
Oll\
lO\

(
)
{
llOOOO\
OOl\
lO
*
ll\
OOOOOllOl
=
(
llOO\
OOOOllO
*
)
lO\
lllllOllO
;
TA_ASSERT\

(
ll\
OOOOOll\
Ol
)
;
lOlllll\
O\
ll\
O
=
lOll\
l\
llOllO
->
llOOOOO\
llOO
;
if
(
lOlllllO\
l\
lO\

)
lOl\
llllOllO
->
llOO\
OOOl\
Oll
=
0
;
memse\
t
(
llOOOO\
OllOl
->
llOO\
OOlOOOl\

,
0
,
size\
of
(
llOOO\
OOOllO\

*
)
*
8
)
;
TA\
_ASS\
ERT
(
ll\
O\
OO\
OOll\
ll
(
ll\
OO\
OOOllO\
l\

)
)
;
TA_ASSE\
RT
(
(
ll\
OOOO\
O\
ll\
O\
l\

->
lOlO\
l\
lOOOl
&
llOOOOOl\
O\
OO
)
!=
0
)
;
llOOO\
O\
OllOl
->
lOl\
OllOO\
Ol
=
ll\
OOOOO\
O\
OOl\

;
#ifdef _DEBUG
lOll\
ll\
llOO\
l
++
;
lO\
l\
l\
llllOOO
--
;
#endif //
return
llOO\
OO\
Ol\
lOl
;
}
voi\
d
lOll\
lllOOll\

::
ll\
OO\
O\
OOOOlO
(
llOOO\
OOOllO\

*
ll\
OO\
OOOOlll\

)
{
TA_\
ASSE\
R\
T
(
llOOOOO\
O\
l\
ll
)
;
TA\
_A\
S\
S\
ERT\

(
llOOOOOl\
ll\
l\

(
ll\
O\
O\
OOOOll\
l
)
)
;
TA\
_ASSER\
T
(
(
llOO\
OOO\
Ol\
ll
->
lOl\
O\
llOOO\
l
&
ll\
OOO\
OOlOOO
)
==
0
)
;
llOOOOOOlll
->
lOlOl\
l\
O\
OO\
l
|=
llOOOOO\
l\
O\
OO\

;
llOOOO\
OOl\
ll
->
lO\
l\
Ol\
lOOO\
l
&=
~
llOOlO\
O\
O\
l\
lO
;
llOOOOO\
lOOl
*
llOO\
lOOlll\
O\

=
(
llOOOOOlOOl\

*
)
llO\
O\
O\
OOOlll
;
if\

(
lOll\
lllOllO
)
lOllll\
lO\
llO\

->
ll\
O\
OOOO\
l\
O\
ll
=
ll\
O\
O\
lOOlll\
O
;
llO\
OlOOlllO\

->
llOO\
OOO\
lOll\

=
0
;
ll\
OO\
lOO\
lll\
O
->
llO\
OOOOl\
lOO\

=
lOllll\
lOl\
lO
;
lOll\
lllOl\
lO\

=
ll\
OOlOOl\
ll\
O\

;
#ifdef _DEBUG
lOlllll\
lO\
Ol
--
;
lOllllllOOO
++
;
#endif //
}
void
lOll\
lll\
OO\
ll
::
llOO\
lOOOlOl\

(
llO\
OOOOOl\
lO
*
llO\
OOO\
OOll\
l\

)
{
if\

(
ll\
O\
OOO\
OOlll
->
lOlOll\
OOOl
&
llO\
OOOO\
OO\
Ol\

)
llOOOOOOOlO
(
llOOOOOOll\
l
)
;
el\
se
llOOlOOllll
(
ll\
OOOOOOll\
l
)
;
}
void
lO\
ll\
lllOOl\
l
::
llOOlOOl\
ll\
l
(
ll\
OO\
OO\
OOl\
lO
*
llO\
OlOlOOO\
O\

)
{
TA_A\
SSERT\

(
ll\
OOlOl\
OOOO\

)
;
TA\
_\
A\
S\
S\
E\
R\
T
(
llOO\
lOOOOll
(
llOOl\
Ol\
OO\
OO
)
)
;
llO\
OlOl\
OOOO
->
lOlO\
llOO\
Ol\

|=
llOO\
O\
OO\
lOOO
;
TA_ASS\
E\
RT
(
(
llO\
OlOlOOOO
->
lO\
l\
OllOO\
Ol
&
llOOlOO\
OllO
)
==
0
)
;
}
void
lO\
llll\
l\
OOl\
l
::
llOOl\
OOOlOO\

(
llOOOOOO\
llO\

*
*
llO\
Ol\
O\
lOOO\
l
)
{
TA_\
ASS\
ERT\

(
llOOlOlO\
OOl
)
;
TA_\
ASSERT
(
*
llOOlOlOOOl
)
;
TA_A\
SSER\
T
(
llOOlOO\
O\
Ol\
l\

(
*
llOOlOlOOOl
)
)
;
TA\
_\
ASSE\
RT
(
(
(
(
*
llOOl\
OlOOOl
)
->
lOlOl\
l\
O\
OOl
)
&
llO\
OOOOl\
OO\
O\

)
==
0
)
;
ll\
OOO\
OO\
OllO
*
llO\
O\
O\
OOOl\
l\
l
=
llOO\
OOO\
lllO
(
)
;
TA\
_\
A\
SS\
ERT
(
ll\
OOOO\
O\
llll
(
llOOOOOOll\
l
)
)
;
llOO\
OOO\
Olll
->
llOOO\
O\
llOOO
=
(
*
llOOlOl\
OOOl
)
->
llOO\
OOll\
O\
OO
;
ll\
O\
O\
O\
O\
O\
Olll
->
ll\
O\
OOOllOlO
=
(
*
ll\
O\
OlOl\
OOOl
)
->
llOOOOllOlO
;
llOOO\
OOOl\
ll\

->
llOOO\
O\
ll\
Oll
=
(
*
ll\
OOl\
Ol\
OOOl
)
->
llOO\
OOll\
Ol\
l
;
llOOOOO\
O\
lll
->
llOO\
O\
OlllOO\

=
(
*
llOO\
l\
O\
lOOOl
)
->
llOOOOlllOO
;
llOOOO\
OOlll
->
llOllOOlOl\

=
0
;
llO\
OO\
OOO\
lll
->
llOOO\
O\
l\
OO\
OO\

=
0
;
llOO\
OOOO\
lll
->
lOlOl\
lO\
O\
Ol\

|=
(
(
*
llO\
Ol\
OlOOO\
l\

)
->
lOl\
Ol\
lOOOl
)
&
~
(
llOO\
O\
OOOOOl
|
llOOOOOOlO\
O
)
;
(
(
*
llO\
Ol\
OlOO\
Ol\

)
->
lOlOl\
lOOOl\

)
|=
llOOOOOl\
O\
OO
;
llOOOO\
OO\
lll
->
llOOOOl\
OOlO\

=
(
*
llO\
O\
lOl\
OOOl
)
->
llO\
OOOlOO\
lO
;
llOO\
OOO\
Olll
->
ll\
O\
O\
O\
OOlOll
=
(
*
llO\
Ol\
OlOO\
Ol
)
->
llOOOOOlOll
;
if
(
ll\
OO\
OOOOlll
->
ll\
OO\
O\
OOlO\
ll
)
{
TA_A\
SSERT
(
ll\
OO\
O\
OOllll
(
ll\
OOOOO\
Olll\

->
llOO\
O\
O\
Ol\
Oll
)
)
;
TA_AS\
SER\
T
(
llOOO\
OO\
Olll
->
ll\
OO\
OOO\
l\
O\
ll
->
llO\
OOOlO\
O\
Ol
[
llO\
OO\
OO\
Olll
->
llOOOO\
l\
O\
OlO
]
==
*
llOO\
lOlOO\
Ol
)
;
ll\
O\
OO\
OOO\
lll
->
llO\
OOO\
OlOll
->
llOOOOl\
OO\
Ol
[
llOO\
OOOOlll
->
ll\
O\
OOOlOOlO\

]
=
ll\
OOO\
O\
O\
Olll\

;
}
else
{
TA_AS\
SE\
RT\

(
lOll\
ll\
Ol\
l\
OO
==
*
llOOlOlO\
OO\
l\

)
;
lOllll\
OllOO
=
llOO\
OO\
OO\
lll
;
}
llOOOOOOl\
ll\

->
llOOOOlOl\
OO
=
(
*
llOO\
lOlO\
OOl\

)
->
llOOOOlOlO\
O
;
if
(
llOOOO\
OO\
lll
->
llO\
OO\
OlOlOO
)
ll\
OOOOOO\
l\
ll
->
llOOO\
OlO\
lO\
O
->
llOO\
OOlOlO\
l
=
&
ll\
OOO\
OOOll\
l
->
llOOOOlOlO\
O\

;
TA_ASS\
E\
RT
(
llOOOO\
Oll\
ll
(
llOOOOOO\
lll
)
)
;
TA_ASSERT\

(
(
llOOOOOOlll
->
lOlO\
ll\
OOOl\

&
llOO\
O\
OOlOOO\

)
==
0
)
;
*
llO\
O\
lOlOO\
Ol\

=
llOOOOOOlll
;
}
void
lOllll\
lOO\
ll
::
llO\
Ol\
OOO\
lll\

(
llOOO\
OO\
OllO
*
*
llOO\
lO\
O\
lOlO
)
{
TA\
_\
A\
S\
S\
ERT
(
llOO\
lO\
O\
lOlO
)
;
TA\
_A\
SSERT
(
*
llO\
OlO\
OlO\
lO
)
;
TA_A\
SSERT
(
llOOO\
OOl\
ll\
l
(
*
ll\
OOl\
OOlO\
lO\

)
)
;
TA\
_AS\
SERT
(
(
*
llOO\
lO\
OlOlO
)
->
llOOOOlO\
lOO
)
;
lO\
lll\
llll\
l\
l
*
lOOll\
lOOOO
=
(
lO\
l\
llllllll
*
)
(
*
llO\
OlOOl\
OlO
)
->
llOOOOlOlOO
->
GetSpaceDivisionNodeM\
emo\
ry
(
)
;
TA_\
AS\
SERT
(
lO\
O\
lllO\
OOO
)
;
llOOOOl\
llOl\

*
llOO\
l\
OlOOOO
=
&
lOOl\
llOOO\
O
->
llOOOOOO\
Oll
;
TA_\
ASS\
E\
R\
T
(
llOOlOlO\
OOO
->
lOl\
O\
llOO\
O\
l
&
ll\
O\
OOOO\
lOOO\

)
;
TA\
_AS\
SERT\

(
ll\
OO\
lO\
OOOl\
l
(
(
ll\
O\
OOO\
OOllO
*
)
llOOlOlOOOO\

)
)
;
llOOlOlOOOO
->
llO\
OOOl\
lOO\
O
=
(
*
llOOl\
O\
Ol\
Ol\
O
)
->
llOOOOll\
O\
O\
O
;
llOOl\
OlOOOO
->
llOOO\
OllOlO
=
(
*
ll\
OOlOOlOl\
O\

)
->
llOO\
O\
Ol\
lOlO
;
llOOlOl\
OOOO
->
llO\
OOOllOll\

=
(
*
ll\
OOlO\
OlO\
lO
)
->
ll\
OOOOl\
lOll\

;
llO\
OlOlO\
O\
OO
->
llOO\
OOll\
lO\
O
=
(
*
ll\
OO\
lOO\
lOlO
)
->
llOOOOl\
llOO
;
TA_\
ASSERT
(
(
*
llOOlOOl\
O\
lO
)
->
llO\
l\
l\
O\
O\
lOl
==
0
)
;
TA_\
ASSERT
(
(
*
llO\
OlOOlOlO\

)
->
llOOO\
OlOOOO
==
0
)
;
llO\
Ol\
O\
l\
OOOO\

->
llOllOOl\
O\
l
=
0
;
llOOl\
Ol\
OOOO\

->
ll\
O\
OOOl\
OOO\
O
=
0
;
llO\
O\
lOl\
OOOO\

->
lO\
l\
O\
l\
l\
OOOl
|=
(
(
*
llOOlO\
O\
lO\
lO
)
->
lOlOl\
l\
O\
OO\
l
)
&
~
(
llOOO\
OOO\
OOl\

|
llOO\
OOOOlOO\

)
;
llOOlOl\
OOOO
->
lOlOll\
O\
OOl
&=
~
llO\
OOO\
Ol\
OOO
;
llOOlOlO\
O\
OO
->
llOOOOlO\
OlO
=
(
*
llOO\
l\
OOlOlO
)
->
llOOOOl\
OOlO\

;
llO\
O\
lO\
lOO\
OO
->
llOO\
OOO\
lO\
ll
=
(
*
ll\
OOlOOl\
Ol\
O
)
->
llOOOOO\
lOl\
l
;
if
(
llOOl\
OlOOOO
->
llOO\
OO\
O\
lO\
ll
)
{
TA\
_\
ASSE\
RT\

(
ll\
O\
OOOOlll\
l
(
llOOlOlOO\
OO\

->
llOOOOOlOll
)
)
;
TA\
_A\
S\
S\
ERT
(
llOOlOlOOO\
O\

->
llOOO\
OOl\
O\
l\
l
->
llOOOOlOOOl
[
llOO\
lOl\
OOOO
->
llOO\
OOlOOlO
]
==
*
llOO\
lOOlOl\
O
)
;
llOOlOl\
OO\
OO\

->
llOOOO\
O\
lOl\
l
->
llOOO\
OlOOOl
[
llO\
Ol\
O\
lOOOO
->
llOOOOl\
O\
O\
lO
]
=
(
llOOOO\
O\
OllO
*
)
llOOlOl\
OO\
O\
O
;
}
else
{
TA_\
ASSERT\

(
lO\
lll\
lO\
l\
lO\
O\

==
*
llO\
O\
lO\
Ol\
O\
lO
)
;
lOllllO\
llO\
O\

=
(
llOOOOOOll\
O
*
)
llOOlO\
lOOOO
;
}
llOOlOlOO\
OO\

->
ll\
OO\
OOlOlOO
=
(
*
llO\
OlOOlOlO
)
->
ll\
OOOOl\
Ol\
OO
;
if
(
ll\
OOlOl\
OOOO\

->
llOOOOlO\
lOO
)
llO\
OlO\
lOOOO
->
llOOOOl\
Ol\
O\
O
->
llO\
O\
OO\
lO\
l\
Ol
=
&
llO\
Ol\
OlO\
OO\
O
->
llOOOO\
lOlO\
O\

;
TA_\
ASSE\
RT
(
ll\
OOlO\
OOOll
(
(
llOOOOOOl\
lO
*
)
llOOlO\
lOOOO
)
)
;
llO\
OOOOO\
OlO\

(
*
llOO\
lOO\
lOlO
)
;
*
llOOlOO\
lOlO\

=
(
llOOOOOOll\
O\

*
)
llO\
OlOlOOOO
;
}
vo\
i\
d\

lO\
l\
lll\
lOOl\
l\

::
lO\
l\
ll\
lOl\
lOl\

(
)
{
#ifdef _DEBUG
int
ll\
Oll\
OOlOl\

=
0
;
llOOO\
O\
Ol\
OOl
*
llO\
OOOOOll\
l
=
lOlllllOll\
O
;
llOOOOOlOOl
*
ll\
OOlOlOO\
lO
=
0
;
for
(
llO\
O\
OO\
O\
lOOl
*
llOOO\
OOOll\
l
=
lO\
l\
lll\
lOllO
;
llOO\
OOOOl\
l\
l\

;
llOOOOOOll\
l
=
llOOOOOOl\
ll
->
llOOOOO\
ll\
OO
)
{
TA_ASSERT
(
ll\
OOOO\
O\
O\
lll
->
ll\
OO\
O\
OOlOll
==
llO\
Ol\
OlOOlO\

)
;
TA_A\
SSER\
T\

(
llO\
OOOOO\
lll
->
lOlOllOOO\
l
&
llO\
OO\
OOl\
OOO
)
;
ll\
O\
Ol\
OlOOl\
O
=
llOOOOOOl\
l\
l
;
llO\
llOOlO\
l
++
;
}
if
(
!
lOllll\
l\
lO\
l\
O\

)
{
TA_ASSERT
(
lOll\
lll\
l\
OOO\

==
llO\
llOOlOl
)
;
TA\
_ASSER\
T
(
lO\
lll\
l\
ll\
OO\
O\

+
lOlll\
lllOOl\

==
lO\
l\
lll\
llOll\

)
;
TA\
_\
A\
SS\
ERT
(
lO\
lll\
l\
l\
lOOl\

<
lOl\
llll\
Ol\
ll
||
(
lOllll\
l\
O\
lll\

==
0
&&
lOll\
l\
lllO\
Ol
==
0
)
)
;
}
#endif //
}
voi\
d
lOlllllOO\
ll
::
lO\
llllOlOll
(
llOO\
OOOOl\
l\
O
*
llOOOOOOl\
l\
l\

)
{
#ifdef _DEBUG
in\
t
llOl\
l\
O\
OlOl
=
0
;
lOllllOlOll
(
llOOOOOOll\
l
,
llOl\
lOOlOl
)
;
if
(
llOOOOOO\
lll
==
lOllllOl\
lO\
O
&&
!
lO\
llllllO\
lO
)
{
TA_A\
SS\
ERT
(
llOl\
lOOlOl\

==
lO\
lllll\
lO\
Ol\

)
;
}
#endif //
}
vo\
id
lO\
ll\
lllOOll
::
lO\
l\
lllOlOl\
l
(
llOOO\
OOOl\
lO
*
llO\
O\
OOO\
Ol\
ll\

,
int
&
llO\
llOOlOl
)
{
#ifdef _DEBUG
if
(
!
llOO\
OOOOll\
l\

)
return
;
TA\
_ASSER\
T
(
(
llOO\
OO\
O\
Ol\
ll
->
lO\
lOllOOO\
l
&
llOOOOOlOOO
)
==
0
)
;
if
(
llOO\
OOO\
ll\
ll
(
llOO\
OOOOl\
l\
l
)
)
llOllOOl\
Ol
++
;
Space\
D\
ivisi\
o\
nObje\
c\
t
*
*
llOOl\
Ol\
O\
Oll\

=
&
llOOOOOOlll
->
ll\
OOOOl\
O\
lOO
;
fo\
r
(
Space\
Di\
visio\
nObje\
c\
t
*
llOO\
OOl\
O\
llO
=
llO\
OO\
OOOlll
->
ll\
O\
OOOlOlO\
O
;
llOOOO\
lO\
llO
;
llOOOO\
l\
Oll\
O\

=
ll\
OOOO\
lO\
llO
->
llOO\
OOlllll
)
{
TA_ASSERT
(
llOOOO\
l\
Ol\
lO
->
llO\
OOOlOlOl
==
llO\
Ol\
OlO\
Oll
)
;
TA_AS\
SER\
T
(
(
*
llO\
O\
OOl\
OllO\

->
llOO\
OOlOlO\
l
)
==
llOO\
OOl\
O\
llO\

)
;
lOlll\
lll\
ll\
l\

*
lO\
O\
lllO\
OOO
=
(
lOlll\
l\
llll\
l
*
)
llOO\
OOlOllO
->
Ge\
tS\
paceD\
ivi\
sionNod\
eM\
emory\

(
)
;
TA_\
A\
SSE\
RT
(
lOOl\
ll\
OOOO
)
;
if
(
(
lOOlllOO\
OO
->
ll\
OOOOO\
OOll
.
lO\
lOll\
OOOl
&
llOOO\
OO\
lOOO
)
==
0
)
{
TA_\
ASSERT
(
(
ll\
OO\
O\
OOOllO
*
)
&
lO\
O\
l\
l\
lOOO\
O\

->
llOOO\
OOO\
Ol\
l
==
ll\
OOOOO\
Olll
)
;
}
llO\
O\
l\
OlOO\
l\
l
=
&
llOO\
OOlO\
l\
lO
->
llO\
O\
OOlllll\

;
}
if\

(
llOOOOOOlll\

->
llOOOOOlO\
ll
)
{
TA_ASSERT
(
llOO\
O\
O\
Oll\
l\
l\

(
ll\
OOO\
OOOlll
->
ll\
O\
OO\
OOlOl\
l
)
)
;
TA_ASSERT
(
llOOOO\
OOl\
l\
l\

->
llO\
OOOO\
lOll
->
llOOOOlOOOl
[
ll\
OOOO\
OOlll
->
llOOOOl\
O\
OlO\

]
==
llOO\
OOOOlll
)
;
TA\
_AS\
S\
E\
RT
(
ll\
O\
OO\
OOOl\
ll
->
ll\
OO\
OO\
OlOll
->
llO\
OOOllOOO\

>
llOO\
OO\
O\
Olll
->
ll\
OOOOllO\
O\
O\

)
;
TA_\
ASSERT\

(
(
u32
)
Abs\

(
ll\
OO\
OOOOlll
->
llOOO\
OOl\
Ol\
l
->
ll\
OOO\
O\
llOlO
-
llOOOO\
OO\
l\
ll
->
llOO\
OOll\
OlO\

)
<
llO\
O\
OOO\
Olll\

->
llOOOOOlOll
->
llO\
OOOl\
lOOO
)
;
TA_ASSE\
RT\

(
(
u32
)
Abs
(
llO\
OOOOOlll
->
llO\
O\
OO\
OlO\
l\
l
->
llOOO\
OllOll\

-
llOO\
OO\
OOlll
->
llOO\
O\
OllOl\
l
)
<
llOO\
OOOOll\
l
->
llO\
O\
O\
O\
Ol\
O\
ll
->
llOOO\
Ol\
lOOO
)
;
TA_ASSERT\

(
(
u32
)
Abs
(
llOOO\
OOO\
l\
l\
l\

->
ll\
O\
OOOOlOll\

->
llOOOOll\
l\
OO
-
ll\
O\
OOOO\
Olll
->
llOO\
O\
Ol\
llO\
O
)
<
llO\
O\
OO\
OO\
lll
->
llOOOO\
Ol\
Oll\

->
ll\
O\
OOOl\
lOOO\

)
;
}
el\
se\

{
TA_ASSERT
(
lOllllOllO\
O\

==
llOOO\
OOOlll\

)
;
TA_A\
SSE\
RT
(
ll\
OO\
OOO\
Olll
->
llOOOOlOOlO
==
0
)
;
}
if
(
llOOOOOOl\
ll
->
llOOOOlOOOO
)
{
if\

(
llOO\
O\
OO\
Olll
->
llOl\
lOOlO\
l\

==
1
)
{
TA_ASS\
ERT
(
ll\
OO\
OO\
OOlll
->
llOOOOlOl\
O\
O
)
;
}
TA\
_AS\
SERT
(
ll\
OOOOOOlll
->
ll\
O\
l\
lOOl\
Ol
)
;
TA_ASSERT
(
llOOOOO\
llll
(
llOOOOO\
O\
lll
)
)
;
in\
t\

llOOlO\
l\
OlOO
=
0
;
for
(
int
lO\
OOllO\
O\
O\
l
=
0
;
lO\
OOllOOOl
<
8
;
lOOOllOOOl
++
)
{
if\

(
llO\
OO\
O\
OOlll\

->
ll\
OOOOlO\
OOl
[
lOOOllOO\
O\
l
]
)
{
ll\
OOlOlOlOO
++
;
TA_AS\
SERT
(
ll\
OOO\
OOOlll
->
llOO\
O\
O\
lOOO\
O\

&
(
1
<<
lOOOllOOOl
)
)
;
TA_ASS\
ER\
T
(
llOOOOOOlll
->
ll\
OOO\
OlOOO\
l
[
lO\
OOllOOOl
]
->
llOOOOOlOll\

==
llOOO\
OOOl\
ll\

)
;
TA_ASS\
ERT
(
llOOO\
OOO\
ll\
l
->
llOO\
OO\
lOOOl\

[
lOOOll\
OOOl\

]
->
llOOOOlOOlO
==
lOOOll\
OO\
Ol
)
;
lOlllll\
OOlO\

(
lOl\
lll\
Ol\
Oll
(
llOO\
OOO\
Olll\

->
ll\
OOOOlOOO\
l\

[
lOO\
OllOOOl
]
,
ll\
Ol\
lOO\
lO\
l
)
;
)
}
else
{
TA\
_AS\
SERT\

(
(
llOOOOOO\
lll
->
ll\
OO\
OOlO\
O\
OO
&
(
1
<<
lOO\
O\
llO\
OO\
l\

)
)
==
0
)
;
}
}
TA_ASSERT\

(
ll\
OO\
OOOOlll
->
llOl\
lOOlOl
==
llOO\
l\
Ol\
Ol\
O\
O
)
;
}
else
{
TA_ASSE\
RT
(
llOOlOOO\
Ol\
l
(
llOOO\
OO\
Olll
)
||
(
llO\
O\
OOOOlll
->
lOlOllO\
OOl
&
llOOlOO\
OllO
)
)
;
TA\
_A\
S\
SERT\

(
llO\
OOOOO\
lll\

->
llOll\
OOlO\
l
==
0
)
;
TA_\
ASS\
ERT
(
ll\
OOOOOO\
lll\

->
llO\
OOOlOOO\
O
==
0
)
;
}
#endif //
}
bool
lOlll\
ll\
OOl\
l
::
lO\
llll\
Ol\
lll
(
cons\
t
llOOOOOOl\
lO
*
ll\
O\
OO\
O\
OOl\
ll
,
co\
n\
st
ll\
OOO\
OOOllO
*
ll\
OOOllO\
lll
)
{
#ifdef _DEBUG
if
(
!
llOOOO\
OOl\
l\
l
)
retu\
rn\

false
;
if
(
llOO\
O\
OOO\
lll
==
ll\
OOOllOll\
l
)
re\
t\
ur\
n
true
;
if\

(
llOOOOOOlll
->
llO\
OOOlOO\
OO
)
{
int\

llOllOOlO\
l
=
0
;
for
(
int
lOOOl\
l\
OOO\
l\

=
0
;
lO\
OOll\
OOOl
<
8
;
lOOO\
l\
lOOO\
l
++
)
{
if
(
lOll\
llOllll
(
llOOOOOOlll
->
llOOOOlOOOl\

[
lO\
OOllOOOl
]
,
llOOOllOlll
)
)
return
true\

;
}
}
#endif //
retur\
n
false
;
}
boo\
l
lOlll\
llOOll\

::
lOllllOll\
ll
(
co\
n\
st
llOO\
OO\
OOllO
*
llOOO\
OOOlll
,
cons\
t
SpaceDivisionObj\
ect
*
ll\
OO\
Ol\
lOl\
ll
)
{
#ifdef _DEBUG
if
(
!
llOOOO\
OOll\
l
)
retur\
n
fals\
e
;
Sp\
aceDiv\
isionObject
*
cons\
t
*
llOOl\
Ol\
OOll
=
&
ll\
O\
OOOOOl\
l\
l
->
llOOOOlOlOO
;
for
(
cons\
t
Spa\
ceD\
ivisi\
onObj\
ect
*
llOOO\
O\
lOll\
O\

=
llOOOO\
OO\
lll
->
llOOO\
OlOlOO
;
llOO\
OOlOllO
;
llOOOOl\
O\
llO\

=
llOOOOlO\
llO
->
ll\
OOO\
Olllll\

)
{
if
(
llOOOl\
lO\
lll
==
ll\
OOOO\
lOllO
)
re\
t\
u\
rn
true
;
}
if\

(
ll\
OOO\
OOOl\
ll
->
llOOOO\
l\
OOO\
O
)
{
int
ll\
Oll\
OOlOl\

=
0
;
for
(
int\

lOOOllOO\
Ol
=
0
;
lOO\
O\
llOOOl
<
8
;
lOO\
O\
llOOOl\

++
)
{
if
(
lOl\
lllO\
ll\
ll
(
llO\
OOOOO\
lll
->
llOOOOlOOOl
[
lO\
OOll\
O\
O\
Ol
]
,
llO\
O\
Ol\
lOlll
)
)
re\
tu\
r\
n
true
;
}
}
#endif //
return
fa\
l\
se
;
}
}
