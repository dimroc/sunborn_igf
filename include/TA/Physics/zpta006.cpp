//---------------------------------------------------------------------------------
// File Name: zpta006.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifdef lllOOOOlOOO
#include "../Physics/zpta004.h"
#ifndef TA_MFRAME_H
#include "../Common/MFrame.h"
#endif //
#ifndef TA_GEOMETRY_H
#include "../Common/Geometry.h"
#endif //
name\
s\
p\
ace
TA\

{
void
ll\
l\
O\
OOOlOO\
l
::
Initi\
a\
l\
i\
se
(
co\
nst
Vec3
&
v3Cent\
er\

,
con\
st\

Vec3
&
v3Exten\
t
)
{
lllO\
OO\
O\
lOl\
O
=
v3C\
enter
;
lllOOOOlO\
l\
l
=
v3Ex\
tent
;
}
void
lll\
O\
OOOlO\
Ol
::
Final\
ise
(
)
{
lllOOO\
OlOl\
O
.
Clear\

(
)
;
ll\
l\
O\
OO\
OlOll
.
Clea\
r
(
)
;
}
static
boo\
l
lllO\
O\
OOllOO
(
const
Vec3
&
lll\
l\
OO\
lOll
,
const
Ve\
c\
3
&
llllOOllOO
,
const\

Vec3
&
lll\
lOO\
llOl
,
con\
s\
t
Vec3\

&
llllOOlllO\

,
float
&
lllO\
OOO\
llOl
,
Vec3
&
lOllllO\
OOl
)
{
Ve\
c3
lllllOlO\
lO
=
ll\
ll\
O\
OllOO
-
ll\
ll\
OOlO\
l\
l
;
in\
t\

ll\
l\
lOOlOOl
[
3
]
;
ll\
lllOl\
O\
l\
O
.
GetA\
xisOrder
(
lll\
lOOlOOl
)
;
TA_ASSERT
(
ll\
lllOl\
O\
l\
O\

[
llllOO\
lOOl
[
1
]
]
==
0.0f
)
;
TA_A\
SS\
E\
RT
(
lllllOlOlO\

[
ll\
l\
lOOlOOl
[
2
]
]
==
0.0f
)
;
Vec2
lll\
OOOOl\
l\
lO
(
llllOOlllO
[
llllO\
OlO\
Ol
[
1
]
]
-
llll\
OOllO\
l
[
ll\
llOOlOOl
[
1
]
]
,
llll\
OOll\
lO
[
ll\
llOOlOOl
[
2
]
]
-
llllOO\
l\
lOl
[
llllOOlOO\
l\

[
2
]
]
)
;
flo\
at\

ll\
lOO\
l\
OlOl\

=
lllO\
OOOlllO\

.
GetMagn\
itudeSqrd
(
)
;
if
(
lllOO\
lOlO\
l
==
0.0f
)
re\
tu\
rn
false
;
Vec2
ll\
l\
OO\
OOllll\

(
llll\
O\
Ol\
Ol\
l
[
llllOOl\
OOl
[
1
]
]
-
llllOOllO\
l
[
llllO\
O\
lOOl\

[
1
]
]
,
llllOOl\
Oll\

[
lll\
lOO\
lOO\
l
[
2
]
]
-
llll\
OOllOl
[
lll\
lOOlO\
Ol\

[
2
]
]
)
;
fl\
oat\

lO\
lllll\
OlO
=
lllOOOO\
lllO\

.
Dot
(
ll\
lOOOOll\
ll\

)
/
lllO\
OlOlOl
;
if
(
lO\
lll\
llOlO
<
0.0f
||
lOllll\
lO\
lO\

>
1.0f
)
return
fal\
se\

;
Vec3
ll\
lOOO\
lOOOO
=
lll\
lOO\
l\
lOl
+
(
ll\
llO\
OlllO
-
llllOOl\
lO\
l
)
*
lO\
lll\
l\
lOlO
;
if
(
(
lllOOO\
lOOOO
[
ll\
l\
lO\
OlO\
Ol
[
0
]
]
<
llllOOlOll
[
llll\
OOl\
OOl\

[
0
]
]
&&
lllOOOlOO\
OO
[
lll\
lOOlOOl
[
0
]
]
<
ll\
ll\
OOllOO\

[
llllOOlOO\
l
[
0
]
]
)
||
(
lllOOOlOOOO
[
lll\
l\
O\
OlO\
Ol
[
0
]
]
>
llll\
OO\
lO\
ll
[
ll\
ll\
OOl\
OOl
[
0
]
]
&&
ll\
lOOO\
lOOOO
[
llll\
OO\
l\
OOl
[
0
]
]
>
lll\
lOO\
llOO\

[
ll\
llOOlO\
Ol
[
0
]
]
)
)
return\

fal\
s\
e
;
Vec3\

ll\
lOO\
OlO\
OO\
l
=
llllO\
O\
l\
Oll
;
lllOOO\
lO\
OOl
[
ll\
ll\
OOlOO\
l
[
0
]
]
=
lllOOOl\
OOOO
[
lll\
lOOlOOl
[
0
]
]
;
lll\
OO\
OO\
llOl
=
(
lllO\
OOlOOOO\

-
lllOOO\
lO\
OOl
)
.
Ge\
tMagn\
itu\
d\
e
(
)
;
lOlll\
lOOO\
l\

=
ll\
lO\
OOlOOOO
;
re\
turn
tru\
e
;
}
ll\
l\
OOOOlOO\
l\

::
lll\
O\
OOOlOOl
(
)
:
Co\
llisionOb\
jectS\
imple
(
Co\
l\
li\
sion\
O\
bjec\
t\

::
lllO\
OOlO\
OlO
)
{
lllOOO\
O\
l\
Ol\
O
.
Clea\
r
(
)
;
lll\
O\
O\
OOl\
Ol\
l
.
Clea\
r
(
)
;
}
lllOOO\
OlOOl
::
~
lllOOOOlO\
Ol
(
)
{
Final\
ise
(
)
;
}
}
#endif //
