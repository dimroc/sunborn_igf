//---------------------------------------------------------------------------------
// File Name: zpta005.h
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifndef lOOlOOlllOlO
#define lOOlOOlllOlO
#ifndef lOOllOllll
#include "../Common/zcta001.h"
#endif //
#ifndef TA_AABB_H
#include "../Common/AABB.h"
#endif //
#ifndef llOOlOlOllO
#include "../Physics/zpta015.h"
#endif //
name\
s\
p\
a\
ce\

TA
{
st\
r\
uct
AA\
BB\

;
cla\
s\
s
lO\
lO\
llllOl\
O
lOO\
lOOOl\
OlOO\

:
pu\
b\
l\
i\
c
llOO\
lOlOlll
{
publi\
c
:
lO\
OlOOOlO\
l\
O\
O
(
)
;
~
lOO\
lOOOlOlOO
(
)
;
void
In\
itialise
(
float
llOlOl\
Ol\
OOl
,
in\
t
llOlOlOlO\
lO
,
con\
st
AA\
BB\

&
lOOOOOO\
lll
)
;
void
Fi\
n\
a\
l\
i\
se
(
)
;
void
lOlOlO\
OOO\
l
(
SpaceD\
ivi\
sio\
nO\
bje\
ct
&
lOllll\
llllO
)
;
voi\
d
lOOllll\
lll
(
SpaceDiv\
isionOb\
j\
ec\
t
&
lOl\
lllllllO
)
;
vo\
id
llOOOlOOl\
O\
O
(
con\
st
AABB
&
lO\
OOO\
OOlll
,
void\

(
TAC_CA\
LL
*
llOOlO\
l\
lOO\
O\

)
(
Spa\
ce\
Div\
isio\
nObjec\
t
&
lOllllll\
l\
lO
,
vo\
id
*
lO\
OlllO\
OOO
)
,
vo\
i\
d
*
lO\
O\
OOllllO
)
;
void
llOOO\
l\
OllO\
O\

(
con\
st
Vec\
3\

&
lOO\
lOlOl\
ll
,
con\
s\
t\

Vec3
&
lOOlOll\
OOl
,
void
(
TAC_CALL
*
llOOlOllOOO
)
(
Sp\
a\
ceDivi\
sio\
nOb\
ject\

&
lOl\
ll\
lllllO\

,
void\

*
lOOlllO\
OO\
O
)
,
void
*
lO\
OOOllllO
)
;
priva\
te
:
enu\
m\

{
lOOlO\
OlllOll
=
0
,
lOOlOOl\
ll\
lO\
O
,
lO\
OlOOllll\
Ol\

,
lOOlO\
Oll\
lllO
,
lOO\
l\
O\
Olll\
lll\

,
lOOlOlOOOOOO
,
lOOl\
O\
lOOOOOl
,
lOOlO\
l\
OO\
OO\
lO
,
}
;
enum
Flags
{
lOOl\
OOO\
lllO\
O
=
0x1
,
lOOlOOlOl\
Ol\
O\

=
0x2
,
}
;
struct\

llOOOOOOl\
lO
{
SpaceDivis\
ionO\
bject
*
llOOO\
Ol\
O\
lOO
;
ll\
OO\
OOOOllO
*
llOOOOOl\
Oll
;
s8
llOOOOl\
OOl\
O
;
s8\

llOOOOlOOO\
O\

;
u8
ll\
O\
llO\
OlOl
;
u8
lOlOll\
OOOl
;
llO\
OO\
OOOl\
lO
*
llOO\
OOlOO\
O\
l
[
8
]
;
ll\
OOOOOOl\
l\
O\

(
)
;
llOOOOO\
Oll\
O
*
&
lOOOOO\
Ol\
lll
(
)
{
ret\
urn
(
llOOOOOOllO\

*
&
)
llO\
OOO\
lOlOO
;
}
ll\
O\
OOOOOllO
*
*
&
lOO\
l\
OOOOOOO
(
)
{
ret\
urn
(
llOO\
OO\
O\
OllO
*
*
&
)
llOO\
OOO\
lOll
;
}
}
;
str\
uct
lOOlO\
OOlOlO\
l
{
Spac\
eDivision\
Obje\
ct
*
ll\
OO\
OOlOl\
OO
;
llOOOOO\
Ol\
lO
*
ll\
OOOOO\
lOll\

;
s8
llOOOOl\
OOlO
;
s8
llOOOOl\
OOO\
O
;
u8
ll\
Ol\
l\
OOlO\
l
;
u8\

lO\
lOll\
OOOl
;
llOOOOOOl\
lO
*
llO\
OO\
OOllOO\

;
lOOlOOOlO\
lOl
(
)
;
lO\
OlO\
OOlOlO\
l
*
&
lOOOOO\
Ol\
lll
(
)
{
return\

(
lO\
O\
lOOOlOlOl
*
&
)
llO\
OOO\
lOl\
O\
O
;
}
lOOl\
O\
OO\
lOlO\
l
*
*
&
lO\
OlOOOOOOO
(
)
{
retur\
n
(
lOOl\
O\
OO\
lOlO\
l
*
*
&
)
llOOOOO\
lO\
ll
;
}
}
;
stru\
c\
t
lOO\
lOO\
l\
OOllO
{
AA\
BB
lOOOOOOl\
ll
;
in\
t
ll\
OOO\
OO\
OOl
;
int
llOOOOOOl\
O
;
in\
t
ll\
O\
OOO\
O\
Oll\

;
int
llOOOl\
OlO\
O\
O
;
int
ll\
OOOl\
O\
l\
OOl\

;
int
llO\
OO\
lOl\
OlO
;
void
(
TA\
C_CAL\
L\

*
llOOl\
OllOOO\

)
(
Spac\
e\
Di\
vi\
s\
io\
nObj\
ect
&
lOllllll\
llO
,
vo\
id
*
lOOlll\
OO\
OO
)
;
void
*
lOOOO\
l\
l\
llO
;
}
;
st\
ruct
lOO\
lOOlO\
lOOO
{
con\
st
lOO\
lOOOl\
O\
l\
OO
*
lOll\
O\
lOl\
ll\
l\

;
void\

(
TAC_C\
ALL\

*
ll\
OOlOllOOO
)
(
SpaceDiv\
isionObject\

&
lOllll\
l\
ll\
lO
,
void
*
lO\
Oll\
lOOOO\

)
;
void\

*
lOOOOl\
lll\
O
;
floa\
t
lOOl\
OllOOO
;
Vec3
lO\
OlOl\
Olll
;
Vec3
lOO\
lOllOOl
;
struct
Axi\
s\

{
float
llOOOllOOOl\

;
float\

llOOOll\
O\
O\
OO
;
fl\
o\
at
llO\
OOllO\
Ol\
O
;
int
llO\
O\
Ol\
lO\
Oll\

;
flo\
at
llO\
OOllOlOO
;
flo\
a\
t
llO\
OOllOl\
Ol
;
}
;
Ax\
i\
s
lOOOO\
OllO\
l\

[
3
]
;
}
;
int
lOOlO\
O\
Ol\
OllO
;
llOOO\
OO\
O\
llO
*
lOO\
l\
lOllOll
;
lOOl\
OOO\
l\
O\
l\
Ol
*
lOOlO\
OO\
llOll
;
int
lOO\
Ol\
l\
l\
lllll
;
int
lOOlOOO\
OOO\
Ol
;
lOOOOlOllO
<
u32
,
fa\
lse
>
lOOOll\
ll\
lll\
O
;
AABB
lll\
lOlOOO\
OO
;
llOOOO\
OO\
ll\
O
*
lOO\
lOO\
OlOl\
ll\

;
llO\
OOOOO\
llO
*
llOOO\
OOl\
ll\
O
(
llOOOOOOllO
*
*
lOOlOOlOlOO\
l
)
;
void\

llOOO\
OOOOl\
O
(
ll\
OOO\
O\
OOllO\

*
llO\
O\
OOOOl\
l\
l
)
;
lOOlOOO\
lOlOl
*
lO\
OlOOl\
OOlO\
O
(
llOOOOOO\
llO
*
*
lO\
OlOOl\
OlOOl
)
;
void\

lO\
Ol\
O\
OOllllO
(
lOO\
lOOOlOlOl
*
llOOO\
O\
O\
Ol\
l\
l
)
;
void\

lO\
Ol\
OO\
lOllll
(
int\

lOOlOOllO\
OOl
,
llOOO\
OOOllO
*
*
lO\
O\
lOOlOlOOl
)
;
void\

lOO\
lO\
OllOOO\
O
(
int
lOOlOO\
llOO\
Ol
,
llOOOOOOllO
*
*
lO\
Ol\
OOl\
Ol\
OOl\

)
;
voi\
d\

lOOl\
OOOOOOll
(
ll\
OOOO\
OO\
llO
*
ll\
OOOO\
OO\
lll
,
bool\

lO\
O\
lOOl\
lO\
OlO
)
;
#ifdef _DEBUG
void
llOO\
OlOlOll
(
#else
sta\
tic
void\

TA_FAST_\
CALL
ll\
OOOlOlO\
ll
(
#endif		
llOOO\
OOOl\
lO
*
llO\
OO\
OO\
Oll\
l\

,
int\

lO\
OlOOl\
O\
OOll
,
int
llOO\
OOOOO\
l
,
in\
t
ll\
OOO\
OO\
OlO\

,
int
llOO\
OOO\
Oll\

,
lOOlO\
OlOO\
llO
*
lOOlOOl\
lOO\
ll\

)
;
#ifdef _DEBUG
voi\
d
llOOOllOllO
(
#else
stat\
ic
vo\
id
TA\
_FA\
S\
T_CA\
LL\

llOOOllOllO
(
#endif				
llOOOO\
OOl\
lO
*
llOOO\
OO\
Olll
,
float\

llOllO\
l\
l\
ll
,
Ve\
c3
&
v3Cen\
ter
,
lOOl\
OOl\
O\
l\
OO\
O
*
lOOl\
OO\
l\
lO\
O\
ll
)
;
vo\
id
lOO\
lOO\
OO\
OllO\

(
llOOOOO\
Oll\
O\

*
llOOO\
O\
OOlll
)
;
bo\
ol
lOO\
lOOOOl\
OO\
l
(
ll\
O\
OOOOOl\
lO
*
ll\
O\
OOOO\
O\
lll\

,
llO\
OOOOOl\
lO
*
lOOl\
OOOOlOOO
)
;
vo\
id
lOOlOOOOl\
Oll
(
llOOOOOOllO
*
ll\
OO\
OOO\
O\
lll
,
llOOOOOOll\
O
*
lOOl\
OOO\
OlO\
OO\

)
;
}
;
}
;
#endif //
