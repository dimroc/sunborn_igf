//---------------------------------------------------------------------------------
// File Name: zpta013.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#define lOllOllOOOO
#include "CollisionObjectLineList.h"
#ifndef TA_MFRAME_H
#include "../Common/MFrame.h"
#endif //
#ifndef llOllOOOllO
#include "../Physics/zpta013.h"
#endif //
#ifndef TA_COLLISIONOBJECTCACHEDPOLYDATA_H
#include "CollisionObjectCachedPolyData.h"
#endif //
#ifndef lllOOOlOllO
#include "../Physics/zpta007.h"
#endif //
#ifndef TA_PHYSICSRENDER_H
#include "PhysicsRender.h"
#endif //
namespace
TA\

{
void
CollisionO\
bject\
Line\
Li\
st
::
Initi\
al\
ise
(
const\

Vec3\

*
lOOOlll\
lOll\
O
,
int
lO\
O\
OllllO\
lll\

)
{
llllOO\
O\
OOOl
.
In\
it\
ial\
is\
e
(
lOOOllllO\
ll\
l
,
lO\
OO\
l\
l\
llOl\
l\
l\

)
;
for
(
int
lllO\
O\
OOO\
lO
=
0
;
lllOOOOOl\
O
<
lO\
OOllllOll\
l
;
lllOOO\
OO\
lO
++
)
{
ll\
llO\
OO\
OO\
O\
l
[
lll\
OOO\
O\
OlO
]
.
lOO\
lOl\
Olll
=
lOOOl\
lllOllO\

[
lll\
OOOOOlO\

*
2
]
;
llllOOOOOOl
[
lllOOO\
OOlO
]
.
lOO\
lOllOO\
l
=
lO\
OOll\
ll\
OllO
[
lllOOOOOlO
*
2
+
1
]
;
}
}
vo\
id
Collisi\
onObj\
e\
ct\
Li\
neList
::
Finalis\
e\

(
)
{
lll\
lOO\
OOOO\
l
.
Finalise\

(
)
;
}
voi\
d
Co\
llisi\
onObj\
ec\
tLineList\

::
Ser\
ialise\

(
Seri\
aliser\

&
lO\
OO\
l\
Oll\
Ol
,
co\
n\
s\
t
Vers\
ion
&
lll\
O\
lOO\
O\
l\
O
)
{
lOOOOOOll\
O
(
lllOl\
OOOlO\

<=
llO\
llOOl\
OlO
,
"CollisionObjectLineList::Serialise. The version number is too new.")
;
lOO\
O\
l\
O\
l\
lO\
l\

.
lOOO\
lOllll\

(
llllOO\
OOOOl\

)
;
}
AA\
BB
Co\
llisio\
n\
Ob\
je\
c\
tL\
i\
n\
eL\
is\
t
::
CalculateB\
oundi\
ng\
Box
(
)
co\
nst
{
AAB\
B\

lOOO\
O\
OO\
l\
ll
;
lOOOOO\
Ol\
ll
.
In\
i\
tia\
l\
ise\

(
llllOOO\
OOOl
[
0
]
.
lOOlOlOll\
l\

,
k_\
v3Zero
)
;
Vec3
lOOOll\
lllOO\
O
=
llllOOOO\
O\
Ol\

[
0
]
.
lOOlOlOl\
l\
l\

;
Ve\
c3
lOO\
OlllllOO\
l
=
lll\
lOOOOOO\
l
[
0
]
.
lOOl\
Ol\
Olll
;
for
(
int\

lll\
OOOOO\
l\
O
=
0
;
ll\
l\
OOOOO\
lO
<
ll\
l\
lOOOOOOl\

.
lOOO\
lllOO\
l
(
)
;
lllOOO\
OO\
l\
O\

++
)
{
lOO\
OOO\
O\
lll
.
ExpandToFit\

(
llll\
OOOO\
OO\
l\

[
ll\
l\
OO\
OOOlO\

]
.
lOOl\
OlOlll
)
;
lOOO\
OO\
Olll
.
ExpandToFit
(
llll\
O\
OOOOOl
[
ll\
lOOOOOlO\

]
.
lOOl\
Oll\
OOl
)
;
}
retur\
n
lOOO\
O\
OO\
l\
l\
l
;
}
void
CollisionObje\
ct\
LineL\
ist\

::
Ca\
l\
cula\
t\
eMa\
ss
(
float
lll\
OlOl\
llll
,
float\

&
lOllOOOOl\
O\
O\

,
Vec3
&
lll\
O\
ll\
OOOOO
,
Mat33\

&
lllOllOOOOl
)
const\

{
lOl\
l\
OOOOlOO\

=
0.0f
;
lllO\
llOOOOO
.
Cl\
ear
(
)
;
ll\
lOllOOOOl\

.
v3X
.
Clear
(
)
;
ll\
lOllOO\
OO\
l
.
v3Y
.
Clea\
r
(
)
;
lllO\
llO\
OOOl
.
v3\
Z\

.
Cl\
ea\
r
(
)
;
}
void
Collis\
ionO\
bjectL\
ineList\

::
Rend\
e\
r
(
co\
nst\

MFra\
me
&
lOOOOOOOOl
)
{
for
(
in\
t
lllOOO\
O\
OlO\

=
0
;
ll\
lOOO\
OOlO
<
lll\
lO\
OO\
OOOl
.
lOOO\
lllO\
O\
l
(
)
;
lllO\
O\
O\
OOlO\

++
)
{
Phy\
s\
i\
c\
sR\
e\
nde\
r\

::
RenderLin\
e
(
ll\
llOOOOOOl
[
ll\
lO\
O\
OOOlO\

]
.
lOO\
lOlOl\
ll\

*
lOOOOOO\
O\
Ol
,
ll\
llOOOO\
OOl
[
lllO\
OOO\
O\
lO
]
.
lOOlO\
ll\
OOl
*
lO\
OO\
OO\
OOOl
,
0xFF0000FF
)
;
}
}
CollisionObject\
Lin\
eList
*
TAC_CALL
Coll\
i\
s\
ion\
ObjectLin\
e\
L\
i\
st\

::
CreateNew
(
)
{
Co\
l\
li\
sionO\
bj\
ect\
L\
i\
neL\
ist\

*
lOlO\
llOO\
lll
;
lOOOO\
O\
l\
lOO\
O\

(
lO\
l\
Oll\
OO\
lll
,
Co\
llisi\
onObj\
ect\
LineList
)
;
return
lOlO\
ll\
OOlll
;
}
Coll\
isi\
on\
Object\
Lin\
e\
List
::
Col\
lisi\
o\
nO\
bje\
c\
tLine\
L\
i\
st
(
)
:
Collis\
i\
onObje\
ctSim\
p\
l\
e\

(
TYPE_\
L\
IN\
E\
_LIST
)
{
}
Co\
llisionO\
b\
jectLin\
eList\

::
~
CollisionOb\
jectLineLis\
t
(
)
{
Fin\
a\
lis\
e
(
)
;
}
#ifndef DOXYGEN
void
TAC\
_CAL\
L
ll\
llOO\
l\
ll\
O\
l
(
co\
nst\

MFr\
a\
me
&
lOllOl\
lllll
,
con\
st
MF\
r\
ame
&
lOlllOOOOO\
O
,
lOll\
OllO\
ll\
O
*
lO\
lll\
OOOOOl
)
{
TA_ASSERT\

(
lO\
l\
ll\
OOOOOl
->
lOll\
OOOllOl
->
GetColli\
sionOb\
jec\
tTyp\
e
(
)
==
Co\
llis\
i\
onObject
::
TYPE_LINE\
_\
LIS\
T\

)
;
TA\
_A\
SS\
ERT
(
lO\
ll\
lOO\
OO\
Ol
->
lOllOOOl\
l\
lO
->
GetCol\
l\
ision\
Object\
Type
(
)
==
Col\
lis\
ionObject
::
TYP\
E_CACH\
ED_PO\
LY_D\
ATA
)
;
Col\
lis\
ionO\
bje\
ct\
LineList
&
lllOlll\
llll
=
*
(
Collis\
ionObje\
ctLi\
neL\
ist
*
)
lOlllO\
OOOOl\

->
lOll\
OOOl\
lO\
l\

;
Coll\
i\
sio\
nOb\
jectCachedPoly\
D\
ata
&
llOl\
lllOlll
=
*
(
Collision\
Obj\
ec\
tCachedPolyDa\
ta\

*
)
lOl\
llO\
OOO\
Ol
->
lO\
llOOOlllO
;
in\
t
lllOOOO\
OlO\

;
for
(
int
ll\
lOllll\
lO\
O
=
0
;
lll\
Olll\
ll\
OO\

<
llOllllO\
l\
ll
.
lllOlOOl\
OOO\

(
)
;
)
{
con\
st\

Col\
l\
isio\
nOb\
j\
ectC\
ac\
he\
dPo\
lyData
::
Polygon\

*
ll\
OO\
OlOO\
lO
=
(
const\

Colli\
sionObj\
e\
c\
tCachedPo\
lyD\
ata
::
Poly\
gon\

*
)
ll\
Ol\
lll\
Olll
.
lllOlO\
OOl\
ll
(
lllO\
ll\
l\
ll\
OO
)
;
lllOl\
llllOO
+=
llOllllO\
lll
.
lllOOlOllll
(
llO\
OOl\
OOlO
->
lOllO\
l\
lOll\

)
;
for
(
lllO\
OOOO\
lO\

=
0
;
ll\
lOOO\
OOlO
<
lllOlllllll
.
llll\
OOOOOOl
.
lOOO\
ll\
lO\
Ol
(
)
;
ll\
lOOOOO\
lO
++
)
{
co\
nst
Vec3
&
lOO\
OOlll\
lOlO
=
llOOOl\
OO\
lO\

->
llOl\
lllOOO\

[
0
]
.
lOO\
OO\
ll\
l\
ll
;
const
Vec\
3
&
lll\
llllll\

=
ll\
lOllllll\
l
.
llllO\
OO\
OO\
O\
l
[
lllOOOO\
OlO
]
.
lOOlOlOll\
l\

*
lOllOllllll
;
con\
st
Vec3\

&
lO\
O\
OO\
O\
OOOO
=
ll\
lOlllllll\

.
lll\
lOOOOO\
Ol
[
lllO\
OOO\
OlO
]
.
lOO\
l\
O\
llOOl
*
lO\
l\
lO\
llllll
;
float
lOl\
OllOO\
lO
=
llOOO\
lOOlO\

->
lOOOlO\
OOOO
.
Dot\

(
lllll\
ll\
l\
l
-
lOOO\
Ol\
l\
llOlO\

)
;
fl\
o\
at
lO\
lO\
llOOll\

=
llO\
OO\
lO\
OlO
->
lOOO\
l\
OOOOO\

.
Dot
(
lOOOOO\
O\
OOO
-
lOOOOll\
llOl\
O
)
;
if
(
lOlOllO\
Oll
>=
0.0f
||
lO\
l\
Oll\
OO\
lO
<=
0.0f
)
co\
ntin\
u\
e
;
TA_ASSERT
(
lO\
lOl\
lO\
OlO
-
lO\
lOllOOl\
l\

>
0.0f
)
;
flo\
at
lOll\
l\
lOOOlO
=
lOlOll\
OOlO
/
(
lOlOl\
lOOlO
-
lO\
l\
Oll\
OOl\
l\

)
;
Ve\
c3
lOlll\
OllOl\
O
=
lllllll\
ll
+
(
lOOOOOOOO\
O
-
ll\
l\
llll\
l\
l\

)
*
lOllll\
OOOl\
O
;
int
lO\
O\
O\
llOOOl
;
for
(
lOOOll\
OOOl
=
0
;
lOOO\
l\
lO\
O\
Ol
<
ll\
O\
OOlOOl\
O\

->
lOl\
l\
OllO\
ll
;
lOO\
O\
ll\
OOOl
++
)
{
co\
ns\
t
Vec3\

&
lO\
l\
l\
l\
O\
lOOlO
=
llO\
O\
OlOO\
lO
->
llOlll\
l\
OOO\

[
lOOOllOOO\
l
]
.
lOO\
O\
Oll\
lll
;
if
(
llOO\
OlOO\
lO
->
llOl\
lllOO\
O
[
lOO\
OllO\
OOl\

]
.
lOlll\
O\
l\
OlOl
.
Dot
(
lOl\
l\
lOl\
lO\
lO\

-
lOlllOlO\
O\
lO
)
<
0.0f
)
break\

;
}
if\

(
lOOO\
llOOOl\

!=
ll\
O\
OOlOO\
lO
->
lO\
l\
lOllOl\
l
)
conti\
n\
u\
e\

;
Collision
lOllOllOl\
Ol
;
lOllO\
ll\
Ol\
O\
l\

.
In\
i\
tialise
(
Col\
l\
ision\

::
lO\
llOl\
OOO\
lO
,
0.0f
,
lO\
llllO\
O\
OlO
,
lOll\
lOllOlO
,
-
ll\
OOOlO\
O\
l\
O\

->
lOO\
O\
l\
O\
O\
OO\
O
)
;
lOll\
Ol\
lO\
lOl
.
lOl\
l\
OOOll\
l\
l
=
lllO\
OOOOl\
O
;
lO\
l\
lOllOlOl
.
lOl\
lOOlOO\
OO
=
llOOOlOOlO
->
llOlllOOllO
;
lllOOllO\
lOl\

(
lOl\
lOllO\
lO\
l
,
lOlllO\
OOO\
Ol\

)
;
}
}
}
#endif //
}
;
