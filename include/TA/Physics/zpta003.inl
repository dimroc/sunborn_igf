//---------------------------------------------------------------------------------
// File Name: zpta003.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

{
in\
t
lO\
OO\
l\
lO\
OOl
;
TA_A\
SS\
ERT
(
ll\
OOOlO\
O\
lO
->
lO\
llOllOll
<
lOl\
l\
l\
OOlOO\
l
)
;
TA_AS\
SERT
(
lO\
ll\
lO\
OlOOl\

<=
32
)
;
u32\

llOOll\
OO\
l\
O\
O\

=
0
;
str\
uct
{
bool
ll\
OOll\
O\
Ol\
O\
l\

:
1
;
boo\
l
llOOllOOllO
:
1
;
bool\

llOOll\
OOl\
l\
l
:
1
;
}
llOOll\
OlO\
OO
;
ll\
OOllOlOOO
.
llOO\
ll\
OO\
l\
Ol
=
false\

;
ll\
O\
OllOlOOO
.
llOOllOO\
llO
=
false
;
ll\
OOllOlOOO\

.
llO\
Ol\
lOOl\
ll
=
fals\
e
;
int\

lO\
lll\
O\
OllO
=
0
;
fo\
r
(
lO\
ll\
lOOllO\

=
0
;
lOlll\
OOl\
lO
<
2
;
lO\
l\
llO\
O\
llO
++
)
{
con\
s\
t
Ve\
c\
3
&
llOO\
ll\
OlOO\
l\

=
lOll\
l\
OOl\
llO\

[
lOl\
llOOllO\

]
;
fl\
o\
at
lOll\
lOl\
lOO
=
lO\
lllO\
O\
ll\
ll
(
llOOll\
O\
l\
O\
Ol
)
;
Ve\
c3
llOOl\
l\
OlOlO\

=
llOOO\
lOOlO
->
lOOOl\
OOOO\
O
.
Cross
(
llOOll\
OlOll
)
;
float
llOOllOllOO\

=
llOOllOlOlO
.
Get\
Mag\
nitude
(
)
;
if
(
ll\
OOl\
l\
O\
llOO\

<
0.01f
)
co\
n\
tinue\

;
floa\
t
ll\
O\
OllO\
ll\
O\
l
=
ll\
OOllOllOO
*
ll\
OO\
llOll\
lO\

.
lO\
l\
OlOOlOOO
;
if\

(
lOlllOl\
lO\
O\

>
llOO\
ll\
Oll\
Ol
||
lOll\
lOl\
lOO\

<
-
llOOl\
l\
OllOl\

)
con\
tinue
;
fl\
oa\
t\

llO\
OllO\
l\
lll\

=
1.0f
/
ll\
OOllOllOO
;
llOOllOlO\
l\
O
*=
llOOllOllll
;
Vec\
3\

llOOlllOOO\
O
=
llOOllOlOl\
O
.
Cros\
s
(
ll\
OO\
llO\
lO\
ll\

)
;
if
(
ll\
OOlllOOOO
.
Do\
t
(
llO\
OOlO\
O\
l\
O
->
lOO\
OlOO\
O\
OO
)
>
0.0f
)
llOOl\
ll\
O\
O\
O\
O\

=
-
ll\
OOlllO\
OOO\

;
TA_AS\
SERT\

(
1.0f
-
lOll\
lO\
l\
lOO
/
ll\
O\
Ol\
lO\
llO\
l
>=
0.0f
)
;
flo\
at
lllOOl\
Olll
=
lO\
l\
llOl\
lO\
O
/
llOO\
llOl\
l\
O\
l
;
floa\
t
llOOlll\
O\
OOl
=
Sqr\
t
(
1.0f
-
ll\
lOOlO\
l\
l\
l\

*
lllOO\
lOll\
l
)
*
ll\
OOllO\
lllO
.
lOl\
OlOO\
lOOO
;
Vec3
lllllllll
=
llOO\
llOlOO\
l
+
llOOl\
l\
l\
OO\
OO\

*
lOlllO\
llOO
*
ll\
OOl\
lOlll\
l
+
llO\
Oll\
Ol\
OlO
*
llOOl\
llOOOl
;
Vec3
lOOOOOOOOO
=
llOOl\
lOl\
O\
Ol
+
ll\
OOlllOOO\
O\

*
lOlllO\
ll\
O\
O\

*
llOO\
llOllll
-
ll\
O\
O\
l\
lOlOlO
*
llOOl\
ll\
OOO\
l\

;
int
llOOlll\
O\
OlO
=
-
1
;
int\

llO\
OlllOOll
=
-
1
;
for
(
lOO\
Ol\
lOO\
Ol\

=
0
;
lO\
O\
O\
llOOOl\

<
llOOOl\
OO\
l\
O
->
lO\
l\
l\
O\
l\
l\
Oll
;
lOOOllOO\
O\
l
++
)
{
cons\
t
Vec3
&
lOl\
llOlOOlO
=
lOlllOlOOll
(
lO\
OOllO\
O\
Ol
)
;
fl\
oat\

lOlOllOOlO
=
ll\
OOO\
lOOlO\

->
llO\
ll\
ll\
OOO
[
lO\
OOll\
OOOl
]
.
lOlllO\
lOlOl\

.
Dot
(
lOlllOl\
OOl\
O
-
lllllllll
)
;
flo\
a\
t
lOlOllO\
O\
ll
=
ll\
O\
O\
OlOOlO\

->
ll\
Ol\
lll\
OOO
[
lOOOll\
OOOl
]
.
lOlllOlO\
l\
Ol
.
Dot\

(
lOll\
lOlOOl\
O
-
lO\
OOOOOO\
OO
)
;
if
(
lOlO\
llOO\
lO
>
0.0f
)
{
if
(
lOlOllO\
Oll
>
0.0f
)
br\
e\
a\
k
;
fl\
o\
at
lllO\
ll\
llOO
=
(
lOlOll\
OO\
lO\

/
(
lO\
lOl\
lO\
OlO
-
lOlOllOOl\
l\

)
)
;
lll\
llllll
+=
(
lOOO\
O\
OO\
O\
OO
-
ll\
lllllll\

)
*
lllO\
llllOO
;
ll\
OOl\
ll\
OOlO\

=
lOOOllOOO\
l
;
}
els\
e
if
(
lOlO\
llOO\
ll\

>
0.0f
)
{
flo\
a\
t
ll\
lO\
l\
lllOO
=
(
lOlO\
l\
lOOl\
l
/
(
lOlO\
llOO\
ll
-
lO\
lOllOOlO
)
)
;
lOOO\
OOOOOO
+=
(
llllll\
lll
-
lO\
O\
OO\
OOOOO
)
*
ll\
lO\
llllOO
;
llOOll\
lOO\
ll
=
lOOO\
llO\
OOl
;
}
}
if\

(
lOOOllOOOl
!=
llO\
OOlOOl\
O\

->
lOll\
O\
l\
lO\
l\
l
)
con\
t\
inue
;
if
(
ll\
OOlll\
OOlO
!=
-
1
&&
ll\
OOOlO\
OlO\

->
llOl\
lllOOO
[
llOOlllOOlO
]
.
lOll\
lOlOlOl\

.
Do\
t\

(
llO\
OllO\
l\
O\
Ol
-
lO\
ll\
lOlOO\
l\
l
(
llOOlll\
OOlO
)
)
<
0.0f
)
{
}
else
if
(
llOOlllO\
Oll
!=
-
1
&&
llOOOlOOlO\

->
llOll\
l\
lOOO\

[
llOO\
lllOOll
]
.
lOl\
llOl\
OlOl
.
Dot\

(
llOOll\
OlOOl
-
lOlllOlO\
Oll
(
llOOl\
ll\
OO\
ll
)
)
<
0.0f
)
{
}
else\

{
if
(
llOOlllOO\
lO
!=
-
1
)
{
co\
nst\

Vec3
&
lO\
l\
l\
llOOlOO\

=
lO\
lll\
OlOO\
ll
(
llOOlllOOlO
)
;
int
lOlll\
Ol\
Oll\
O\

=
llOOlll\
O\
OlO
+
1
<
llOOOlOOl\
O\

->
lOllOll\
O\
ll
?
llO\
OlllO\
Ol\
O
+
1
:
0
;
cons\
t
Ve\
c3\

&
lOlllOllOOO
=
lOl\
llOlOOll
(
lOlllO\
lOllO
)
;
lOl\
llOll\
OOl
(
lOllll\
O\
O\
lOO
,
lO\
lllOl\
lOOO
,
1
+
lO\
lllO\
OllO
)
;
}
if
(
ll\
O\
OlllOOll\

!=
-
1
)
{
con\
s\
t
Vec3
&
lO\
lll\
lO\
O\
l\
OO
=
lOlll\
OlOOll
(
ll\
OOlllO\
Ol\
l
)
;
int
lOll\
lO\
lOll\
O\

=
llOO\
lllOOll
+
1
<
llOOOlOO\
l\
O
->
lOllOll\
Oll
?
llOOll\
l\
OOll
+
1
:
0
;
co\
ns\
t
Vec3
&
lOlllOllOOO
=
lO\
ll\
lOl\
OOll
(
lOll\
l\
OlOl\
lO
)
;
lOlll\
Ol\
lO\
O\
l\

(
lOl\
lll\
O\
OlOO
,
lO\
l\
l\
l\
OllOOO\

,
1
+
lO\
lllOOll\
O
)
;
}
Vec3
lO\
OO\
O\
llll\
l\

=
llOOllOlOOl
+
ll\
OOll\
lOOOO
*
llOOll\
O\
lllO
.
lOl\
OlO\
O\
l\
OOO
;
lOllll\
OOOOO
(
0.0f
,
llOO\
ll\
Oll\
Ol
-
lOll\
l\
Ol\
l\
OO
,
llOOOlOOlO
,
lOOOOlllll
,
llOOOl\
O\
OlO
->
lO\
OOlO\
O\
O\
OO
)
;
llOOllO\
lOOO
.
llOOllO\
O\
l\
O\
l\

=
tru\
e
;
}
}
{
const
Vec3
&
lOO\
lOl\
Oll\
l\

=
lOlllOO\
lllO
[
0
]
;
const
Ve\
c3
&
lOOlO\
llO\
Ol
=
lOlll\
OOlllO
[
1
]
;
float
lOlOllOOlO
=
lOll\
lO\
Ol\
lll
(
lO\
Ol\
O\
l\
O\
l\
l\
l
)
;
float
lOlOl\
lOO\
ll
=
lOlllOO\
ll\
l\
l
(
lOOlOll\
O\
Ol
)
;
if
(
!
llOOl\
l\
O\
lOOO
.
llOOllOOl\
Ol
&&
!
Sig\
nsEqua\
l
(
lO\
lO\
l\
lOOll
,
lOlOllOOlO
)
)
{
TA_AS\
SER\
T\

(
Fab\
s
(
lOlO\
ll\
OO\
lO
-
lOlOllO\
O\
l\
l\

)
>
0.0f
)
;
float
lOllll\
O\
O\
O\
l\
O
=
(
lO\
lO\
llOOlO
)
/
(
lOlOllOOl\
O
-
lOlO\
llOOll
)
;
Vec\
3
lOlllOllO\
l\
O
=
lO\
Ol\
Ol\
Olll
+
(
lOOlOllOO\
l
-
lOOlOlOlll
)
*
lOllllOOOl\
O
;
fo\
r
(
lOOOllOOOl
=
0
;
lOOOllO\
OOl\

<
llO\
OO\
lO\
OlO\

->
lOll\
Ol\
lO\
l\
l
;
lOOO\
llOOOl
++
)
{
const
Vec3
&
lO\
lllOlO\
O\
l\
O
=
lOlll\
O\
lOOll\

(
lOOOll\
OO\
Ol\

)
;
if
(
llO\
OOlOOlO
->
ll\
Oll\
llOO\
O
[
lOO\
Ol\
lOOO\
l
]
.
lOlllOlOlOl\

.
Do\
t
(
lO\
l\
ll\
Oll\
O\
lO\

-
lOlllOl\
OO\
lO\

)
<
0.0f
)
brea\
k
;
}
if
(
lO\
O\
OllOOOl
==
ll\
OOO\
lOO\
lO
->
lOll\
OllOll
)
{
float
lOlOOO\
l\
OOlO
=
Fabs
(
llOOllOlOll
.
Dot\

(
llOO\
Ol\
O\
O\
l\
O
->
lOOOlOOO\
OO\

)
)
;
if
(
lO\
lO\
O\
O\
lO\
OlO
>
0.707f
)
{
llOOllOl\
OO\
O\

.
llOOl\
l\
OOlll
=
true
;
}
else
{
lOllllOOO\
OO
(
0.0f
,
llOOllOll\
lO
.
lO\
lOlO\
OlO\
OO
,
ll\
OOOl\
O\
O\
lO
,
lOl\
llO\
llO\
l\
O
,
llOOO\
lOO\
lO
->
lOOO\
lOOOOO
)
;
}
ll\
OO\
l\
lOlOOO
.
llOOllOOllO
=
true
;
}
}
for
(
lO\
OOllOO\
Ol
=
0
;
lOO\
Oll\
OOOl
<
ll\
OOOlO\
OlO
->
lO\
l\
l\
OllO\
ll
;
lOOOllOOOl
++
)
{
const
Vec3
&
ll\
OOlllO\
lO\
O\

=
lO\
lllOlOO\
ll
(
lO\
OOl\
l\
O\
OOl\

)
;
float
ll\
OOlllOl\
O\
l\

=
llOOll\
OlOll\

.
Dot\

(
ll\
OOlll\
Ol\
OO
-
lO\
O\
lO\
l\
Olll
)
;
float\

llOOlll\
Ol\
lO
=
llOOl\
lOlOl\
l\

.
Dot
(
lOOlOl\
lOOl\

-
llOO\
ll\
l\
Ol\
OO
)
;
if\

(
ll\
OO\
lllOlOl\

<
0.0f
||
llOOl\
llOllO\

<
0.0f
)
co\
ntin\
ue
;
Ve\
c3
lOlll\
l\
OOOl\

;
if
(
Geometry\

::
FindC\
lose\
stP\
ointOn\
LineUnClampe\
d
(
ll\
OO\
ll\
l\
Ol\
OO\

,
lOO\
lOlOlll
,
lOOlOllOO\
l
,
lOllllOOOl
)
)
{
Vec3
lOOO\
lO\
OO\
OO\

=
(
lO\
ll\
l\
l\
OO\
Ol
-
llOOll\
lO\
lOO\

)
;
float
lOl\
l\
llO\
Oll
=
lOO\
O\
lOOO\
O\
O\

.
Ge\
tMa\
gni\
tudeS\
qrd
(
)
;
const
flo\
at
lOll\
OlOlOl
=
0.001f
*
0.001f
;
if
(
lOllll\
O\
Oll
<
llOOll\
Ol\
llO
.
lOl\
Ol\
OOl\
OO\
O\

*
llOOllOl\
llO
.
lOlOlOOl\
OOO\

&&
lO\
llllOOll\

>
lO\
ll\
O\
l\
Ol\
Ol
)
{
if
(
ll\
OO\
ll\
OlOOO
.
llOOl\
lOOll\
O
)
{
lO\
lllOl\
l\
llO
(
llOOlllO\
lOO
)
;
continue
;
}
lOl\
lllOOll
=
Sq\
rt
(
lO\
llllOOl\
l
)
;
lO\
OOlO\
OOOO
/=
lOllllOOll
;
llOO\
llOOlO\
O
|=
1
<<
lO\
OOllOOOl
;
fl\
oat
lO\
ll\
lOl\
lOO\

=
llOOllOll\
lO
.
lOlOl\
OOlOOO
-
lO\
ll\
llOOll
;
boo\
l
llO\
Ol\
llOl\
l\
l\

=
true
;
if
(
llO\
OlllOlOl
<
llO\
Ol\
llOll\
O
)
{
if
(
llOOlllOlOl
<
lOlllO\
llOO
)
{
lO\
l\
l\
lOll\
OO
=
llOO\
lllOlOl
;
lOOOl\
OOO\
O\
O
=
llOOllOlO\
ll
;
}
}
else
if\

(
llOO\
lllOl\
lO
<
lO\
l\
llOl\
lO\
O
)
{
lOl\
llO\
llOO
=
ll\
OO\
l\
ll\
O\
llO
;
lOO\
OlOOOOO\

=
-
llOOllOl\
Oll
;
}
els\
e
{
llO\
Ol\
l\
lO\
lll
=
false
;
}
in\
t
lOl\
ll\
OlOllO
=
lOO\
OllO\
O\
O\
l\

+
1
;
if
(
lOll\
lO\
lO\
llO
>=
llOOO\
l\
OOlO
->
lOllOllO\
ll
)
lOll\
lOlOllO
=
0
;
int
lOlllOlll\
O\
O\

=
lOOOllO\
OOl
-
1
;
if\

(
lOlllOlllOO
<
0
)
lOl\
ll\
O\
lllOO
=
llOO\
OlOOlO
->
lO\
llOllOll
-
1
;
if\

(
lOOOlOOOOO
.
Dot
(
llOOO\
lOOlO
->
ll\
Ollll\
OOO
[
lOlll\
Olll\
OO
]
.
lOll\
lOlOlOl
)
>
0.0f
)
{
lOl\
llO\
lll\
lO\

(
llO\
Olll\
OlOO
)
;
if
(
llOOlllOlll
)
{
con\
ti\
nu\
e
;
}
els\
e
{
lO\
llllOOO\
OO
(
0.0f
,
lOll\
lOllOO
,
llOOO\
l\
OOlO
,
lOll\
l\
lOOOl
,
llOOOl\
OOl\
O
->
lO\
OOlO\
O\
OOO\

)
;
continue
;
}
}
if
(
lOO\
Ol\
OOO\
O\
O
.
Dot\

(
llO\
OOlOOl\
O
->
llOl\
l\
l\
lOOO
[
lOlllO\
lOl\
l\
O
]
.
lO\
l\
llO\
lOlOl
)
>
0.0f
)
{
lOl\
l\
lO\
lll\
l\
O\

(
llOOll\
lOlOO\

)
;
if
(
ll\
OOl\
l\
l\
Olll\

)
{
cont\
in\
ue
;
}
els\
e
{
lOllllOO\
O\
OO\

(
0.0f
,
lOlll\
Ol\
lOO
,
llOOOlO\
OlO
,
lOll\
llOOOl
,
ll\
O\
O\
O\
lO\
OlO
->
lO\
OO\
lO\
OOOO
)
;
con\
t\
inue
;
}
}
lOlllOlllll
(
0.0f
,
lOlllOllOO
,
llOOOlOO\
lO
,
lOOOllO\
OOl
,
true
,
llOOlllOlO\
O\

,
ll\
OOll\
lOlO\
O\

,
lOO\
OlOOO\
OO
)
;
}
}
}
for
(
lO\
O\
OllOOO\
l\

=
0
;
lO\
OOllOO\
O\
l
<
llOOOlOOlO\

->
lOll\
O\
llOl\
l
;
lO\
OOllOOOl
++
)
{
cons\
t\

Vec3
&
lOllll\
OO\
lOO
=
lOll\
lOlOOll\

(
lOOOl\
lOOOl\

)
;
cons\
t
in\
t\

lOl\
llOlOllO
=
lO\
OOllOO\
Ol
+
1
<
llOOOlOOl\
O
->
lOll\
O\
l\
lOll
?
lOOOl\
lOO\
O\
l
+
1
:
0
;
cons\
t
Vec3
&
lOll\
lOllOOO\

=
lO\
lllO\
lOOll
(
lOl\
llOlOllO
)
;
fl\
oat
lOllllOOlOl
=
0.0f
;
Vec3
lOl\
lllO\
O\
lO
;
Vec3
lOl\
ll\
lOOO\
l
;
Ve\
c3
ll\
l\
ll\
OOlll\

;
Vec3
ll\
lll\
Oll\
O\
l
;
if
(
Geometr\
y
::
Find\
Clos\
est\
Po\
intOnLin\
eToLineUnCl\
amped\

(
lOOl\
O\
lOlll
,
lO\
O\
lOll\
OOl
,
lOllll\
O\
OlOO
,
lOl\
llOllOO\
O
,
lll\
llOOl\
ll\

,
lllllOl\
lOl
)
)
{
Vec3
lOOOlOO\
OOO\

=
ll\
lll\
OOl\
ll
-
ll\
lll\
OllOl
;
flo\
at
lllO\
OlOlOl\

=
lOOOlO\
O\
O\
OO
.
GetMag\
ni\
tudeS\
q\
rd
(
)
;
if\

(
lllOOlOlO\
l
<
llO\
Oll\
Olll\
O
.
lOl\
OlOOlOOO
*
ll\
OOllOl\
llO
.
lOlO\
lOOlOOO\

)
{
if
(
llOOllOl\
O\
OO
.
llO\
OllO\
OllO
)
{
lO\
ll\
lOllOOl
(
lO\
llll\
OOlO\
O
,
lO\
lllO\
llOOO
,
0
)
;
}
else\

if\

(
lll\
OOlOlOl\

<
llOOl\
lOlll\
O
.
lOlOlO\
OlOOO
*
llOO\
ll\
OlllO
.
lOlOlOOlOOO
*
0.99f
)
{
lO\
llllO\
O\
Ol
=
ll\
lll\
Oll\
O\
l
;
const
fl\
oat
lOl\
l\
llOO\
ll
=
Sq\
rt\

(
lllOO\
lO\
lOl
)
;
con\
st\

fl\
o\
at
lOll\
Ol\
O\
lOl
=
0.001f
*
0.001f
;
if
(
ll\
l\
OOl\
OlOl\

>
lO\
l\
lO\
lOlOl
)
{
lO\
OO\
lOO\
OOO
=
lOOOlOOO\
O\
O\

/
lOl\
lll\
OOl\
l
;
}
els\
e
{
lO\
OOl\
O\
OOOO
=
ll\
OOOlOOlO
->
lOOOl\
OOOOO
;
}
lOllllOOlOl
=
ll\
OOl\
lOlllO\

.
lOlOlOOlOOO
-
lOll\
llOOll
;
float\

llOOlll\
lO\
O\
O
=
llOOllOlOl\
l
.
Do\
t
(
llll\
lOll\
Ol\

-
lOOlOlOlll
)
;
floa\
t
ll\
OOl\
lll\
OO\
l
=
ll\
OOllOlO\
ll
.
Do\
t
(
lOO\
lO\
l\
lOOl
-
lllllO\
ll\
O\
l\

)
;
bool\

ll\
O\
O\
ll\
lO\
ll\
l
=
true\

;
if
(
llOO\
llllOO\
O
<
lO\
l\
l\
llOOlO\
l
)
{
if
(
ll\
OOllllOO\
l
<
llOO\
l\
ll\
lOOO
)
{
lOOO\
lOOOOO
=
-
llOOllO\
lOll
;
lOll\
llOOlOl
=
llO\
Olll\
lOOl
;
}
else\

{
lOOOlOOOO\
O\

=
llOOllOl\
O\
ll
;
lO\
l\
ll\
lOOlOl
=
ll\
OOlll\
lOOO\

;
}
}
els\
e
if
(
llOOl\
lllOO\
l
<
lO\
ll\
l\
lO\
OlO\
l
)
{
lOOOl\
O\
OO\
OO\

=
-
llOOllOlOll
;
lOllll\
OOl\
Ol
=
llOO\
llllOOl\

;
}
else\

{
ll\
O\
Oll\
lOlll\

=
false
;
}
if
(
lOOOl\
OOOOO\

.
Dot\

(
llOOOlOOlO\

->
llOl\
l\
llOO\
O\

[
lOOOllOOOl
]
.
lO\
lll\
OlO\
l\
Ol
)
>
0.0f
)
{
lOlll\
OllOO\
l
(
lOlll\
lOO\
lOO
,
lOll\
l\
Ol\
lOOO
,
0
)
;
if
(
llOOlllO\
lll\

)
{
llOOllOl\
OOO
.
ll\
OOllOOl\
l\
l
=
true
;
co\
ntinue
;
}
else
{
lOl\
l\
ll\
O\
OOOO
(
0.0f
,
lO\
lll\
l\
O\
OlO\
l
,
llO\
OO\
lOOlO\

,
lOl\
l\
l\
l\
OOOl
,
llO\
OOlOO\
lO
->
lOOO\
l\
OO\
OOO
)
;
con\
tinue
;
}
}
lOl\
llO\
l\
lOll
(
0.0f
,
lO\
l\
ll\
lOOlO\
l
,
llOOO\
l\
OOlO
,
lOlll\
lOO\
l\
OO
,
lOlllO\
l\
lO\
OO
,
lOll\
llO\
OO\
l
,
lOOOlOOOO\
O
,
0
)
;
}
}
}
}
if
(
llOOllO\
l\
OOO
.
ll\
OOllO\
Olll\

)
{
float\

lO\
lO\
O\
OlOOlO
=
Fab\
s
(
llOOllOl\
Oll\

.
Dot
(
llOOO\
lOO\
lO
->
lOOO\
lOOO\
OO\

)
)
;
if
(
Fabs
(
lOl\
O\
OOlOOl\
O
)
>
0.707f
)
{
TA\
_A\
SSER\
T
(
Fabs
(
lOlO\
llOO\
lO\

-
lO\
lOllOO\
ll
)
>
0.0f
)
;
fl\
oa\
t
lOllll\
OOOl\
O
=
(
lO\
lO\
ll\
OOlO
)
/
(
lOlOll\
OOl\
O
-
lOlO\
llOOll
)
;
Vec3
lOlll\
O\
l\
lO\
l\
O
=
lOO\
lOlOll\
l
+
(
lOO\
lOllOOl
-
lOOl\
Ol\
Olll\

)
*
lOl\
lllOOO\
l\
O
;
Ve\
c3
llOOllOlOlO
=
ll\
O\
O\
O\
lOO\
lO
->
lOO\
OlOO\
OO\
O\

.
Cr\
o\
ss
(
ll\
O\
Ol\
lOlOll
)
;
float
ll\
O\
Ol\
lllOlO
;
Vec3
llOOlllOO\
OO
;
if
(
Fabs
(
lOlO\
O\
OlOO\
l\
O
)
>
0.999f
)
{
ll\
OOlll\
lO\
l\
O
=
0.0f
;
Mat3\
3
lO\
OOO\
OOOll
;
lOOOOOOO\
l\
l
.
Set\
ToL\
oo\
kDownVe\
c\
tor\

(
ll\
OO\
OlOOl\
O
->
lOOOlOOOOO\

)
;
llOOll\
O\
lOlO
=
lO\
OOOOO\
Oll
.
v3X
;
ll\
OOll\
l\
OOO\
O
=
lO\
OOOOOO\
l\
l
.
v3Y
;
}
el\
s\
e
{
llO\
O\
llllOlO\

=
llO\
OllO\
lOlO
.
Get\
Mag\
nit\
ude
(
)
;
llOOllO\
lO\
lO
/=
llOOllllO\
lO
;
llOOlllOO\
OO
=
llOOOl\
OOl\
O
->
lOOOlOO\
OO\
O
.
Cr\
oss
(
llOOl\
lO\
lOlO
)
.
Ge\
tN\
orma\
l
(
)
;
if
(
llOO\
ll\
OlOl\
l\

.
Dot
(
llOOOlOOlO
->
lOOOlOOOOO
)
>
0.0f
)
llOO\
lllOO\
OO
=
-
ll\
OOl\
l\
l\
OOOO\

;
}
con\
st\

flo\
at
llOOl\
lll\
O\
ll\

=
Cos
(
k_f\
Pi
/
6.0f
)
*
2.0f
;
const
float\

llOO\
lllllO\
O
=
(
llOOlll\
lOll
*
Cos
(
k_\
fPi
/
6.0f
)
-
1.0f
)
;
con\
s\
t
flo\
at\

llOOl\
llO\
OOl
=
llO\
O\
l\
lllO\
ll
*
Sin
(
k_fPi\

/
6.0f
)
;
co\
n\
st
flo\
a\
t
llOO\
l\
llll\
Ol
=
llOOllO\
lllO
.
lOlOlOOlOOO
/
lOl\
OOO\
lO\
OlO
;
Ve\
c3\

llO\
Ollllll\
O
[
6
]
;
bool
ll\
OOl\
llllll
[
6
]
;
llOO\
llll\
ll\
O
[
0
]
=
lOlllO\
llOl\
O
+
ll\
OO\
lll\
OOOO\

*
llOOl\
ll\
llOl
;
llOO\
l\
l\
lll\
lO
[
2
]
=
lOl\
l\
l\
OllOlO
-
ll\
O\
Ol\
llOO\
OO\

*
ll\
OOl\
llllOl
*
ll\
OOlllllOO
+
ll\
OOllOlOlO
*
llOO\
ll\
lOOO\
l\

*
llO\
OllOl\
ll\
O
.
lO\
l\
O\
l\
OOlO\
OO
;
llOOllll\
llO
[
4
]
=
lOl\
llOl\
lOlO
-
llO\
Ol\
llOO\
O\
O\

*
llOOl\
l\
lllOl\

*
llO\
Olll\
llO\
O
-
llOO\
llOlOlO\

*
llO\
O\
lllOOOl
*
llOOl\
lOlllO\

.
lO\
lOlOOlOOO
;
llOOllllllO
[
1
]
=
ll\
OOlll\
lllO
[
2
]
;
ll\
OO\
ll\
llllO
[
3
]
=
ll\
OOllll\
ll\
O\

[
4
]
;
llOOl\
ll\
lll\
O
[
5
]
=
ll\
OOll\
l\
ll\
l\
O
[
0
]
;
int
lOOOlOOlOOO
;
for
(
lOO\
OlO\
OlOOO\

=
0
;
lOOOl\
O\
OlOO\
O\

<
6
;
lOOOlOO\
lOOO\

+=
2
)
{
Vec3
&
llll\
lll\
ll
=
ll\
OOllllllO
[
lOO\
Ol\
O\
O\
lO\
OO
]
;
Vec3
&
lOO\
OOOOOOO
=
llO\
Ollll\
llO
[
lO\
OOlOOlOOO\

+
1
]
;
fo\
r\

(
lOOO\
ll\
OOOl
=
0
;
lOOOll\
O\
OOl
<
llOO\
O\
l\
OO\
lO
->
lOllOllOll\

;
lOO\
O\
llO\
OOl
++
)
{
con\
st
Vec3\

&
lOl\
lllO\
OlOO
=
lO\
ll\
lOl\
O\
O\
l\
l
(
lOOOl\
lOOOl
)
;
floa\
t\

lO\
l\
OllO\
OlO
=
llO\
OOlOO\
l\
O
->
llO\
llllO\
O\
O
[
lO\
OOl\
lOO\
O\
l
]
.
lO\
lllOlO\
l\
Ol
.
Dot\

(
lOl\
l\
l\
lOOl\
OO
-
ll\
ll\
ll\
l\
ll
)
;
fl\
oa\
t
lOlOl\
lOO\
ll
=
llOO\
OlOO\
lO
->
llOlll\
lOOO
[
lOOOllOO\
Ol\

]
.
lOll\
lO\
lO\
lOl\

.
Dot
(
lOlll\
lO\
OlO\
O
-
lOOOOOOOOO
)
;
if
(
lOlOllOOlO
>
0.0f
)
{
if
(
lOlOll\
OOll
>
0.0f
)
break
;
float
lllOllll\
O\
O
=
(
lOl\
OllOOlO\

/
(
lOlOl\
lOOlO
-
lOl\
Ol\
lO\
Oll
)
)
;
llll\
ll\
lll
+=
(
lOOOOOOO\
OO
-
lllll\
lll\
l
)
*
ll\
l\
O\
llllOO
;
}
els\
e
if\

(
lOl\
O\
llOOll
>
0.0f
)
{
fl\
o\
at
lllOll\
llOO
=
(
lOlO\
llO\
Oll\

/
(
lOlOll\
OOl\
l\

-
lOlOllO\
Ol\
O
)
)
;
lO\
OO\
OOOOOO
+=
(
llll\
lllll
-
lOOOOO\
OOOO
)
*
lllO\
l\
l\
ll\
O\
O
;
}
}
if
(
lOOO\
l\
lOO\
O\
l\

==
llOO\
OlOOlO
->
lOllOllOll
)
{
llOO\
llllll\
l
[
lOO\
Ol\
O\
OlOOO
]
=
true
;
ll\
OOll\
l\
llll
[
lO\
OOlOO\
lOO\
O
+
1
]
=
true\

;
}
el\
se
{
llOOl\
l\
llll\
l\

[
lOOO\
lO\
OlOOO
]
=
false\

;
llOOlllllll
[
lOOOl\
OOlOO\
O\

+
1
]
=
fa\
l\
se\

;
}
}
for
(
lOOOl\
OOl\
OOO
=
0
;
lO\
O\
OlOOlOOO\

<
6
;
lOO\
O\
lOOlOOO
++
)
{
int
lOl\
l\
lO\
lOll\
O\

=
lO\
OOlOO\
lO\
O\
O
+
1
;
if\

(
lOlllOlO\
llO
>=
6
)
lOlllOlO\
llO
=
0
;
if
(
!
ll\
O\
O\
ll\
ll\
lll
[
lOOO\
lOOlOOO
]
)
con\
t\
inue
;
if\

(
llO\
Oll\
ll\
l\
ll\

[
lOl\
l\
lOlOl\
lO
]
&&
ll\
OO\
llllllO
[
lOOOl\
OOlOOO
]
==
llO\
Ol\
ll\
lll\
O
[
lO\
lllOlO\
l\
lO
]
)
co\
ntinue
;
fl\
oat
lO\
llOO\
l\
O\
OOl
;
lOl\
lOOlO\
OOl
=
lOlOllOO\
lO
<
0.0f
?
-
lO\
lOllOOlO
:
-
lOl\
O\
ll\
OO\
ll\

;
lOllO\
O\
lOOOl
+=
llOO\
ll\
llOlO
*
llO\
OllOlll\
O
.
lOlO\
l\
OOlO\
OO
*
ll\
OOll\
lllOO
*
llO\
OlllOOOO
.
Do\
t
(
llO\
Oll\
llll\
O
[
lOOOlOOlOO\
O\

]
-
lOlllOOl\
llO\

[
0
]
)
;
lOllllOOOO\
O\

(
0.0f
,
lOl\
lOOlOOOl
,
llOO\
OlOO\
lO
,
ll\
OOllll\
llO
[
lOOOl\
OOlOOO
]
,
llOOOlOOlO\

->
lOOOl\
OOOOO
)
;
}
}
}
}
if
(
lOlllOOOO\
Ol
->
lOllOl\
llO\
O\
l
)
{
const
floa\
t
lO\
llOlOl\
O\
l
=
0.0001f
;
fo\
r
(
lOlllO\
O\
llO
=
0
;
lOlll\
O\
OllO
<
2
;
lOl\
llO\
O\
llO\

++
)
{
co\
nst
Vec\
3\

&
lOOlOl\
Olll
=
lO\
ll\
lO\
Ol\
l\
lO\

[
lOlllOO\
llO
]
;
co\
nst\

Ve\
c3\

&
lO\
O\
lO\
l\
lOOl
=
lOllllO\
OOOl\

[
lOlllOO\
llO
]
;
flo\
at
lOl\
OllO\
OlO
=
lOl\
llOOll\
ll
(
lOO\
l\
OlOlll
)
;
float
lOlOllOOll\

=
lOll\
lOOll\
ll
(
lOOlOllOOl
)
;
if
(
lOlOll\
OO\
ll
<
0.0f
&&
lO\
lO\
ll\
O\
OlO
>
0.0f
)
{
TA\
_\
A\
S\
SERT\

(
Fabs
(
lO\
lOllO\
OlO\

-
lOl\
Ol\
l\
OOll\

)
>
0.0f
)
;
float\

lO\
llllOO\
OlO\

=
(
lOl\
OllOOlO
)
/
(
lOl\
OllOOlO
-
lOlO\
l\
lO\
O\
ll
)
;
Vec3
lO\
l\
llOl\
lOlO
=
lOO\
lO\
l\
Olll\

+
(
lOOlOllOOl
-
lOOlO\
l\
Oll\
l\

)
*
lOllllOOOlO
;
fo\
r\

(
lOOOl\
lO\
OOl\

=
0
;
lOO\
OllO\
O\
O\
l
<
llO\
OO\
l\
OOlO\

->
lOllO\
llOll
;
lO\
O\
OllOO\
Ol\

++
)
{
const\

Vec3
&
lO\
l\
l\
lO\
l\
O\
OlO
=
lOl\
ll\
OlOOl\
l
(
lOO\
OllOOOl
)
;
if\

(
llOOOlO\
O\
lO
->
ll\
Olll\
lO\
OO
[
lOOOl\
lO\
O\
Ol
]
.
lO\
lll\
OlO\
l\
O\
l
.
Dot\

(
lO\
lll\
O\
l\
lOlO
-
lOlllO\
lO\
O\
lO
)
<
0.0f
)
break\

;
}
if\

(
lOO\
Ol\
lO\
OO\
l\

==
ll\
OOO\
l\
OO\
l\
O
->
lOllOl\
l\
O\
ll\

)
{
lOl\
l\
llO\
OOOO
(
lOllll\
OO\
OlO
,
0.0f
,
llO\
OOlOOlO\

,
lOlllOl\
l\
Ol\
O
,
llOO\
Ol\
OOlO
->
lOOOl\
OOO\
O\
O\

)
;
}
}
const
Ve\
c3
llOl\
OOO\
OOOO
=
lOlllOO\
l\
l\
l\
O
[
(
lO\
lll\
OOllO
+
1
)
&
1
]
-
lOOlOlO\
lll
;
Vec3
llOlOOO\
OOOl
=
llOOO\
l\
OO\
lO\

->
lOO\
O\
lOO\
OO\
O
.
Cro\
ss
(
ll\
OlOOOOOOO\

)
.
Cr\
os\
s
(
llOlOO\
OO\
OOO
)
;
floa\
t
llOl\
OOOOO\
lO
=
ll\
OlOOOOOOl\

.
GetMag\
n\
i\
tu\
d\
e\

(
)
;
Vec\
3
llOlOOOOOll
=
lOO\
lO\
l\
Ol\
l\
l
;
if
(
llOlOO\
OO\
O\
lO
>
lOll\
OlOl\
Ol
*
lOllOlO\
lOl
)
{
llO\
lO\
OOOO\
Ol
/=
llOlO\
O\
OOOlO
;
llOlOOOOOll\

+=
llO\
lOOOOOOl
*
llOO\
llO\
lllO
.
lO\
l\
O\
lOOlOOO
;
}
cons\
t
Vec3
&
llOlOOO\
Ol\
OO
=
lOllllOOOOl
[
(
lOlllO\
OllO
+
1
)
&
1
]
-
lO\
Ol\
OllO\
Ol
;
Vec3\

ll\
Ol\
OOOOlOl
=
llOO\
OlOOlO
->
lO\
OOlOOO\
OO\

.
Cros\
s
(
llOl\
OOOO\
lOO
)
.
Cross
(
ll\
O\
lOOOOl\
O\
O
)
;
floa\
t
llOlOO\
OOl\
lO
=
ll\
Ol\
O\
OO\
OlOl
.
GetMa\
gni\
tude\

(
)
;
Vec3
llO\
l\
OO\
O\
Olll
=
lOOlO\
llO\
O\
l
;
if
(
llOlOOOOllO
>
lOllOlOlOl
*
lO\
ll\
OlOl\
Ol
)
{
ll\
Ol\
OOOOlOl
/=
llO\
lO\
OO\
O\
l\
lO
;
ll\
O\
lOO\
OOlll
+=
ll\
OlO\
OOO\
lOl
*
llOOllOlllO
.
lOl\
Ol\
O\
OlO\
O\
O\

;
}
{
lOlO\
ll\
OO\
l\
O\

=
lOll\
lO\
O\
llll
(
llOlOO\
OOOll
)
;
lOlO\
llOOl\
l
=
lOl\
llOOl\
lll
(
llOl\
O\
OOOll\
l
)
;
if\

(
lO\
lOll\
OOll
<
0.0f
&&
lOlOll\
OO\
lO\

>
0.0f
)
{
TA_\
AS\
S\
E\
RT
(
Fab\
s
(
lO\
lO\
l\
lOO\
lO
-
lOlOl\
lOO\
ll\

)
>
0.0f
)
;
float\

lOllll\
OOOlO\

=
(
lOlOllOOlO
)
/
(
lOl\
OllOOlO
-
lOl\
OllOOll
)
;
Vec3
lOlllOllOlO
=
llOlOO\
OO\
Oll\

+
(
llOlOOOOll\
l
-
llO\
l\
OOOO\
Oll\

)
*
lOlll\
lOOO\
l\
O
;
for
(
lO\
OO\
llOOO\
l
=
0
;
lO\
OOllOOO\
l\

<
llO\
O\
Ol\
OOl\
O
->
lOllOl\
lOll
;
lO\
O\
OllO\
OO\
l
++
)
{
const
Vec3
&
lOlll\
Ol\
OOlO
=
lO\
lll\
OlOOll
(
lO\
OOll\
OOOl\

)
;
if
(
llOOOlOOlO\

->
llOllllOO\
O
[
lOO\
Ol\
lO\
OOl
]
.
lOlllO\
lOlOl
.
Dot
(
lOl\
llOl\
lOl\
O\

-
lO\
lllOlOOlO
)
<
0.0f
)
break
;
}
if
(
lOOOll\
OOOl
==
llOOOlO\
OlO
->
lOl\
l\
OllOll
)
{
lO\
ll\
llOOOO\
O\

(
lO\
lll\
lOOOl\
O
,
0.0f
,
llOOO\
lOOlO
,
lOlllOl\
lOlO
,
ll\
OOOlOO\
l\
O
->
lO\
OOlOOOOO
)
;
}
}
}
}
sta\
ti\
c
Ve\
c3
llOlOOOl\
O\
OO\

[
lOll\
lOOl\
OO\
l
]
;
fo\
r\

(
lOOOllO\
OOl
=
0
;
lOOOl\
lO\
OOl
<
llO\
OOlOOl\
O
->
lOllOl\
lOll\

;
lOOOl\
lOO\
Ol\

++
)
llOl\
OOOlOOO
[
lO\
O\
OllO\
OOl
]
=
(
lOlll\
O\
lOOl\
l
(
lO\
OO\
ll\
O\
OOl
)
/
lO\
lll\
OOOO\
O\
O
)
*
lOl\
l\
Ollll\
ll
;
fo\
r
(
lOlllOOllO
=
0
;
lOl\
ll\
OOl\
lO
<
2
;
lOl\
ll\
OOllO
++
)
{
llOOllOlO\
ll
=
-
llOOllOlOll
;
const
Vec3
&
lOO\
O\
OlO\
O\
Ol\

=
lOl\
ll\
OOll\
lO\

[
lOll\
lOOl\
l\
O
]
;
fo\
r
(
lOOO\
llOOOl\

=
0
;
lOOOllOOOl
<
llO\
O\
O\
lOOlO
->
lOl\
l\
Oll\
O\
ll\

;
lO\
OOll\
OOOl\

++
)
{
con\
st
Vec3
llO\
l\
OOO\
l\
OOl
=
lO\
ll\
l\
O\
lO\
O\
ll\

(
lOO\
OllOOOl\

)
;
const
Ve\
c3
llOlOO\
OlO\
lO
=
llOlO\
OO\
lOO\
O
[
lO\
OOllOOO\
l\

]
;
floa\
t
llOlOOOl\
Oll
=
llO\
Ol\
lO\
l\
O\
ll\

.
Dot\

(
llOlOOOlOOl\

-
lOOO\
OlOO\
Ol\

)
;
float
llOlOOOllOO
=
llOOllO\
lOll
.
Do\
t\

(
ll\
OlOOO\
l\
O\
lO
-
lOOOOlO\
O\
Ol
)
;
if\

(
llO\
lOO\
OllOO\

<
0.0f
&&
llOlO\
OO\
lOll
>
0.0f
)
{
fl\
o\
a\
t
llOl\
OO\
O\
llOl\

=
llO\
lOO\
OlOll
/
(
llOl\
OOO\
lO\
ll
-
llOlOOOll\
OO
)
;
Vec3\

lOlllOllO\
lO
=
ll\
OlOOOlOOl
+
(
llOlOOOlO\
lO
-
llOl\
OO\
Ol\
OOl
)
*
llOlO\
OO\
llO\
l
;
float
lOl\
l\
l\
OOlOl
=
(
lOlllO\
l\
lOlO
-
lOOOOlOOOl\

)
.
Ge\
t\
MagnitudeSqrd
(
)
;
if
(
lO\
ll\
l\
O\
O\
lOl
<
ll\
OOllOlllO
.
lOlOlOO\
lOOO
*
llOOllO\
ll\
lO\

.
lOlOlOOl\
OOO\

)
{
bool
ll\
OlO\
OOll\
lO
=
true
;
Vec\
3
lO\
OO\
l\
O\
OOOO
=
-
llOO\
llOlOl\
l
;
if
(
ll\
O\
lOOOlll\
O
)
{
lOl\
ll\
Olllll
(
llOlO\
OOll\
O\
l\

,
0.0f
,
ll\
O\
O\
O\
lO\
Ol\
O\

,
lO\
OO\
ll\
OOO\
l
,
true\

,
llOlOO\
OlOOl\

,
llO\
lO\
O\
Ol\
OOl
,
lOOOlOO\
OOO\

)
;
}
}
}
in\
t\

lO\
lllOlOllO
=
lOO\
Oll\
OOOl
+
1
;
if
(
lOll\
lOlOl\
l\
O\

>=
llOOOlO\
OlO\

->
lOllO\
llOll
)
lOlllOlOllO
=
0
;
cons\
t
Ve\
c3
llO\
l\
OOO\
llll\

=
lO\
l\
llOlOO\
ll
(
lO\
l\
llOlO\
llO\

)
;
const
Ve\
c3
llOlO\
O\
lOOO\
O
=
ll\
OlOO\
Ol\
OOO
[
lOlllOlOll\
O
]
;
floa\
t
llOlOOlOOOl
=
llO\
OllO\
lOll
.
Do\
t
(
llOl\
OOOl\
l\
ll
-
lOOOO\
lOO\
Ol
)
;
float\

llOlOOl\
OO\
lO\

=
llOOllOlOll
.
Dot
(
llOlO\
OlOOO\
O
-
lO\
O\
OOlOOOl
)
;
float
llO\
lOO\
lOOll
;
float
llOlO\
OlOlO\
O
;
Vec\
3\

llOlO\
O\
l\
O\
lOl
;
Ve\
c3
llO\
l\
OO\
l\
Ol\
lO\

;
if\

(
llOlOOOllOO\

<
0.0f
)
{
if\

(
ll\
OlOOl\
O\
Ol\
O
<
0.0f
)
{
if
(
ll\
O\
l\
O\
OlOOOl
<
0.0f
)
{
if
(
llOlOOOlO\
ll
<
0.0f
)
co\
n\
tinue\

;
llO\
lOO\
l\
OO\
ll
=
0.0f
;
ll\
O\
l\
OOlOl\
OO\

=
llOl\
OO\
OlOll
/
(
llOlOOOl\
Oll\

-
llOl\
OOOllOO
)
;
llOlOO\
lO\
ll\
O
=
llOl\
OOOlOOl
+
llOl\
OOl\
OlO\
O
*
(
llOlOO\
OlOl\
O\

-
llOlOOO\
lOOl
)
;
llO\
lOOlOlOl
=
ll\
OlOOOlO\
Ol
+
ll\
O\
lOO\
OlO\
ll\

/
(
ll\
O\
lOOOlO\
l\
l\

-
ll\
OlOOlOOOl\

)
*
(
ll\
OlOOOlll\
l
-
llOl\
OO\
Ol\
OOl
)
;
}
el\
s\
e
{
if\

(
ll\
OlO\
O\
OlOll
<
0.0f
)
{
llOlOO\
l\
OOll\

=
0.0f
;
llO\
l\
O\
OlOlO\
O\

=
llO\
lOOlO\
OO\
l
/
(
llOl\
OOlOOOl\

-
llOlOO\
lOOlO\

)
;
ll\
Ol\
OO\
lOll\
O
=
llOl\
OOOllll
+
llOl\
OO\
lOlO\
O
*
(
llO\
lOOl\
OO\
O\
O\

-
llOlO\
OOl\
l\
l\
l
)
;
ll\
OlO\
OlOl\
O\
l
=
llOlOOOll\
ll
+
llOlO\
O\
lOO\
Ol\

/
(
llOlOOlOOOl
-
llO\
lOO\
OlO\
ll
)
*
(
llOlO\
OOlOOl
-
llOlOOO\
lll\
l\

)
;
}
els\
e
{
llOl\
OOlO\
Ol\
l
=
ll\
OlOO\
OlOll
/
(
llOlO\
OOlOll
-
llOlOOOllOO
)
;
llOlOOlOlOl
=
llOl\
O\
O\
Ol\
O\
Ol
+
llOl\
OOlO\
Oll
*
(
llOlOOO\
lO\
lO
-
llO\
lO\
OOlOOl
)
;
llOlOOlOl\
O\
O
=
llOlO\
O\
lO\
OO\
l
/
(
llO\
l\
OO\
lO\
OOl
-
llO\
l\
O\
OlOOlO
)
;
llOl\
OO\
lOllO
=
llOlOOOll\
ll
+
llOlOO\
lOlOO\

*
(
llOlOOlO\
O\
OO
-
llO\
lOOOllll
)
;
}
}
}
else\

{
if
(
llOlOOOlOll
<
0.0f
)
{
if
(
ll\
OlOOl\
OO\
O\
l
<
0.0f
)
conti\
nue
;
llOlOOlOOl\
l
=
0.0f
;
llOlO\
OlOlOO\

=
1.0f
;
llOl\
O\
OlOlOl
=
ll\
O\
lOO\
OlOOl\

+
llOlOOO\
lO\
ll
/
(
llOlO\
OO\
l\
Oll
-
ll\
OlOOlOOO\
l
)
*
(
llOlOO\
Ollll
-
llOlOOOlOOl
)
;
llOl\
OOlO\
llO\

=
ll\
O\
lOOOlO\
lO
+
llOl\
OO\
OllO\
O
/
(
llOlOOO\
llOO
-
llOl\
OOl\
OOl\
O
)
*
(
llO\
l\
O\
OlOOOO\

-
ll\
Ol\
OO\
Ol\
OlO
)
;
}
else
{
ll\
OlOOlOOll
=
llOlOO\
Ol\
O\
l\
l
/
(
ll\
Ol\
O\
OOlOl\
l
-
llO\
lO\
OOll\
OO
)
;
ll\
O\
lOOlOlOl
=
ll\
OlOOO\
lOOl
+
llOl\
OOlOOll
*
(
ll\
OlOOOlOlO\

-
llO\
l\
OOOlOO\
l
)
;
llOlOOl\
O\
lOO
=
1.0f
;
llO\
lOOl\
OllO
=
ll\
O\
lOOOlOlO
+
llOlOOOl\
lO\
O
/
(
llOlOOO\
ll\
OO\

-
llOlOOl\
OOlO
)
*
(
llOlO\
O\
l\
OOOO
-
llOlO\
O\
OlOlO
)
;
}
}
}
els\
e
if
(
ll\
Ol\
OOlOOlO
<
0.0f
)
{
if\

(
ll\
Ol\
OOl\
O\
OOl
<
0.0f
)
{
if
(
llOlOOO\
lOll
<
0.0f
)
con\
tinue
;
llO\
lOO\
lO\
O\
ll
=
0.0f
;
llOlO\
O\
lO\
l\
OO
=
1.0f
;
ll\
OlOO\
lOlOl\

=
ll\
OlOOOll\
ll
+
llO\
lO\
OlOO\
Ol\

/
(
llOlOOl\
OOO\
l
-
llOlOO\
OlO\
ll
)
*
(
llOlOO\
Ol\
OO\
l
-
llO\
lOOOll\
ll
)
;
llOlOOlOllO
=
llOlOO\
lOOO\
O
+
ll\
O\
lOO\
lO\
Ol\
O
/
(
llO\
l\
OOl\
OOl\
O
-
ll\
OlOOOllO\
O
)
*
(
ll\
O\
l\
OOOl\
OlO
-
llOlOOlOOOO
)
;
}
els\
e\

{
llOl\
OOlOOll\

=
llO\
l\
OOl\
O\
OO\
l
/
(
ll\
Ol\
O\
OlOOO\
l
-
llOlOOl\
OOlO
)
;
llO\
lOO\
lOlOl
=
llOlOOOll\
ll
+
llO\
lO\
OlO\
Oll
*
(
llOlOOlOOOO\

-
llO\
lO\
O\
Ol\
lll
)
;
llOlOOlO\
lOO\

=
1.0f
;
llOl\
O\
O\
l\
Ol\
lO
=
llOl\
OOlOOOO
+
llOlOO\
lOOlO
/
(
llO\
lOO\
lO\
Ol\
O
-
llOlO\
OO\
llOO
)
*
(
llOl\
O\
OO\
l\
OlO\

-
llO\
l\
O\
O\
l\
OOO\
O\

)
;
}
}
el\
se
{
continue
;
}
Vec3
llO\
lO\
OlOlll\

=
llOlOOlO\
llO\

-
ll\
OlOOlOlOl\

;
float\

llOl\
OO\
llOOO
=
llOl\
OOlOl\
l\
l\

.
GetM\
agnitu\
deSqr\
d
(
)
;
if\

(
llOlOO\
ll\
O\
O\
O
>
lOllOlOlOl
)
{
fl\
oat\

lO\
lOO\
Ol\
OOlO
=
(
lOO\
OOlO\
OOl
-
llOlOOlOlOl
)
.
Dot
(
ll\
Ol\
O\
OlOlll\

)
;
Ve\
c3
llOlOO\
llO\
O\
l
=
llO\
lOOl\
OlOl\

+
ll\
OlOOl\
Olll
*
(
lOl\
OOOlO\
O\
lO
/
llO\
lOO\
ll\
OOO
)
;
float
lOlllO\
O\
lO\
l
=
(
llOlOOllOOl
-
lO\
O\
OO\
l\
O\
OOl
)
.
Get\
MagnitudeSqrd
(
)
;
if
(
lO\
lll\
OOlOl
<
ll\
O\
OllOl\
l\
lO
.
lOlOlOOlOOO
*
llO\
OllOlllO
.
lOlOlO\
OlOOO
)
{
floa\
t
ll\
O\
lOOllO\
lO
=
Sqrt
(
ll\
O\
OllOlllO\

.
lOlOl\
OOlOOO
*
llOOllOlll\
O
.
lOlOl\
OOlOOO
-
lOll\
lOOlOl
)
;
float
lOllllOOll\

=
Sqrt\

(
llOlOOllO\
O\
O
)
;
lOlOOOl\
OOl\
O
/=
lOll\
ll\
OO\
ll
;
ll\
O\
lOOlOlll
/=
lOl\
lllOO\
ll
;
flo\
at
lOlO\
lll\
lOO\
O
=
lO\
lOOOlOOlO\

-
llOlO\
O\
llOlO
;
fo\
r
(
int
lO\
Ol\
O\
lOOOl
=
0
;
lOOl\
OlO\
OOl
<
2
;
lO\
OlO\
lOOOl
++
,
lOlOllllOOO
=
lOlOOOlO\
O\
lO
+
llOl\
OO\
l\
lOlO
)
{
if\

(
lO\
l\
O\
llllO\
OO
>
0.0f
&&
lOlOllllOOO
<
lO\
l\
lllO\
Oll\

)
{
Vec\
3
lO\
lll\
OllOl\
O
=
llO\
lOOlOlOl
+
llO\
l\
OOl\
Olll
*
lO\
lOl\
lllO\
OO
;
fl\
oat\

ll\
l\
OllllOO
=
ll\
OlOOl\
OOll
+
(
lOlO\
l\
lllOOO
/
lO\
l\
l\
l\
lOOll
)
*
(
llO\
lOOlO\
lO\
O\

-
llOlOOlOOl\
l
)
;
Ve\
c3\

lOllllOl\
lO
=
(
llOlO\
O\
O\
llll
-
ll\
OlO\
OOl\
OOl
)
.
Cross
(
llO\
lOO\
lOOO\
O\

-
llO\
lOO\
Ol\
OlO
)
;
floa\
t
llOlOOllOll
=
lOllllOllO\

.
GetM\
a\
gnitud\
e
(
)
;
if\

(
llO\
l\
OOllO\
ll
>
lOllOlOlOl
)
{
lO\
llllOllO
/=
ll\
O\
l\
OO\
llOl\
l\

;
floa\
t\

llll\
OlOOOl
;
Ve\
c3
lOllllOOO\
l
;
Vec\
3
lOl\
lll\
OOlO
;
flo\
a\
t
llOlO\
Oll\
lOO
=
(
llOlOO\
Ollll
-
llOlOO\
O\
l\
OOl
)
.
GetMagnitude\

(
)
;
if
(
Geo\
me\
tr\
y
::
Te\
s\
tEdgeM\
ove\
me\
ntA\
ga\
i\
n\
s\
tE\
dge
(
llO\
lOOO\
l\
O\
O\
l
,
ll\
O\
lO\
O\
Ollll
,
llOl\
OOOlO\
lO
,
llOlO\
O\
lOOOO
,
lOlllO\
llOl\
O\

+
lOl\
lll\
OllO
*
llOl\
O\
Olll\
OO
,
lOlll\
O\
l\
lOlO
-
lOl\
lllO\
llO\

*
ll\
OlOOll\
lOO
,
llllOlOOO\
l
,
lOll\
l\
lOOO\
l
,
lO\
llllOO\
l\
O
)
)
{
lllOll\
ll\
OO
=
ll\
l\
lOl\
O\
OOl
;
}
}
Ve\
c\
3
lOOOlOO\
OOO\

;
if
(
0
)
{
lOO\
OlOO\
OOO
=
-
(
llOO\
llOlOll
)
.
Cr\
os\
s
(
llOlOOOl\
ll\
l
-
llOlO\
OOl\
OO\
l
)
.
Cross
(
llO\
lOOOlll\
l
-
llOlOOOl\
OOl
)
;
if
(
llOOllOl\
Oll
.
Dot
(
llOOOl\
O\
O\
lO
->
lOOO\
lOO\
OOO
)
<
0.0f
)
lO\
OOlOOOOO
=
-
lOOO\
lOO\
OOO\

;
}
els\
e
{
TA_ASSER\
T
(
(
lOO\
OO\
lO\
OOl\

-
lO\
lll\
OllOl\
O
)
.
Ge\
tMagnit\
ude
(
)
>
0.0f
)
;
lOOOlOOOOO
=
(
lOOOOlO\
OO\
l
-
lO\
lllOllO\
lO
)
.
Get\
No\
rm\
a\
l\

(
)
.
Cr\
os\
s
(
llO\
OllOlOll
)
.
Cr\
oss
(
llOlOOOllll
-
llO\
lOOO\
lOOl
)
;
if\

(
lOO\
Ol\
O\
OO\
OO
.
Dot\

(
llOO\
OlOO\
lO
->
lOOOl\
OOOOO
)
<
0.0f
)
lOOOlO\
OOOO
=
-
lOOOlOOOOO\

;
}
floa\
t
llO\
lOOll\
lOl
=
lOOOlOOOOO\

.
Ge\
tMagnitude
(
)
;
if
(
ll\
Ol\
OOlllO\
l\

>
lOll\
OlOlOl\

*
lO\
l\
lOlO\
lOl\

*
lO\
llOl\
OlOl
)
{
lOOOl\
O\
OOOO\

/=
llOl\
OOlll\
Ol
;
}
else\

{
lO\
OOlO\
OOO\
O
=
ll\
O\
OOlOOlO
->
lOOOlOO\
OO\
O\

;
}
if
(
lOO\
OlOOOOO\

.
Dot
(
llOO\
OlOOlO
->
llOl\
lllO\
O\
O
[
lO\
OOl\
lOOO\
l
]
.
lOll\
l\
O\
l\
O\
l\
O\
l\

)
>
0.0f
)
{
lO\
lllOllOO\
l
(
llOl\
OOOlOOl\

,
llOlOO\
Olll\
l
,
1
+
lO\
lllOOllO\

)
;
lOllllO\
OOOO
(
lllOlll\
lOO
,
0.0f
,
llO\
OO\
lOO\
l\
O\

,
lOlllOl\
lOl\
O
,
ll\
OOOlOOl\
O
->
lO\
OO\
lOO\
OOO\

)
;
}
else
{
lO\
l\
llO\
l\
l\
Oll
(
lllOllllOO
,
0.0f
,
llOO\
Ol\
OOlO\

,
llO\
lOOO\
lO\
Ol
,
llOlOOOllll
,
lOlllOllOlO
,
lOOOl\
OOOOO
,
1
+
lO\
ll\
lOO\
l\
lO
)
;
}
}
}
}
}
}
}
{
fo\
r
(
lOO\
OllOOOl
=
0
;
lOOOllOOOl
<
llOO\
O\
lOO\
lO\

->
lOl\
lO\
llOll
;
lOO\
Oll\
OOOl
++
)
{
const
Vec3
&
lO\
l\
lllOO\
lOO
=
lOl\
llOlOOl\
l\

(
lOOOl\
lO\
OO\
l
)
;
const
int
lOlll\
Ol\
Oll\
O\

=
lOOOll\
OO\
Ol
+
1
<
llOOO\
lOOlO\

->
lO\
l\
lOll\
Oll
?
lOOOl\
lO\
OOl
+
1
:
0
;
con\
s\
t\

Vec3
&
lOlllO\
llOOO
=
lOlll\
Ol\
OOll
(
lO\
lllOlOl\
lO
)
;
float\

lll\
lOlOOOl
=
0.0f
;
Ve\
c3
lOl\
lll\
OOlO
;
Ve\
c3
lO\
lll\
lOO\
O\
l
;
Vec\
3
ll\
l\
llOOl\
ll
;
Vec3\

lllllOllOl
;
if
(
Geometry
::
Te\
stL\
ine\
Moveme\
ntAgai\
nstCapsu\
l\
e
(
lO\
l\
llO\
Oll\
l\
O
[
0
]
,
lOll\
lOO\
lll\
O
[
1
]
,
lO\
llllOOOOl\

[
0
]
,
lOllllOOOO\
l
[
1
]
,
lOll\
l\
l\
O\
Ol\
OO
,
lO\
lllOl\
lO\
OO
,
ll\
O\
OllOlllO
.
lOlOlOO\
lOO\
O\

,
llllOlOOO\
l
,
lOllll\
OOOl
,
lOl\
l\
ll\
OOlO
)
)
{
if\

(
lO\
llllOOlll
&&
lO\
llllO\
Ol\
O
.
Dot\

(
llOOOl\
O\
OlO\

->
lO\
OOlO\
OO\
O\
O
)
<
0.0f
)
lO\
llllOOlO\

=
-
lOllllOOl\
O
;
if
(
lOl\
lll\
O\
Ol\
O\

.
Do\
t
(
llO\
OOlOOlO
->
ll\
Ol\
ll\
lOO\
O
[
lOOOllO\
O\
Ol
]
.
lO\
l\
l\
lO\
lOlOl
)
<
0.0f
)
{
lOlllOllOll\

(
llllOlOO\
O\
l
,
0.0f
,
ll\
O\
OOlOOlO
,
lOl\
lllOO\
lO\
O
,
lOl\
llOl\
lOOO
,
lOlll\
l\
OO\
O\
l\

,
lOllll\
OOl\
O
,
0
)
;
}
else
{
lOl\
llOllOOl
(
lOll\
llO\
OlOO\

,
lO\
ll\
lOllOOO\

,
0
)
;
if\

(
lOllllOOlO
.
Do\
t
(
llOOOl\
O\
OlO\

->
lOOO\
lOO\
OOO
)
>
0.95f
)
{
lO\
llll\
O\
O\
lO
=
llOOOl\
OO\
lO
->
lO\
OOlOOOOO
;
lOllllOOO\
OO\

(
ll\
llOlOO\
Ol
,
0.0f
,
llOOO\
l\
OO\
l\
O
,
lOll\
llOOO\
l
,
lO\
l\
lllOOlO\

)
;
}
}
}
}
for
(
lOOOl\
l\
OOOl
=
0
;
lO\
OOllO\
OOl
<
llOO\
OlOOlO
->
lO\
llOllOll
;
lOOOllOOOl\

++
)
{
const
Ve\
c\
3
&
lOl\
lll\
OOlO\
O
=
lOlll\
OlOO\
ll\

(
lOO\
OllOOOl
)
;
co\
n\
st
Ve\
c\
3
ll\
Ol\
OOllllO
=
llOlOOO\
l\
OOO
[
lOOO\
l\
lOOO\
l
]
;
float
llll\
O\
l\
OOO\
l
=
0.0f
;
flo\
at
lOl\
l\
l\
l\
OOl\
O\
l
=
0.0f
;
Vec\
3\

lO\
llllOO\
lO
;
Vec3\

lOllll\
OO\
O\
l
;
if
(
Ge\
om\
e\
t\
r\
y
::
Te\
stSphe\
reMovementAgainstLi\
ne\

(
lOllllOOlO\
O\

,
llOlOOl\
lll\
O
,
lOlll\
O\
OlllO\

[
0
]
,
lO\
lllO\
Ol\
ll\
O
[
1
]
,
llOOll\
O\
lllO
.
lOlOlOOl\
OO\
O
,
ll\
ll\
OlOO\
O\
l
,
lOl\
l\
llO\
OOl\

,
lOllll\
O\
OlO
)
)
{
TA\
_ASSERT\

(
ll\
llOlOOOl
>
0.0f
)
;
lO\
llllOO\
l\
O
=
-
lOll\
l\
lOOl\
O
;
lOlll\
l\
O\
OO\
l
-=
lO\
lll\
l\
OOlO
*
llO\
Oll\
O\
lllO\

.
lOl\
O\
l\
O\
OlOOO
;
lOll\
lOl\
llll
(
ll\
llOlOOOl
,
lOl\
lllO\
OlOl
,
llOOOl\
OOl\
O
,
lOOOl\
lOOOl
,
tr\
u\
e
,
lOll\
ll\
OOlOO
,
lOll\
llOO\
Ol
,
lOl\
lllOOlO\

)
;
}
}
}
}
}
