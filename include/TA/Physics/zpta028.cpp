//---------------------------------------------------------------------------------
// File Name: zpta028.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifndef DOXYGEN
#include "../Physics/zpta014.h"
#ifndef TA_DEBUG_H
#include "../Common/Debug.h"
#endif //
#ifndef TA_VECTOR_H
#include "../Common/Vector.h"
#endif //
#ifndef lOOlOOlllOl
#include "../Common/zcta010.h"
#endif //
#ifndef lOOllOllll
#include "../Common/zcta001.h"
#endif //
#include <memory.h>
#ifdef _DEBUG
#endif //
#ifdef _DEBUG
#endif
#define llOlOOllOOll "Physics solver failed"
namesp\
a\
ce\

TA
{
#define llOlOOllOlOO(lOOOlOllOlO, Type) { if (lOOOlOllOlO) { lOlOOOlllO(lOOOlOllOlO, Type); lOOOlOllOlO = 0; } }
#define llOlOOllOlOl(lOOOlOllOlO, Type) { if (lOOOlOllOlO) { lOOlOOOOOO(lOOOlOllOlO, Type); lOOOlOllOlO = 0; } }
lOOlOllOlOO
(
llOlO\
Ol\
l\
Oll\
O
)
;
lOOl\
O\
l\
l\
Ol\
OO
(
llOlOOllOll\
l\

)
;
lO\
OlO\
llOlOO
(
llOlO\
Oll\
l\
OOO
)
;
lOOl\
Ol\
lOlOO
(
llOlOOll\
lO\
Ol\

)
;
lOOlOllOlO\
O
(
llO\
lOOlllOlO\

)
;
lOOlO\
llOlOO
(
llOl\
O\
Oll\
lOll
)
;
lOOl\
OllO\
lOO\

(
llO\
lOOll\
ll\
O\
O
)
;
lOOlOllO\
lOO
(
ll\
OlO\
OllllOl
)
;
lOO\
lOl\
lOlOO
(
llOlOOlllllO
)
;
#ifdef _DEBUG
stat\
ic\

floa\
t
llO\
lOOllll\
ll
=
0.0f
;
#endif //
class\

llOlOlOO\
OO\
OO
{
pu\
bli\
c
:
str\
u\
ct
{
u32
llO\
lOlO\
OO\
OO\
l\

;
u16
ll\
Ol\
OlOO\
OOlO\

;
u16
llOlO\
l\
OO\
O\
Ol\
l
;
u8
llOlOlO\
OOlOO
[
8
]
;
}
llO\
lOlO\
OOlOl\

;
char\

llOlOlO\
O\
OllO
[
64
]
;
cha\
r
ll\
Ol\
OlOOOlll
[
64
]
;
llOl\
OlO\
OOO\
OO
(
)
{
ll\
OlO\
lOOOlOl\

.
llOl\
Ol\
OOOO\
Ol
=
0x2b7fb481
;
llOlOlOOOlOl
.
ll\
OlOlOO\
OOlO
=
0xf039
;
ll\
OlOl\
OOOlOl
.
llOlOl\
OO\
OO\
ll
=
0x11d6
;
llO\
lOlOO\
OlOl
.
ll\
OlOlO\
O\
OlOO
[
0
]
=
0x8e
;
ll\
OlO\
lOO\
Ol\
Ol
.
llOlOlO\
OO\
lOO
[
1
]
=
0x2d
;
llO\
lOlOO\
Ol\
O\
l
.
ll\
OlOlO\
O\
OlOO\

[
2
]
=
0x0
;
ll\
Ol\
O\
lOOOl\
Ol\

.
llOlO\
lOO\
OlO\
O
[
3
]
=
0x8
;
ll\
OlO\
lOOOl\
Ol\

.
ll\
OlOlOOOlOO\

[
4
]
=
0xa1
;
llOlOlOO\
OlOl
.
ll\
OlOlOOO\
lOO
[
5
]
=
0x2a
;
llOl\
OlOO\
Ol\
Ol
.
ll\
Ol\
OlOOO\
lOO\

[
6
]
=
0x13
;
llOl\
OlOO\
OlOl
.
llO\
l\
Ol\
OOO\
lO\
O
[
7
]
=
0x5a
;
const
char
ll\
OlO\
lOOlOO\
O\

[
]
=
"OrE^`d>@YdjSDeeg\nyBv;v;vDkPv=Pi?sGy?XtZnmJJz^";
cons\
t\

char
ll\
O\
l\
O\
lOOlOOl\

[
]
=
"True Axis Physics SDK";
int
lOOOl\
lOOOl
;
for
(
lOOOllOOOl
=
0
;
ll\
O\
lOlO\
Ol\
OOO
[
lOO\
Ol\
lOO\
Ol\

]
!=
0
;
lO\
O\
Ol\
lO\
O\
Ol\

++
)
llOlOl\
O\
OOllO
[
lO\
OO\
ll\
O\
OOl\

]
=
llO\
lOlOOlO\
OO
[
lO\
OO\
l\
l\
O\
OO\
l\

]
;
for
(
lOOO\
llOO\
Ol
=
0
;
ll\
O\
lO\
lOOl\
OOl
[
lOOOllO\
OOl
]
!=
0
;
lOOOllOOO\
l
++
)
llO\
l\
Ol\
OOOlll
[
lOOOl\
lOOO\
l
]
=
llOlO\
lOOlOOl
[
lOOOllOOOl\

]
;
}
}
;
namespac\
e\

llOlOlOO\
lOl\
O
{
cl\
ass\

llOl\
OlOOlOll\

{
pu\
bl\
ic
:
llO\
l\
O\
lOO\
lO\
l\
l
(
)
{
lOlOOlOll\
O\

=
0
;
lOlOO\
Ol\
Ol\
O
=
0
;
lO\
lOO\
Ol\
O\
O\
l
=
0
;
}
~
ll\
OlOlOOlO\
ll
(
)
{
Fi\
nalise\

(
)
;
}
vo\
id\

Ini\
ti\
a\
l\
is\
e\

(
int
lOOlllOllO\

)
{
lOlOOOlOlO
=
lOOlllOllO
;
TA_A\
SSERT\

(
lO\
lOOO\
lOlO
>
0
)
;
lOl\
OOOl\
OOl\

=
0
;
lO\
O\
OllllOO
(
lOlO\
Ol\
OllO
,
floa\
t
,
lOlOOOlOlO\

)
;
#ifdef llOlOlOOllOO
llOlOl\
O\
Ol\
lOl\

.
In\
it\
ialise
(
0
,
256
,
256
)
;
#endif //
}
vo\
id
Finalise
(
)
{
llO\
lO\
O\
llO\
lO\
O
(
lOlOOlOllO\

,
float
)
;
lOlOO\
O\
lO\
l\
O
=
0
;
lOlOOOlOOl
=
0
;
#ifdef llOlOlOOllOO
llOlOlOOllOl
.
Cl\
ear\

(
)
;
#endif //
}
fl\
oa\
t
*
llOl\
O\
l\
OO\
ll\
l\
O
(
int
lOOlllO\
llO
)
{
if
(
lOlOOOlOOl
+
lOOlllOllO\

>
lO\
lOO\
OlOl\
O
)
retu\
rn\

0
;
float
*
llOlO\
lO\
Ol\
ll\
l
=
&
lO\
lOO\
lOllO
[
lO\
lOOO\
lO\
Ol
]
;
lO\
lOOOlOOl
+=
lOOlllOllO
;
#ifdef llOlOlOOllOO
llOl\
OlOO\
llOl\

.
lOOOl\
llOOO\

(
llO\
lOlOO\
llll
)
;
#endif //
retu\
rn
ll\
O\
l\
OlOOllll
;
}
#ifdef llOlOlOOllOO
vo\
id
Free
(
fl\
oa\
t
*
lOOl\
llO\
O\
OO
)
{
for
(
int
lO\
O\
OllO\
OOl\

=
0
;
lO\
OOllOOOl
<
llOlO\
lOO\
llO\
l
.
lOOOll\
l\
OOl
(
)
;
lO\
O\
O\
llO\
OOl
++
)
{
if\

(
llO\
l\
O\
l\
OOl\
lOl
[
lOOOllOOOl\

]
==
lOOlllOO\
OO
)
{
ll\
Ol\
Ol\
O\
O\
llOl\

[
lOOO\
llO\
OOl
]
=
0
;
brea\
k
;
}
}
TA\
_ASSER\
T
(
lOOOll\
OOOl\

!=
llOlOlOOllOl
.
lO\
O\
O\
ll\
lO\
Ol
(
)
)
;
}
#endif //
void
Cl\
ea\
r\

(
)
{
lOlOOO\
lOO\
l
=
0
;
#ifdef llOlOlOOllOO
for
(
int\

lOOOllO\
OOl\

=
0
;
lO\
O\
OllOOOl\

<
llOlOlOOllOl
.
lOOOl\
l\
lOOl
(
)
;
lO\
O\
Oll\
O\
OOl
++
)
{
TA_\
A\
SSE\
R\
T\

(
ll\
OlOlOOllO\
l
[
lO\
O\
OllOOOl
]
==
0
)
;
}
llOl\
OlOOllOl
.
Clear
(
)
;
#endif //
}
private
:
in\
t
lOlOOO\
lOlO
;
int
lOl\
OOOlOOl
;
fl\
oat
*
lOlOOlOllO
;
#ifdef llOlOlOOllOO
lOO\
O\
OlO\
llO
<
float\

*
>
ll\
OlO\
lOOllOl
;
#endif //
}
;
st\
ati\
c
int
llOlOlOlOOO\
O\

=
0
;
static
llOlOl\
OOl\
Ol\
l
*
ll\
Ol\
O\
lOlOOOl
=
0
;
cla\
ss
llOlOl\
OlOOlO
{
pub\
lic\

:
llOlOl\
O\
lO\
OlO
(
)
{
lO\
l\
OO\
lOllO\

=
0
;
llO\
lOlOlO\
OO\
O
+=
6
*
6
;
}
~
llOlOlOlOOlO
(
)
{
Fina\
lise
(
)
;
}
void
In\
iti\
alise
(
int
llOlOlOlOOll\

,
int\

llOl\
OlO\
lOlO\
O
)
{
llO\
l\
OlOl\
OlOl
=
llOlOlOlOOl\
l
;
ll\
OlOlOl\
Ol\
lO
=
llO\
l\
Ol\
OlO\
lOO
;
TA_ASSERT
(
ll\
O\
lOlOlOlO\
l\

>=
1
)
;
TA_ASSERT
(
llOlOlOl\
OllO
>=
1
)
;
TA_ASSE\
RT
(
llOlOlOlOl\
Ol
<=
6
)
;
TA_AS\
S\
ERT
(
llOlOlOlOl\
lO
<=
6
)
;
TA\
_A\
SS\
ERT
(
lOl\
OO\
lOllO\

==
0
)
;
TA\
_\
ASSER\
T
(
llO\
lO\
lOlOO\
O\
l\

)
;
lOlOO\
lOllO\

=
ll\
OlO\
lOlOOOl
->
ll\
O\
lOlOOlll\
O\

(
llOlOl\
OlOlOl
*
llOlOlOl\
OllO\

)
;
lOOO\
OOOllO\

(
lOlOOlOll\
O
,
llOl\
OOllOOll
)
;
llOlOlO\
l\
O\
l\
ll
=
fal\
se\

;
}
vo\
id\

Fina\
l\
is\
e\

(
)
{
#ifdef llOlOlOOllOO
if\

(
lO\
lOO\
lOll\
O
)
{
TA\
_A\
S\
SE\
RT
(
llOlOlOlO\
OO\
l
)
;
llOl\
OlOlOOO\
l
->
Free
(
lOlOOlOl\
l\
O
)
;
}
#endif //
lOl\
OOlOllO\

=
0
;
}
boo\
l\

lOOlOOlOO\
Ol
(
)
cons\
t
{
re\
tu\
rn
lOlO\
OlOl\
lO
!=
0
;
}
inline\

float\

&
operato\
r\

(
)
(
int\

lOOOlO\
OOlll
,
int\

lOOOlOO\
lOOO
)
{
re\
tu\
rn
lOlOOlOl\
lO
[
lOOOl\
O\
O\
Olll
*
llOlOlOlOl\
lO
+
lOOOlOO\
lO\
OO
]
;
}
inl\
ine
float
op\
era\
to\
r
(
)
(
int
lOOOlOOO\
l\
ll
,
int
lO\
O\
Ol\
OOlOO\
O
)
const
{
retur\
n
lOl\
O\
O\
lOllO
[
lOOO\
lO\
OOlll
*
ll\
OlO\
lOlOll\
O
+
lO\
OO\
l\
O\
OlOOO\

]
;
}
int
llO\
lO\
lOl\
lO\
O\
O
(
)
cons\
t
{
re\
t\
urn\

llOlOlO\
lOl\
O\
l
;
}
in\
t
llOl\
OlOllOOl
(
)
co\
n\
st
{
ret\
urn
llOlOlOlOll\
O
;
}
void
lOlOllOO\
OO\
O
(
)
{
memset
(
lOl\
OOlOllO
,
0
,
llO\
l\
Ol\
Ol\
OlO\
l\

*
llOlOlOl\
OllO
*
si\
zeo\
f\

(
floa\
t
)
)
;
llOlO\
lOlOlll
=
false
;
}
voi\
d\

llOlOlOl\
lOlO\

(
)
{
TA_ASSERT\

(
ll\
O\
lOlOlOllO
==
llOlO\
l\
O\
l\
OlO\
l
)
;
lO\
lOllO\
O\
OOO
(
)
;
fo\
r\

(
in\
t
lOOO\
l\
lO\
OOl
=
0
;
lOOO\
l\
lOOOl
<
llOlOlOlO\
l\
O\
l\

;
lO\
OOll\
OO\
Ol\

++
)
(
*
this
)
(
lOOOll\
OOOl\

,
lOOOl\
lOOO\
l\

)
=
1.0f
;
llOlOlO\
lOlll\

=
true
;
}
vo\
id
ll\
OlOlOllOl\
l
(
)
{
llOl\
OlOlOll\
l
=
false
;
}
bool
llOlOlOll\
lOO
(
)
cons\
t
{
retu\
rn
llOlOlOlO\
ll\
l
;
}
void
GetI\
nverse
(
llOlO\
lOlOO\
l\
O
&
lOlO\
OllOO\
OO
,
llO\
l\
Ol\
Ol\
O\
O\
lO
&
lO\
ll\
OOO\
llO\
ll
)
{
TA_\
AS\
SERT
(
llOlOlOlOl\
O\
l
==
llO\
l\
OlOlOllO\

)
;
if
(
llOlO\
lOll\
l\
OO
(
)
)
{
lOlOOllOOOO
.
ll\
OlO\
l\
Oll\
OlO
(
)
;
}
else
if
(
llO\
lOl\
OlOlO\
l\

==
3
)
{
Mat33\

lOOO\
O\
OO\
Oll
(
(
*
th\
i\
s
)
(
0
,
0
)
,
(
*
this
)
(
0
,
1
)
,
(
*
this
)
(
0
,
2
)
,
(
*
this
)
(
1
,
0
)
,
(
*
this
)
(
1
,
1
)
,
(
*
this
)
(
1
,
2
)
,
(
*
this
)
(
2
,
0
)
,
(
*
th\
is
)
(
2
,
1
)
,
(
*
th\
i\
s
)
(
2
,
2
)
)
;
lOOO\
OOOO\
ll\

.
Inv\
ert
(
)
;
lOlO\
O\
llO\
OOO
(
0
,
0
)
=
lOOO\
O\
OOOll
.
M11
(
)
;
lOlOOllO\
OO\
O\

(
0
,
1
)
=
lO\
O\
OOOOOll\

.
M1\
2
(
)
;
lOlO\
Oll\
OO\
OO
(
0
,
2
)
=
lO\
OOO\
OOOll\

.
M1\
3\

(
)
;
lOlO\
OllOOOO
(
1
,
0
)
=
lOOOOOO\
Oll
.
M21
(
)
;
lOlOOl\
lO\
OO\
O\

(
1
,
1
)
=
lOOOO\
O\
OOl\
l
.
M2\
2
(
)
;
lOlOO\
llOOOO\

(
1
,
2
)
=
lO\
OO\
OO\
OOll
.
M2\
3
(
)
;
lOl\
OOll\
OOO\
O
(
2
,
0
)
=
lOOO\
OO\
OOl\
l
.
M3\
1
(
)
;
lOlOOllOOO\
O
(
2
,
1
)
=
lOOO\
OOOO\
ll
.
M32
(
)
;
lOlOOl\
lOO\
OO\

(
2
,
2
)
=
lOO\
OOO\
OOll
.
M3\
3
(
)
;
}
else
{
TA_ASSE\
RT\

(
lOlOO\
l\
lOOO\
O\

.
llOlO\
lOllO\
OO
(
)
==
llO\
lO\
lOllOO\
O
(
)
)
;
TA_A\
SSERT
(
lOlOO\
llO\
O\
O\
O\

.
ll\
O\
l\
Ol\
O\
llOOl
(
)
==
llO\
l\
OlO\
llOOl\

(
)
)
;
TA_A\
SSE\
RT\

(
lO\
llOOOl\
lOll
.
llOlOlOll\
OO\
O
(
)
>=
llOl\
OlOllOOO
(
)
)
;
TA_ASSERT\

(
lO\
l\
l\
OOOll\
O\
ll
.
llO\
l\
O\
lOllOOl
(
)
>=
ll\
Ol\
OlOll\
OO\
l
(
)
)
;
TA\
_\
ASSERT
(
lOll\
O\
OO\
l\
lOll
.
llOlO\
l\
OllOOO
(
)
==
lOllO\
OOll\
Oll
.
llOl\
OlOl\
lOOl\

(
)
)
;
int
lOOO\
l\
lOO\
Ol
;
int
lOO\
l\
OOlOlO
;
int
lO\
OlOlOOO\
l
;
for
(
lOO\
OllOO\
O\
l
=
0
;
lO\
O\
OllOO\
O\
l\

<
lOl\
O\
Ol\
lO\
OO\
O
.
llO\
lOlOllO\
Ol
(
)
;
lOO\
Ol\
lOOO\
l
++
)
{
for
(
lOO\
lO\
OlO\
l\
O
=
0
;
lOOlOOlOlO
<
lO\
lOO\
l\
lOOOO
.
llOl\
OlOllOOO
(
)
;
lOOlOO\
l\
OlO\

++
)
lOllOOOllOll\

(
lOOO\
llOO\
Ol
,
lO\
O\
l\
OO\
lO\
lO
)
=
(
*
this
)
(
lO\
OOl\
l\
OO\
Ol
,
lOOlOOl\
OlO\

)
;
}
lOll\
Ol\
OlO\
O\
O\
l\

::
llOlOlOl\
l\
lO\
l\

(
lOl\
OOll\
OOOO\

.
llO\
lOl\
O\
ll\
O\
OO
(
)
,
lO\
l\
lO\
O\
O\
llO\
ll
.
llOlOlOllOOO
(
)
,
&
lOl\
l\
OO\
OllOll\

(
0
,
0
)
)
;
float
llOlOlOl\
lllO\

;
for
(
int
lO\
OOlOO\
lO\
OO
=
0
;
lOO\
Ol\
OOlOOO
<
lOl\
OO\
llOO\
OO\

.
llO\
lOlOll\
OOl\

(
)
;
lOOOl\
OOlOOO
++
)
{
for
(
lOOO\
ll\
OO\
Ol
=
0
;
lOOO\
llOOO\
l
<
lO\
lO\
O\
llOOOO\

.
llOlOlOllO\
OO
(
)
;
lOOOllOOOl
++
)
{
if
(
lOO\
Oll\
OOOl
==
lOO\
OlOOl\
OO\
O
)
lO\
l\
OO\
llOOO\
O
(
lOOOl\
l\
OO\
Ol
,
lOOOlOOlOO\
O
)
=
1.0f
;
else
lO\
l\
OOl\
lOOOO
(
lOOOllO\
OOl\

,
lOOOlOOl\
OO\
O
)
=
0.0f
;
llOlOlOll\
llO
=
lO\
lOOl\
lOO\
OO
(
lOOOll\
OOOl\

,
lOOO\
lOOlO\
O\
O
)
;
fo\
r
(
lO\
OlO\
lOOO\
l
=
0
;
lOO\
lO\
lO\
O\
Ol
<
lO\
O\
OllOOOl
;
lOO\
l\
Ol\
OOO\
l
++
)
llOlOlOl\
lll\
O\

-=
lO\
llOO\
OllOll
(
lOO\
OllOOOl
,
lOOlO\
lOOOl
)
*
lOlOOllO\
OO\
O\

(
lOOl\
O\
lOOOl
,
lOOOlOOl\
OO\
O
)
;
lOl\
OO\
l\
lOO\
O\
O
(
lO\
OOl\
l\
OOOl
,
lOOOlOOl\
OOO
)
=
ll\
Ol\
OlOl\
lllO
;
}
for
(
lOO\
Oll\
OOOl
=
0
;
lOOO\
llO\
O\
Ol
<
lOlO\
OllOO\
OO
.
llOlOl\
O\
llOOO
(
)
;
lOOOllO\
OOl\

++
)
lO\
lOOllO\
OOO
(
lO\
OOllOOOl
,
lOOOlOOlOOO
)
/=
lOllOOOllOll\

(
lO\
O\
OllOO\
O\
l\

,
lOOOllOOOl\

)
;
for
(
lOOO\
ll\
OOOl
=
lOlOOllOOO\
O
.
llOlOlO\
llOOO
(
)
;
--
lOOOl\
lO\
OO\
l
>=
0
;
)
{
llO\
lO\
lOllllO
=
lOlO\
OllO\
OO\
O
(
lOOOllOOOl
,
lOO\
O\
l\
OOlOOO\

)
;
for
(
lO\
OlOlO\
O\
Ol
=
lOO\
Ol\
lOOOl
+
1
;
lOOl\
O\
lOOOl
<
lO\
l\
OOl\
l\
O\
OO\
O\

.
llO\
lOlOllOO\
O
(
)
;
lO\
O\
lOlO\
OO\
l\

++
)
llOlOlO\
l\
ll\
lO
-=
lOl\
lO\
OO\
llOl\
l
(
lOOl\
Ol\
OO\
Ol
,
lOOOllOO\
Ol
)
*
lOl\
O\
O\
l\
lOOO\
O
(
lOOlO\
lOO\
Ol\

,
lOOOlOOlO\
OO
)
;
lOlOO\
llOO\
O\
O
(
lOOO\
llO\
OO\
l
,
lOOOlOOlO\
OO\

)
=
llOlOlOllllO
;
}
}
}
}
llO\
lOlOlO\
O\
l\
O
&
opera\
t\
or\

=
(
const\

ll\
O\
lOlO\
lO\
Ol\
O
&
lOO\
O\
llllllO
)
{
if\

(
!
lOl\
OOlOllO\

)
{
In\
itialise
(
lOOOllllllO
.
ll\
OlOl\
OllOOO
(
)
,
lOO\
Ollllll\
O
.
llOl\
O\
l\
O\
llO\
Ol\

(
)
)
;
}
els\
e
{
TA\
_ASSERT
(
llOlOlOllOOO\

(
)
==
lOOO\
ll\
lll\
l\
O\

.
ll\
OlOlOllOOO
(
)
)
;
TA_\
A\
SSE\
RT
(
llOlOl\
Ol\
lO\
Ol
(
)
==
lO\
OO\
lll\
l\
llO
.
llOlOlOllOOl
(
)
)
;
}
if
(
lOOOlll\
lll\
O\

.
llO\
l\
OlOll\
l\
OO
(
)
)
{
if
(
!
llO\
lOl\
O\
lll\
O\
O
(
)
)
llOlOlOl\
lOlO
(
)
;
retu\
rn
*
this
;
}
for\

(
int
lOOOlOOOlll
=
0
;
lO\
OOlO\
OO\
lll
<
llOl\
O\
lOlOlO\
l
;
lOOOlOO\
Ol\
ll
++
)
{
fo\
r
(
int
lOOO\
lOOlOOO
=
0
;
lOOOl\
OOlOOO\

<
llOl\
O\
lOlO\
llO
;
lOOOlOOl\
OOO\

++
)
(
*
this
)
(
lOOOlOOOlll
,
lO\
O\
O\
l\
OOl\
O\
OO
)
=
lOO\
Olll\
l\
l\
lO
(
lOO\
OlOOOlll
,
lOOOlOOlOO\
O\

)
;
}
llO\
l\
O\
l\
OllO\
ll
(
)
;
re\
turn
*
this\

;
}
pri\
va\
t\
e
:
int\

ll\
Ol\
Ol\
O\
lOlO\
l
;
int
llO\
lOlOlO\
llO
;
bool
llOlOlOlO\
lll\

;
fl\
oat
*
lO\
lO\
O\
lOllO\

;
llO\
lOlO\
l\
O\
OlO
(
co\
nst
llOlOlOlOO\
lO
&
)
;
}
;
class
llOl\
OlOlllll\

{
pu\
blic\

:
ll\
OlO\
lO\
ll\
lll\

(
)
{
lOlOOlOl\
lO
=
0
;
ll\
OlOlOlOOOO
+=
6
;
}
~
ll\
O\
lOlOllll\
l
(
)
{
Fina\
li\
se
(
)
;
}
void
Initia\
lise
(
int
llOl\
OllO\
O\
OO\
O
)
{
llOlOl\
lOOOO\
l
=
ll\
OlOllOO\
OOO
;
TA_ASSERT
(
llOl\
O\
l\
lOOOOl
>=
1
)
;
TA_AS\
S\
ERT
(
llOlOll\
O\
OO\
Ol
<=
6
)
;
TA_ASSERT\

(
lO\
lOOlOl\
lO
==
0
)
;
TA_\
ASS\
ERT
(
llOlOlOlOOOl
)
;
lO\
l\
OOl\
Oll\
O
=
llO\
lOlOl\
OOOl
->
llOl\
O\
lOO\
l\
l\
l\
O
(
llOlOl\
lO\
OOOO
)
;
lO\
O\
OO\
O\
Ol\
lO
(
lOl\
OOlOl\
lO
,
llO\
lOO\
llOOll\

)
;
llOl\
Ol\
l\
O\
OO\
lO
(
)
;
}
void
Fina\
lise
(
)
{
#ifdef llOlOlOOllOO
if
(
lOlOOlOll\
O
)
{
TA_A\
SSERT
(
ll\
OlO\
lO\
l\
OOOl\

)
;
llOlOlO\
l\
OO\
Ol\

->
Free
(
lOlOOlO\
llO
)
;
}
#endif //
lOlOOlOllO
=
0
;
}
bo\
o\
l\

lOOlOO\
lOO\
O\
l
(
)
con\
st\

{
ret\
urn
lO\
lOOlOllO
!=
0
;
}
int
lO\
OOll\
lOO\
l\

(
)
con\
st
{
re\
turn
llO\
lOl\
lOOOO\
l
;
}
vo\
id
lOlOllO\
O\
O\
O\
O
(
)
{
if
(
IsZero
(
)
)
re\
turn
;
for
(
int
lOO\
OllOO\
Ol
=
0
;
lOOOll\
OO\
Ol
<
llOlOllO\
O\
O\
Ol\

;
lOO\
OllOOOl
++
)
lOlOO\
lO\
llO
[
lOOOllOO\
Ol\

]
=
0.0f
;
llOlOl\
lOOOll
=
true
;
}
bool
IsZ\
e\
ro
(
)
con\
st\

{
#ifdef _DEBUG
if\

(
llOlOl\
l\
OO\
Oll
)
{
for
(
int
lO\
OOllOOOl
=
0
;
lO\
O\
Ol\
lOOOl
<
lO\
OOlllOOl
(
)
;
lOOOl\
l\
OOOl
++
)
TA_ASSER\
T\

(
(
*
this
)
(
lOOOl\
lOOOl\

)
==
0.0f
)
;
}
#endif //
ret\
ur\
n
ll\
OlOl\
lOOOll
;
}
voi\
d\

llOl\
O\
llOOOlO
(
)
{
llO\
lOllOO\
Oll\

=
fa\
l\
se
;
}
void\

ll\
OlOllOO\
lOO\

(
)
{
llOlOllOOOll\

=
true
;
}
inl\
ine\

flo\
at
&
ope\
rat\
o\
r
(
)
(
in\
t\

llOlOl\
lO\
Ol\
Ol
)
{
ret\
urn
lOlO\
OlO\
l\
l\
O\

[
llOlO\
llOOlOl
]
;
}
inline
float
op\
erator\

(
)
(
int
llOlO\
ll\
OOlOl\

)
co\
nst
{
return
lOlO\
O\
lOllO
[
ll\
O\
lOl\
lOOlO\
l
]
;
}
ll\
O\
lO\
lOlllll
&
operato\
r
=
(
co\
nst
llOlOlOlllll
&
lO\
OOl\
llll\
l\
O\

)
{
if
(
!
lOl\
O\
OlOll\
O
)
{
Ini\
tialis\
e
(
lOOOllllllO\

.
lOOOll\
lOOl
(
)
)
;
}
els\
e\

{
TA_\
ASS\
ERT
(
lO\
O\
OlllO\
Ol
(
)
==
lOOO\
llllllO
.
lOOOlll\
O\
Ol
(
)
)
;
}
if
(
lOOOllllllO
.
IsZero\

(
)
)
{
lOl\
OllOOOO\
O
(
)
;
ret\
urn
*
thi\
s
;
}
fo\
r
(
int
lOO\
O\
llOOOl
=
0
;
lOO\
OllOOOl
<
llOl\
O\
llOOOOl
;
lOOOl\
l\
OO\
Ol
++
)
(
*
this
)
(
lOO\
OllOOOl
)
=
lOOOlllll\
l\
O
(
lOOOll\
OOO\
l
)
;
llO\
lO\
l\
l\
O\
O\
Ol\
O
(
)
;
retur\
n
*
this\

;
}
priv\
a\
te
:
in\
t
llO\
l\
OllO\
O\
O\
O\
l
;
bo\
ol
llOl\
OllOOO\
ll
;
floa\
t
*
lOl\
OO\
lOllO
;
llO\
lOl\
Olll\
l\
l
(
llO\
lOlOl\
llll\

&
)
;
}
;
}
usi\
ng
na\
mespac\
e
ll\
OlOlO\
OlOlO
;
struc\
t\

lOl\
lOlOlOO\
Ol
::
ll\
OlOllOO\
ll\
O\

{
str\
uc\
t
lO\
Ol\
lOOOO\
O
{
float\

llOlO\
l\
l\
OOll\
l
[
6
]
;
lOOl\
lOO\
O\
OO
*
ll\
OlOllOlOO\
O\

;
lOOllOO\
O\
OO
*
ll\
O\
lOll\
OlOO\
l
;
int
lO\
OOl\
OOOlll\

;
int
lOOOlO\
OlOOO\

;
}
;
lO\
OllO\
OOOO\

*
*
llO\
lOllOlOlO
;
lOO\
ll\
OOOO\
O
*
*
llOlOll\
OlOll
;
lOOll\
OO\
OO\
O
*
*
llOlO\
llOllOO
;
lOOl\
l\
O\
OOOO
*
lOOlO\
OlO\
l\
O\
l
;
int
lO\
OOlOlOOl
;
in\
t
llOOlOl\
l\
O\
l\
Ol
;
int\

llO\
lOlOl\
OlO\
l
;
llO\
lOllOOllO
(
)
;
~
ll\
Ol\
OllOO\
llO
(
)
{
Fina\
li\
se
(
)
;
}
voi\
d
In\
it\
ia\
lise
(
int\

ll\
O\
OOlOlllll
,
int
llOlOllOll\
Ol
)
;
vo\
id
Finalise
(
)
;
void
Cl\
ea\
r
(
)
;
void\

llO\
lOl\
lOl\
llO
(
llOlOl\
lOllll\

*
llOlOlllO\
OOO
,
int\

llOlO\
lllOO\
O\
l\

)
;
floa\
t
llOlOlllOOlO\

(
int
lOOOl\
OOlO\
OO
,
fl\
oat
*
llOl\
O\
lllOO\
ll
)
;
void
ll\
O\
lOl\
ll\
OlOO\

(
float
*
llO\
lOlllOlOl
,
fl\
o\
at
*
llO\
lO\
lll\
OllO
,
int\

lOOlllOllO
)
;
vo\
id
llOlOlllOlll\

(
fl\
oat
*
llOlOlll\
OlOl
,
floa\
t\

*
ll\
OlOlllO\
llO
,
int
lOOlllOl\
lO
)
;
}
;
str\
u\
ct
lOllO\
lO\
l\
O\
OOl\

::
ll\
Ol\
O\
ll\
llOOO
{
st\
ruct\

lOOllO\
OOO\
O
{
llOlO\
lOlOO\
l\
O\

llOlOllllO\
Ol\

;
lOOl\
lOOOOO
*
ll\
O\
lO\
llOlO\
Ol
;
int
lO\
OOlOOl\
OOO\

;
in\
t\

lOO\
OlO\
O\
Olll
;
}
;
stru\
ct
llOlO\
llllO\
lO
;
struct
llOlO\
llllOl\
l
{
ll\
OlOl\
lllOll
*
ll\
O\
lOl\
ll\
l\
lOO
;
llOlOllllOlO\

*
ll\
OlO\
lllll\
O\
l
;
ll\
OlO\
llllOlO\

*
llO\
O\
O\
OO\
lOll
;
in\
t
llOlO\
ll\
lll\
l\
O
;
}
;
st\
r\
uct
ll\
OlOllllO\
lO\

{
int
lOl\
Ol\
lO\
OO\
l
;
int
llOlO\
llll\
lll\

;
in\
t\

llOlOlOlOOll
;
int
llOl\
O\
llllllO
;
lOOllOOOOO
lllO\
OllOlO
;
lOO\
llO\
OOOO
lllOOlll\
lO
;
llOl\
OllllOlO
*
llOlOlllllOO
;
llOlO\
llllO\
ll
*
llOl\
OlllllOl\

;
llOlOllllO\
ll
*
llOO\
OOOlOl\
l
;
voi\
d\

llO\
llOOOOOO\
O\

(
in\
t
lOO\
O\
lOOOll\
l
,
const
Ve\
c3
&
ll\
OOllllOO\

,
cons\
t
Ve\
c3
&
ll\
OllO\
OOO\
O\
Ol
)
{
TA_\
ASSERT
(
lllOOllOlO
.
lO\
OOlO\
OlOOO
>=
0
)
;
TA_A\
S\
SER\
T
(
lll\
O\
Olll\
l\
O
.
lOOOlOOlOOO\

==
-
1
)
;
TA_ASSER\
T\

(
lO\
O\
Ol\
OOO\
lll
>=
0
)
;
TA_ASS\
E\
RT
(
lOOOlOO\
O\
lll
<
ll\
lOOl\
lO\
l\
O
.
llO\
lOllllOO\
l
.
llOl\
OlOllOOO
(
)
)
;
TA_A\
SS\
E\
RT
(
lllOO\
l\
l\
OlO
.
ll\
OlOl\
lll\
OOl
.
llOlOlO\
llO\
O\
l
(
)
==
6
)
;
lllOOllOl\
O
.
ll\
O\
lOllll\
O\
Ol
(
lOO\
OlOO\
Olll
,
0
)
=
ll\
OOlll\
lOO
.
x
;
lllO\
OllOl\
O
.
llOlO\
ll\
llOOl
(
lO\
OO\
lO\
OOl\
ll
,
1
)
=
llOOlll\
l\
O\
O
.
y
;
lll\
OOllOlO
.
llOlOllllOOl
(
lOOOlOOOlll
,
2
)
=
ll\
OOl\
lllOO
.
z
;
lllO\
OllOlO\

.
llOlOl\
lllOOl
(
lOOOlO\
OOlll
,
3
)
=
llOllOOO\
OOOl
.
x
;
lllOOllOl\
O
.
llOl\
Olll\
lOOl
(
lOOOlO\
OO\
lll
,
4
)
=
llOll\
OOO\
OOOl
.
y
;
lllOOllOl\
O
.
ll\
Ol\
Oll\
llOOl
(
lOOOlO\
O\
Ol\
ll
,
5
)
=
llOllOOO\
O\
O\
Ol
.
z
;
}
void
llOl\
lOO\
OOOOO\

(
int\

lOOOlOOO\
lll
,
const
Vec3
&
ll\
l\
lOO\
OO\
O\
l\

,
const\

Vec3
&
llOllOOOOOlO\

,
const
Vec3\

&
lll\
lOOOOlO
,
co\
ns\
t
Vec\
3\

&
ll\
OllOOO\
OOll
)
{
TA_A\
S\
SER\
T
(
lllOO\
llOl\
O
.
lO\
OOlO\
O\
lOOO\

>=
0
)
;
TA_ASSERT
(
lll\
OOll\
llO
.
lOO\
OlO\
OlOOO
>=
0
)
;
TA\
_\
ASSE\
RT
(
lOO\
OlOOOlll
>=
0
)
;
TA_ASSERT\

(
lOOOl\
OOOlll
<
lllOOllOl\
O
.
llOlOl\
lllOOl
.
llO\
lOlOllO\
OO\

(
)
)
;
TA_AS\
SERT\

(
lll\
OO\
l\
l\
OlO
.
llOl\
O\
l\
lllOOl
.
llOlOl\
OllO\
Ol
(
)
==
6
)
;
TA_AS\
SER\
T
(
lO\
OOlO\
OO\
lll
<
lll\
O\
Olll\
lO
.
llO\
l\
Ol\
l\
llO\
Ol
.
llOlO\
lOllO\
OO
(
)
)
;
TA\
_A\
SSER\
T
(
lllOO\
l\
ll\
lO
.
llO\
l\
O\
lll\
lOO\
l
.
llOlOlOll\
OOl\

(
)
==
6
)
;
lllOOll\
O\
lO
.
ll\
Ol\
Ol\
ll\
lOOl
(
lOO\
Ol\
OOO\
lll
,
0
)
=
ll\
llOOOO\
Ol
.
x
;
lll\
O\
OllOlO
.
llOlOllllOOl
(
lOOOlOOOlll
,
1
)
=
llll\
OOOOOl
.
y
;
lllO\
Ol\
lO\
l\
O\

.
ll\
Ol\
Ollll\
O\
Ol
(
lOOOlOOOlll
,
2
)
=
llllOOOOOl
.
z
;
lllOOllOlO
.
ll\
OlOllllOO\
l
(
lOOOlO\
OOl\
l\
l\

,
3
)
=
llOllOOOOOl\
O\

.
x
;
ll\
lOOllO\
l\
O
.
llOlO\
ll\
llOOl\

(
lOOOlOOOl\
ll
,
4
)
=
ll\
OllOOOOOlO
.
y
;
lll\
OOl\
lOlO
.
llOlO\
ll\
ll\
OOl\

(
lOO\
O\
lOO\
O\
lll
,
5
)
=
llOllOOOOOl\
O
.
z
;
ll\
lOOll\
l\
lO
.
llOl\
Ol\
lllOOl
(
lO\
O\
OlOO\
Olll\

,
0
)
=
llllOOOOlO\

.
x
;
lllOO\
ll\
l\
lO
.
ll\
OlOll\
llOOl
(
lOOOlOOO\
ll\
l\

,
1
)
=
llll\
OO\
OO\
lO
.
y
;
lllOOlll\
lO
.
llOlOllll\
OOl
(
lOOOlOOOlll\

,
2
)
=
llllOOOOl\
O
.
z
;
lllOOll\
llO
.
llOl\
OllllOOl
(
lO\
OOlOOOl\
ll
,
3
)
=
llOllOOO\
OO\
l\
l
.
x
;
lllOOllllO\

.
llOl\
Oll\
ll\
O\
Ol
(
lOOOlO\
OOll\
l
,
4
)
=
llOllO\
OO\
OOll
.
y
;
lllO\
O\
l\
lllO\

.
ll\
OlOllllOOl
(
lO\
O\
OlOOOlll\

,
5
)
=
ll\
O\
ll\
OOOO\
Oll\

.
z
;
}
}
;
lOOll\
O\
OOOO\

*
*
llOl\
Oll\
Ol\
Oll
;
lOOllOOO\
O\
O
*
*
llOl\
Ol\
lOl\
l\
OO
;
ll\
O\
lO\
l\
l\
llO\
OO\

(
)
{
}
;
~
llOlOllll\
OO\
O
(
)
{
Fin\
a\
lise
(
)
;
}
vo\
id\

Ini\
t\
i\
alis\
e
(
int
llOOOlO\
llll\
l\

,
in\
t
llOlOllOll\
Ol
)
{
ll\
OllOOO\
Ol\
OO
=
0
;
llOllO\
OOO\
lOl
=
llO\
OO\
lOllll\
l
;
llOllOOOOllO\

=
llO\
lOllOl\
lOl\

;
llO\
OlOl\
lOl\
Ol
=
llOlOllOllOl
;
lOOOllllOO\

(
llOlOllOlOll\

,
lOOll\
OOOOO\

*
,
llOlOllOl\
l\
Ol
)
;
lOOOll\
llOO\

(
llOlOllOllOO
,
lOOl\
lOOOOO
*
,
llOlOllOllOl
)
;
lOOO\
llll\
OO
(
llO\
l\
lOO\
OO\
lll
,
llOlOl\
l\
llOlO
,
llO\
O\
O\
l\
Olllll
)
;
lOOOllllOO
(
llOl\
lOOO\
lOO\
O
,
llO\
lOlll\
lO\
ll
,
llOlOllOl\
lOl\

)
;
memset\

(
ll\
Ol\
OllOl\
Oll
,
0
,
llOl\
lOO\
OOllO
*
siz\
eo\
f\

(
lO\
Ol\
l\
O\
OOOO
*
)
)
;
memse\
t
(
ll\
O\
l\
O\
llO\
llO\
O
,
0
,
llOllOOO\
O\
llO
*
sizeof
(
lO\
Oll\
OOOOO\

*
)
)
;
memset
(
llOl\
lOO\
O\
lOOO
,
0
,
llOll\
OOOOllO
*
sizeof
(
llOlOllllOll
)
)
;
}
voi\
d
Fi\
n\
al\
ise
(
)
{
llOllO\
O\
O\
Ol\
OO
=
0
;
ll\
OllOOO\
OlOl
=
0
;
llOl\
lO\
OO\
Oll\
O
=
0
;
ll\
O\
Ol\
OllOlOl\

=
0
;
llOl\
O\
O\
llOlOO
(
llOlOllO\
lOll
,
lOOllOO\
OOO
*
)
;
llOlOO\
llO\
lOO
(
llOlOllOll\
OO\

,
lOOll\
OOOOO
*
)
;
llOl\
OOll\
O\
lO\
O\

(
llOll\
O\
OOOlll
,
llOlOll\
llOlO
)
;
llOl\
OO\
llOlO\
O\

(
llOllOO\
OlOOO
,
llOlOllllOll
)
;
}
voi\
d
Cle\
ar\

(
)
{
me\
m\
set
(
ll\
OlOllOl\
Oll
,
0
,
ll\
O\
O\
l\
O\
ll\
OlOl
*
siz\
eof
(
lOOllOOO\
O\
O
*
)
)
;
me\
mset
(
llOl\
Ol\
lOll\
OO
,
0
,
llOO\
lOllOlOl
*
siz\
eof
(
lOO\
llO\
OOOO\

*
)
)
;
memse\
t
(
ll\
O\
llOOO\
lOOO
,
0
,
ll\
OOlOllO\
lOl
*
si\
zeof
(
ll\
OlOllllOll\

)
)
;
for
(
in\
t\

ll\
OOO\
OOl\
lllO\

=
0
;
ll\
OOO\
OOlll\
lO
<
llOllOOOO\
lOO
;
llOO\
OOOl\
l\
llO
++
)
{
TA_ASSER\
T
(
llOl\
lO\
OOOl\
l\
l
[
llOOO\
O\
Ol\
ll\
lO\

]
.
lllO\
Oll\
OlO
.
lOOO\
l\
OOlOO\
O
>=
0
)
;
llO\
llOOO\
Olll
[
llO\
O\
OOO\
ll\
l\
lO
]
.
lll\
OOllOlO
.
llOl\
O\
l\
ll\
lO\
O\
l
.
Final\
ise
(
)
;
if
(
ll\
OllOO\
OOlll
[
llOO\
OOOlll\
lO
]
.
ll\
lOO\
lll\
lO
.
lOOO\
lOOlOOO
>=
0
)
llOll\
O\
OOO\
l\
ll
[
llOO\
OO\
Oll\
llO
]
.
ll\
lOO\
l\
lllO
.
llO\
lO\
lll\
lOO\
l
.
Finali\
s\
e
(
)
;
}
llOl\
lOOOOlO\
O
=
0
;
llO\
OlO\
llO\
l\
Ol\

=
0
;
}
int
ll\
OllO\
OOl\
OOl
(
)
con\
s\
t
{
return
llOllOOOOlOO
;
}
int\

lOllOllll\
OO\
O
(
)
co\
nst\

{
return
ll\
OO\
lO\
l\
lOlOl
;
}
vo\
i\
d
llO\
llOOO\
l\
OlO\

(
)
{
llOOlOllOl\
O\
l
++
;
TA_ASSERT
(
llO\
OlOl\
lOl\
Ol
<=
llOllOOOOllO
)
;
}
ll\
OlO\
llll\
OlO\

*
llOl\
lOOOlOll
(
int
lOOOlOO\
l\
ll
)
{
TA_\
ASSERT\

(
lO\
OO\
lO\
Olll
>=
0
)
;
TA_A\
SSERT\

(
lO\
OOlOO\
l\
l\
l
<
llOllOOOO\
l\
OO
)
;
return
&
llOl\
lOOOOl\
ll\

[
lOOOlOOl\
l\
l
]
;
}
llOl\
OllllO\
ll
*
llOllOO\
Ol\
l\
OO\

(
int
lOO\
O\
lOOlll
)
{
TA\
_ASSE\
R\
T
(
lOOOlOO\
lll\

>=
0
)
;
TA_\
ASSE\
R\
T
(
lO\
OOlOOll\
l
<
ll\
OOl\
Oll\
Ol\
Ol
)
;
return
&
llOllOOOl\
OOO
[
lOOOlOOl\
ll
]
;
}
int
llOllOOOllO\
l
(
in\
t
llOl\
Ol\
O\
l\
O\
O\
ll\

,
int\

llO\
llOOOlllO\

,
int
llOll\
OOOllll
,
u3\
2
lO\
l\
Oll\
OOOl
)
{
TA_\
ASSERT
(
ll\
OlOlO\
lOOll
>
0
)
;
TA_\
AS\
SER\
T
(
llOllOOOOlOO
>=
0
)
;
TA_\
A\
S\
S\
ERT
(
llO\
l\
lOO\
O\
Ol\
Ol\

>=
0
)
;
TA_AS\
SERT
(
llOl\
l\
OOO\
lllO
>=
0
)
;
TA\
_\
ASSE\
RT
(
llOllO\
OOl\
llO
<
llOOlOllO\
l\
Ol
)
;
int\

ll\
O\
ll\
OOlOOOO
=
llOllO\
O\
OO\
lOO\

;
llOlOllllOlO
&
llOl\
l\
OOl\
OOOl\

=
ll\
OllOOOOll\
l
[
llOllOOOO\
lOO
++
]
;
llOl\
lO\
Ol\
OO\
Ol
.
lOlOl\
lOO\
Ol\

=
lOl\
O\
ll\
OOOl\

;
llOllOOl\
OOOl
.
ll\
OlOl\
O\
lOOll
=
llOlOlOlO\
Oll
;
llOll\
OO\
lOOOl
.
llOl\
Olll\
llll
=
-
1
;
llOll\
O\
Ol\
OOOl\

.
ll\
Ol\
OllllllO
=
-
1
;
llO\
ll\
OOlOOO\
l\

.
lllO\
OllOlO
.
lOOOlOO\
lOOO
=
llOllOOOlllO
;
llOllOOlOOOl
.
lll\
OO\
llO\
lO
.
lOOOlOOOl\
ll
=
llOllOOlO\
O\
OO
;
llO\
ll\
OOlOOOl\

.
lllOOllOlO
.
llOl\
Ol\
l\
ll\
OOl
.
Init\
i\
a\
lis\
e
(
ll\
O\
lO\
l\
OlO\
Oll
,
6
)
;
if\

(
llOlOllOllOO
[
ll\
OllOOlOOO\
l
.
ll\
lOO\
llOlO
.
lOOOlO\
Ol\
OO\
O
]
)
llOlOllOllO\
O
[
llOllOOl\
O\
OO\
l
.
ll\
lOOllOl\
O
.
lOOO\
l\
OOlOO\
O
]
->
llOlOll\
Ol\
O\
O\
l\

=
&
llO\
ll\
OOlOO\
Ol
.
lllOOl\
l\
OlO
;
llOlOl\
lOl\
lOO
[
llOllOOlO\
O\
O\
l\

.
lllOOllOlO
.
lOOO\
l\
O\
O\
l\
O\
OO
]
=
&
llO\
l\
l\
O\
OlOO\
Ol
.
ll\
lOO\
llO\
l\
O
;
if\

(
!
llOlOll\
OlOll
[
ll\
O\
llO\
O\
lOOOl
.
lll\
OOl\
l\
OlO
.
lOOO\
l\
O\
OlO\
OO
]
)
llOlO\
l\
lO\
lO\
l\
l
[
llOl\
lOO\
lOOO\
l
.
lllO\
O\
ll\
OlO
.
lO\
O\
OlOOlOOO
]
=
&
llOllO\
O\
lOOO\
l\

.
lllOO\
ll\
Ol\
O
;
llOll\
O\
OlOOOl
.
lllOOl\
lOlO
.
llOlOllO\
lOO\
l\

=
0
;
llO\
llOOlOOO\
l
.
ll\
OlOl\
llllO\
O
=
0
;
llOllO\
OlO\
OOl
.
llOlOlllll\
O\
l
=
0
;
llOllOO\
lOOOl\

.
llOOOOOlOll
=
0
;
llO\
ll\
O\
O\
lOOOl
.
lll\
OOl\
ll\
lO
.
lOO\
O\
lOOl\
OOO
=
llO\
ll\
OOOlll\
l
;
llOl\
l\
OOl\
OO\
O\
l
.
lll\
O\
Ol\
lllO\

.
lOOOlOOO\
l\
ll
=
llO\
llO\
OlOOO\
O
;
if\

(
ll\
Ol\
lO\
O\
Ollll
>=
0
)
{
TA_ASSERT
(
llOl\
lOOOllll
<
ll\
O\
OlOllOlOl
)
;
ll\
O\
ll\
OO\
lOOO\
l
.
lllOOllllO\

.
llOlO\
llllO\
Ol\

.
Initial\
i\
se
(
llO\
l\
O\
lOlOOl\
l
,
6
)
;
if
(
llOlOllOl\
lOO
[
llO\
l\
lO\
OlO\
OOl
.
lll\
OO\
llllO
.
lO\
OOl\
OOlOO\
O
]
)
llOl\
Oll\
OllOO
[
llOllOOlOOO\
l
.
lllO\
Oll\
ll\
O\

.
lOOOlOO\
lOO\
O\

]
->
llOlO\
ll\
O\
lOOl
=
&
llOllOO\
l\
O\
OOl\

.
lllOOllllO
;
llOlO\
ll\
OllOO\

[
llOllOO\
lOOOl
.
lllOOl\
lllO\

.
lOOOlOO\
l\
OOO
]
=
&
llOllOOlOOOl
.
lllOO\
lll\
lO
;
if\

(
!
ll\
OlOllO\
lOll\

[
llO\
llOOl\
OOOl\

.
ll\
lOO\
l\
lllO
.
lOO\
Ol\
OOlOOO
]
)
llOlOllOlOll\

[
llO\
l\
lOOl\
O\
OOl\

.
ll\
l\
OO\
llllO\

.
lOOOlOOlOOO\

]
=
&
llOllOOlO\
O\
O\
l
.
lllO\
O\
llllO
;
llOllOOlOOOl
.
lllO\
O\
lll\
lO
.
llOlOl\
l\
O\
lOOl
=
0
;
llOllO\
Ol\
O\
OO\
l
.
ll\
OlOlllllO\
O\

=
0
;
llOl\
lOO\
lO\
OOl\

.
llOl\
O\
llll\
lOl
=
0
;
ll\
OllO\
OlOOOl
.
llOO\
O\
OOlOll
=
0
;
}
retu\
rn\

ll\
Ol\
l\
OOlOO\
O\
O
;
}
voi\
d
lOOO\
llO\
lOl\

(
)
{
for\

(
int\

llOOOOOllllO
=
0
;
llOO\
OOO\
llll\
O
<
llO\
llO\
O\
OOlOO
;
llOO\
O\
OOl\
lllO
++
)
ll\
OllOOl\
OOlO
(
llOOO\
OOll\
llO
,
0
)
;
}
voi\
d
llOllOOlOO\
l\
l\

(
llOlO\
lll\
lOl\
O
&
llOllOOl\
OOOl\

)
{
llOll\
OO\
l\
OOO\
l
.
lOlOl\
l\
OOOl\

&=
~
llO\
l\
lOOlOl\
OO
;
if
(
ll\
Ol\
lO\
O\
lO\
OO\
l
.
llOOOOOlOll
)
{
llOll\
OOlO\
OO\
l
.
llOOO\
OOlOl\
l
->
ll\
OlOl\
l\
ll\
lOl
=
llOll\
OOlOO\
Ol
.
llOl\
Ol\
l\
lllOO\

;
llOll\
OOl\
OO\
Ol
.
llOlOl\
ll\
llOO
=
0
;
llOll\
O\
OlO\
OO\
l
.
ll\
OO\
OOOl\
Oll\

=
0
;
for
(
llO\
lOl\
lll\
Ol\
l\

*
llOO\
OOOllOO
=
llOllOO\
lO\
OOl\

.
llOl\
Ol\
llllOl\

;
llOOO\
OOll\
OO
;
)
{
llOlOllllOll
*
lOO\
OOOOllll
=
llOOOOO\
llOO
->
llOlO\
llll\
lOO
;
llOOOO\
Ol\
lOO
->
ll\
OlOll\
lllOO
=
0
;
llO\
OOOOllOO
->
llOOO\
O\
OlOll
=
0
;
ll\
OO\
OOOllOO
=
lOOOOOOllll
;
}
}
}
void
ll\
OllOO\
lOOl\
O\

(
int
llOOO\
OO\
l\
ll\
l\
O
,
llOlOll\
llO\
ll
*
ll\
OOO\
OOlOl\
l
)
{
TA_\
A\
S\
SERT
(
llOOOO\
Olll\
lO
>=
0
)
;
TA_AS\
SERT\

(
llOOOO\
O\
ll\
llO
<
llOl\
lOOOOlOO
)
;
llOl\
Olll\
l\
OlO
&
llOllOO\
lOOO\
l
=
llO\
llO\
OOOlll
[
llOO\
O\
OOllllO
]
;
if\

(
llOllO\
O\
l\
OOO\
l\

.
lO\
lOllOOOl
&
llO\
llOOl\
OlOl\

)
{
if
(
llO\
llOOlOOOl
.
llOOOOOl\
Oll
)
{
TA_\
AS\
S\
E\
RT
(
llO\
llOOlOO\
Ol
.
lOl\
OllOO\
Ol
&
llOllO\
O\
l\
OlOO
)
;
TA_ASSERT\

(
!
llOO\
OOOl\
Ol\
l
||
llO\
O\
O\
OOl\
Oll
->
llOOOOOl\
Oll
==
&
llOllO\
O\
l\
OOO\
l\

)
;
}
return
;
}
if\

(
llOl\
lOO\
lOO\
O\
l
.
lOlOllOOO\
l
&
ll\
OOO\
OOl\
ll\
OO\

)
llO\
llOOlOOOl
.
lOlO\
llOOOl\

|=
llOll\
OOlOl\
OO
;
else\

return
;
TA_A\
S\
SERT
(
llOl\
lO\
OlO\
OOl\

.
llOO\
OOO\
lOll
==
0
)
;
ll\
Oll\
OOlOOO\
l
.
llOOOOOl\
Ol\
l\

=
ll\
OOO\
O\
OlO\
ll
;
llOll\
OOlO\
OOl
.
lOlO\
l\
lOO\
Ol
|=
ll\
Ol\
lOOl\
OlO\
l
;
TA_AS\
SERT\

(
ll\
OllOOlOOOl
.
lOl\
OllOO\
Ol
&
llOllOOlOl\
OO\

)
;
TA_\
AS\
SERT
(
llOl\
lOOl\
OOO\
l
.
ll\
Ol\
Oll\
lllOO
==
0
)
;
if
(
ll\
OOOOO\
l\
Oll
)
{
llO\
l\
lO\
OlOOOl
.
llOlOlll\
llOO
=
llOOOOO\
lOll
->
ll\
OlOlllllOl\

;
ll\
O\
OOOOl\
Oll
->
llOlO\
lllllOl
=
&
llOl\
l\
OOlOOO\
l
;
}
llOlOllllOll
&
lllO\
ll\
Oll\
OO
=
llO\
llO\
OOlOOO
[
llO\
llOOlO\
OOl
.
lllO\
Ol\
lOlO
.
lOOO\
lOOlOOO\

]
;
ll\
O\
lOllllOll
&
lll\
OllOl\
l\
O\
l
=
ll\
Oll\
OO\
O\
lOOO
[
llOl\
lOO\
lOOOl
.
lllOO\
l\
lllO
.
lO\
OO\
lOOlOOO\

]
;
if
(
llOOOOOl\
Oll
==
0
)
{
if
(
lllO\
l\
l\
O\
l\
lOO
.
llOOOO\
O\
lOll
||
ll\
l\
Ol\
lOllOl\

.
llO\
OO\
O\
OlOll\

)
{
llO\
llOO\
lO\
Oll
(
llOllOOl\
O\
OOl
)
;
return
;
}
lllO\
llOll\
OO
.
llOOOOOl\
Ol\
l
=
&
ll\
OllOO\
lO\
OOl
;
lllOll\
O\
llOl\

.
ll\
O\
OO\
OOlOll
=
&
llOl\
l\
OOlOOOl
;
llOll\
O\
O\
l\
OllO
(
ll\
OllOO\
l\
O\
OO\
l
.
ll\
lOOl\
lO\
l\
O
.
lOOOlOOlOOO
,
&
llOllO\
OlOOOl
)
;
llOl\
lO\
OlOllO
(
llOllOO\
lO\
OOl
.
lllOOl\
l\
llO
.
lOOO\
lOO\
l\
O\
O\
O
,
&
ll\
O\
l\
l\
O\
Ol\
OOO\
l
)
;
}
else
if
(
&
lll\
Oll\
Oll\
OO
==
llO\
O\
OOO\
lO\
l\
l
)
{
if\

(
lll\
OllO\
llOl
.
llOOOO\
OlOl\
l
)
{
llOll\
OO\
lOOll
(
ll\
Ol\
lO\
OlO\
OOl
)
;
TA_A\
S\
SERT
(
llO\
llOOlOO\
Ol
.
ll\
OOOOOlOll\

==
0
)
;
ret\
ur\
n
;
}
TA_AS\
SERT
(
lll\
OllO\
llOl
.
ll\
OO\
O\
OOlOl\
l
==
0
)
;
lllOllOllOl\

.
ll\
OO\
O\
OOl\
Oll
=
&
ll\
OllOOl\
OO\
Ol\

;
llOllOO\
l\
OllO
(
llOllO\
OlOOOl
.
lllOOllll\
O
.
lO\
OOlOO\
lOOO
,
&
llOl\
lO\
Ol\
OOOl
)
;
}
else
if\

(
&
ll\
lO\
llOllO\
l
==
llOOOOOlOll
)
{
if
(
ll\
lOll\
OllOO
.
ll\
OOO\
OOlOll
)
{
llOll\
O\
O\
lO\
Ol\
l
(
llOllOOlOOO\
l
)
;
TA\
_\
ASSERT
(
ll\
OllOO\
lOOOl\

.
llO\
O\
OOOl\
Oll
==
0
)
;
return\

;
}
TA_AS\
S\
ERT\

(
lll\
OllOllOO
.
llOOOO\
OlOll
==
0
)
;
lllOllOll\
OO
.
llO\
OOO\
OlOll
=
&
ll\
OllOO\
lOO\
O\
l
;
llO\
l\
lOOlO\
llO\

(
llO\
llOOlOOOl
.
lllOOl\
lOlO
.
lOOOl\
OOl\
OOO\

,
&
llOllO\
O\
l\
OOOl
)
;
}
el\
se
{
ll\
l\
OOOl\
ll\
l
(
0
)
;
}
}
vo\
i\
d
llOll\
OOlOllO
(
int
llOOO\
OOlOlll
,
ll\
O\
lOlll\
lOl\
O\

*
llOOOOOlOll
)
{
ll\
OlO\
ll\
llO\
ll
*
llOO\
OOl\
Ol\
lO
=
&
llOl\
lOOOlOOO
[
llOOOO\
OlO\
l\
ll
]
;
TA_ASSERT\

(
ll\
OOOOlOllO\

->
llOOOO\
OlO\
ll
!=
0
)
;
TA_ASSE\
RT\

(
llOOOOl\
OllO
->
llOl\
Oll\
lll\
OO
==
0
)
;
if\

(
llO\
O\
OOOlO\
l\
l
)
{
ll\
OO\
OOlO\
llO
->
llOlOl\
l\
lllOO
=
llOOOOOlOll
->
llOlOlllllOl
;
ll\
OOOO\
OlOll
->
llOlOllll\
lO\
l
=
llO\
OOO\
lOllO
;
}
fo\
r\

(
lOO\
ll\
OOOOO
*
lOOlll\
OOO\
l
=
llOlO\
l\
lO\
lOll
[
llOO\
OO\
O\
l\
Olll
]
;
lO\
Olll\
OOOl
;
lO\
Oll\
lOOO\
l\

=
lO\
O\
ll\
lOOOl
->
llOlOllO\
lOOl
)
llO\
llO\
O\
lOOlO\

(
lOO\
ll\
l\
OOO\
l
->
lOOO\
l\
OOOll\
l
,
ll\
O\
OOOl\
OllO
)
;
}
private\

:
llOl\
Ol\
lllOlO
*
llOl\
lOOOOll\
l
;
llO\
lOl\
ll\
lO\
l\
l\

*
llO\
llO\
OO\
lOO\
O
;
int\

llOl\
lOOOO\
lOO
;
int
llO\
ll\
OO\
O\
Ol\
Ol
;
in\
t
llOO\
lO\
llO\
lOl
;
int\

llOllOOOOllO
;
}
;
st\
ruct
lO\
llOlO\
l\
OOOl
::
ll\
OllOO\
lO\
lll
::
llOOOOOO\
ll\
O
{
bool\

ll\
Ol\
l\
OOll\
OOO
;
bo\
ol\

llOllOO\
l\
l\
OO\
l\

;
bool\

llO\
l\
l\
O\
Ol\
l\
Ol\
O
;
in\
t\

lO\
OO\
lOO\
lll\

;
ll\
OlO\
lO\
lOOlO
llOllO\
O\
l\
lO\
ll
;
llOlOl\
Ol\
O\
OlO\

llOll\
OOl\
llO\
O
;
llOlO\
lOlOOlO
llOllOOll\
l\
Ol\

;
llOl\
O\
lOlllll
x
;
llOO\
OOOO\
llO\

*
llOlOlll\
l\
lOl\

;
llO\
OO\
O\
OOllO\

*
llOlOlllllOO
;
llOOOOOOllO\

*
llOOOOOlOl\
l\

;
}
;
struct
lOllOlOlO\
O\
Ol\

::
llOll\
OOl\
l\
llO\

{
int\

lOOOlOOlOOO
;
ll\
OlO\
lOlO\
O\
lO\

llOlOll\
llOO\
l
;
}
;
lOllOl\
OlO\
OOl
::
ll\
OlOl\
lO\
O\
llO\

::
llOlOll\
OOll\
O
(
)
{
llO\
lOllOl\
OlO
=
0
;
ll\
Ol\
Ol\
l\
OlOl\
l
=
0
;
llOlO\
ll\
O\
llOO
=
0
;
lOOlOO\
lOlOl
=
0
;
lOO\
OlOl\
OO\
l
=
0
;
}
vo\
id
lOll\
Ol\
OlOOOl
::
ll\
Ol\
OllOO\
llO\

::
In\
it\
i\
ali\
se
(
int
llOOOlOlllll
,
int
ll\
OlO\
l\
lOll\
O\
l
)
{
TA_A\
SS\
ERT\

(
llOlOl\
lO\
lO\
lO\

==
0
)
;
lOO\
OllllO\
O
(
llOlOll\
Ol\
OlO\

,
ll\
O\
lOll\
OOll\
O
::
lO\
O\
ll\
OOO\
OO
*
,
llOOOl\
O\
lllll
)
;
TA_ASSERT\

(
ll\
Ol\
OllOlOll\

==
0
)
;
lOOOl\
l\
ll\
OO
(
llOlOl\
lO\
lOl\
l
,
llOl\
Oll\
OO\
llO
::
lOOllOOOOO
*
,
llOlOllOllOl
)
;
TA_ASSERT
(
ll\
OlOl\
lOllOO\

==
0
)
;
lOOOlll\
l\
O\
O
(
ll\
OlOl\
l\
OllOO
,
llO\
lOllOOllO
::
lO\
OllO\
OOOO
*
,
llOlOllOll\
O\
l
)
;
memset
(
llOl\
O\
ll\
OlOll
,
0
,
llOlO\
llOllOl
*
sizeo\
f
(
llO\
lO\
llOO\
l\
lO
::
lO\
O\
ll\
OOOOO\

*
)
)
;
me\
m\
set
(
llOlOllO\
ll\
OO
,
0
,
llOlOll\
Ol\
lOl
*
size\
of
(
llOlO\
ll\
OOll\
O
::
lO\
OllOO\
O\
O\
O
*
)
)
;
TA_ASSERT
(
lOO\
lOO\
lOlOl
==
0
)
;
lOO\
OllllOO
(
lOO\
lO\
OlOlOl\

,
lOOllO\
O\
O\
O\
O
,
llO\
OOlOl\
llll
*
2
)
;
lOOO\
l\
OlOOl
=
0
;
llO\
Ol\
Ol\
lOl\
Ol
=
0
;
llO\
l\
OlOl\
OlOl
=
0
;
}
void
lO\
l\
lO\
lOlOOO\
l
::
llOlOll\
O\
OllO
::
Fin\
al\
ise
(
)
{
ll\
OlOOllOl\
OO
(
llOlOl\
lO\
lOlO\

,
lOOllOO\
OOO
*
)
;
llOlOOll\
OlOO
(
llOl\
Ol\
lOlOll
,
lOOl\
lO\
OOOO
*
)
;
llO\
lO\
Ol\
lOl\
OO
(
llOl\
Ol\
lOllOO\

,
lOOll\
O\
OOOO
*
)
;
llOl\
OOl\
lO\
l\
O\
O\

(
lOOlOOl\
O\
lOl
,
lOOllOO\
OOO
)
;
lO\
O\
OlOlOOl
=
0
;
llOOlOllOlO\
l\

=
0
;
llOl\
Ol\
OlOlOl
=
0
;
}
void
lOllOlOlOOO\
l
::
llOl\
Ol\
lO\
Ol\
lO\

::
Clear
(
)
{
TA_ASSERT
(
llOl\
Oll\
OlOll\

)
;
TA_\
AS\
SE\
RT
(
llOlOll\
Ol\
lO\
O\

)
;
lOOO\
lO\
l\
OOl
=
0
;
me\
mse\
t
(
llOlO\
llOlOll
,
0
,
llOOlOllOlOl\

*
sizeof
(
ll\
Ol\
OllOOllO
::
lOO\
l\
l\
OO\
OOO\

*
)
)
;
memse\
t
(
llO\
l\
O\
l\
lOl\
l\
O\
O
,
0
,
llOOlOl\
l\
Ol\
Ol
*
sizeo\
f
(
llOlOll\
OOl\
lO
::
lOO\
llOOOOO
*
)
)
;
llOO\
lOllOlOl\

=
0
;
llO\
lOl\
Ol\
OlO\
l\

=
0
;
}
void\

lO\
llOlOlOOOl
::
llOlOl\
lO\
OllO\

::
ll\
Ol\
Oll\
Olll\
O
(
llOlOllOll\
ll\

*
ll\
OlOll\
l\
OO\
OO
,
in\
t\

llO\
l\
OlllOOOl\

)
{
ll\
O\
Ol\
OllOlOl
=
llOl\
O\
lllOO\
O\
l
;
fo\
r
(
int
lOOOl\
OOOlll
=
0
;
lO\
O\
O\
lOO\
Ol\
ll
<
llOl\
Ol\
OlOlOl\

;
lOOOl\
OOO\
ll\
l
++
)
{
llOlOllO\
OllO
::
lOOll\
OOOOO
*
lOOll\
lOOOl
=
ll\
OlOl\
lOl\
OlO
[
lOOOl\
O\
O\
Ol\
ll
]
;
for\

(
;
lOOlllOO\
Ol\

;
lOO\
ll\
l\
OO\
O\
l
=
lOO\
lll\
OOOl\

->
llO\
lOl\
lOl\
O\
OO\

)
{
const
llOl\
OllOl\
ll\
l
&
llOll\
OOlll\
ll
=
llOlOlllOOOO
[
lOOl\
l\
lO\
OO\
l\

->
lOOOlOOlOOO
]
;
lO\
O\
l\
llOO\
O\
l
->
llOlOllOO\
lll
[
0
]
*=
ll\
Ol\
l\
OOlll\
ll
.
lOOOlllO\
lOOO\

;
lO\
Ol\
ll\
OOOl
->
llO\
lOl\
lOO\
lll
[
1
]
*=
ll\
OllOOlll\
l\
l
.
lOOOlllOlO\
OO
;
lO\
Ol\
llO\
OOl
->
llO\
l\
O\
llOO\
ll\
l\

[
2
]
*=
llO\
llO\
Oll\
l\
l\
l
.
lOOOlllOlO\
OO
;
lOOl\
ll\
OOO\
l
->
llO\
lOllOOlll
[
3
]
=
lO\
Oll\
l\
O\
OOl\

->
llO\
lOllOO\
l\
l\
l
[
3
]
*
llOl\
l\
O\
Ol\
lll\
l\

.
llOllOlOOO\
O\
O\

[
0
]
+
lOOlll\
OO\
O\
l\

->
ll\
OlOllO\
O\
lll
[
4
]
*
llOllOOlll\
ll
.
llOl\
l\
OlOOOOl
[
0
]
+
lOO\
lllO\
OO\
l
->
llO\
l\
OllOOl\
ll\

[
5
]
*
llOl\
l\
OOll\
lll
.
llO\
llO\
l\
O\
O\
OlO\

[
0
]
;
lO\
O\
lllOO\
Ol
->
llO\
lOl\
lOO\
lll
[
4
]
=
lOOlllOOOl
->
ll\
OlOll\
O\
Olll
[
4
]
*
llO\
l\
lOOl\
llll\

.
llO\
ll\
Ol\
OOO\
Ol
[
1
]
+
lOOll\
lOOOl
->
llOl\
Ol\
l\
OO\
lll
[
5
]
*
ll\
OllO\
Oll\
l\
l\
l
.
llOllOl\
O\
O\
OlO
[
1
]
;
lO\
O\
l\
llOO\
Ol
->
llO\
l\
OllOO\
lll
[
5
]
=
lOOlll\
OO\
Ol
->
llOl\
O\
l\
l\
OOlll\

[
5
]
*
llOl\
l\
OOl\
llll
.
ll\
O\
l\
lOlOOOlO
[
2
]
;
}
}
}
flo\
at
lO\
llOlOl\
OOOl
::
ll\
OlOllOO\
llO\

::
llO\
lOll\
lOOl\
O
(
in\
t
lO\
OOlO\
OO\
ll\
l
,
float\

*
ll\
OlO\
lll\
O\
Oll
)
{
TA_ASSERT
(
llOlOlllOOll\

)
;
float
lO\
lOl\
l\
llOO\
O
=
0.0f
;
lOOllO\
OOOO
*
lOOl\
llO\
O\
Ol
=
llO\
lOl\
lOlO\
lO
[
lOO\
OlO\
OOlll
]
;
for
(
;
lOO\
ll\
lOOOl
;
lOOl\
l\
lOOOl\

=
lOOlllO\
OOl\

->
ll\
Ol\
O\
l\
lOlO\
O\
O
)
{
int\

lO\
OOlOO\
lO\
O\
O
=
lO\
Oll\
lOOOl
->
lOO\
OlO\
OlO\
O\
O
*
6
;
lOlO\
l\
lllOO\
O
+=
llOlOlllOOll
[
lOOOl\
OOlOOO
+
0
]
*
lOO\
lllOOOl
->
llOlOllOO\
l\
ll\

[
0
]
;
lOlO\
l\
lllOO\
O
+=
llOlOlllO\
Oll\

[
lOO\
OlOO\
lOOO\

+
1
]
*
lOOl\
llOOOl
->
llOlOl\
l\
O\
Olll\

[
1
]
;
lOlO\
lll\
lOOO\

+=
llOlOll\
lOOl\
l
[
lO\
OOlOO\
lOO\
O\

+
2
]
*
lOOll\
lOO\
Ol\

->
ll\
Ol\
OllOOlll\

[
2
]
;
lOlOllllO\
OO
+=
llO\
lOlll\
OOl\
l
[
lOOOlOOlOO\
O
+
3
]
*
lOOll\
l\
OOO\
l
->
llO\
lOllOOll\
l
[
3
]
;
lOl\
O\
llll\
OOO\

+=
ll\
Ol\
OlllOOll
[
lOOOlOOlOOO
+
4
]
*
lOOlllOO\
O\
l
->
llOl\
O\
l\
l\
OOl\
l\
l
[
4
]
;
lOlOll\
llOO\
O
+=
llOlO\
l\
llO\
Oll
[
lOOOlO\
OlOOO
+
5
]
*
lOO\
l\
l\
l\
OOOl
->
ll\
OlOllOOlll
[
5
]
;
}
return
lO\
lOllllOO\
O
;
}
lOll\
O\
lOlO\
OO\
l
::
ll\
OllOOlOll\
l\

::
llOllOOlOlll\

(
)
{
llOllOl\
OOOll
=
0
;
llOl\
lO\
lOOl\
OO
=
0
;
llO\
l\
lOl\
OOlOl
=
0
;
llO\
llOlO\
Ol\
lO
=
0
;
ll\
O\
l\
lOlOOl\
ll
=
0
;
llO\
ll\
OlO\
lO\
O\
O\

=
0
;
llO\
l\
lO\
lOlO\
Ol
=
0
;
llOl\
lOlO\
lOlO
=
0
;
llO\
llOlOlO\
l\
l
=
0
;
llOllOlOl\
lOO
=
0
;
llOllO\
lO\
llOl
=
0
;
llOllOl\
OlllO
=
0
;
llO\
llO\
O\
OOl\
O\
l
=
0
;
ll\
OllOOOOlOO\

=
0
;
llO\
ll\
Ol\
Oll\
l\
l
=
0
;
}
void
lOl\
lOlOlOOOl
::
ll\
OllOOl\
O\
l\
l\
l\

::
Initial\
ise
(
int
llO\
OOl\
Oll\
lll\

,
int
ll\
O\
lOllOllOl
)
{
ll\
O\
llOl\
OOl\
ll
=
0
;
ll\
Oll\
Ol\
OO\
l\
lO
=
ll\
O\
OOlOlllll
+
ll\
O\
lOl\
l\
O\
llOl
*
6
;
lOOOll\
llOO\

(
llO\
llO\
l\
O\
OOll
,
float
,
ll\
Oll\
OlOOll\
O
)
;
lO\
O\
O\
lll\
lO\
O
(
llO\
l\
lOlOOlOO
,
float
,
llOllOlO\
O\
llO
)
;
lOOOllllO\
O\

(
llOllO\
l\
OOl\
Ol
,
float
,
llOll\
OlOOll\
O
)
;
llOll\
O\
lOlOOO
=
ll\
O\
llOl\
OOll\
O\

;
lOO\
Ollll\
OO
(
llOll\
OlOlOOl\

,
ll\
O\
OOO\
O\
Oll\
O
,
llOl\
lOl\
OlOO\
O
)
;
lOOOlll\
lO\
O\

(
llOll\
OlO\
lO\
lO\

,
llO\
O\
OOO\
Ol\
lO
*
,
llOllOl\
OlOO\
O
)
;
lOOOll\
ll\
OO\

(
ll\
O\
l\
lO\
lOlOll
,
llO\
OOOO\
Ol\
lO\

*
,
llOll\
O\
lOlOOO
)
;
lOOOO\
O\
llO\
O\
O
(
llO\
llOlOll\
Ol
,
ll\
O\
l\
OlO\
llll\
l
)
;
lOOOOO\
llOOO
(
ll\
Ol\
lOl\
Olll\
O
,
llOl\
OlO\
l\
O\
OlO
)
;
llO\
l\
lO\
lO\
llOO
=
0
;
llOllOO\
O\
OlOl
=
llOO\
OlOlllll
;
llOl\
lOOOOl\
OO
=
0
;
TA_ASSE\
RT
(
ll\
OllOlOll\
ll\

==
0
)
;
lOOO\
l\
lllO\
O
(
llO\
llO\
lO\
l\
l\
l\
l\

,
llOllOOll\
llO
,
ll\
OOOlOll\
lll\

*
2
)
;
}
void
lOl\
lOlOlOO\
O\
l\

::
llOllOO\
l\
Ol\
l\
l
::
Fin\
alise
(
)
{
llO\
lOOllOl\
OO
(
llOl\
l\
OlOOOll
,
float
)
;
llOl\
OOl\
lO\
l\
O\
O
(
ll\
Oll\
OlOOl\
OO
,
fl\
o\
at
)
;
llOl\
O\
O\
llOlO\
O\

(
llOllOlO\
OlOl\

,
floa\
t
)
;
llO\
ll\
Ol\
O\
OllO
=
0
;
llOl\
lO\
lOOll\
l
=
0
;
ll\
Oll\
Ol\
OlOO\
O
=
0
;
llOlOOllO\
l\
OO\

(
llO\
ll\
OlO\
l\
O\
Ol
,
llO\
OOOOOllO
)
;
ll\
Ol\
OOllOl\
OO
(
llOll\
OlOlOlO
,
llOO\
OO\
O\
OllO
*
)
;
llOlOOl\
lOlO\
O
(
llO\
ll\
O\
l\
OlOll\

,
llOOOOOO\
l\
lO\

*
)
;
ll\
OllO\
lO\
llOO
=
0
;
llO\
lOOllOlO\
l
(
llOllOlO\
ll\
Ol
,
llOlOlO\
lllll\

)
;
llOlOOllO\
lOl
(
llO\
ll\
OlOlllO\

,
ll\
OlOlO\
l\
O\
O\
lO
)
;
llOllOOO\
OlOl\

=
0
;
llOllOOOO\
lO\
O
=
0
;
ll\
Ol\
OOllOlOO\

(
llOllOlOl\
ll\
l\

,
ll\
O\
ll\
OO\
l\
l\
llO\

)
;
}
voi\
d
lOllOlOlO\
OOl
::
llOllOOlO\
l\
ll\

::
Clea\
r
(
)
{
llOllOlOOlll
=
0
;
llOll\
Oll\
O\
OOO
=
0
;
llOOlOllOlOl
=
0
;
TA\
_A\
SSERT
(
ll\
O\
lOl\
O\
l\
OOO\
l
)
;
llOl\
l\
O\
lOll\
Ol
->
Fi\
n\
alise
(
)
;
ll\
OllOlOll\
lO
->
Fin\
a\
l\
is\
e
(
)
;
for
(
in\
t\

llOOOO\
lOOlO\

=
0
;
llOOOOl\
O\
Ol\
O\

<
llOll\
OlO\
l\
lOO\

;
llOOOOlOOlO\

++
)
{
llOO\
OO\
OOllO\

&
llO\
O\
OO\
OO\
OOO
=
llOl\
lOlO\
lO\
O\
l
[
llOOO\
O\
lOO\
l\
O\

]
;
llO\
OOOO\
OOO\
O
.
llOl\
lOOllOll
.
Finalise
(
)
;
llOO\
OOOOO\
O\
O
.
llOllOOlllO\
O
.
Fina\
lise
(
)
;
ll\
OOO\
O\
OOO\
OO\

.
llOll\
OO\
lllO\
l
.
Finali\
se\

(
)
;
llOO\
OOO\
OO\
OO
.
x
.
Finali\
se\

(
)
;
}
ll\
OllOl\
Ol\
lO\
O
=
0
;
for
(
in\
t
llOllOl\
lO\
OO\
l
=
0
;
llOll\
O\
l\
l\
OOOl
<
llOllOOOOl\
OO\

*
2
;
llOl\
lOllOO\
Ol
++
)
llOllOl\
Oll\
ll
[
llOl\
lO\
llOO\
O\
l\

]
.
llOl\
O\
ll\
ll\
OO\
l
.
Finalise\

(
)
;
llO\
l\
lO\
OOO\
lO\
O
=
0
;
llO\
lOl\
Ol\
OOOl
->
Clear\

(
)
;
}
void\

lO\
llOlO\
lOOOl\

::
llOllOOlOlll
::
llOllO\
llOOlO\

(
llOlOlll\
lO\
OO
*
llOllO\
llOOll
)
{
TA\
_\
AS\
SERT
(
llOllOlOOl\
ll\

>=
0
)
;
TA_\
AS\
SERT
(
ll\
Oll\
OlOO\
ll\
l
<
llOl\
lOlOOll\
O
)
;
llOllOl\
OO\
ll\
l\

=
ll\
OOlOllOl\
Ol
*
6
+
llOll\
OllO\
OOO
;
memset
(
llOll\
OlOOOl\
l
,
0
,
ll\
Ol\
lOl\
OOlll
*
siz\
eo\
f\

(
flo\
at
)
)
;
in\
t\

llOOOOO\
lOlll
;
for\

(
llOOOOOlOlll\

=
0
;
ll\
OO\
OOOlO\
ll\
l
<
ll\
O\
O\
lO\
ll\
Ol\
Ol\

;
llOOOOOlO\
ll\
l
++
)
{
TA_\
ASS\
E\
RT
(
ll\
OllOlO\
llOO
<
llOllOlOOllO
)
;
llO\
OOOOO\
llO\

&
llO\
OO\
OOO\
O\
O\
O\

=
llOllO\
l\
OlOO\
l
[
llOl\
lOlOllOO
++
]
;
llOOOOO\
OOO\
O\

.
lOO\
O\
lOOlll
=
llOllOlOllOO
-
1
;
llOOOOOOO\
OO
.
ll\
OllOOllOOO
=
fa\
lse
;
ll\
OOOO\
O\
O\
OO\
O
.
llO\
llOOllOO\
l
=
fal\
se
;
llOOOOOOOOO\

.
ll\
Oll\
OOllOlO
=
fa\
ls\
e
;
llO\
O\
OO\
OOO\
OO
.
llOOOOOlO\
ll
=
0
;
llO\
OOOOOOO\
O
.
ll\
O\
lO\
lllllOl
=
0
;
llOO\
OOOOOO\
O
.
llO\
l\
Ollll\
lO\
O
=
0
;
llO\
OO\
OOOOOO
.
ll\
O\
ll\
OOl\
lOll\

.
Ini\
t\
i\
a\
li\
se
(
6
,
6
)
;
llO\
OO\
OOO\
O\
O\
O
.
llOllOOlllOO\

.
Initiali\
se\

(
6
,
6
)
;
llOOOOOOO\
OO
.
x
.
Initialis\
e
(
6
)
;
}
int
llOllO\
llOlOO
;
for
(
llOllOllOlOO
=
0
;
llOll\
OllOlOO
<
llO\
llO\
OOOlO\
O
;
ll\
O\
l\
lO\
l\
lOlOO\

++
)
{
TA\
_ASSER\
T
(
llOllOlOllOO
<
ll\
Oll\
OlOO\
l\
lO
)
;
llO\
llOOll\
ll\
O
*
llOllOl\
lOl\
Ol\

=
&
ll\
O\
l\
l\
O\
lOlll\
l
[
llOllOll\
Ol\
OO\

*
2
]
;
int
llOlO\
lOlOOll
=
ll\
O\
ll\
O\
l\
lO\
lOl
->
llOl\
Oll\
llOOl
.
llO\
lOlOllOOO
(
)
;
ll\
OO\
OOOO\
llO
&
llO\
OOOOO\
OOO\

=
ll\
Oll\
O\
lOlOOl
[
ll\
O\
llOlOllOO\

++
]
;
ll\
OOO\
O\
OOO\
OO\

.
lOOOl\
OO\
lll
=
llOllOlOllOO
-
1
;
llOOOO\
OOOOO
.
llOllOOll\
OOO
=
true\

;
llOOOOOO\
O\
OO
.
llO\
ll\
O\
Oll\
OOl
=
fa\
l\
s\
e
;
llOOOOO\
OOOO
.
llO\
l\
l\
OOllOlO
=
false
;
llOOOOOOOO\
O\

.
ll\
OOOOO\
lOll
=
0
;
llOOO\
O\
OOO\
O\
O
.
ll\
OlOlllllOl
=
0
;
llOOOO\
O\
O\
OOO
.
llOl\
OlllllOO\

=
0
;
llOOOO\
OOOOO
.
llOllOOllOll
.
Initialis\
e
(
llOlOl\
OlOOl\
l
,
ll\
OlOlOlO\
Oll\

)
;
ll\
OOOO\
OO\
OOO
.
ll\
O\
llO\
Ol\
llOO
.
In\
i\
ti\
a\
lise
(
llOlOlOlO\
O\
ll
,
ll\
Ol\
OlOlO\
Oll
)
;
ll\
OOOOOO\
OOO
.
x
.
Initi\
alise\

(
ll\
OlOlOlOOll\

)
;
}
llOllOl\
l\
Ol\
OO
=
0
;
int\

llOOO\
OOlll\
l\
O
;
for\

(
llOO\
OOOllllO
=
0
;
llO\
OOOOlll\
lO\

<
llOllOll\
O\
O\
l\
l\

->
ll\
OllO\
OO\
lOOl\

(
)
;
llOOOO\
O\
llllO
++
)
{
llOlOllllOOO
::
llO\
l\
Olll\
lO\
lO
&
llOl\
lOOl\
OOOl
=
*
llOl\
lO\
ll\
OO\
ll
->
ll\
Ol\
lOO\
Ol\
O\
l\
l\

(
llOOOOOl\
l\
llO
)
;
if\

(
(
llOllOOl\
OOO\
l\

.
lOlO\
llOOOl
&
llO\
ll\
O\
OlO\
lO\
O
)
==
0
)
continue
;
llOl\
l\
OO\
l\
OO\
O\
l
.
llOlO\
llllll\
O
=
ll\
OOlOl\
lO\
l\
O\
l
+
llOl\
lO\
ll\
O\
lOO
;
TA\
_AS\
SERT
(
llOll\
Ol\
l\
OlOO
<
ll\
O\
l\
lO\
O\
OOlOO
)
;
llOllO\
llOlOO\

++
;
}
TA\
_A\
SSERT\

(
llOll\
Oll\
OlO\
O
==
llOllO\
O\
OO\
lOO
)
;
TA\
_ASSERT
(
llO\
ll\
OllOOll
->
lOllOlll\
lOOO
(
)
==
llO\
O\
lOllOlOl\

)
;
for\

(
llOOO\
OOlOlll\

=
0
;
llOOO\
OOl\
Olll
<
llOllOll\
OOl\
l
->
lOllOlll\
lO\
OO
(
)
;
llOOOOO\
lO\
ll\
l
++
)
{
llOlOl\
lllOOO
::
llOlOllllO\
ll\

&
lO\
ll\
l\
l\
ll\
ll\
O
=
*
llOllOllOOll
->
ll\
OllOOOllOO\

(
ll\
OO\
OOO\
lOlll
)
;
lOllll\
llllO
.
llOlOlll\
l\
l\
lO
=
ll\
OOOOOlOlll
;
}
for
(
llO\
OOOOllllO
=
0
;
llO\
OO\
OOl\
l\
llO
<
llOllOllOO\
ll
->
llOl\
lO\
OOlOO\
l
(
)
;
ll\
OO\
OOOllllO
++
)
{
llOl\
Ollll\
OOO\

::
ll\
Ol\
O\
llllOlO
&
llO\
llOOlOOO\
l
=
*
llO\
llOllO\
Oll
->
ll\
O\
ll\
O\
OOl\
Oll
(
ll\
OOOOOl\
l\
llO\

)
;
if
(
(
llO\
ll\
OOlOOOl
.
lOlO\
llOOOl
&
ll\
Oll\
OOlOlOO\

)
==
0
)
conti\
n\
ue
;
ll\
O\
OOOOOllO
&
llOOOOOOOOO
=
llO\
ll\
O\
lO\
l\
OO\
l
[
llOllO\
OlOO\
Ol
.
llO\
lOllllllO
]
;
if
(
llOllOOlOO\
Ol
.
ll\
OO\
OOO\
lOl\
l
)
ll\
OOOOO\
OOO\
O\

.
llOOO\
O\
OlOll
=
&
llOllOlOlO\
Ol
[
llOllO\
OlOO\
Ol
.
ll\
O\
OOO\
OlOll
->
ll\
OlO\
ll\
l\
ll\
lO
]
;
if
(
llOllOOl\
O\
OOl
.
llOlOl\
ll\
llOl
)
llOOOO\
OO\
OOO
.
llO\
lOl\
llll\
O\
l
=
&
llOllOl\
O\
lOOl
[
llOllOOlOOOl
.
llOlO\
l\
ll\
llOl
->
llO\
lOlll\
lll\
O
]
;
if
(
llOllOOlO\
OOl
.
ll\
OlOl\
llll\
OO
)
llO\
O\
OOOOOOO\

.
ll\
Ol\
Oll\
lllOO
=
&
ll\
O\
llO\
lO\
lOO\
l
[
ll\
O\
llOOlO\
OOl
.
llOl\
O\
lll\
llOO
->
llOl\
Ollll\
llO
]
;
}
for
(
llOOOOOlO\
l\
ll
=
0
;
llOOOO\
OlOlll\

<
llO\
llOl\
lOOll
->
lOll\
OllllOOO
(
)
;
llO\
O\
OOOlO\
ll\
l
++
)
{
ll\
O\
lO\
ll\
ll\
OOO
::
llO\
l\
Oll\
llOll\

&
lO\
lllll\
lllO
=
*
llO\
llOl\
lOOll
->
llOllO\
OO\
llO\
O
(
llOOOOOlO\
ll\
l
)
;
ll\
OOOOOOllO
&
llOOOOO\
OOOO\

=
llOllOlO\
lOOl\

[
lOlllll\
lll\
O\

.
llO\
lOl\
lll\
llO
]
;
if\

(
lO\
lll\
ll\
lllO
.
llOO\
OOOlOl\
l
)
llOO\
OOOOOOO
.
llOO\
OOOlOl\
l
=
&
llOll\
OlO\
lO\
O\
l
[
lOllllllllO
.
llOOOOO\
lOll
->
llOlOll\
ll\
l\
lO
]
;
if
(
lOllll\
ll\
llO
.
ll\
OlO\
ll\
ll\
l\
Ol
)
llOOOOO\
OOOO
.
llOlOl\
ll\
llO\
l
=
&
ll\
Oll\
OlOl\
OOl
[
lO\
llllllll\
O
.
llOlOl\
ll\
ll\
O\
l
->
llOlOl\
lllllO
]
;
if
(
lO\
llllllll\
O
.
llO\
lO\
lll\
ll\
OO
)
llOOOOOOOOO\

.
llO\
lOll\
lllO\
O\

=
&
llO\
l\
lOl\
OlOOl
[
lOllllllllO\

.
llOlOlllllOO
->
llO\
lOllll\
l\
lO\

]
;
}
}
voi\
d
lOll\
Ol\
O\
lOOOl\

::
llOllO\
OlOlll
::
llOllO\
llOllO
(
)
{
llOllOlO\
Olll
=
llO\
O\
l\
O\
ll\
OlO\
l\

*
6
+
ll\
OllO\
l\
lO\
O\
OO
;
llO\
llO\
lOllOl
->
Ini\
ti\
al\
ise\

(
6
)
;
llO\
l\
lOlO\
lllO
->
In\
it\
ialis\
e
(
6
,
6
)
;
int
llOOO\
OlOOlO
;
llOl\
l\
Oll\
Olll\

=
0
;
fo\
r
(
llO\
O\
OOl\
OOlO
=
0
;
llOO\
O\
OlO\
OlO\

<
ll\
Oll\
O\
lO\
llOO\

;
llO\
OOOlOOl\
O\

++
)
{
llOOOOOOl\
lO
&
llO\
OOOO\
OOOO
=
llOllOlOlOOl\

[
ll\
OOOOlOO\
lO
]
;
if
(
llOOO\
OOOOO\
O
.
ll\
OOO\
OOlOll
==
0
)
llO\
l\
lOlllOOO\

(
&
llO\
OOOOOOOO
)
;
}
llOllOlll\
OOl
(
)
;
llOllOlllOlO\

(
llOl\
lOlOOOll
,
llO\
llO\
lOOlOO
)
;
}
vo\
id
lOllOlOl\
OO\
O\
l
::
llOllOO\
lO\
l\
ll
::
llOlOllOl\
l\
lO
(
ll\
OlOllOl\
ll\
l
*
llOlOlllOOOO\

,
int
llO\
lOll\
l\
OOOl
)
{
fo\
r
(
in\
t
lOOOl\
OOO\
ll\
l
=
0
;
lOOO\
lOO\
Olll
<
llOllOOOOlOO
*
2
;
lOOO\
l\
OOOl\
ll\

++
)
{
llOllOOlll\
lO
*
lO\
Ol\
ll\
OOO\
l
=
&
llOllOlOllll
[
lO\
O\
OlO\
O\
Olll
]
;
TA_ASSERT
(
lOOlll\
OOOl
->
lOOOl\
OOl\
OO\
O\

>=
0
)
;
TA_ASSERT
(
lOOlllOOO\
l
->
lOO\
OlOOlOOO
<
ll\
OlOl\
l\
l\
OOOl\

)
;
con\
st
llO\
lO\
llOl\
lll\

&
llO\
llO\
Ol\
l\
lll
=
llOl\
Ol\
ll\
OOOO
[
lOOl\
l\
l\
O\
OOl
->
lO\
OO\
l\
OO\
l\
OOO
]
;
TA_A\
SSERT
(
lOO\
lll\
OOOl\

->
llOl\
O\
l\
lllOOl\

.
lOOlOOlOOOl
(
)
)
;
fo\
r
(
int\

lOOOll\
OO\
Ol\

=
0
;
lOOOllOOOl\

<
lOO\
ll\
l\
OO\
Ol\

->
llOl\
OllllOO\
l
.
llOlOl\
OllOO\
O
(
)
;
lOOOllOOOl\

++
)
{
lOOlll\
OOOl
->
llOlOllllOO\
l\

(
lO\
OO\
ll\
O\
OOl
,
0
)
*=
llOllOOllll\
l
.
lOO\
Ol\
llOlOO\
O
;
lOOl\
l\
lOO\
Ol
->
llO\
lOll\
l\
l\
OOl
(
lOOOll\
O\
OOl\

,
1
)
*=
llOll\
OOl\
lll\
l\

.
lOOO\
lllOlOOO\

;
lOOl\
ll\
O\
OOl
->
llOlOll\
ll\
OOl\

(
lO\
O\
OllOO\
Ol
,
2
)
*=
llO\
llOO\
ll\
l\
l\
l
.
lO\
OOl\
llOlOOO
;
lOOll\
lOOO\
l
->
llOl\
Olll\
l\
OO\
l\

(
lOOOl\
l\
OOOl\

,
3
)
=
lOOl\
llO\
OOl
->
llO\
lO\
l\
lllOO\
l
(
lOOOllO\
OOl
,
3
)
*
llOllOOllll\
l\

.
llOllOl\
OOO\
O\
O
[
0
]
+
lOOl\
l\
l\
OO\
Ol
->
llOlOl\
ll\
lOOl
(
lOOOll\
OOOl
,
4
)
*
ll\
Oll\
OOllll\
l
.
llO\
ll\
Ol\
OO\
OOl\

[
0
]
+
lOOlllOO\
Ol
->
llOlO\
l\
lllOOl
(
lO\
OOllOOOl
,
5
)
*
ll\
OllOOlllll
.
llO\
llO\
lOOO\
lO
[
0
]
;
lOOl\
llOOOl\

->
llOl\
Ollll\
O\
O\
l\

(
lOOOllOOOl
,
4
)
=
lO\
Olll\
OO\
O\
l
->
llOlOl\
l\
ll\
O\
Ol
(
lO\
OO\
llOO\
Ol
,
4
)
*
ll\
Oll\
OOlll\
ll
.
llOl\
lOlO\
OOOl\

[
1
]
+
lOOl\
l\
lOOOl
->
llOlOl\
lllO\
Ol
(
lO\
OO\
l\
lOO\
Ol
,
5
)
*
llOl\
lOOl\
llll
.
ll\
O\
llOl\
OOO\
lO
[
1
]
;
lOO\
lll\
OOO\
l
->
llOlO\
llllO\
Ol
(
lOO\
Ol\
l\
O\
OO\
l
,
5
)
=
lO\
OlllOOOl
->
llOlOlll\
lOOl
(
lOOO\
l\
lOO\
Ol
,
5
)
*
llOll\
OO\
llll\
l
.
llOllOlOOOlO
[
2
]
;
}
}
}
vo\
id\

lOllO\
lOlO\
OO\
l\

::
ll\
O\
llOO\
lOl\
ll
::
llO\
l\
l\
O\
l\
llOOO
(
llOOOOO\
Oll\
O
*
llOOOO\
OOlll
)
{
for
(
llOOOOOOllO
*
llOOOOO\
l\
lOO
=
llOOOOOOlll
->
llOl\
OlllllOl
;
llOO\
OOOllOO\

;
llO\
OO\
OOll\
O\
O
=
llOOO\
OOllOO
->
llO\
lOll\
ll\
lOO\

)
ll\
Oll\
Ol\
llOOO\

(
llO\
OOO\
Ol\
lOO\

)
;
ll\
O\
l\
lOl\
OlOlO
[
llOllOllOll\
l\

]
=
llOOOOOOl\
ll
;
llOl\
lO\
lOlOll
[
llOllO\
lOllOO
-
ll\
OllOllOlll
-
1
]
=
llO\
OO\
OOOlll\

;
llOllOllO\
ll\
l
++
;
}
voi\
d
lOllOlO\
lO\
OOl
::
llOl\
l\
O\
OlOl\
l\
l\

::
llO\
ll\
OlllOOl
(
)
{
int\

llO\
llOl\
llOl\
l
;
for
(
llO\
llOl\
llO\
l\
l
=
0
;
llOllO\
ll\
lO\
l\
l
<
llOll\
Ol\
Ol\
l\
OO
;
llOl\
l\
Olll\
O\
ll\

++
)
{
llOOOOO\
Oll\
O
&
llOOO\
OOO\
O\
O\
O
=
*
llOllO\
lOlO\
lO
[
ll\
OllOl\
llOll
]
;
if
(
llOOO\
OOOOOO
.
llOl\
lO\
Ol\
lO\
OO
)
ll\
OOO\
OOOOOO\

.
llOl\
lOOllO\
ll
.
lOl\
OllOOOOO\

(
)
;
else\

llOOO\
OOOOOO
.
llOllOO\
l\
lOll
.
llO\
l\
Ol\
OllOlO
(
)
;
if
(
llOO\
OO\
OO\
OOO
.
ll\
OOO\
OO\
lOll
)
{
in\
t
llOllOl\
lllOO
=
llOOOOOOOOO
.
lOOOl\
OOl\
ll
;
int\

llOllOllllO\
l\

=
llO\
OOOO\
OO\
OO\

.
llO\
O\
OOOlOll
->
lOO\
OlO\
Olll\

;
if\

(
llOOOOOO\
O\
OO
.
llO\
l\
lOOl\
l\
OO\
O
)
llOllOlll\
l\
lO\

(
ll\
OOOOOOOOO\

.
llOll\
O\
OlllOl
,
llOllO\
llllO\
O
-
llOOlOl\
lOlOl
,
llOll\
O\
ll\
l\
l\
Ol
)
;
el\
s\
e
ll\
Oll\
Olllll\
l
(
llOOOO\
OO\
OOO
.
llOllOOlllOl\

,
llOllO\
l\
lllOl
-
llOOlOl\
lOlOl\

,
llOl\
lOll\
llO\
O
)
;
}
TA_ASSERT
(
llOOO\
OOO\
O\
OO
.
llOllOOll\
Ol\
l
.
lOO\
lOO\
l\
OOOl
(
)
)
;
TA_A\
SSE\
RT
(
llOOOO\
OO\
O\
OO
.
ll\
OllO\
O\
lllOO\

.
lOO\
l\
OOlO\
OOl\

(
)
)
;
if
(
ll\
O\
O\
OOOOOOO
.
llO\
OOOOl\
Oll
)
{
TA_ASSERT
(
llOOOOOO\
OO\
O
.
llO\
l\
lOO\
lllOl
.
lOOlOO\
lOOOl
(
)
)
;
}
}
#ifdef _DEBUG
for
(
int\

llOOOOlOOlO
=
0
;
ll\
OOOOl\
OO\
lO
<
llOllO\
l\
OllOO\

;
llOOO\
Ol\
O\
OlO
++
)
{
ll\
OOOOOO\
l\
lO
&
llO\
OOOOOOOO
=
llOllO\
l\
OlOOl
[
llOOOOlOO\
lO
]
;
TA_AS\
SERT\

(
llOOOOOOO\
O\
O
.
llOl\
lO\
Oll\
Ol\
l
.
lOOlOOlOOOl
(
)
)
;
TA_ASSER\
T
(
ll\
OO\
OO\
O\
OO\
OO
.
llOllOOll\
l\
OO
.
lOO\
lOOlOOOl\

(
)
)
;
if\

(
llOOO\
OO\
OO\
OO
.
llOOO\
OOl\
Oll
)
TA\
_\
A\
SS\
ER\
T
(
llOOO\
OOOOOO
.
ll\
OllOO\
ll\
lOl\

.
lO\
OlOOlO\
OO\
l
(
)
)
;
}
#endif //
for
(
llOllO\
ll\
lO\
ll
=
0
;
ll\
OllOll\
lOll
<
ll\
O\
l\
lOlOll\
OO\

;
ll\
O\
llOlllOll
++
)
{
llOOOOO\
O\
llO\

&
llO\
O\
OOOOOO\
O
=
*
llOl\
lOlO\
l\
O\
lO
[
ll\
OllO\
l\
llOl\
l
]
;
for
(
llOOOOOOllO\

*
llOOO\
O\
O\
llO\
O
=
ll\
OO\
OOOOO\
OO
.
llOlOlllllOl
;
ll\
OOOO\
O\
llOO\

;
llO\
OO\
OO\
l\
lOO\

=
llOOO\
OOll\
OO
->
ll\
OlOl\
ll\
llOO
)
{
llOOOOOOllO
&
lOl\
Ol\
ll\
OO\
lOl\

=
*
ll\
OOO\
OOl\
lOO
;
llOll\
lOO\
OOOO
(
ll\
OOOOOO\
OO\
O
.
llOllOOllO\
l\
l\

,
lOlOll\
lO\
O\
lOl\

.
llOllO\
Ol\
lOl\
l
,
lOl\
OlllOOlOl\

.
ll\
OllOOlll\
Ol
)
;
}
TA_A\
SSERT
(
ll\
OllOlO\
lllO\

)
;
llOOOOOOOOO
.
llOl\
lO\
Oll\
Oll\

.
GetI\
nvers\
e
(
llO\
OOOOO\
OOO\

.
llOl\
lOOlllOO
,
*
llOllOlOlllO
)
;
if\

(
llOOOOOOOOO
.
llOOOOO\
lO\
l\
l
)
{
ll\
OlllO\
OOOOl
(
llO\
OOOOOOOO
.
llOllOOlllOl
,
llOOOO\
O\
OOOO
.
llOllOOl\
llOO
)
;
}
}
}
voi\
d\

lOllOlOl\
OO\
O\
l
::
llO\
ll\
OOlOlll
::
llOllOll\
lOlO
(
)
{
fo\
r\

(
int
llO\
ll\
OlllOll
=
0
;
ll\
OllO\
lllOll
<
llOllO\
lO\
l\
lOO\

;
llO\
llOlll\
Oll
++
)
{
llOO\
OOOOll\
O
&
llOOO\
OOO\
OOO\

=
*
ll\
OllOlOlOlO
[
llOll\
O\
l\
l\
lOll
]
;
for
(
llOOOOOOl\
lO
*
llOOOO\
OllOO
=
llO\
OOOOOOOO
.
llOlOllll\
lOl
;
llO\
O\
OOOll\
O\
O
;
ll\
O\
OOO\
O\
llO\
O\

=
llOOOOOllOO
->
ll\
OlOlll\
llOO
)
{
ll\
O\
OOOOOllO
&
lOlO\
lllOOlO\
l
=
*
llO\
OOOOllOO
;
ll\
OlllOOOOl\
O
(
llOOOOOOOOO
.
x
,
lOlOl\
llOOl\
Ol
.
llOl\
lOOlllOl
,
lOlOl\
llOO\
lOl
.
x
)
;
}
}
for
(
int\

llOlllOOOOll
=
0
;
ll\
O\
l\
llOOOOll
<
llOllOl\
Ol\
lOO
;
llOlll\
OOO\
Oll
++
)
{
llOOOOO\
OllO
&
llOOOO\
OOOOO
=
*
llOllOlOlOll
[
ll\
O\
lllOO\
OO\
l\
l
]
;
llOll\
lOO\
OlOO
(
llO\
OOOO\
OOOO\

.
x
,
llOO\
OO\
OO\
OOO
.
llOllOO\
l\
ll\
O\
O
,
llOOOOOO\
OOO
.
x
)
;
if
(
llOOOOOOO\
OO\

.
llOOOOOlOll\

)
{
llO\
lllOOOlOl\

(
llOOOOOO\
O\
OO\

.
x
,
llOOO\
OOOOO\
O\

.
ll\
OllOOll\
l\
Ol
,
ll\
OOO\
OOOO\
OO
.
llOO\
O\
OOlOll
->
x
)
;
}
}
}
void
lO\
ll\
OlO\
lO\
O\
Ol\

::
llOllOOlOlll
::
llOll\
Ollll\
l\
O\

(
llOlOl\
OlOO\
lO
&
llO\
lOlll\
lO\
O\
l\

,
int
lOOO\
lOO\
Ol\
ll
,
int
lO\
OOl\
OOl\
OOO
)
{
llOllOOlll\
lO
*
llO\
lllOOOl\
lO
=
&
llOl\
lOlOllll
[
lOOOlOOOlll\

*
2
]
;
if
(
llOl\
l\
lOOOl\
l\
O
->
lOOOlOOlO\
OO\

!=
lOO\
OlOO\
lOOO\

)
ll\
Ol\
ll\
OOO\
llO
=
&
ll\
OllOlOllll\

[
lO\
OO\
lO\
OOl\
l\
l\

*
2
+
1
]
;
TA\
_\
ASSERT
(
ll\
Oll\
l\
OOOllO
->
lO\
OO\
lOOlOOO\

==
lOO\
OlOOlOOO
)
;
llOlOllll\
OOl
.
In\
iti\
al\
ise\

(
llOlllOOO\
llO
->
llO\
lO\
l\
l\
l\
lOOl
.
llOlOlOll\
OOO
(
)
,
llOlllOOOllO
->
llOlO\
lll\
lOOl\

.
llOlO\
lOll\
OO\
l
(
)
)
;
fo\
r
(
int
lO\
OOll\
OOOl
=
0
;
lO\
OOll\
OOOl
<
llOlOll\
llO\
Ol
.
llOl\
O\
lO\
llO\
OO
(
)
;
lOOOllO\
OOl
++
)
{
fo\
r
(
int
lOO\
lOOl\
Ol\
O
=
0
;
lOO\
lOOlOlO\

<
llOl\
Ol\
lllO\
Ol
.
llOlOlOl\
l\
OOl
(
)
;
lOOlOOl\
OlO
++
)
{
llOlO\
llllO\
Ol
(
lOOOl\
l\
OO\
O\
l\

,
lOOl\
O\
O\
lO\
l\
O
)
=
-
ll\
OlllOO\
O\
l\
lO\

->
llOlOllllOOl
(
lOOO\
ll\
O\
OOl
,
lO\
OlOOlO\
l\
O
)
;
}
}
}
void\

lOllOlO\
l\
OO\
Ol
::
llOl\
lOO\
lOll\
l
::
ll\
Oll\
Ollllll\

(
llOl\
OlOl\
OOlO
&
llOlO\
l\
l\
ll\
OO\
l\

,
int\

lO\
OOlOO\
Olll\

,
int
lOOO\
lOO\
l\
OOO\

)
{
llOllOOllllO
*
llO\
lllOOOllO
=
&
llOl\
lOlOlll\
l\

[
lO\
OO\
lOOOlll
*
2
]
;
if
(
llOlll\
OOO\
l\
lO
->
lOOO\
lOOlOOO\

!=
lOOOlO\
O\
l\
OOO\

)
llOl\
llOOOll\
O
=
&
ll\
O\
llOlOllll\

[
lOOOlOO\
Ol\
ll\

*
2
+
1
]
;
TA_ASSER\
T
(
llOl\
llO\
O\
OllO
->
lOOOlOO\
lO\
OO
==
lOO\
OlOOl\
OOO
)
;
ll\
O\
l\
Ol\
lllOOl
.
In\
itialise
(
llOlllO\
OOll\
O
->
ll\
OlOllllO\
O\
l
.
llOlOlOll\
OO\
l
(
)
,
llO\
lll\
O\
OOllO\

->
llO\
lO\
ll\
llOO\
l
.
ll\
OlOlO\
llOOO
(
)
)
;
for
(
int
lOO\
Ol\
l\
OOOl\

=
0
;
lO\
OOl\
lOOOl
<
ll\
OlO\
ll\
llOOl
.
llOlOl\
O\
llOOO
(
)
;
lOO\
OllO\
OOl
++
)
{
fo\
r
(
int
lO\
Ol\
OOlOlO
=
0
;
lO\
OlO\
OlOl\
O
<
ll\
O\
lOl\
l\
llOOl
.
ll\
O\
l\
OlOllO\
Ol\

(
)
;
lOOlOO\
lOlO
++
)
{
llOl\
Oll\
l\
lOOl
(
lOOOllOO\
Ol
,
lOOlOO\
l\
OlO
)
=
-
llOlllOO\
O\
llO\

->
llOlOl\
l\
llOO\
l\

(
lOOlOOlOlO
,
lO\
OO\
llO\
OOl\

)
;
}
}
}
void
lO\
llOlO\
lO\
O\
Ol
::
ll\
OllOOlOll\
l
::
ll\
Oll\
lOOO\
OOO
(
ll\
OlOl\
OlOO\
l\
O
&
lO\
lOO\
llOOOO
,
const
llOlOl\
OlOO\
lO
&
llO\
lllOOOl\
ll
,
con\
st
llOlOlOlOOlO
&
lOOlOOlOlO
)
{
TA\
_AS\
SERT\

(
lO\
l\
O\
O\
l\
l\
OOOO
.
lO\
Ol\
OOl\
O\
OO\
l
(
)
)
;
TA_ASS\
ERT
(
llOlllOOOl\
ll\

.
lO\
OlO\
OlOOOl\

(
)
)
;
TA_AS\
SER\
T
(
lO\
OlOO\
lO\
lO
.
lO\
Ol\
O\
Ol\
O\
OOl
(
)
)
;
TA\
_ASSERT
(
lOOlOO\
lO\
lO
.
llOlO\
l\
OllO\
OO
(
)
==
ll\
Oll\
lOOO\
lll\

.
llOlOlO\
l\
lO\
O\
O
(
)
)
;
TA_AS\
S\
E\
RT\

(
lO\
Ol\
OO\
lO\
lO
.
llO\
lOlOll\
O\
OO
(
)
==
llOlllOOOlll
.
llOlO\
lO\
llOOl\

(
)
)
;
TA_ASS\
ER\
T
(
lOlO\
OllO\
OOO
.
llOlOl\
Ol\
lOOO
(
)
==
lOOlOO\
lOlO\

.
llOlOlOl\
lOOl
(
)
)
;
TA\
_\
A\
SSERT
(
lOlOOllOOO\
O\

.
llOlOlO\
llOOl
(
)
==
lOO\
l\
OOl\
O\
lO
.
llOlOlOllO\
O\
l\

(
)
)
;
for
(
int
llO\
ll\
lOOl\
OO\
O
=
0
;
llO\
lllOOlOO\
O
<
lOOlOO\
lOlO
.
llOlOl\
Oll\
OOl
(
)
;
llOll\
lOOlO\
O\
O
++
)
{
for
(
int
ll\
Olll\
OOlO\
Ol
=
0
;
ll\
OlllOO\
lOOl\

<
llOll\
lO\
O\
O\
l\
ll\

.
llOlO\
lOllOOO
(
)
;
ll\
OlllOOlOOl
++
)
{
float
ll\
O\
lO\
l\
OllllO
=
0.0f
;
for
(
in\
t
llO\
l\
l\
lOOlO\
l\
O
=
0
;
llOl\
llOOlOlO
<
llOl\
ll\
OOOl\
ll
.
ll\
OlOlOllOOl\

(
)
;
ll\
OlllOOl\
OlO\

++
)
{
const
in\
t
llOll\
lOOlOll
=
llOlllOOl\
OlO
;
llOlOlO\
llll\
O
+=
llOll\
lO\
O\
Oll\
l\

(
llOl\
l\
lOO\
lO\
Ol\

,
llOl\
llO\
Ol\
O\
lO
)
*
lOO\
lOOlOlO
(
llOlllOOl\
Oll
,
llOlllOOlOOO
)
;
}
in\
t\

ll\
Oll\
lOO\
l\
lOO
=
llO\
l\
llOOlOOl
;
for
(
int
llOlllO\
OllOl\

=
0
;
llOlllOO\
llOl
<
lOOlOO\
lOl\
O
.
llOl\
Ol\
OllOOl
(
)
;
ll\
Ol\
l\
lOOllOl
++
)
lO\
lOOllO\
OOO\

(
llOl\
l\
lO\
Ol\
lOl
,
llO\
lll\
OOlO\
O\
O
)
-=
ll\
OlOl\
Ol\
lll\
O
*
lOO\
lOOl\
O\
lO
(
ll\
OlllOOll\
O\
O
,
llOlllOOl\
lOl
)
;
}
}
lOlOO\
llOOOO
.
ll\
Ol\
OlO\
l\
lOll
(
)
;
}
void
lO\
llOlOl\
OOOl
::
llO\
l\
lOOl\
Olll
::
ll\
OlllOOOOO\
l\

(
llOlO\
lOlOOl\
O
&
lllOOllOlO
,
cons\
t
llO\
lOl\
OlOOl\
O
&
lllOOllll\
O
)
{
TA_ASSE\
RT
(
lllOOl\
lO\
lO\

.
lOOlOOlOO\
Ol
(
)
)
;
TA_ASSE\
RT
(
ll\
l\
OOllll\
O
.
lOOlO\
OlOOOl
(
)
)
;
TA_ASSERT
(
ll\
lOO\
lll\
lO
.
llO\
lO\
lO\
l\
lOOl\

(
)
==
lllOOllOl\
O
.
llO\
lOl\
O\
ll\
O\
O\
O\

(
)
)
;
TA_ASSE\
RT\

(
lllOOl\
lOlO
.
llOlO\
lOl\
lOOO\

(
)
==
lllOOllllO
.
ll\
OlO\
lOll\
OOO
(
)
)
;
TA\
_AS\
S\
ERT\

(
ll\
OllOl\
Ol\
lOl
)
;
TA_\
AS\
SER\
T
(
llOll\
O\
l\
OllOl
->
lOOOlll\
OO\
l
(
)
>=
lll\
O\
O\
llOlO\

.
llOlOl\
OllOOl\

(
)
)
;
for
(
int
lOOOlOOlOOO\

=
0
;
lO\
OOlO\
Ol\
OOO\

<
lllOOllOlO
.
llO\
l\
OlOl\
lOOl
(
)
;
lOO\
OlOOl\
OO\
O
++
)
{
int
lO\
OO\
l\
OOOll\
l\

;
fo\
r
(
lOOOlOO\
Ol\
ll
=
0
;
lOO\
O\
l\
OOOlll
<
ll\
l\
OOllOlO
.
ll\
OlOl\
Oll\
OOO
(
)
;
lOOOlOOOlll
++
)
{
float\

lll\
OOlOl\
ll
=
0.0f
;
for
(
in\
t\

lO\
O\
O\
ll\
OOOl
=
0
;
lOOOllO\
O\
O\
l
<
lllOOllllO\

.
ll\
OlO\
lOllO\
Ol
(
)
;
lO\
OOllOO\
Ol\

++
)
lll\
OOlOlll\

+=
lllO\
O\
l\
l\
llO
(
lO\
OOlOOOl\
ll
,
lOOOllOO\
Ol\

)
*
ll\
lO\
Oll\
OlO
(
lO\
OO\
l\
lOOOl
,
lO\
O\
O\
lOOl\
OOO
)
;
(
*
llOllOlOl\
lOl\

)
(
lO\
OOlO\
OOlll
)
=
lll\
O\
OlOll\
l
;
}
fo\
r\

(
lOO\
OlOO\
Ol\
l\
l\

=
0
;
lO\
OOl\
OOOlll\

<
lllOOllO\
lO
.
llO\
lOlOllOOO
(
)
;
lOOO\
lO\
O\
Oll\
l
++
)
lllOOl\
lOlO
(
lO\
O\
OlO\
OOl\
ll
,
lOOOlOOlOOO
)
=
(
*
ll\
O\
l\
l\
Ol\
OllO\
l
)
(
lO\
OOl\
O\
OOl\
ll
)
;
}
ll\
l\
OO\
ll\
OlO\

.
llO\
l\
OlOll\
Ol\
l
(
)
;
}
voi\
d
lOl\
l\
OlOlOO\
O\
l
::
llOllOO\
lO\
l\
ll
::
llO\
l\
llOOOlO\
O
(
llOlOl\
Oll\
ll\
l
&
lOlOOllO\
O\
O\
O
,
cons\
t
ll\
O\
l\
OlOlOOl\
O\

&
llOll\
lOO\
lllO
,
con\
st
llOlOlOllll\
l
&
llOlllO\
O\
lll\
l\

)
{
lOOl\
O\
l\
ll\
Oll
(
ll\
OlOOlllll\
O
)
;
TA_\
AS\
SERT
(
lOlOOllOOOO
.
lOOl\
OOlOOOl
(
)
)
;
TA_ASSERT
(
ll\
Oll\
lO\
OlllO
.
lOOlO\
O\
l\
OOO\
l
(
)
)
;
TA\
_ASSER\
T
(
llO\
lllO\
Olll\
l
.
lOOlOOlOOOl
(
)
)
;
TA_AS\
SE\
RT\

(
llOl\
l\
l\
O\
Oll\
lO
.
llOlO\
lOllOO\
l
(
)
==
llOlllOOll\
ll
.
lOO\
OlllOO\
l
(
)
)
;
TA\
_A\
SS\
E\
RT
(
lO\
lOO\
llO\
OOO
.
lOOO\
l\
l\
l\
O\
O\
l
(
)
==
llO\
l\
llO\
Ol\
lll\

.
lO\
OO\
l\
llO\
Ol
(
)
)
;
TA_ASSER\
T
(
llOl\
lOlOl\
l\
Ol
->
lO\
OOl\
llOOl\

(
)
>=
llOlllOO\
ll\
l\
l\

.
lOO\
O\
ll\
l\
O\
O\
l
(
)
)
;
if
(
llOlllOOllll\

.
IsZero
(
)
)
{
lO\
lOO\
llOOOO
.
lOlOllOOO\
OO
(
)
;
re\
turn
;
}
if
(
ll\
Olll\
OOlllO
.
llOlOl\
O\
ll\
lOO
(
)
)
{
lO\
lOOll\
OOOO
=
llO\
lllOOllll
;
return
;
}
int
lOOOlOOOlll\

;
for
(
lOOOl\
O\
OOll\
l
=
0
;
lOOOlOOOlll\

<
llOll\
lOOll\
lO\

.
llO\
lOl\
OllO\
OO
(
)
;
lOO\
Ol\
OO\
Ol\
ll
++
)
{
float
llOl\
O\
lO\
lll\
l\
O
=
0.0f
;
for
(
int
lO\
OOlOO\
lOO\
O
=
0
;
lO\
OO\
l\
OOlOOO
<
ll\
Olll\
OOl\
ll\
O
.
ll\
OlOlOllOOl
(
)
;
lOOOlOOlOOO\

++
)
llO\
lOlO\
llllO
+=
ll\
O\
l\
ll\
OOlllO
(
lOO\
OlOOO\
l\
ll
,
lOOOlOO\
lOO\
O
)
*
llO\
lllOOl\
lll
(
lOOO\
lOOlO\
OO
)
;
(
*
ll\
OllOl\
OllOl
)
(
lOO\
OlO\
OO\
ll\
l
)
=
llOlOlO\
ll\
ll\
O\

;
}
fo\
r\

(
lOO\
Ol\
OO\
Ol\
ll
=
0
;
lOO\
O\
lOO\
Olll
<
llO\
lll\
O\
Olll\
O
.
llO\
lOlO\
llOOO
(
)
;
lOOOlOOO\
l\
l\
l
++
)
lOlOOllO\
O\
OO
(
lOOO\
lOOO\
l\
ll
)
=
(
*
ll\
O\
llOlO\
llOl\

)
(
lOO\
O\
lOOO\
lll
)
;
lOlO\
OllOOO\
O
.
ll\
O\
lOllOOOl\
O
(
)
;
}
void
lOllOlOlOOO\
l\

::
llOll\
OOl\
Olll\

::
ll\
OlllOOOOlO
(
llOl\
O\
l\
Olll\
ll\

&
lOl\
OOllO\
OOO
,
const\

llO\
lOlOl\
OOlO
&
ll\
OlllOO\
l\
l\
lO\

,
co\
ns\
t\

llOl\
OlOll\
ll\
l
&
llOlll\
O\
Ollll\

)
{
TA_ASSE\
RT
(
lOlO\
O\
l\
lOOO\
O
.
lOOlOOlOOOl
(
)
)
;
TA_ASSERT
(
ll\
O\
l\
llOO\
l\
ll\
O
.
lOOl\
OOlOOOl
(
)
)
;
TA_ASSER\
T
(
llOlllOO\
llll\

.
lOOl\
OOlOOOl
(
)
)
;
TA\
_AS\
SER\
T
(
llOlllOOlll\
O
.
llOl\
OlOllOOO
(
)
==
llOlllOO\
l\
ll\
l
.
lOOO\
lll\
OOl
(
)
)
;
TA_ASSERT
(
lOlOOl\
l\
O\
OOO
.
lOOO\
l\
ll\
O\
O\
l
(
)
==
llOl\
ll\
OOlllO
.
llOlOlO\
llOO\
l
(
)
)
;
if
(
llOll\
lO\
O\
lll\
l
.
Is\
Ze\
ro
(
)
)
return
;
if
(
ll\
O\
l\
llOOlll\
O
.
llO\
lO\
l\
O\
lllOO
(
)
)
{
lOl\
O\
OllOOOO
=
llOll\
lOO\
llll
;
return
;
}
fo\
r
(
int
lOOOlOOO\
ll\
l\

=
0
;
lO\
OO\
l\
O\
OOl\
ll
<
llO\
l\
llOO\
l\
l\
lO
.
llOlOlO\
ll\
OOl
(
)
;
lOOO\
l\
OOOl\
l\
l\

++
)
{
float\

llO\
lOlOllllO
=
0.0f
;
for
(
int
lOOOl\
OOlOO\
O\

=
0
;
lOOOlOO\
lOO\
O
<
llOlll\
O\
Olll\
O\

.
llO\
l\
O\
lOllOO\
O
(
)
;
lOO\
Ol\
OOlOO\
O
++
)
ll\
O\
lOlOl\
lllO
+=
ll\
O\
ll\
lO\
Olll\
O
(
lOOOl\
OOlOOO\

,
lO\
OOlOOOlll\

)
*
ll\
O\
lllOOllll
(
lOOOlOO\
l\
OOO
)
;
lOlOOllO\
OOO
(
lOO\
OlOOOll\
l\

)
-=
ll\
O\
lOlO\
ll\
llO\

;
}
lOl\
OOll\
O\
OOO
.
llOlOllOO\
Ol\
O
(
)
;
}
void\

lOllO\
lO\
lOO\
O\
l
::
llOllOOl\
O\
lll\

::
llO\
ll\
lOOO\
lO\
l
(
llOlOlO\
lllll
&
lOlOO\
llOOOO
,
co\
nst
llOlOlO\
lOO\
lO
&
llOll\
lOOll\
lO\

,
const\

ll\
OlOlOlllll
&
llOlllOOllll
)
{
TA_ASSERT
(
lO\
lO\
Oll\
OO\
OO
.
lOOlOO\
l\
OO\
Ol
(
)
)
;
TA_ASSERT
(
llO\
l\
llOO\
lllO
.
lOOlOO\
lOOO\
l
(
)
)
;
TA_\
A\
SSE\
RT
(
llOlll\
OOll\
l\
l
.
lOOlOOlO\
OOl\

(
)
)
;
TA_\
AS\
S\
E\
RT\

(
ll\
OlllO\
Ol\
l\
l\
O\

.
ll\
O\
lOlOllOOl
(
)
==
llO\
l\
l\
l\
OOlll\
l
.
lOOOlll\
OOl
(
)
)
;
TA_ASS\
ERT
(
lOl\
OOllO\
OO\
O\

.
lOOO\
ll\
lOO\
l
(
)
==
ll\
Oll\
l\
OO\
ll\
lO
.
llOlOlO\
ll\
OOO
(
)
)
;
if\

(
llOlllOO\
llll
.
IsZe\
ro\

(
)
)
re\
t\
u\
r\
n\

;
if
(
ll\
OlllOOll\
lO
.
llOlOlOl\
ll\
OO\

(
)
)
{
lO\
lOO\
llO\
OOO\

=
ll\
Olll\
OOlll\
l
;
re\
tu\
rn
;
}
fo\
r
(
int
lO\
OOlO\
O\
Olll
=
0
;
lOOO\
lO\
OO\
ll\
l\

<
ll\
O\
l\
llOOlllO\

.
llOlOlOllOOO
(
)
;
lOOOlOOOl\
ll
++
)
{
flo\
at\

llOl\
OlOllllO
=
0.0f
;
fo\
r
(
in\
t
lOO\
OlOOlO\
OO
=
0
;
lOOOlOOlOO\
O
<
llOl\
llOOlllO
.
llOlOlOllO\
Ol
(
)
;
lOOOlO\
OlOO\
O
++
)
llOl\
O\
lOll\
llO
+=
llOlllOOll\
lO\

(
lO\
O\
OlOOOll\
l
,
lOOOlOOl\
O\
OO
)
*
llO\
lllOOllll
(
lO\
OO\
lO\
O\
lOOO
)
;
lOlO\
OllOOOO
(
lOOOl\
O\
OOlll
)
-=
llO\
l\
OlO\
ll\
ll\
O
;
}
lOlOO\
ll\
OOOO\

.
llOlO\
l\
lO\
OOlO
(
)
;
}
void\

lO\
llO\
lO\
lOOOl\

::
llOllOOlOlll\

::
llOl\
l\
O\
lllOlO
(
const\

fl\
oat
*
ll\
Olll\
O\
lOOOO
,
fl\
oa\
t
*
llOlllOlOOOl
)
{
in\
t
lO\
O\
O\
l\
lO\
OOl
;
int
lOOlOOlO\
lO
=
0
;
fo\
r
(
lOOO\
llOOOl
=
0
;
lOOO\
l\
l\
OOO\
l\

<
llOllOlOllOO
;
lOO\
Ol\
lO\
OOl
++
)
{
llOOOOOO\
llO\

&
ll\
OOOOOO\
O\
OO
=
ll\
OllO\
lOlO\
Ol
[
lOO\
Ol\
l\
O\
OO\
l
]
;
int
llO\
lll\
OlO\
O\
lO\

=
0
;
for
(
in\
t
lO\
Ol\
OlOOOl
=
0
;
lOOlOlO\
OOl
<
llO\
OO\
OOOOO\
O
.
x
.
lO\
OO\
lllO\
Ol\

(
)
;
lOO\
lO\
lOOOl\

++
)
{
llOOO\
OO\
OOOO
.
x
(
lOO\
lOlOOOl
)
=
ll\
O\
ll\
l\
OlOOOO
[
lO\
OlOOl\
OlO
++
]
;
if\

(
llOO\
OOOO\
O\
OO
.
x
(
lOOlOlOOOl
)
==
0.0f
)
ll\
Ol\
llOlO\
O\
lO
++
;
}
if
(
ll\
Oll\
l\
OlO\
OlO\

==
ll\
OOOOOOOOO\

.
x
.
lO\
O\
Ol\
llOOl
(
)
)
llOOOOO\
OO\
O\
O
.
x
.
ll\
O\
l\
OllOOlOO
(
)
;
els\
e
llOOOOOO\
OOO
.
x
.
llOl\
OllOOOlO\

(
)
;
}
llO\
l\
lO\
lllOlO
(
)
;
lO\
Ol\
OOlOlO
=
0
;
for\

(
lOOO\
llOOOl
=
0
;
lOOO\
l\
lO\
OOl
<
ll\
Oll\
OlOllOO\

;
lOOOllOOOl
++
)
{
llOOOO\
OOllO
&
llOO\
OO\
OOOOO
=
ll\
Ol\
lO\
l\
OlOOl
[
lOOOll\
OO\
Ol
]
;
for
(
int
lOO\
lOlOO\
Ol
=
0
;
lOOl\
O\
lOOO\
l
<
llOOOOOOOOO
.
x
.
lO\
O\
O\
lll\
OOl\

(
)
;
lOOlO\
lOO\
Ol
++
)
llOll\
lOlO\
O\
Ol\

[
lOO\
l\
OOlOlO\

++
]
=
llO\
O\
OOOOOOO
.
x
(
lOOl\
Ol\
OOOl\

)
;
}
}
voi\
d
lOll\
OlO\
lOOOl\

::
llO\
llOOlOl\
ll
::
llOl\
llO\
lO\
Ol\
l
(
float
*
llO\
lll\
OlOlO\
O
,
flo\
at
*
ll\
OlllOlOl\
Ol
,
llOlOll\
OOl\
lO
*
llOl\
llO\
l\
O\
llO\

,
int\

lOOOlOO\
lO\
OO
)
{
TA_ASS\
ERT\

(
llOll\
lO\
lOlOO
)
;
TA_ASS\
ERT
(
llOlllO\
l\
OlOl
)
;
TA_AS\
SERT\

(
llO\
lll\
OlOl\
l\
O
)
;
int\

lO\
OOll\
OO\
O\
l\

;
in\
t\

lOO\
lO\
Ol\
O\
lO
=
0
;
fo\
r
(
lOOOllOOOl\

=
0
;
lOOO\
ll\
OOOl
<
llOl\
lOlOll\
OO
;
lOOO\
llOOOl
++
)
{
llOOOO\
OOllO\

&
llOOOOO\
OOOO
=
llOll\
O\
lOlOOl
[
lO\
OO\
llOOO\
l
]
;
llOOOO\
OO\
OO\
O
.
x
.
lOlOllOOOOO
(
)
;
}
ll\
OlOllOO\
llO\

::
lO\
OllO\
OOOO
*
lOOlllOOO\
l
=
llOll\
lO\
lOllO
->
llO\
lOllOlOlO
[
lOOOlOO\
lO\
OO
]
;
for
(
;
lO\
Ol\
llO\
OO\
l\

;
lO\
OlllO\
OO\
l\

=
lOO\
l\
llO\
OOl\

->
llO\
lOllOl\
OOO\

)
{
llOOOOOO\
l\
lO
&
llOOO\
OO\
OO\
OO
=
llOl\
l\
OlOlOO\
l\

[
lOOl\
llOO\
Ol
->
lOO\
O\
lOOlOO\
O
]
;
llOO\
O\
OOOOOO\

.
x
(
0
)
=
lOOlllOOOl
->
llOl\
OllOOll\
l
[
0
]
;
llO\
OO\
OOOO\
OO
.
x
(
1
)
=
lOO\
ll\
lOOO\
l
->
llOlOll\
OO\
lll
[
1
]
;
llOOOOOOOOO
.
x
(
2
)
=
lO\
Ol\
ll\
O\
OOl
->
ll\
O\
lOllOOl\
ll
[
2
]
;
llO\
OOOO\
OOOO\

.
x
(
3
)
=
lOOl\
llOOO\
l
->
ll\
OlOl\
lOOlll
[
3
]
;
llOOOOOO\
OOO
.
x
(
4
)
=
lOOl\
llOOOl
->
ll\
OlOl\
l\
O\
Ol\
ll
[
4
]
;
ll\
OOO\
OOOOOO
.
x
(
5
)
=
lOOll\
l\
OOO\
l
->
llOlOl\
lO\
Olll
[
5
]
;
ll\
O\
OO\
OOO\
OO\
O
.
x
.
llO\
lO\
llOO\
OlO\

(
)
;
}
ll\
OllOlllOlO
(
)
;
lOOlOOlOlO
=
0
;
for
(
lO\
OOllO\
OOl
=
0
;
lOO\
Ol\
lOOOl
<
llOl\
lO\
lOllO\
O
;
lOOOl\
lOOOl
++
)
{
llOOO\
OOO\
l\
l\
O\

&
ll\
O\
OOO\
OOO\
OO
=
llOl\
l\
Ol\
O\
lOOl
[
lOOO\
llOOO\
l
]
;
for
(
int
lOOlOlOOO\
l\

=
0
;
lOOlOlOO\
Ol
<
llO\
O\
O\
OO\
OOO\
O
.
x
.
lOOOll\
lOOl
(
)
;
lOOlOlOOOl
++
)
llOlll\
Ol\
Ol\
OO
[
lOOlOOl\
Ol\
O\

++
]
=
ll\
OOOOOO\
OOO
.
x
(
lOO\
lOlOOO\
l\

)
;
}
}
flo\
at\

lOll\
OlOlO\
O\
Ol
::
ll\
Ol\
l\
OO\
lO\
lll
::
llOlllOlOl\
l\
l
(
llOl\
OllOOl\
l\
O
*
llOll\
lOlOllO
,
in\
t
lO\
O\
O\
lOOO\
l\
ll
)
{
retur\
n
llO\
lll\
O\
l\
Ol\
lO
->
llOl\
OlllO\
OlO\

(
lOOOlOOOl\
l\
l\

,
llOllO\
lOOlOO
)
;
}
void
lOllO\
lO\
lOO\
Ol\

::
llOll\
OOl\
Olll
::
ll\
Oll\
l\
Ol\
lOOO
(
llOl\
OllOO\
ll\
O\

*
llOlllOlOllO
,
fl\
oat
*
llOlllOllO\
O\
l
)
{
flo\
at
llOll\
lOlOlOl
[
1024
]
;
int
lOOOlOOOlll\

;
TA_ASSERT
(
llOll\
OlOOlll
<
1024
)
;
mem\
set
(
llOlll\
O\
lO\
lOl
,
0
,
ll\
OllOlOOl\
ll
*
size\
o\
f
(
fl\
oat
)
)
;
fo\
r\

(
lOOO\
l\
O\
O\
O\
lll
=
0
;
lO\
OOl\
O\
OOlll
<
llO\
lllOl\
Oll\
O
->
ll\
Ol\
OlOlO\
lO\
l\

;
lOOOl\
O\
OO\
l\
ll
++
)
{
flo\
at
llOlllOl\
lO\
l\
O\

=
llO\
ll\
lOl\
lOO\
l
[
lOO\
Ol\
OOOll\
l
]
;
llO\
lOll\
OOll\
O
::
lOOllOO\
O\
O\
O
*
lOOlllO\
OO\
l
=
ll\
O\
lllOlO\
llO\

->
ll\
Ol\
Ol\
lO\
lO\
lO
[
lO\
O\
OlO\
O\
Oll\
l
]
;
for
(
;
lOO\
l\
llOOOl
;
lOOlllOO\
O\
l
=
lOOlllOOOl
->
llOlOllOlOO\
O
)
{
int
llO\
ll\
lOl\
l\
Ol\
l
=
lOOlllOOOl
->
lOOOlOOl\
OO\
O
*
6
;
ll\
OlllOlO\
lO\
l
[
llOlllOllOl\
l
+
0
]
+=
lO\
Olll\
OOOl
->
ll\
OlOl\
lOOl\
ll
[
0
]
*
llOll\
lOllO\
lO\

;
llOlll\
OlOlOl\

[
llO\
l\
llOllOl\
l\

+
1
]
+=
lOO\
l\
l\
lOOO\
l
->
llOlOllOO\
lll
[
1
]
*
ll\
Olll\
O\
llOlO
;
llOl\
ll\
OlOlOl
[
llO\
lll\
O\
llOll\

+
2
]
+=
lOOl\
ll\
O\
OO\
l
->
llO\
lO\
llO\
Ol\
ll
[
2
]
*
llOlllOllO\
lO
;
llOlllOlOl\
Ol\

[
llOlllOllO\
ll
+
3
]
+=
lOOl\
l\
lO\
OOl
->
llOlOllOO\
ll\
l
[
3
]
*
llOl\
llOll\
O\
l\
O
;
llOlll\
OlOlO\
l
[
llO\
l\
llOllOll\

+
4
]
+=
lOO\
l\
llO\
OOl
->
llO\
lOl\
lOOll\
l
[
4
]
*
llOlll\
OllOlO
;
llOlllOlOlOl
[
llOlllOllOll
+
5
]
+=
lOOl\
l\
lOO\
O\
l
->
ll\
OlO\
ll\
OOlll
[
5
]
*
llOlll\
Ol\
lOlO
;
}
}
fo\
r
(
lOOOlOOOl\
l\
l
=
0
;
lOOOlOOOlll
<
llO\
llOlOOlll
;
lO\
OOl\
OO\
Ol\
ll
++
)
ll\
OlllOlOlOl\

[
lOOOl\
OO\
Olll
]
+=
llOll\
OlO\
O\
Oll
[
lOOOl\
OOOl\
ll\

]
;
ll\
OllOlll\
OlO
(
llOll\
lOlOlOl\

,
llOllOl\
OO\
lOl
)
;
}
lOll\
O\
lO\
lOO\
Ol\

::
lOllOlOlOOOl
(
)
{
lOlOOOl\
Ol\
O
=
0
;
lOl\
OO\
OlOO\
l
=
0
;
llOllOOO\
Ol\
lO
=
0
;
llOOlOl\
lO\
lOl
=
0
;
ll\
O\
ll\
lOl\
llOO\

=
0
;
llOlllOl\
ll\
Ol
=
0
;
llOllO\
lO\
OOll
=
0
;
llOllO\
lOOl\
O\
l
=
0
;
llOl\
llOllllO
=
0
;
llOlll\
O\
lllll
=
0
;
llOllllO\
OOO\
O
=
0
;
ll\
Oll\
l\
l\
O\
OOOl\

=
0
;
llO\
lll\
l\
OO\
O\
lO
=
0
;
llOllllO\
O\
O\
ll\

=
0
;
ll\
OllllOOlOO
=
0
;
llOll\
l\
lOOlO\
l
=
0
;
llOllllOO\
ll\
O
=
0
;
llOllll\
OOll\
l
=
0
;
llO\
l\
lllOl\
OOO\

=
0
;
llOllllO\
lOOl
=
0
;
llOllllOlO\
lO
=
0
;
ll\
OllllOl\
O\
ll
=
0
;
llOll\
llO\
l\
lOO
=
0
;
llO\
llllOllOl
=
0
;
llOllll\
Ol\
ll\
O
=
0
;
ll\
Ol\
lllOllll
=
0
;
}
lOllOlOl\
OOOl
::
~
lOl\
lOlOlOOOl
(
)
{
Fi\
nalise\

(
)
;
}
vo\
id
lOllOlOlOOOl
::
Initial\
i\
se
(
in\
t\

llOOOlOlllll\

,
int
llOl\
OllO\
llO\
l
)
{
TA_ASSERT
(
llOl\
O\
lO\
lOOO\
l
==
0
)
;
llOl\
O\
lOlOOOO
=
0
;
lOlOOOlO\
l\
O\

=
llOOOl\
Oll\
l\
l\
l
;
lOlOO\
OlOOl
=
0
;
llOl\
lOOOOl\
lO\

=
llOl\
OllOllO\
l
;
llOO\
l\
OllOl\
Ol\

=
0
;
lOO\
Olll\
lO\
O\

(
ll\
OlllOl\
llO\
O\

,
flo\
at\

,
lOlO\
O\
OlO\
l\
O
)
;
lOO\
Ol\
ll\
l\
OO\

(
llOll\
lOlllOl
,
float
,
lO\
l\
OO\
Ol\
OlO
)
;
lOOOllllOO
(
llOllOlOOOl\
l\

,
float
,
lOl\
OOOlOl\
O
)
;
lOOOll\
llOO
(
llO\
llOlOOlOl\

,
float
,
lO\
lO\
OOlOlO
)
;
lOO\
O\
l\
lllO\
O
(
llO\
ll\
lOll\
llO\

,
float\

,
lOlOOO\
lOlO\

)
;
lOO\
Olll\
lOO
(
llOl\
l\
l\
O\
l\
llll
,
int\

,
lO\
l\
OO\
OlOlO\

)
;
lOO\
Ol\
lll\
OO
(
llOl\
l\
llOOOOO
,
int\

,
lOlO\
OOl\
OlO
)
;
lOO\
O\
llll\
O\
O
(
ll\
O\
llll\
O\
OOO\
l\

,
float\

,
lOlOOOlOlO
*
lO\
l\
OO\
OlO\
lO\

)
;
lOOO\
llll\
OO
(
ll\
Ollll\
O\
OOl\
O
,
flo\
at
,
lO\
lOOOlOl\
O
*
lOlO\
OO\
lO\
lO
)
;
lOOOllllOO
(
ll\
Oll\
llOOOll
,
int
,
lO\
l\
O\
OO\
lO\
lO
)
;
lOOOl\
l\
ll\
OO
(
ll\
O\
llllO\
O\
l\
OO
,
int
,
lOlO\
OOlOlO\

)
;
lOO\
OllllO\
O
(
llOll\
l\
lOOlO\
l
,
ll\
OlO\
llO\
llll
,
llO\
ll\
O\
O\
OOllO
)
;
llOl\
l\
l\
l\
Ol\
OOl
=
0
;
lOOOll\
l\
lOO
(
llO\
l\
lllOl\
Ol\
O
,
int
,
lOl\
OOO\
lOlO
)
;
llO\
llllOlOll
=
0
;
lOOOllll\
O\
O
(
llO\
llllOllOO
,
int\

,
lOl\
OOOl\
OlO\

)
;
int\

llOllll\
l\
OOOO
=
llOl\
lOO\
OOll\
O
*
6
+
lOlOOOlO\
l\
O
;
lOOO\
l\
l\
ll\
O\
O\

(
llOl\
lllOll\
Ol
,
flo\
at
,
llOlll\
llOOO\
O
)
;
lOOO\
lll\
lOO\

(
ll\
OllllOlll\
O
,
flo\
at
,
llOl\
l\
ll\
l\
OOO\
O\

)
;
llOllllOllll
=
0
;
lOOOOOl\
l\
O\
OO
(
llOll\
llOOl\
lO
,
llO\
lO\
llOOl\
lO
)
;
llO\
llllOOllO
->
In\
i\
ti\
a\
lise
(
lOlO\
OOl\
OlO
,
ll\
Ol\
lOOO\
OllO
)
;
lOOOOOllO\
O\
O
(
llOllllOOl\
ll
,
llO\
lOl\
ll\
lOOO
)
;
llOlll\
lOO\
ll\
l
->
Initia\
l\
ise
(
lOlOOOl\
OlO
,
ll\
Ol\
lOOO\
Oll\
O
)
;
lO\
OOO\
Ol\
l\
OOO
(
llO\
llllOlOOO
,
llO\
l\
lO\
Ol\
Olll
)
;
ll\
Oll\
llOlO\
OO\

->
In\
iti\
alise
(
lO\
lO\
OOlOlO
,
ll\
OllOOOO\
llO
)
;
lO\
OOOOllOOO
(
(
llO\
lO\
lOO\
OOOO
*
&
)
lOlO\
OlOllO
,
llO\
l\
Ol\
OOOO\
OO
)
;
if
(
!
llOl\
Ol\
OlOOOl\

)
{
lOOOOOllOO\
O\

(
llO\
lOl\
Ol\
OOOl\

,
llOl\
OlOOlOl\
l\

)
;
TA_A\
SSE\
R\
T\

(
llOl\
OlOlO\
OOO
>
0
)
;
ll\
O\
lOlO\
lO\
OOl
->
Initialise\

(
ll\
OlOl\
O\
lO\
OOO\

)
;
}
#ifdef _DEBUG
llOl\
llll\
OOO\
l
(
)
;
#endif //
}
void
lO\
llOl\
Ol\
O\
O\
O\
l
::
Finalis\
e
(
)
{
Clear
(
)
;
lO\
lOOO\
lO\
l\
O
=
0
;
lOl\
O\
O\
OlO\
O\
l
=
0
;
ll\
O\
l\
lOO\
OO\
llO
=
0
;
llOOl\
O\
l\
l\
O\
lOl
=
0
;
llOlOO\
ll\
O\
lO\
O
(
ll\
OlllOl\
ll\
OO\

,
flo\
a\
t
)
;
llOl\
OOllOl\
O\
O
(
llOlllOl\
llOl
,
fl\
oat
)
;
llOl\
OOllOlOO
(
ll\
Ol\
lOlOOOll\

,
float
)
;
llOlOOllOlO\
O
(
llOllOlOOl\
Ol
,
floa\
t\

)
;
llO\
lOOll\
O\
lO\
O
(
llO\
l\
llO\
ll\
llO
,
floa\
t
)
;
llOlO\
O\
llOlOO
(
llOlllOl\
llll\

,
int
)
;
llOl\
OOllOlOO\

(
ll\
Olll\
lOOOOO
,
int\

)
;
llOlO\
OllOlOO
(
llO\
lll\
lOO\
OOl
,
float
)
;
ll\
OlO\
OllOlOO
(
llOlll\
lOO\
Ol\
O
,
fl\
o\
at
)
;
llO\
lOOl\
lO\
l\
OO\

(
ll\
OllllOO\
O\
ll
,
in\
t
)
;
llOl\
OOllOlOO
(
llO\
l\
l\
llOO\
lO\
O
,
int
)
;
llO\
l\
OOl\
lO\
lOO
(
ll\
OllllOOlO\
l
,
llOl\
Oll\
Ollll
)
;
llO\
l\
OOll\
Ol\
O\
l
(
ll\
O\
l\
lllO\
Ol\
l\
O
,
llOlOllOO\
llO
)
;
llOlOOl\
lOl\
Ol
(
llOll\
ll\
OlO\
OO
,
ll\
O\
llOOl\
O\
lll
)
;
llOl\
OOllOlOl\

(
ll\
OllllOOlll\

,
ll\
OlOllll\
OOO\

)
;
llOl\
lllO\
lOOl
=
0
;
llOlO\
OllOlO\
O
(
llO\
lll\
lOlOlO
,
int\

)
;
llO\
ll\
llOlOll
=
0
;
llO\
lOOllO\
lOO
(
llO\
l\
lllOllOO
,
int
)
;
llOlOO\
ll\
OlOO
(
ll\
Ollll\
OllOl
,
flo\
at
)
;
ll\
OlOO\
l\
lO\
l\
OO
(
llOllll\
OlllO
,
float\

)
;
llOl\
O\
Oll\
O\
l\
O\
l
(
llO\
lOlOl\
O\
OOl
,
llO\
l\
OlOOlOll
)
;
llO\
l\
OlOOOOOO\

*
lOOll\
lOOOO\

=
(
llOlOlOOOO\
O\
O
*
)
lOlOO\
lOl\
lO\

;
llOlOOllOlOl
(
lOO\
l\
llOO\
OO
,
llOlOlOOOO\
OO
)
;
lOlOOlOllO
=
0
;
}
voi\
d
lO\
l\
lOlOl\
OOOl
::
Clear\

(
)
{
TA_A\
SSE\
RT\

(
ll\
OllllOOllO
)
;
ll\
Olll\
lO\
OllO
->
Cle\
ar\

(
)
;
llO\
l\
lllO\
O\
l\
ll
->
Cle\
ar
(
)
;
llOllllO\
lOOO
->
Clea\
r\

(
)
;
llOOlOllOl\
Ol
=
0
;
lOlOOOlOOl
=
0
;
}
void
lOl\
lOl\
OlO\
O\
O\
l
::
llO\
O\
O\
O\
lOOl\
OO\

(
in\
t\

llOOOOOlll\
lO\

,
int\

lOOOlOOOl\
ll
,
flo\
at\

lOO\
O\
OOll\
lO
)
{
TA_A\
S\
SERT
(
llOOOOOllllO
>=
0
)
;
TA\
_ASSER\
T
(
llO\
O\
O\
OOllll\
O
<
llOlll\
lOO\
lll
->
llO\
ll\
OOO\
l\
O\
Ol\

(
)
)
;
llOl\
OllllOOO
::
llOlOll\
llOlO
&
llOllO\
OlO\
OOl
=
*
ll\
Oll\
ll\
OOlll
->
ll\
O\
llOOOlOll
(
llOOOOOl\
l\
l\
lO
)
;
TA_ASS\
E\
R\
T
(
lO\
OOlOOOlll
>=
0
)
;
TA_AS\
SERT\

(
lOOO\
lO\
OOlll\

<
llO\
llO\
OlO\
O\
Ol\

.
llOlO\
lOlOOll
)
;
if
(
llO\
l\
lOOlOOOl\

.
lOl\
O\
llOOOl
&
llO\
ll\
OO\
l\
O\
lOO
)
{
TA_ASSER\
T
(
llOl\
l\
llO\
lOOO
)
;
int
lO\
OOlOOll\
l
=
llOllOOlOOO\
l\

.
llO\
l\
Ol\
lll\
lll\

+
lO\
O\
Ol\
O\
OOll\
l\

;
lO\
O\
O\
lOOlll
+=
llOO\
lO\
ll\
OlOl
*
6
;
TA_ASSERT
(
lOOOl\
OOl\
ll\

<
llOllllOlOOO
->
llO\
llOl\
OO\
llO
)
;
llOl\
lllOl\
OOO\

->
llOllO\
lOOOll
[
lO\
OOlOOll\
l
]
=
lOOOO\
O\
lllO\

;
}
else
{
TA_ASSERT
(
ll\
OllOO\
lO\
OO\
l\

.
llOlO\
lll\
l\
ll\
l
>=
0
)
;
int
lOOO\
lO\
O\
lll
=
ll\
Ol\
lO\
OlOOOl\

.
ll\
Ol\
Oll\
l\
ll\
ll
+
lO\
OOlOO\
O\
lll\

;
TA_AS\
S\
ERT\

(
lO\
O\
OlOOll\
l
>=
0
)
;
TA_A\
SSERT
(
lOOO\
lO\
Olll\

<
lOl\
OO\
O\
l\
OOl
)
;
llOll\
O\
l\
OO\
O\
l\
l\

[
lOO\
Ol\
O\
Olll
]
=
lOOO\
OOlll\
O
;
}
}
float
lO\
llO\
lO\
lOOOl\

::
Get\
I\
mpulse
(
in\
t\

llOO\
OOOl\
l\
llO
,
in\
t
lOOOlO\
OOlll\

)
{
TA_A\
SSER\
T
(
llOOOO\
OllllO
>=
0
)
;
TA_ASS\
ER\
T
(
llO\
O\
OOOl\
ll\
lO
<
llO\
llllOO\
lll
->
llOl\
lOO\
OlOOl
(
)
)
;
ll\
OlOll\
llOOO
::
llOlOl\
lllOlO
&
llOl\
lOOl\
O\
OOl
=
*
llOl\
ll\
lO\
Olll
->
llOll\
OOOlOl\
l
(
llO\
O\
OOO\
lll\
lO
)
;
TA_ASSERT
(
lO\
OOlOOOl\
l\
l
>=
0
)
;
TA\
_\
AS\
SERT
(
lOOO\
lO\
OOl\
ll
<
llOll\
OOl\
OOOl\

.
llOlOlO\
lO\
O\
ll
)
;
if
(
llOllOO\
lOO\
Ol
.
lOlOllOO\
Ol
&
llO\
llOO\
lOlOO
)
{
TA_AS\
S\
E\
RT
(
ll\
O\
llllOl\
OOO
)
;
int\

lOOOl\
O\
O\
l\
ll\

=
llOllOOl\
OOOl
.
ll\
OlOllllll\
l
+
lOOOlOOO\
lll
;
lO\
OO\
l\
O\
Olll
+=
llOOlOllOl\
Ol\

*
6
;
TA_\
A\
SSERT
(
lO\
OOlOOl\
ll
<
llOll\
l\
l\
OlOO\
O
->
llOl\
lOlOOll\
O
)
;
re\
turn
ll\
Ol\
lllOl\
OOO\

->
ll\
O\
llO\
l\
OO\
lOl
[
lO\
OO\
lOO\
l\
l\
l\

]
;
}
else
{
TA_\
ASSE\
RT
(
llOl\
lOO\
lOOOl
.
ll\
Ol\
O\
l\
llll\
ll
>=
0
)
;
int\

lO\
OOlOOlll
=
llO\
llOOl\
OOO\
l
.
llO\
l\
Oll\
lllll\

+
lOOOlOOOlll\

;
TA_AS\
SERT
(
lOOO\
lO\
Ol\
ll
>=
0
)
;
TA_ASSER\
T
(
lOO\
OlOOlll
<
lOl\
OOOlO\
Ol
)
;
return
llO\
llOl\
OOlOl
[
lOOOlOOlll
]
;
}
}
void\

lOllOlOlOOO\
l
::
ll\
OO\
O\
OOl\
lOOO
(
flo\
at
llOlll\
llOO\
lO
,
con\
st
Ma\
t\
33\

&
ll\
O\
lllllOOll
)
{
TA_ASSERT
(
llOOlOllOlOl\

<
llOllOOOOllO\

)
;
TA_ASS\
ERT
(
llO\
l\
ll\
lOOl\
Ol
)
;
ll\
OlOllOllll
&
ll\
OllOOllll\
l\

=
llOllll\
OOlOl
[
llOOl\
OllO\
lO\
l
++
]
;
TA\
_\
ASS\
E\
R\
T\

(
ll\
Olll\
lOlOOO\

)
;
llOlll\
lO\
lOOO\

->
llOOlOllOlO\
l\

++
;
llOll\
llOO\
l\
ll
->
llOll\
OOO\
lO\
lO\

(
)
;
llOll\
O\
Olllll
.
lOOOll\
l\
O\
l\
OOO
=
Sq\
rt
(
ll\
Ol\
ll\
ll\
OO\
lO\

)
;
const
Ma\
t33
&
lllO\
llOO\
lOO
=
llOllll\
lO\
Oll
;
llOllOOlllll\

.
llO\
l\
lO\
lOOOOO
[
0
]
=
Sqrt\

(
lllOl\
lOOlO\
O
.
M1\
1
(
)
)
;
TA_A\
SSERT
(
llOl\
lOO\
llll\
l
.
llOllOl\
O\
O\
O\
OO
[
0
]
>
0.0f
)
;
llOl\
lO\
Olllll
.
llO\
llOl\
OOOOl\

[
0
]
=
lllOll\
OO\
lOO
.
M21
(
)
/
llOllOOll\
lll
.
llOll\
O\
l\
OOO\
OO
[
0
]
;
llOllOOl\
llll
.
llOl\
lO\
lOOOl\
O
[
0
]
=
lllOllO\
OlOO\

.
M31\

(
)
/
llO\
llOOllll\
l
.
ll\
Oll\
OlO\
OOOO\

[
0
]
;
float\

ll\
OlOlO\
ll\
l\
lO\

=
lllO\
llO\
OlOO
.
M22
(
)
;
llOl\
O\
lOll\
llO
-=
llO\
ll\
OOlllll
.
llO\
l\
lOl\
OOOO\
l\

[
0
]
*
llOll\
OOllll\
l
.
llOl\
lOlOOOOl
[
0
]
;
TA_ASS\
ERT\

(
llO\
lOlOllllO
>
0.0f
)
;
llOll\
OOl\
ll\
l\
l
.
llOll\
Ol\
O\
OOOl
[
1
]
=
Sqrt
(
llOlOlO\
l\
lll\
O
)
;
llOl\
O\
lOlll\
l\
O
=
ll\
lOllO\
O\
lOO
.
M32
(
)
;
llO\
lOlOlll\
lO
-=
llOll\
OOlllll
.
llOl\
lO\
lO\
O\
OO\
l
[
0
]
*
ll\
Ol\
lO\
Ollll\
l
.
llOllOl\
OOOlO
[
0
]
;
llOllOOl\
llll\

.
llOllOl\
O\
OOl\
O\

[
1
]
=
llO\
lOlOlll\
lO
/
llOll\
OOlllll
.
llOllOl\
OOO\
O\
l
[
1
]
;
llOlO\
lOll\
l\
lO
=
lll\
O\
llOOlOO
.
M33
(
)
;
llOl\
OlOll\
llO
-=
llOl\
lO\
O\
l\
llll
.
llOll\
O\
l\
OOOlO\

[
0
]
*
llO\
l\
lOOlllll
.
llOllOlOOOlO
[
0
]
;
llOlOlOl\
lllO\

-=
ll\
Ol\
lO\
O\
lllll\

.
llOll\
OlOOO\
lO
[
1
]
*
llO\
llOO\
llll\
l\

.
llOllOlOOO\
lO
[
1
]
;
TA_ASSE\
R\
T
(
llOlOlO\
l\
lll\
O\

>
0.0f
)
;
llOl\
lOOl\
ll\
l\
l
.
llOl\
lO\
l\
OOOlO
[
2
]
=
Sq\
rt\

(
llOlOlOl\
ll\
lO\

)
;
#ifdef llOlllllOlOO
Mat33
llOl\
llll\
Ol\
O\
l
;
llO\
lllll\
OlOl
.
Se\
tT\
oIdent\
ity
(
)
;
ll\
OlllllO\
lOl\

.
llOll\
l\
llOl\
l\
O
=
llOllOOl\
llll
.
llOl\
l\
OlOOOOO\

[
0
]
*
llO\
llO\
Oll\
ll\
l\

.
llOl\
lO\
lO\
OO\
OO
[
0
]
;
llO\
lllll\
Ol\
Ol
.
lOOOOlO\
OO\
lOl
=
llOllOOlllll\

.
llOll\
O\
lO\
O\
OOl\

[
0
]
*
llOl\
lOO\
l\
llll\

.
llOllOlOOOO\
O
[
0
]
;
llOl\
ll\
llO\
lOl
.
lOOOOlOOOll\
O
=
llOll\
OOlllll
.
ll\
OllOl\
OOOO\
l
[
0
]
*
ll\
OllOO\
lllll
.
ll\
Ol\
lOl\
OOO\
OO\

[
1
]
+
llOl\
lOOl\
lll\
l
.
llOllOlO\
OO\
O\
l
[
1
]
*
ll\
Ol\
lOOll\
l\
ll\

.
llO\
llO\
lOO\
OOl
[
1
]
;
llOll\
ll\
l\
OlO\
l
.
lOOOOl\
OOlOOO\

=
llO\
l\
lOOlll\
ll
.
llOll\
OlOOOlO\

[
0
]
*
llOl\
l\
OOl\
l\
lll
.
llOll\
OlOO\
OOO\

[
0
]
;
llOlll\
l\
lOl\
Ol\

.
lOOOOlOOlOO\
l
=
llOll\
OOll\
lll
.
llOllOlOO\
OlO
[
0
]
*
llOll\
O\
Olll\
ll
.
llOllOlOOOO\
O
[
1
]
+
ll\
O\
l\
lOOlll\
ll
.
llO\
llOlOOO\
lO
[
1
]
*
llOllOO\
l\
llll
.
llOllOlO\
OOOl
[
1
]
;
llOl\
llllOlOl
.
lOO\
OOOOOl\
l
=
llOllOOllll\
l
.
llO\
llOl\
OO\
OlO\

[
0
]
*
llOllOO\
lllll
.
llO\
llO\
lOOO\
OO
[
2
]
+
llOllOOlllll
.
llO\
l\
lOl\
O\
OOlO
[
1
]
*
llO\
ll\
OOll\
lll
.
ll\
OllOlO\
O\
OOl
[
2
]
+
ll\
OllOOll\
lll
.
ll\
OllOlOOOlO
[
2
]
*
llOllOOlllll
.
ll\
Oll\
O\
lOOOlO\

[
2
]
;
for\

(
int\

lOO\
O\
llOOOl
=
0
;
lOOOll\
O\
OOl\

<
3
;
lOO\
O\
llOOOl
++
)
{
for\

(
int\

lOOlOOlO\
lO
=
0
;
lOO\
l\
O\
OlOl\
O
<=
lOO\
OllOO\
Ol
;
lOOl\
OOlOlO
++
)
{
float\

lOOO\
O\
OlllO
=
llOll\
lllOlOl
.
llOl\
l\
lOOl\
llO
[
lOOOl\
l\
OO\
O\
l
]
[
lO\
OlOOlO\
lO
]
-
lllO\
l\
lOOlO\
O
[
lOOOll\
O\
OO\
l\

]
[
lO\
O\
lOOlOlO
]
;
}
}
#endif
}
int\

lOllO\
l\
Ol\
OO\
Ol
::
ll\
OOOOOll\
l\
l\
l\

(
int
ll\
OlO\
lOlO\
Ol\
l
,
int\

llOl\
lOO\
Oll\
lO\

,
int
ll\
OllOOOl\
lll
,
u32
lOlOllOO\
O\
l
)
{
int
llO\
l\
l\
lllOlll
=
llO\
llllOOlll
->
llO\
llOO\
OllOl
(
llOl\
O\
lOlO\
O\
ll\

,
ll\
OllOOOl\
ll\
O
,
llO\
l\
lOOOllll
,
lO\
l\
OllOOOl\

)
;
retu\
rn
llOl\
llll\
Oll\
l
;
}
voi\
d
lOllOlOl\
O\
OOl
::
llO\
OOO\
l\
OO\
OOO
(
in\
t
llOOOOOllllO\

,
int\

lOOOlOOOlll
,
const
Vec\
3
&
llOOllllOO\

,
const
Ve\
c3
&
llOllOO\
O\
OO\
Ol
)
{
llOlOllllOO\
O
::
ll\
Ol\
O\
l\
l\
l\
lOlO
*
llOllll\
llOO\
O
=
llOlll\
lOOll\
l
->
llOllOOOlOll
(
llOOOOO\
l\
l\
llO
)
;
ll\
OllllllO\
OO
->
llOllO\
OOOOOO
(
lOO\
OlOOOl\
ll
,
llOOllllOO\

,
llO\
ll\
OOO\
O\
OOl
)
;
}
void
lOllOlOlOO\
Ol
::
llOOOOl\
OO\
OOO
(
int
ll\
OOOOO\
llllO
,
int
lOO\
OlO\
OOl\
l\
l\

,
co\
n\
st
Vec\
3
&
ll\
ll\
O\
O\
O\
OOl
,
cons\
t\

Vec\
3
&
llOllO\
O\
OOOl\
O
,
const
Vec3
&
llll\
OOO\
O\
lO
,
co\
nst\

Vec3
&
llO\
l\
lO\
OOOO\
l\
l
)
{
llOlOllllOO\
O
::
llOlOllllOl\
O
*
llOllllllO\
OO
=
llOll\
llOO\
lll
->
llOllOOO\
l\
Oll
(
llOOOOO\
llllO
)
;
llO\
llllll\
OOO\

->
llOllOO\
OOOOO
(
lO\
OOlOOOlll
,
llllO\
OOOOl
,
ll\
Oll\
OOOOOlO
,
ll\
llOOO\
O\
lO
,
llOll\
OOO\
OOll
)
;
}
void
lOll\
OlOlO\
OO\
l
::
ll\
OOOOlO\
OOOl\

(
)
{
TA_AS\
SER\
T
(
llOll\
llOOll\
l
->
ll\
Ol\
lO\
OO\
l\
OO\
l
(
)
+
1
>=
ll\
O\
llll\
OO\
ll\
l
->
lOl\
lO\
llllOOO
(
)
)
;
ll\
OllllllO\
Ol
(
)
;
}
bool\

lOll\
OlOlO\
OOl
::
ll\
O\
O\
OOlOlOlO
(
)
{
llOllll\
Ollll\

=
0
;
lOO\
lO\
llO\
l\
ll
(
ll\
O\
lO\
Ol\
l\
llOl\

)
;
{
TA_\
ASSERT
(
ll\
O\
ll\
ll\
O\
OllO
)
;
TA_\
A\
SS\
ERT\

(
ll\
OllllOOl\
Ol
)
;
TA_ASSERT
(
llOl\
lll\
O\
lO\
OO\

)
;
ll\
Ol\
l\
llOl\
OOO\

->
llO\
lOll\
Ol\
llO
(
llOll\
l\
lO\
OlOl
,
ll\
OO\
l\
OllOlOl
)
;
llOl\
lllO\
lOOO
->
ll\
OllOllOllO
(
)
;
ll\
Oll\
l\
l\
O\
OllO
->
llOlOll\
OlllO
(
llO\
lll\
l\
OOlOl
,
llO\
O\
lOllO\
lOl
)
;
{
TA\
_ASS\
E\
RT\

(
lOl\
OOOlOO\
l\

<
1024
)
;
float\

llO\
lllOl\
OlO\
O
[
1024
]
;
floa\
t\

ll\
O\
ll\
lO\
lOlOl
[
1024
]
;
for
(
int
lO\
OOl\
OOl\
OOO
=
0
;
lOOOl\
OO\
lOO\
O
<
lOlOO\
OlOO\
l
;
lOOOlOOlO\
OO\

++
)
{
llOll\
l\
lO\
lO\
OO
->
llOlll\
OlO\
Oll
(
llOl\
l\
l\
OlO\
l\
OO
,
llOlllO\
lOl\
Ol
,
llO\
ll\
llOO\
llO
,
lOO\
OlOOl\
OOO
)
;
for
(
int
lOOOl\
OO\
Ol\
l\
l\

=
0
;
lO\
OOlOOO\
l\
l\
l
<
lOl\
O\
OOlOOl
;
lOOOlOOO\
lll
++
)
{
llOlll\
lOOO\
Ol\

[
lOOOlOO\
Olll
*
lOlOOO\
lOOl
+
lO\
OOlO\
OlOOO
]
=
llOll\
l\
lOOll\
O
->
llO\
lOlll\
OO\
lO\

(
lO\
O\
Ol\
OOOlll\

,
ll\
O\
lllOl\
O\
lO\
O\

)
;
}
}
}
}
lOOl\
Oll\
lOOl\

(
llOlOO\
ll\
ll\
Ol\

)
;
int
lOO\
Oll\
OOOl
;
fo\
r\

(
lOOOllOO\
Ol
=
0
;
lOOOllOOO\
l
<
lOlOOOlOOl
;
lOOO\
llO\
OOl
++
)
{
llOl\
lOl\
O\
OlOl
[
lO\
O\
O\
ll\
O\
O\
Ol
]
=
0
;
llOl\
lOlO\
OO\
l\
l
[
lO\
OOllOOOl\

]
+=
llOllllOlO\
OO
->
ll\
Oll\
lOlOlll\

(
llOllllOOllO
,
lO\
O\
OllOOOl
)
;
}
llOllll\
O\
lO\
O\
l
=
0
;
llOll\
llOl\
Oll
=
0
;
#ifdef _DEBUG
st\
atic
s64
llOllllllOlO
=
0
;
st\
atic
s6\
4
ll\
Olll\
l\
llOl\
l\

=
0
;
llO\
l\
l\
llllOll
++
;
#endif //
for
(
int
llOl\
llll\
l\
lO\
O
=
0
;
llOlllll\
l\
lOO
<
lOlOOOl\
OOl
;
ll\
Ollll\
lllOO
++
)
{
if\

(
!
llOl\
l\
lllll\
O\
l
(
llOllll\
l\
llOO\

)
)
return\

fal\
se
;
}
for\

(
lOO\
OllOOOl
=
0
;
lOOOll\
O\
O\
Ol
<
lOlOOOlO\
Ol
;
lOOOl\
lOOOl
++
)
{
}
ll\
Ollll\
Ol\
OOO\

->
llOlll\
OllOOO
(
ll\
O\
llllOOl\
l\
O\

,
llOllOlO\
Ol\
O\
l\

)
;
#ifdef _DEBUG
llOl\
lllll\
O\
lO
++
;
llOlOOllllll\

=
(
flo\
at\

)
ll\
Ol\
l\
l\
l\
ll\
OlO
/
(
flo\
at
)
ll\
Ollll\
llOl\
l\

;
#endif //
re\
tur\
n
true\

;
}
void
lO\
ll\
O\
lOl\
OOOl
::
llOOOO\
lOllOO
(
)
{
in\
t
lOOOllOOOl
;
fo\
r
(
lOOOl\
l\
OO\
Ol
=
0
;
lOOOllOO\
Ol
<
lOlOOOlOO\
l
;
lOO\
Ol\
lOOO\
l\

++
)
{
llOl\
lOlOO\
l\
Ol
[
lOOOl\
lOOOl
]
=
0.0f
;
llO\
ll\
OlOOOll
[
lOOO\
llOOOl
]
+=
ll\
Ol\
ll\
lOl\
O\
OO
->
llOlll\
Ol\
Olll
(
llOllllO\
O\
l\
lO
,
lOO\
OllOOO\
l
)
;
}
for
(
lOOOll\
OOO\
l
=
0
;
lOOOllOOOl
<
llO\
ll\
llOl\
OOl\

;
lO\
OOll\
OO\
Ol
++
)
llOllllOllO\
l\

[
lOO\
OllOOOl\

]
=
llOllOlOOOll
[
llOllllOl\
OlO
[
lOO\
OllO\
O\
Ol\

]
]
;
ll\
Olll\
lllllO
(
llO\
l\
l\
l\
l\
O\
lOOl
,
lO\
l\
OO\
OlO\
Ol\

,
llO\
lll\
lOO\
Ol\
O\

,
llOl\
ll\
lOl\
lOl
,
llO\
llll\
OlllO
)
;
fo\
r
(
lOOOl\
l\
OOOl
=
0
;
lOOOllOOOl\

<
llOllllO\
lOOl
;
lOOOllO\
OOl
++
)
{
TA\
_ASS\
E\
RT
(
FloatI\
s\
O\
K
(
llO\
l\
lllOl\
ll\
O
[
lOO\
Oll\
OOOl
]
)
)
;
ll\
OllO\
lOOlOl
[
llOlll\
lOOOll
[
lO\
OOll\
OOOl
]
]
=
-
ll\
Olll\
l\
Olll\
O
[
lO\
O\
Oll\
OOOl
]
;
}
llOllllOlO\
O\
O\

->
llO\
lllO\
llO\
O\
O
(
ll\
OllllOO\
llO
,
llOllOlOOlO\
l
)
;
}
void
lOllOlOlOOOl
::
llOlll\
lllOO\
l
(
)
{
llOll\
l\
lOOlll\

->
lOOO\
llOlOl
(
)
;
for\

(
in\
t
llOOOOOllllO
=
0
;
llOO\
OOOlll\
lO
<
llOl\
lllOOlll
->
llOll\
O\
OOlOOl
(
)
;
llOO\
O\
OOll\
ll\
O
++
)
{
llO\
lOlll\
lO\
O\
O
::
llO\
lOl\
l\
llO\
l\
O
&
llOl\
l\
OOlO\
OOl
=
*
llO\
llll\
O\
Olll
->
llO\
llOO\
OlOll
(
ll\
OOOO\
Olll\
lO
)
;
if
(
llOll\
O\
Ol\
OOOl\

.
lOlOl\
lOOOl
&
ll\
Ol\
lOOl\
O\
lOO
)
{
TA_ASSE\
R\
T
(
ll\
Olll\
lOlOOO
)
;
llOl\
lO\
OllllO
&
llO\
l\
ll\
lll\
ll\
l\

=
llOl\
l\
l\
lOl\
OO\
O
->
ll\
OllO\
lOl\
lll
[
llOlll\
lOlOOO\

->
ll\
O\
llOOOO\
l\
OO
*
2
+
0
]
;
llOllO\
Ollll\
O
&
lllOOOOOOOOO
=
llOllll\
OlO\
OO
->
llO\
llO\
lOllll
[
llOl\
l\
llOlOO\
O\

->
llOll\
OOOOlOO
*
2
+
1
]
;
ll\
O\
ll\
llO\
lOOO
->
llOllOOOOl\
O\
O\

++
;
llOllO\
O\
l\
OOOl\

.
llOl\
O\
ll\
ll\
lll
=
llOllllOlO\
OO\

->
llO\
ll\
OllOO\
OO\

;
ll\
Ol\
l\
llOl\
OOO
->
llOll\
OllOOO\
O
+=
llOllOOl\
OOOl
.
llOl\
O\
l\
OlOOll
;
llOll\
ll\
ll\
lll
.
llOlO\
l\
ll\
l\
OOl\

=
llOll\
OOlOOO\
l
.
ll\
lO\
O\
llOlO
.
llOl\
OllllOOl
;
llOllllll\
l\
l\
l
.
lOOOlO\
O\
lO\
OO\

=
llOllO\
OlOOOl
.
lllOOllO\
lO
.
lOOOl\
O\
OlOOO
;
TA\
_\
ASSERT\

(
llOll\
ll\
lllll
.
lOOOlOOlOOO
>=
0
)
;
ll\
lO\
OOOOO\
OOO
.
llOlOl\
l\
llO\
Ol
=
llOl\
lOO\
lOOOl
.
lllOOllllO
.
llOlOll\
llO\
Ol
;
ll\
lO\
OO\
O\
OOOOO
.
lOOOlOOl\
O\
OO
=
llO\
llO\
O\
lO\
OOl
.
ll\
lOOllll\
O
.
lOOO\
lOO\
lOOO\

;
TA\
_A\
S\
S\
E\
RT
(
lll\
OOO\
OO\
OOOO
.
lOOOlOOlOO\
O
>=
0
)
;
}
else
{
llOlOllO\
Ol\
lO\

*
llOlll\
OlOl\
l\
O\

=
ll\
O\
llllO\
OllO
;
ll\
OllOOlOOOl
.
llOl\
O\
l\
llll\
ll
=
ll\
OlllOlOllO\

->
llO\
lOlOl\
OlO\
l
;
fo\
r
(
int\

lllOOOOO\
OOOl
=
0
;
lllO\
O\
OO\
OOOOl
<
llOllOOlOOOl
.
llOlOl\
OlOOl\
l
;
lllOO\
OOOO\
OOl
++
)
{
TA_A\
SSERT
(
lOlO\
OOl\
OOl\

<
lO\
l\
O\
OOlOlO
)
;
TA_ASSE\
RT
(
lO\
lO\
OOlOO\
l
>=
0
)
;
llOll\
l\
Ol\
llll
[
lOlOO\
OlOO\
l
]
=
llO\
llO\
O\
lO\
OOl
.
lO\
l\
OllOOO\
l
;
int\

lOOO\
l\
O\
OOlll\

=
ll\
Ol\
llOlOll\
O\

->
llO\
lOlOlOlO\
l
;
llO\
lllOlOllO\

->
llO\
lOl\
OlOlOl
++
;
lOlOO\
O\
lO\
Ol\

++
;
TA\
_\
A\
SSER\
T\

(
llOll\
lO\
lO\
llO\

->
llO\
l\
OlOl\
O\
lOl
==
lOl\
OOOlOO\
l
)
;
TA_\
AS\
SERT
(
llO\
l\
llOl\
O\
l\
lO\

->
ll\
OlOllOl\
OlO
)
;
TA_A\
SSER\
T\

(
ll\
O\
lllOl\
O\
ll\
O
->
llOlOll\
OlOl\
l
)
;
TA_ASSER\
T
(
ll\
Ol\
ll\
OlOl\
lO
->
llOlOllOllOO
)
;
TA_ASSE\
RT\

(
ll\
Oll\
lOlOllO\

->
lOOOlOlOOl\

<
lOlO\
OOlO\
lO
*
2
)
;
llOl\
OllOOll\
O\

::
lOO\
llOOOO\
O
*
lllO\
O\
O\
OO\
OOl\
O
=
&
ll\
O\
l\
l\
lOl\
O\
l\
lO
->
lOOlOOl\
OlOl\

[
ll\
O\
l\
llOl\
Ol\
lO
->
lO\
OOlOlOOl
++
]
;
if
(
llOlllO\
l\
Ol\
lO\

->
llO\
lOllO\
llOO
[
ll\
Oll\
OO\
lOOO\
l\

.
lllOOllO\
lO
.
lOOO\
lOOlOOO\

]
)
ll\
O\
lll\
OlOllO
->
llOl\
O\
ll\
Oll\
O\
O
[
llO\
llOO\
lO\
OOl
.
lllOOl\
lOlO\

.
lOOOlOOlO\
OO
]
->
llO\
lOll\
OlOOl
=
ll\
l\
O\
OOOO\
OOlO
;
llOlllOlOl\
lO\

->
ll\
OlO\
llOllOO
[
llO\
llOOlOOO\
l\

.
lllO\
Oll\
Ol\
O
.
lOOOl\
OO\
lOO\
O
]
=
lll\
OOOOOOOl\
O
;
lllOOOOOOO\
lO
->
llOlOl\
lO\
lO\
Ol\

=
0
;
ll\
lO\
OO\
OOOOlO
->
ll\
Ol\
Oll\
OOll\
l
[
0
]
=
llOl\
lOO\
lOOOl
.
ll\
lOO\
llOlO\

.
llOlOl\
lllOO\
l
(
ll\
lOOOOOOOO\
l\

,
0
)
;
lll\
OOOOO\
OO\
lO\

->
llOlOll\
O\
Oll\
l\

[
1
]
=
ll\
O\
l\
lO\
OlOOOl
.
lllO\
OllOlO
.
llOl\
OllllO\
Ol
(
lllOO\
O\
OOOOO\
l
,
1
)
;
ll\
lOOOOOO\
OlO
->
llOlOllOO\
lll
[
2
]
=
llO\
llOOlOOOl\

.
ll\
lOO\
llO\
l\
O
.
llO\
lOlll\
lOOl
(
lllOOOOOOOOl\

,
2
)
;
lllOOOOOOOlO
->
llOlOl\
lO\
O\
lll\

[
3
]
=
llO\
llOO\
l\
OOOl
.
lllOOllOl\
O
.
llOlOllllOOl
(
lllO\
OOOOOOOl
,
3
)
;
lllOO\
O\
OOO\
Ol\
O
->
llOlO\
llOO\
lll
[
4
]
=
ll\
OllOOl\
OOO\
l
.
lllO\
O\
llOlO
.
llO\
lOl\
l\
l\
lO\
Ol
(
lll\
OOO\
OOO\
OO\
l
,
4
)
;
lllOO\
OOO\
OO\
l\
O\

->
llO\
l\
OllOOl\
ll\

[
5
]
=
llO\
l\
l\
OOlOOOl\

.
lll\
OOl\
l\
O\
lO\

.
llOlOll\
l\
lOOl\

(
lllOOO\
OO\
OOOl
,
5
)
;
lllO\
OOOOOO\
l\
O
->
lO\
OOlOOOl\
ll
=
lOOO\
lOOOll\
l\

;
lllOOOOOOOl\
O
->
lOO\
OlOOlO\
O\
O
=
llO\
l\
lOO\
lOOOl
.
ll\
lOOl\
lOlO
.
lO\
OOlOOlOOO\

;
if
(
!
llOl\
llOl\
Oll\
O
->
llOlOl\
lO\
lOl\
l
[
ll\
Oll\
OOlOOOl
.
lllO\
O\
ll\
Ol\
O
.
lOOOl\
OOlO\
OO
]
)
llOl\
llOlOl\
l\
O\

->
ll\
Ol\
OllO\
lOll\

[
llOllO\
OlO\
O\
O\
l
.
lllOOll\
Ol\
O
.
lOOOlOOl\
O\
OO
]
=
lllOOOO\
OOOlO
;
if\

(
llOllO\
Ol\
OOOl\

.
lll\
O\
OllllO
.
lOOOlO\
OlO\
OO\

>=
0
)
{
TA_ASSE\
RT
(
ll\
OlllOlOl\
lO
->
lOOOlOlOOl
<
lO\
l\
OOOlO\
lO
*
2
)
;
llO\
lOllOO\
llO
::
lOO\
l\
lOOOOO
*
lll\
OO\
O\
O\
O\
OOll
=
&
llOlll\
O\
lO\
llO
->
lOO\
lO\
O\
lOl\
Ol
[
llOl\
l\
lOl\
OllO
->
lO\
OOl\
OlOO\
l\

++
]
;
if\

(
llO\
lllOlOllO\

->
llOlOllOllOO
[
llOl\
l\
OO\
lO\
OO\
l
.
lll\
O\
Oll\
llO
.
lO\
OOlOO\
lOOO\

]
)
ll\
OlllO\
lOllO
->
llOlOllOllO\
O
[
ll\
OllOO\
lOOOl
.
lllOOllll\
O\

.
lOOOlOOlO\
OO
]
->
ll\
OlO\
llOlOOl\

=
ll\
lOOO\
O\
O\
OOll
;
llOlllOlOllO
->
llO\
lOllOllO\
O\

[
llOllOOl\
OOOl
.
ll\
l\
O\
OllllO
.
lO\
OOl\
OOl\
OO\
O\

]
=
ll\
l\
O\
OOOOOO\
ll
;
lllOOOOOOOll
->
ll\
OlOllOlOO\
l
=
0
;
lllOOOOOO\
Ol\
l\

->
llOlOllOO\
lll\

[
0
]
=
llO\
llO\
Ol\
O\
OO\
l
.
lll\
OO\
lll\
l\
O\

.
llOlOllllO\
Ol
(
lllOO\
OOOOOOl\

,
0
)
;
ll\
lOOOOOO\
O\
ll
->
llO\
lOll\
OOll\
l\

[
1
]
=
llOll\
OOlO\
OO\
l
.
lll\
O\
Olll\
lO\

.
llOlOl\
lllOO\
l
(
lllOOO\
OOO\
OO\
l
,
1
)
;
ll\
l\
OO\
OOOOO\
l\
l\

->
llOl\
O\
llO\
Ol\
ll
[
2
]
=
llOllOOl\
OOOl
.
lllOOl\
lllO
.
ll\
OlOll\
llOO\
l\

(
lllOOO\
O\
OOOOl
,
2
)
;
ll\
lOOO\
OOOOl\
l
->
llOlOllOOl\
ll
[
3
]
=
llOllOO\
lOO\
Ol\

.
lllO\
OllllO
.
ll\
OlOllll\
OOl\

(
lllOOOOOOOOl
,
3
)
;
lllOOOOOO\
Oll
->
llOlOllOO\
lll
[
4
]
=
llO\
ll\
OO\
l\
O\
OOl
.
lllOOllllO
.
ll\
O\
lO\
llll\
OO\
l
(
lllOOOO\
OOOO\
l
,
4
)
;
ll\
lOOOOOOOl\
l
->
llOl\
Ol\
l\
O\
Olll\

[
5
]
=
ll\
O\
llOO\
lOOOl
.
lll\
OOll\
l\
lO
.
llOl\
Oll\
llOOl\

(
lll\
OOO\
O\
OOOOl
,
5
)
;
lll\
OOO\
OOOOll
->
lOOOl\
OOOlll
=
lO\
OOl\
OOOlll
;
lllO\
OOOOOO\
ll
->
lOOO\
lOOlOOO\

=
llOllOO\
l\
O\
O\
O\
l
.
ll\
lOOl\
lllO
.
lOOO\
lOOlOOO
;
if
(
!
ll\
Ol\
llOlOllO
->
llOlO\
l\
lOl\
O\
ll\

[
llOllOOl\
OOOl
.
lllO\
Ol\
lllO
.
lOOOlOO\
lOOO
]
)
ll\
O\
l\
l\
l\
O\
lOllO\

->
llOl\
OllOlOll
[
llO\
ll\
OO\
l\
OOOl\

.
lll\
OO\
ll\
l\
lO
.
lOOOl\
OOl\
OOO
]
=
lllOOOO\
OOOll
;
if
(
llOllOO\
l\
OOOl
.
lll\
OO\
llO\
lO
.
lOOO\
lOO\
lO\
OO
<
llO\
llOOlOOOl
.
lllO\
O\
ll\
llO
.
lOOOl\
OO\
lOOO
)
{
llOl\
llOlOll\
O
->
ll\
OlO\
l\
lOlOl\
O
[
lO\
OOlOOOlll\

]
=
lll\
OOOOOOOlO
;
lllOOOOOOOl\
O
->
llOl\
OllO\
lOO\
O
=
lllOOOOOOOll\

;
lll\
OOOO\
OOO\
ll\

->
llO\
lOl\
l\
OlOO\
O
=
0
;
}
else
{
llO\
lll\
Ol\
OllO
->
llOlOllOlOl\
O
[
lOOOlOOOll\
l
]
=
ll\
l\
OOOOOOO\
ll
;
lllOOOOO\
O\
Ol\
l
->
llOlOllOlO\
OO
=
ll\
l\
O\
OO\
OOO\
Ol\
O
;
lllO\
OOOOOO\
lO
->
llOlOl\
lOlOO\
O
=
0
;
}
}
els\
e
{
llO\
lll\
OlOll\
O\

->
llO\
lOl\
lOl\
O\
lO
[
lOO\
OlO\
OO\
ll\
l\

]
=
lllO\
OOOOOO\
lO
;
lllO\
OO\
OOOO\
lO
->
llO\
l\
O\
llOlOOO
=
0
;
}
}
}
}
llOllllOlOOO\

->
llOl\
lO\
llOOlO
(
llO\
llllOOlll\

)
;
}
boo\
l
lO\
llOl\
Ol\
O\
O\
Ol
::
llO\
l\
l\
l\
llllOl\

(
int\

ll\
OlllllllOO\

)
{
lOO\
lOl\
ll\
O\
ll
(
llO\
lOO\
llOlll
)
;
in\
t\

lllOOOOOOlOO
=
0
;
lOOlOllOlll
(
ll\
OlOO\
ll\
ll\
OO
)
;
{
fl\
o\
a\
t
ll\
lO\
OlOl\
ll
=
0.0f
;
for
(
in\
t
lOO\
lOO\
lOlO\

=
0
;
lOO\
l\
OOlOlO
<=
llO\
lll\
ll\
ll\
OO
;
lO\
OlO\
O\
lOlO
++
)
lllOOl\
Ol\
ll
+=
llOllllO\
OOO\
l
[
ll\
Ol\
llll\
llOO
*
lOl\
OO\
OlO\
Ol\

+
lOOlOOlOlO
]
*
ll\
OllOlO\
OlOl
[
lO\
O\
l\
O\
O\
lOlO
]
;
llOl\
l\
lOlllOO
[
llO\
lllllll\
OO
]
=
lll\
OOl\
Oll\
l
+
ll\
O\
llOlOO\
Ol\
l
[
ll\
Ol\
lll\
lllOO
]
;
lOO\
OOOOl\
l\
O
(
Fl\
oatI\
sOK
(
llO\
ll\
lOlll\
OO\

[
llO\
llllll\
lOO\

]
)
,
llO\
lO\
OllOO\
ll
)
;
}
lO\
O\
lO\
lllOOl
(
llOlOOllll\
OO
)
;
fo\
r
(
in\
t
lOOOl\
lOOOl
=
0
;
lO\
OOl\
lOO\
Ol
<
llOl\
ll\
lOlOOl
;
lOOOllOOO\
l
++
)
{
if\

(
(
llOlllOlllll
[
ll\
O\
ll\
ll\
OlO\
l\
O
[
lOOO\
l\
lO\
OO\
l
]
]
&
llO\
OOOOllO\
l\
l\

)
==
0
)
{
if
(
llOlllOlllOO
[
llOl\
lllOlOlO
[
lOO\
O\
l\
lOOOl
]
]
<
-
0.1f
)
retu\
rn\

false
;
if\

(
ll\
OllOlO\
Ol\
Ol
[
ll\
Ollll\
OlOlO\

[
lO\
OOl\
lOO\
Ol
]
]
<
-
2.0f
)
retur\
n
fa\
l\
se
;
}
el\
se
{
if
(
Fabs\

(
llOl\
llO\
l\
l\
lOO
[
ll\
Ol\
lllOl\
OlO\

[
lOOOl\
lOOOl
]
]
)
>
1.0f
)
ret\
urn\

fals\
e
;
}
}
fo\
r
(
;
;
)
{
ll\
O\
ll\
ll\
Olll\
l
++
;
lll\
OO\
OOOOlO\
O
++
;
if
(
ll\
lOOOOO\
OlOO
>
(
llOllll\
lll\
O\
O
+
1
)
*
2
)
{
lOOOOOO\
llO
(
0
,
"PhysicsSolver is Looping: Giving up Now")
;
ret\
urn
fal\
se
;
}
int
lO\
O\
O\
l\
lOOOl\

;
if\

(
llOll\
l\
Olll\
ll\

[
llO\
lllllll\
OO
]
&
llOOOOOllOll
)
{
}
els\
e\

{
con\
st
flo\
at
lll\
OOOOOOl\
O\
l\

=
0.01f
;
if
(
ll\
Ol\
ll\
O\
lll\
OO
[
ll\
OlllllllOO\

]
>
-
lll\
OOOOOOlO\
l
)
{
lOOOO\
OOllO
(
llOllll\
OlOl\
l
<
llOlllll\
ll\
O\
O
+
1
,
ll\
OlOO\
ll\
OOll
)
;
llOll\
llO\
ll\
OO
[
ll\
Ol\
l\
ll\
O\
lOll
++
]
=
ll\
O\
l\
ll\
ll\
llOO
;
re\
tur\
n
true
;
}
}
ll\
lOOO\
OOOll\
O\

(
ll\
Ol\
l\
ll\
lll\
OO
)
;
lOOl\
Ol\
lOlll
(
llOlOOll\
l\
lOO
)
;
if
(
0
)
{
flo\
a\
t\

ll\
l\
O\
OlOlll\

=
0.0f
;
mem\
set\

(
ll\
Oll\
l\
lOll\
O\
l
,
0
,
llOlll\
lOlO\
OO\

->
ll\
OllOlOOlll
*
si\
zeof
(
fl\
oa\
t
)
)
;
for\

(
lOO\
OllOO\
Ol\

=
0
;
lO\
OOll\
OO\
O\
l\

<=
ll\
Ol\
lll\
l\
llOO
;
lO\
OOllO\
O\
Ol
++
)
{
co\
nst
int
lOO\
O\
lOOlO\
O\
O
=
lOOOl\
l\
OOOl\

;
flo\
at
llO\
l\
OlOlllO\

=
llO\
lllOl\
lll\
O
[
lO\
O\
O\
lO\
OlO\
OO
]
;
if
(
ll\
OlO\
lO\
ll\
l\
O\

==
0.0f
)
conti\
nu\
e
;
llOlO\
llOOllO
::
lOOllOOOOO
*
lOO\
lllO\
OOl
=
ll\
OllllO\
O\
llO
->
llOl\
Ol\
l\
O\
lOlO\

[
lOOO\
llOOOl
]
;
for\

(
;
lOOl\
l\
lOO\
Ol
;
lOOl\
l\
lOO\
Ol
=
lOOl\
ll\
O\
OO\
l\

->
llOlO\
llOl\
O\
O\
O
)
{
int
lOOOlOOl\
O\
OO
=
lOOlll\
OOO\
l
->
lO\
OOlOOl\
O\
OO
*
6
;
llOll\
ll\
O\
ll\
Ol\

[
lOOOlOOlOO\
O\

+
0
]
+=
lO\
O\
l\
llOO\
Ol
->
ll\
O\
lOllOOll\
l
[
0
]
*
llO\
lOlOlll\
O\

,
ll\
Ollll\
OllOl
[
lOOOlOO\
l\
O\
O\
O
+
1
]
+=
lOOlllOOOl\

->
llOl\
Oll\
OOlll\

[
1
]
*
ll\
Ol\
OlOlllO\

,
ll\
Ol\
l\
llOllOl
[
lOO\
OlOO\
l\
OOO\

+
2
]
+=
lOOlllOOOl
->
llOl\
Ol\
l\
OOl\
ll
[
2
]
*
llO\
lOlOlllO
,
ll\
Ol\
lllO\
llO\
l\

[
lOOO\
lOO\
lOOO
+
3
]
+=
lOOlllO\
OO\
l
->
llOlO\
l\
l\
OO\
l\
ll\

[
3
]
*
llOl\
O\
l\
Oll\
lO
,
llOl\
l\
llOl\
lOl
[
lOOOlOOlO\
O\
O\

+
4
]
+=
lOO\
lllOOOl
->
llOl\
OllOOlll\

[
4
]
*
ll\
OlOlO\
ll\
lO
,
llOll\
l\
lOllOl
[
lOOOlO\
OlOOO
+
5
]
+=
lOO\
l\
l\
lOOOl
->
llO\
lOl\
lOOlll\

[
5
]
*
ll\
O\
lO\
l\
Ol\
llO\

;
}
}
llO\
ll\
l\
lOlOOO
->
llO\
ll\
OlllO\
lO\

(
llOl\
ll\
lOllOl\

,
llOllll\
OlllO
)
;
for
(
lOOOllO\
OO\
l\

=
0
;
lOOOl\
lOO\
Ol\

<=
llOlll\
llllO\
O
;
lOOOl\
lOOOl
++
)
{
llOlOllOOllO
::
lOOllO\
OO\
OO
*
lOOl\
ll\
OOO\
l
=
llOllll\
OO\
llO\

->
llOlOl\
lOlOlO\

[
lOO\
Ol\
lOO\
O\
l
]
;
if
(
lO\
Oll\
l\
OOOl\

->
lOO\
OlOO\
Olll\

!=
llOllllll\
l\
OO
&&
(
llOlllO\
llll\
l\

[
lOOll\
lO\
OOl
->
lO\
OO\
l\
OOOlll\

]
&
(
ll\
OOOO\
Oll\
Oll
|
lllO\
O\
O\
OOO\
lll
)
)
)
cont\
inue\

;
fl\
oat
lllOOlOlll\

=
0.0f
;
for\

(
;
lO\
OlllOOOl
;
lOOlllOOOl
=
lOOl\
ll\
OO\
O\
l
->
llOlOll\
OlOOO
)
{
in\
t
lOOOlOOlOOO
=
lOOlllO\
OOl\

->
lO\
O\
OlOO\
lOO\
O
*
6
;
ll\
l\
O\
Ol\
O\
lll
+=
lOOlllO\
O\
Ol
->
llOlOl\
lOOl\
ll\

[
0
]
*
llOl\
lllOl\
llO
[
lO\
OOlOOl\
OOO
]
+
lO\
OlllO\
OOl
->
llOl\
Oll\
OOlll
[
1
]
*
llO\
l\
lllO\
l\
l\
lO
[
lOOO\
lO\
OlOOO
+
1
]
;
lll\
OOlOlll
+=
lOO\
l\
l\
l\
OOOl\

->
ll\
O\
lOll\
OO\
lll\

[
2
]
*
ll\
OllllOlll\
O
[
lO\
O\
OlOOlOO\
O
+
2
]
+
lOOlllOO\
Ol
->
llOlO\
llO\
Ol\
ll
[
3
]
*
llO\
l\
ll\
l\
Oll\
lO\

[
lOO\
OlOOlO\
OO
+
3
]
;
ll\
lOOlOlll
+=
lOOlllO\
O\
O\
l
->
llO\
lOllOOlll
[
4
]
*
llO\
lll\
lOlllO
[
lOOO\
lO\
OlOOO\

+
4
]
+
lOO\
lllOO\
O\
l
->
llOl\
OllOO\
lll
[
5
]
*
ll\
Oll\
llOlll\
O
[
lOO\
OlOOlO\
OO
+
5
]
;
}
llOl\
llOll\
lOl
[
lOO\
OllOO\
Ol
]
=
lllOOlOlll
;
}
}
else
if
(
1
)
{
in\
t\

lllOOOOOlOO\
O
=
0
;
for
(
lOOOllOO\
O\
l
=
0
;
lOO\
Ol\
lO\
OOl
<=
ll\
OlllllllOO
;
lOOOl\
lOOO\
l
++
)
{
if\

(
ll\
Olll\
Oll\
llO
[
lOO\
Oll\
OOO\
l
]
!=
0.0f
)
llO\
llllOO\
l\
OO
[
ll\
l\
OOOOOl\
OOO
++
]
=
lOOOl\
lOOOl
;
}
{
fl\
oa\
t
ll\
lO\
O\
l\
Olll
=
0.0f
;
int\

lOOlOOlOl\
O
;
fo\
r\

(
lOOO\
llOOOl\

=
0
;
lOOOllOOOl
<=
llOlllllllOO
;
lO\
OO\
llOOO\
l\

++
)
{
if\

(
lOO\
Ol\
lO\
O\
Ol
!=
llOll\
lllllOO
&&
(
llOl\
l\
l\
Ol\
lll\
l
[
lO\
OOl\
l\
OOOl
]
&
(
llOOOOOll\
O\
ll
|
lllOOOOOOlll\

)
)
)
con\
t\
inue
;
lllO\
OlO\
lll
=
0.0
;
fo\
r\

(
in\
t
lOO\
OlOOl\
l\
l
=
0
;
lOOOlO\
O\
lll\

<
lllOOOO\
O\
lO\
O\
O\

;
lOOOlOOl\
ll\

++
)
{
lOOlO\
O\
lOlO
=
llO\
l\
lll\
O\
O\
lOO
[
lOO\
OlOO\
lll
]
;
ll\
lOOlOlll
+=
llO\
l\
lll\
OOOOl
[
lO\
OO\
l\
lOOOl\

*
lOlO\
OOlO\
Ol\

+
lOO\
lOOlOlO
]
*
llO\
lllO\
l\
l\
llO
[
lO\
OlOOlOlO
]
;
}
llOll\
lOlllOl
[
lOO\
OllOOOl
]
=
lll\
OO\
l\
Olll
;
}
}
}
lOOlOl\
ll\
OO\
l
(
ll\
Ol\
O\
OllllOO\

)
;
flo\
at\

lOOO\
OlOllll
;
in\
t
llOllOl\
lO\
OOl
;
ll\
l\
OOOO\
Ol\
OOl
(
ll\
O\
llll\
lllOO
,
lOOOOlO\
llll
,
ll\
Ol\
lOllOOO\
l
)
;
if\

(
llOl\
l\
OllOOOl\

==
-
1
)
{
TA_A\
S\
SER\
T\

(
llO\
llllOlOll
<
ll\
Olll\
lll\
lO\
O
+
1
)
;
llOll\
l\
l\
Oll\
OO
[
llO\
l\
lll\
OlOll
++
]
=
llOl\
llll\
llOO
;
re\
t\
u\
r\
n\

true
;
}
for
(
lOOOllOOO\
l\

=
0
;
lOO\
OllOOOl
<=
llOllll\
lllOO
;
lOO\
Oll\
OO\
O\
l
++
)
{
lO\
OOOOO\
ll\
O\

(
FloatIsOK
(
llO\
l\
lOl\
OO\
lOl
[
lOOOll\
OO\
O\
l
]
)
,
llOl\
OOll\
OO\
l\
l\

)
;
lOOO\
OOO\
llO
(
Floa\
tIsOK\

(
llOlllOl\
llO\
O
[
lO\
O\
Ol\
lOO\
O\
l\

]
)
,
ll\
OlO\
Ol\
lOOll
)
;
ll\
OllOlOOlOl
[
lOOOllOOOl
]
+=
lOO\
OOlOllll
*
llOlllOllllO
[
lO\
O\
Oll\
OOOl
]
;
llOl\
llOlllO\
O
[
lO\
OOllOOOl
]
+=
lOOOOlO\
ll\
ll
*
llOl\
llOlll\
O\
l
[
lOOOllOOOl\

]
;
TA\
_ASSER\
T
(
lOOOll\
OO\
O\
l
<=
llOlllllllOO
||
llOll\
OlOO\
lOl
[
lOOOl\
l\
OO\
Ol
]
==
0
)
;
lOOO\
OOOllO
(
Float\
IsO\
K
(
llOl\
l\
OlOOlOl\

[
lO\
O\
O\
llOO\
O\
l
]
)
,
llOl\
OO\
llOO\
ll
)
;
lOOOO\
OOllO
(
Fl\
oatIsOK\

(
llOl\
llOlllOO
[
lOOOllO\
O\
Ol
]
)
,
ll\
OlO\
OllO\
Oll\

)
;
}
lOOlOll\
Ol\
ll
(
llOlOOlll\
OOO\

)
;
for\

(
lOOO\
ll\
OOOl
=
0
;
lO\
O\
Ol\
lOOOl\

<
llOllllOl\
OOl\

;
lOO\
Oll\
O\
OOl\

++
)
{
if
(
llO\
ll\
l\
lOlOlO
[
lOOOl\
lOOO\
l
]
==
ll\
OllOllOOOl
)
brea\
k
;
}
if
(
lO\
OO\
ll\
O\
O\
Ol\

!=
llO\
ll\
llOl\
OOl\

)
{
TA_ASSER\
T\

(
ll\
O\
llllO\
lOOl\

>
0
)
;
lllO\
OOOOlOlO
(
llOlll\
lOl\
OOl
,
lOlOOOl\
O\
O\
l
,
llOll\
ll\
OO\
O\
lO
,
lO\
O\
O\
llO\
OOl\

)
;
ll\
OllllOlOOl\

--
;
fo\
r
(
;
lOOOllOOO\
l
<
llOll\
llOlO\
Ol\

;
lOOO\
llO\
O\
Ol
++
)
llOl\
lllO\
lOl\
O
[
lOOOl\
lO\
OOl
]
=
ll\
Ol\
l\
l\
lOl\
O\
lO\

[
lOOO\
l\
lO\
OOl
+
1
]
;
TA_\
A\
SSERT
(
llOlll\
l\
OlOl\
l
<
llOl\
llllllO\
O
+
1
)
;
llO\
llllOl\
lOO
[
llOllllO\
l\
Oll
++
]
=
llOllOl\
lOOOl
;
#ifdef _DEBUG
for
(
lOOOllOOOl\

=
0
;
lOO\
OllOOOl
<
llOl\
ll\
lO\
lOOl
;
lOOOllOOO\
l
++
)
TA_\
ASSE\
RT
(
llO\
llllOl\
Ol\
O
[
lO\
OOllOOOl\

]
==
ll\
Oll\
llOOOl\
l
[
lOOO\
ll\
OOOl
]
)
;
#endif //
}
else
{
fo\
r
(
lOOO\
llOOOl
=
0
;
lOOOllO\
OOl
<
ll\
Oll\
llOlO\
ll\

;
lOOOllOOOl
++
)
{
if
(
llOlll\
lOllOO
[
lOO\
Ol\
lO\
OOl
]
==
llOll\
OllOOOl\

)
break\

;
}
if
(
lOOO\
llOOOl
!=
llOll\
llO\
l\
Oll
)
{
TA_\
AS\
SER\
T
(
llOllllO\
l\
O\
ll
>
0
)
;
if
(
lllO\
OOO\
OlOl\
l
(
llOl\
lllOlOOl
,
lOlOO\
O\
lOOl
,
llO\
llllOOOlO
,
llOllllOOO\
Ol
,
ll\
O\
ll\
OllOOOl
)
)
{
llOllllOlOl\
l\

--
;
fo\
r
(
;
lO\
O\
O\
llOOO\
l\

<
ll\
OllllO\
lOl\
l
;
lOOOllO\
OOl
++
)
llOl\
l\
llOllOO
[
lO\
OO\
ll\
OO\
O\
l
]
=
llOll\
l\
lOllOO
[
lO\
O\
O\
llO\
O\
Ol
+
1
]
;
TA_AS\
SE\
RT\

(
llO\
l\
lllOlOOl\

<
llO\
l\
lll\
l\
llOO
+
1
)
;
ll\
Ol\
lllO\
lO\
lO\

[
ll\
Ol\
l\
llOlO\
Ol
++
]
=
llO\
llOllOOO\
l
;
}
else\

{
llOl\
llOl\
llll
[
llOll\
Oll\
O\
OOl
]
|=
ll\
lOOOOOOl\
ll\

;
}
#ifdef _DEBUG
for\

(
lO\
OOllOOOl\

=
0
;
lO\
OOllO\
OOl
<
llOllllO\
lOO\
l
;
lO\
OOllOO\
Ol
++
)
TA_A\
SSERT
(
llOllllOl\
OlO\

[
lO\
OOl\
lO\
OOl
]
==
ll\
Olll\
lO\
OOll
[
lOO\
Ol\
lOO\
O\
l
]
)
;
#endif //
}
else\

{
if
(
lllOOOO\
O\
lO\
ll
(
llO\
lll\
l\
OlOOl
,
lO\
l\
OOOl\
O\
Ol\

,
ll\
OllllO\
OOl\
O
,
ll\
O\
llllOOO\
Ol
,
ll\
OllO\
llOOOl
)
)
{
TA\
_\
ASSERT
(
llOl\
lllO\
lO\
Ol
<
llOlll\
llllO\
O
+
1
)
;
llO\
lll\
lO\
lOlO\

[
ll\
O\
llllOlOO\
l
++
]
=
ll\
Oll\
OllOOOl
;
}
else
{
TA_AS\
SER\
T
(
ll\
OllllOlOll
<
llOllll\
l\
ll\
OO\

+
1
)
;
llO\
l\
ll\
l\
OllOO
[
llOllll\
OlOll
++
]
=
llOl\
l\
O\
llOO\
O\
l\

;
llOlllOll\
lll
[
ll\
Ol\
lOllOO\
Ol
]
|=
lllOOOOO\
Olll
;
}
#ifdef _DEBUG
for
(
lOOOll\
OOOl
=
0
;
lOOOl\
lOO\
Ol
<
ll\
Ol\
l\
l\
lOlOOl
;
lOOO\
llOOO\
l
++
)
TA_ASS\
E\
RT
(
ll\
OllllOl\
OlO
[
lOO\
Ol\
lOO\
Ol\

]
==
llOlll\
lOOOll\

[
lOOOll\
OOOl\

]
)
;
#endif //
lOOl\
OlllO\
Ol
(
llO\
lOOlllO\
OO
)
;
re\
tu\
rn
tr\
ue
;
}
}
lOO\
lOlllOOl\

(
llO\
lOOlllOO\
O
)
;
}
retu\
rn
true\

;
}
void
lO\
ll\
OlOlO\
OOl\

::
lllOO\
OOOOll\
O
(
int
ll\
O\
l\
ll\
lll\
l\
O\
O
)
{
lOOlOlllOll\

(
ll\
OlOOlll\
Oll
)
;
int\

lOOO\
ll\
OOOl
;
int
ll\
lO\
OOOOl\
lOO
=
lOlOOOlOOl
;
fo\
r\

(
lOOOllOOOl
=
0
;
lOO\
Ol\
l\
O\
OOl
<
llOl\
lllOlOOl
;
lOOOllO\
O\
Ol
++
)
llOllll\
O\
l\
l\
Ol\

[
lOO\
O\
llOO\
O\
l
]
=
-
lllOOOOO\
l\
lOl
(
ll\
Ol\
lllOlO\
lO\

[
lOO\
OllOOO\
l
]
,
llOllllll\
l\
O\
O\

)
;
llOlllllll\
lO
(
ll\
Olll\
l\
Ol\
OO\
l
,
lll\
OOOOO\
llO\
O\

,
llOllllOOOlO
,
llOll\
l\
lOllO\
l\

,
llOll\
llOlllO
)
;
for
(
lO\
O\
OllO\
O\
Ol
=
0
;
lOO\
OllOO\
Ol
<
lOlOOOlOOl
;
lOOOllO\
OOl\

++
)
ll\
OlllOllllO
[
lOOOll\
OOOl
]
=
0.0f
;
llO\
lllOll\
llO
[
ll\
Olll\
ll\
llO\
O
]
=
1.0f
;
for
(
lOOO\
ll\
OOOl
=
0
;
lOO\
OllOO\
Ol
<
ll\
Ol\
ll\
l\
OlOOl
;
lOOOll\
OO\
O\
l
++
)
{
lOOO\
O\
OO\
llO
(
FloatIs\
OK
(
llOllll\
Olll\
O
[
lOOOll\
OOOl
]
)
,
llO\
lOO\
llO\
O\
ll
)
;
ll\
Ol\
llOl\
l\
llO
[
llOl\
lll\
OOOll\

[
lOOOllOOO\
l\

]
]
=
llOllllO\
lllO
[
lOOOllO\
OOl
]
;
}
}
void
lOllOlOlOO\
Ol
::
lllOO\
O\
OOll\
lO
(
int
lllOO\
OOOl\
lll
,
int
ll\
lOOOO\
lOO\
OO\

,
const
float
*
lOO\
Olll\
Ol\
ll\

,
cons\
t
floa\
t
*
llO\
lO\
lllOOll
,
floa\
t
*
lll\
O\
OOO\
lOOOl
)
{
lO\
O\
lOlll\
Oll
(
ll\
O\
l\
OOllllO\
O
)
;
fo\
r
(
int
lO\
OO\
ll\
OOOl
=
0
;
lO\
OOll\
OOOl
<
lllO\
O\
OOOl\
lll\

;
lOO\
Ol\
lOO\
Ol\

++
)
{
fl\
oat
lll\
O\
OlOlll\

=
0.0f
;
for\

(
int
lOOlOO\
lOlO
=
0
;
lO\
OlO\
O\
lOlO
<
lllO\
OO\
O\
O\
ll\
ll
;
lOOlO\
OlOlO
++
)
lllOO\
lOlll
+=
lO\
OOl\
llO\
lll
[
lOOOll\
OOO\
l\

*
ll\
lO\
OOOl\
OOOO
+
lOO\
lOOl\
OlO
]
*
ll\
OlO\
lll\
OOll
[
lO\
OlOOlO\
lO\

]
;
lllO\
OOOlOOO\
l
[
lO\
OOl\
lOOO\
l\

]
=
lllO\
OlOl\
ll
;
}
}
voi\
d
lOllOl\
OlOOO\
l
::
lll\
OOOOO\
lOOl\

(
int
llOl\
l\
l\
l\
lllOO
,
floa\
t
&
lOOOOl\
Ol\
lll
,
int
&
ll\
OllOl\
lOOOl
)
{
lOOlO\
lllO\
l\
l\

(
llOlOOlll\
Ol\
O
)
;
cons\
t\

flo\
at
lll\
OOOOlOO\
l\
O
=
0.1f
;
lOOOOl\
O\
lll\
l
=
k_fM\
axF\
l\
oat\

;
llO\
l\
lOl\
lOOOl
=
-
1
;
if
(
llOlllOll\
lO\
l
[
llOllll\
l\
l\
l\
O\
O
]
<
lllOOOO\
l\
OOlO
*
0.05f
)
{
ll\
Oll\
lOlll\
ll
[
llOlllllllOO\

]
|=
lll\
OOOO\
OO\
ll\
l
;
ll\
Oll\
O\
ll\
OO\
O\
l
=
-
1
;
lOOO\
Ol\
Ol\
ll\
l
=
0.0f
;
return
;
}
if\

(
llO\
lllOlllll\

[
llOlll\
l\
l\
llO\
O
]
&
llO\
OO\
OO\
ll\
Ol\
l
)
{
if
(
Fa\
bs
(
ll\
Oll\
l\
Olll\
O\
O
[
llOl\
lll\
lll\
OO
]
)
>
lllOOO\
O\
lOO\
lO
*
5.0f
&&
llOlllOll\
lO\
l
[
ll\
OlllllllO\
O
]
>
ll\
lOOOOl\
O\
Ol\
O\

*
0.5f
)
{
llOllOl\
lOO\
Ol
=
llOlllll\
ll\
OO
;
lO\
O\
OOlO\
l\
lll
=
-
ll\
O\
lll\
O\
lllOO
[
llOll\
lllllOO\

]
/
llOlllO\
l\
llO\
l
[
llO\
llll\
lllO\
O
]
;
}
else
{
llOl\
l\
lO\
l\
llll
[
llOl\
ll\
l\
lllOO\

]
|=
lllOOOOO\
Olll
;
llOll\
Ol\
lOOOl\

=
-
1
;
lO\
OOOl\
Ollll
=
0.0f
;
ret\
urn\

;
}
}
el\
se
{
if\

(
ll\
OlllOlll\
OO
[
llOllllll\
lOO
]
<
-
lllOOO\
OlOOl\
O
*
0.1f
&&
llOl\
llOll\
l\
O\
l
[
llO\
llll\
ll\
lO\
O
]
>
ll\
l\
OOOOl\
OOlO\

*
0.01f
)
{
ll\
O\
llOl\
l\
OOO\
l
=
llO\
ll\
lllll\
OO
;
lOOOOlOl\
lll
=
-
llOlll\
Olll\
OO
[
llOlll\
lll\
lOO\

]
/
ll\
Ol\
llOl\
ll\
Ol
[
llOll\
ll\
lllOO\

]
;
}
else
{
ll\
OllOl\
lOOOl
=
-
1
;
lOO\
OO\
lO\
llll
=
0.0f
;
re\
turn
;
}
}
fl\
oat
lOOOOOllll
=
Si\
gn
(
lOOOOlOl\
lll
)
;
if
(
lOOOO\
O\
llll
==
0.0f
)
lO\
OO\
OO\
llll\

=
1.0f
;
int
lOOO\
l\
lO\
O\
Ol\

;
bool
lllO\
O\
OO\
lO\
Oll
=
false
;
for
(
lOO\
Ol\
lOOOl
=
0
;
lOOO\
l\
l\
OOOl\

<
llOl\
l\
l\
lOlOO\
l\

;
lOOOllO\
OOl
++
)
{
int
lOOl\
OOlOl\
O
=
ll\
Oll\
llO\
lOl\
O
[
lO\
OO\
llOO\
Ol\

]
;
if\

(
llOl\
l\
l\
Olllll\

[
lOOlOOlOl\
O\

]
&
ll\
lOOO\
OOO\
lll
)
con\
ti\
nue\

;
if
(
llOlllOlll\
l\
l
[
lOO\
l\
OOlOlO\

]
&
llOOOOOll\
Oll
)
{
if
(
Fa\
bs
(
llOllOlO\
O\
lOl
[
lOOlOOlOl\
O\

]
+
lOO\
OO\
lOl\
lll
*
ll\
O\
lllO\
llllO\

[
lOOl\
OOlOlO
]
)
<
Fabs
(
llO\
llOl\
OOlOl
[
lO\
OlOOlOlO
]
)
*
0.001f
)
{
ll\
lO\
OOOl\
O\
Oll
=
true
;
lOOOO\
lOlll\
l
=
0.0f
;
llOll\
Oll\
OOOl\

=
lOOlOOl\
OlO
;
llOl\
llOlllll\

[
lOOlOOlOlO
]
|=
lllO\
OOOO\
Olll
;
}
}
else
if
(
llOlllOl\
ll\
l\
O
[
lOOlOOl\
OlO
]
*
lO\
O\
O\
OOllll
<
0.0f
&&
Fabs
(
llOlllOl\
l\
llO\

[
lO\
Ol\
OOlOlO
]
)
>
Fab\
s\

(
ll\
OllOlOOlOl
[
lOOl\
OOlOlO
]
*
0.001f
)
)
{
fl\
o\
at
lll\
OOOOlO\
lOO
=
-
ll\
Oll\
OlOOl\
Ol\

[
lOO\
lO\
OlOlO
]
/
ll\
O\
lllO\
lll\
lO\

[
lOOlOOlOlO
]
;
if\

(
ll\
lOOO\
OlO\
l\
OO
<
lO\
OO\
OlOl\
l\
ll
*
lOOO\
OOllll
)
{
lllOOOO\
l\
O\
Oll
=
tr\
ue
;
lO\
O\
O\
O\
lOll\
ll
=
lll\
OOOOlO\
l\
OO
;
llO\
llOl\
lOOOl
=
lOOl\
OOl\
Ol\
O\

;
}
}
}
for
(
lOOOllO\
OOl
=
0
;
lOOOll\
OOOl
<
llO\
ll\
llOlO\
ll
;
lOOOll\
OOOl
++
)
{
in\
t
lOO\
lO\
Ol\
OlO
=
ll\
Oll\
llO\
ll\
OO
[
lOO\
O\
llOOOl\

]
;
if
(
llOl\
l\
lO\
lllll
[
lOO\
lO\
OlOl\
O
]
&
lllO\
OOO\
O\
Olll
)
co\
n\
t\
in\
ue\

;
if
(
llOll\
l\
Oll\
l\
l\
l
[
lO\
OlOO\
lOlO
]
&
ll\
OO\
O\
OOl\
l\
Ol\
l
)
{
}
el\
se\

if
(
ll\
OlllO\
l\
l\
l\
O\
l
[
lOOlOO\
lOlO
]
*
lOOO\
OOllll\

<
-
lllOOOO\
lOOlO\

)
{
fl\
oat
lll\
OOOOlO\
lO\
O
=
-
ll\
OlllO\
lllO\
O
[
lOOlOO\
l\
OlO
]
/
llO\
lllOll\
lOl\

[
lOO\
lOOlOl\
O
]
;
if
(
llOl\
lOll\
OOOl
==
llOll\
ll\
l\
llOO
)
{
if
(
lllOOO\
O\
lOlO\
O\

<
lOOOOlO\
llll
*
lOOOOOlll\
l
-
lllOOO\
OlO\
OlO\

)
{
lllO\
OOOlOOll\

=
fal\
s\
e
;
lOOO\
OlOllll
=
ll\
l\
OOOOlO\
lOO\

;
llOllO\
llOOOl\

=
lOO\
lOOlOl\
O\

;
}
}
el\
s\
e
{
if\

(
lllOO\
O\
Ol\
O\
l\
O\
O
<
lOO\
O\
Ol\
Ollll\

*
lOOOO\
Ol\
lll\

)
{
lllO\
OOOlOOll
=
fal\
s\
e
;
lO\
OO\
O\
lO\
lll\
l\

=
lllOO\
O\
OlOlOO
;
llOllOl\
lOO\
Ol\

=
lOOlO\
OlOl\
O\

;
}
}
}
}
TA\
_\
A\
SS\
ERT\

(
llOllOllOOOl
!=
-
1
)
;
if
(
lllOOOOlOOl\
l\

&&
Fabs
(
llOllO\
lOOlOl
[
llO\
llOllOO\
O\
l
]
<
0.0f
)
)
{
TA\
_\
ASSERT
(
llOll\
OllO\
OOl
!=
-
1
)
;
if
(
!
(
llO\
ll\
lOl\
llll
[
llOll\
OllOOO\
l
]
&
ll\
OOOOOllOll
)
)
llO\
l\
l\
l\
O\
lllll
[
ll\
OllOllOOOl\

]
|=
lllOOO\
OO\
Olll
;
}
}
voi\
d
lOllOl\
Ol\
O\
OOl
::
lll\
OO\
OOlO\
lOl
(
in\
t\

lO\
O\
l\
llOllO
,
float
*
lOOO\
ll\
l\
Olll\

,
float
*
llOlllOl\
OOOO\

,
float
*
llO\
lllOl\
OO\
O\
l
)
{
int
lO\
O\
Ol\
l\
OOOl
,
lOOlOOlO\
l\
O
,
lOO\
lOlOOOl
,
llOlOOll\
O\
O
;
fl\
o\
at
lllO\
O\
lOlll
;
for
(
lOO\
OllO\
O\
O\
l
=
0
;
lO\
O\
OllOO\
Ol
<
lOOlll\
O\
llO\

-
1
;
lOO\
O\
llOOO\
l
++
)
{
llOlOO\
llOO
=
lO\
OOll\
OOO\
l
;
fo\
r
(
lOOlOOl\
OlO
=
lO\
OOllOOO\
l
;
lOOlOOlOl\
O
<
lOOlllO\
l\
l\
O
;
lO\
OlOOlOl\
O
++
)
{
if
(
Fabs
(
lOOOl\
llOll\
l
[
lOOl\
OOl\
O\
l\
O
*
lO\
OlllO\
llO
+
lO\
OOll\
OOOl\

]
)
>
Fab\
s
(
lOOOlllOl\
ll\

[
llOlO\
OllOO
*
lOOlllOll\
O
+
lOOOl\
lOOOl\

]
)
)
llOlOO\
ll\
OO
=
lOOlOO\
lO\
lO
;
}
for
(
lOOlOlOOO\
l
=
lOOOllOOOl\

;
lO\
O\
l\
Ol\
OO\
O\
l
<
lOOlllOllO
;
lOOlOlO\
OOl
++
)
{
lllOO\
lO\
l\
ll
=
lOOOlllO\
lll
[
lOOOllOOO\
l
*
lOOlllO\
llO
+
lO\
OlOlOOOl
]
;
lOOOl\
llOl\
ll
[
lOOOllOOOl
*
lOOl\
l\
lOllO\

+
lOOlO\
lOOO\
l\

]
=
lO\
O\
OlllOlll\

[
ll\
Ol\
OO\
llO\
O\

*
lOOlllO\
llO
+
lO\
Ol\
OlOO\
O\
l\

]
;
lOOO\
lll\
Oll\
l
[
llOlOO\
ll\
OO
*
lOO\
ll\
lOl\
lO\

+
lOO\
l\
OlOOOl\

]
=
ll\
lOOl\
Olll
;
}
lll\
OO\
l\
Ol\
ll
=
llOlllO\
lOO\
OO\

[
lOOOl\
lOOOl
]
;
ll\
Oll\
l\
OlOOOO
[
lOOOllOO\
Ol
]
=
llO\
ll\
lOlO\
OOO
[
ll\
O\
lOO\
llO\
O\

]
;
ll\
Ol\
ll\
OlOOOO
[
llO\
lOO\
ll\
OO
]
=
ll\
lOOlOlll
;
for
(
lOOlOOlOlO
=
lOOOllO\
OOl
+
1
;
lO\
OlOOlOl\
O
<
lOOlllO\
l\
l\
O
;
lOO\
lOOlOlO
++
)
{
fl\
o\
a\
t
ll\
Ol\
l\
l\
OllO\
l\
O\

=
lOOO\
lllOl\
l\
l
[
lOOlOO\
lO\
l\
O
*
lOOl\
llOllO
+
lOO\
O\
l\
lOOOl
]
/
lOOO\
lllO\
lll
[
lOOOllO\
O\
Ol
*
lOOlll\
Ol\
l\
O
+
lO\
OOllO\
OOl
]
;
lOOOOOOllO
(
Fabs
(
lOOOlll\
Olll
[
lOOOl\
lO\
O\
O\
l
*
lOOl\
ll\
OllO
+
lOOOl\
lOOOl
]
)
>
0.0001f
,
ll\
OlO\
OllOOl\
l
)
;
lOOOO\
OOllO
(
FloatIs\
O\
K
(
llOlllOl\
l\
OlO\

)
,
llO\
lO\
OllOOl\
l
)
;
ll\
Ol\
llOlOO\
OO
[
lOOlO\
Ol\
OlO
]
-=
llO\
lllOl\
OO\
OO
[
lOOOllOOOl\

]
*
llOlllOllOl\
O
;
for
(
lOO\
l\
OlOOOl
=
lOOlll\
OllO
-
1
;
lOO\
l\
O\
lOOOl
>=
lO\
O\
OllOOO\
l
;
lOOlOlOO\
Ol\

--
)
lOO\
OlllOll\
l
[
lOO\
l\
O\
Ol\
Ol\
O
*
lO\
O\
ll\
l\
Oll\
O
+
lOOlOl\
OOOl
]
-=
lOOOlllOlll\

[
lOO\
O\
llO\
OOl\

*
lO\
Ol\
ll\
O\
ll\
O
+
lOOl\
O\
lOOOl
]
*
ll\
OlllO\
l\
lOlO\

;
}
}
for\

(
lO\
OlOOlOlO
=
lO\
O\
lll\
O\
ll\
O
-
1
;
lOOlO\
OlOlO
>=
0
;
lO\
OlOO\
lOl\
O
--
)
{
float
llOl\
ll\
OllOlO
=
lO\
O\
OlllO\
l\
l\
l
[
lO\
OlO\
OlOl\
O
*
lO\
O\
lllOllO
+
lO\
OlO\
O\
lOlO
]
;
ll\
Oll\
lO\
llOlO
=
1.0f
/
llOlllO\
ll\
Ol\
O\

;
lll\
OOl\
O\
ll\
l
=
0.0f
;
for
(
lOOlOlOOOl\

=
lOO\
l\
OO\
lOl\
O
+
1
;
lO\
OlO\
lOOO\
l
<
lOOll\
lOll\
O
;
lO\
O\
l\
O\
lOO\
Ol
++
)
lllOOlOlll
+=
lOO\
O\
lllOll\
l
[
lO\
Ol\
OOlOl\
O
*
lO\
Olll\
Ol\
lO
+
lOO\
lOlOOO\
l
]
*
ll\
O\
lll\
OlOOO\
l\

[
lO\
Ol\
OlOOO\
l
]
;
llOl\
l\
l\
OlOOOl
[
lO\
OlOOlO\
lO
]
=
(
llOl\
l\
lO\
lOOOO\

[
lOO\
lOOlOl\
O\

]
-
lllO\
Ol\
O\
lll\

)
*
llOlll\
OllOlO
;
lOO\
OO\
OOllO
(
Float\
IsOK\

(
llOl\
l\
lO\
l\
OOOl\

[
lOOl\
OOlOlO
]
)
,
llOlO\
OllOO\
ll
)
;
}
}
vo\
id\

lOllO\
lOlOO\
Ol
::
ll\
lO\
OO\
Ol\
OllO
(
int
lOO\
l\
llO\
llO
,
float
*
lOO\
O\
lll\
Olll
,
float
*
llOlll\
OlO\
O\
OO
,
floa\
t
*
ll\
O\
ll\
lOlOOO\
l
)
{
int\

lOOOllOOOl
;
int
lOOl\
O\
OlOlO
;
in\
t
lOO\
lOl\
O\
OOl
;
flo\
a\
t\

llOlOlOllllO
;
for
(
lO\
OlOOlOlO\

=
0
;
lO\
OlOOlOlO
<
lOOl\
l\
l\
OllO
;
lOO\
l\
OO\
lOlO
++
)
{
for\

(
lOOOllO\
O\
Ol
=
lO\
OlOOlOlO
;
lOO\
Oll\
O\
OOl\

<
lO\
Ol\
l\
lOl\
lO
;
lOOOllOOO\
l\

++
)
{
llOlOl\
OllllO\

=
lO\
OOlllOlll
[
lOOOllOOOl
*
lOOlll\
O\
ll\
O\

+
lOOlOOl\
OlO\

]
;
for
(
lO\
OlO\
lO\
OOl
=
0
;
lOOlOlOOO\
l\

<
lOOlOOl\
OlO
;
lOO\
lOl\
OOO\
l
++
)
llOlOlOllll\
O
-=
lOO\
Olll\
Olll
[
lO\
OOll\
OOOl
*
lOOlllOllO
+
lOOlOlOOOl
]
*
lO\
OOlllOl\
ll
[
lOOlO\
O\
lOlO
*
lOOl\
llOllO
+
lOO\
lOlOOO\
l\

]
;
if
(
lOOOllOOO\
l
==
lO\
OlO\
OlO\
lO
)
{
if
(
llOlOlOlll\
l\
O\

<
0.0f
)
{
TA_ASSE\
R\
T
(
0
)
;
llOlO\
lOllll\
O
=
0.0f
;
}
lOOO\
lll\
Ol\
ll
[
lO\
OOllOOOl
*
lO\
O\
lllO\
llO\

+
lO\
OlOO\
l\
OlO\

]
=
Sqrt
(
ll\
Ol\
OlOll\
ll\
O\

)
;
}
el\
se
{
TA_A\
S\
SERT
(
Fabs
(
lOOOlllOlll\

[
lOOlOOl\
OlO
*
lOO\
lll\
OllO\

+
lOOlOO\
lOlO
]
)
>
0.0f
)
;
lOO\
O\
l\
llOlll
[
lO\
OO\
llOOOl
*
lOOll\
lOllO
+
lOOlOOl\
OlO
]
=
llOlOlOllllO
/
lOOOlllOlll
[
lOOlOOl\
OlO
*
lOOl\
ll\
Oll\
O
+
lOOlOO\
l\
Ol\
O
]
;
}
}
}
for
(
lOO\
OllOOOl\

=
0
;
lOOO\
l\
l\
O\
OO\
l
<
lOOlllOll\
O
;
lO\
OO\
l\
lO\
O\
Ol
++
)
llOlll\
OlOO\
Ol
[
lOOOl\
lOOOl
]
=
llOlll\
Ol\
OOO\
O
[
lO\
OOl\
lOO\
Ol
]
;
fo\
r
(
lOOOllOOOl
=
0
;
lOOO\
l\
lOOOl
<
lOOlllOllO\

;
lO\
OOllOO\
O\
l
++
)
{
ll\
O\
l\
Ol\
Oll\
llO
=
llOll\
lOlOOOl
[
lOOOl\
l\
OOOl\

]
;
for
(
lOOlOlO\
OOl
=
lOOOllO\
OOl\

-
1
;
lOOlOlOOOl
>=
0
;
lOOlOlOO\
Ol
--
)
llOl\
OlO\
llll\
O
-=
lOOOl\
l\
lOlll
[
lOOOllOOO\
l
*
lOO\
lllO\
ll\
O
+
lOOlOlOOOl
]
*
llO\
ll\
lOl\
OO\
Ol
[
lOOlOlOOOl\

]
;
ll\
OlllOlOOO\
l\

[
lOOOll\
OO\
Ol
]
=
llOl\
OlOl\
l\
llO
/
lOO\
Olll\
Ol\
ll\

[
lOOOll\
OOOl\

*
lOO\
lllO\
llO
+
lOOOllOOOl\

]
;
}
for\

(
lOOOll\
OOOl
=
lOOlllO\
llO
;
--
lOOOllOO\
O\
l
>=
0
;
)
{
llOlO\
l\
O\
llllO
=
ll\
OlllO\
lO\
OOl
[
lOOOllO\
OOl
]
;
for
(
lOOl\
OlOOOl\

=
lOOOllOOO\
l
+
1
;
lO\
OlOlO\
OOl
<
lOOlllOll\
O\

;
lO\
OlOlOOO\
l
++
)
llO\
l\
OlOllllO
-=
lOO\
Ol\
llO\
lll
[
lOOlOlOOOl
*
lOO\
l\
l\
lO\
l\
lO
+
lOOO\
llO\
OOl
]
*
llOlll\
O\
l\
OOOl
[
lOOl\
O\
lOOOl
]
;
ll\
Ol\
l\
lO\
l\
OOOl
[
lOOOllOOOl
]
=
llOl\
OlOllllO
/
lO\
OOlllOlll
[
lOOOllOO\
Ol
*
lOOlll\
Oll\
O
+
lO\
OOllOOOl
]
;
}
}
void
lO\
l\
lOlO\
l\
OOOl
::
llO\
l\
OlOlllOl
(
int
lOO\
l\
llOllO\

,
int
llOOOl\
Ol\
llll
,
fl\
o\
at\

*
lO\
O\
OlllOll\
l\

,
float
*
llO\
lll\
OlOOO\
O
,
flo\
at\

*
llOlll\
O\
l\
O\
OOl
)
{
llO\
lOlOll\
lO\
l
(
lOO\
ll\
l\
Oll\
O
,
llOO\
OlO\
lll\
ll
,
lOOOlllOll\
l\

)
;
llO\
llllllllO\

(
lO\
OlllOl\
lO
,
llOOOlOll\
ll\
l
,
lOO\
O\
lllOlll\

,
llOlllOl\
OOOO
,
llOlllO\
l\
OOOl
)
;
}
vo\
id
lOl\
lOlOlOOOl
::
llOlOlOlllOl
(
int
lO\
Oll\
lOllO
,
int
llOO\
OlOll\
l\
ll
,
float
*
lOOOll\
lOlll
)
{
lO\
OlOll\
lOll
(
ll\
OlOO\
llOllO
)
;
in\
t
lOOOllOOOl
;
int
lOOlOOlO\
lO
;
int
lO\
OlOlOOO\
l
;
fl\
oat
ll\
Ol\
OlO\
l\
lllO
;
for
(
lOOlOOl\
OlO
=
0
;
lO\
OlOOlOl\
O
<
lO\
Oll\
lO\
llO\

;
lOO\
lOOlO\
lO\

++
)
{
for
(
lOO\
O\
l\
lO\
OOl
=
lOOlO\
O\
lOlO
;
lOOOllOO\
Ol
<
lOOlllOllO
;
lOO\
OllOOOl
++
)
{
llOlOlOl\
l\
llO
=
lOOOlllOlll
[
lOOOllOO\
O\
l
*
llOOOlOll\
lll
+
lOOlO\
OlO\
l\
O
]
;
for
(
lOOl\
O\
lOOOl
=
0
;
lO\
OlO\
lOOOl
<
lO\
Ol\
O\
OlOlO\

;
lOO\
l\
OlOOO\
l
++
)
{
llOlOlOllllO\

-=
lOOOll\
lOl\
ll
[
lOOOllOOO\
l
*
llOOOlO\
lllll
+
lOO\
lOlOOOl
]
*
lO\
O\
OlllOl\
ll
[
lOO\
lOO\
l\
OlO
*
llOOOl\
Olllll
+
lOO\
lO\
lOOOl
]
*
lOO\
O\
lllOlll
[
lOOlOlOOO\
l\

*
ll\
OO\
OlOlllll
+
lO\
OlO\
lO\
OOl
]
;
}
if
(
lOO\
Ol\
l\
O\
O\
Ol\

==
lOO\
l\
OO\
lOlO
)
{
{
}
lOOO\
lll\
O\
l\
ll
[
lOO\
Ol\
l\
O\
OOl
*
ll\
OOOlO\
llll\
l
+
lOOlOOlOl\
O
]
=
llO\
lOlO\
llllO
;
}
else
{
TA_AS\
SERT\

(
Fabs
(
lOOOl\
ll\
O\
ll\
l
[
lOOlO\
O\
l\
O\
lO
*
llOOOlO\
l\
ll\
l\
l
+
lOO\
lO\
O\
lOlO
]
)
>
0.0f
)
;
lOOOlllOlll\

[
lOOOllOOO\
l
*
ll\
OO\
OlOl\
l\
lll
+
lOO\
l\
OO\
l\
OlO
]
=
llOl\
OlOll\
ll\
O
/
lOOO\
lllOlll
[
lOOlOOlOlO
*
ll\
OOOlO\
l\
ll\
l\
l
+
lOO\
l\
OOlO\
lO
]
;
}
}
}
}
vo\
id
lOll\
OlOlO\
OOl
::
llO\
ll\
ll\
l\
ll\
lO
(
int
lOOlllO\
l\
l\
O
,
int
llOO\
OlOll\
lll\

,
fl\
o\
a\
t\

*
lOOOlllOll\
l
,
float
*
ll\
Oll\
lOl\
OOOO\

,
float\

*
llO\
ll\
l\
O\
lOOOl
)
{
lOO\
lOll\
lO\
l\
l
(
ll\
O\
l\
OOllOll\
O
)
;
int
lOO\
O\
ll\
OOOl
;
int\

lOOlO\
lOO\
Ol
;
fl\
oa\
t
llOlOlOllllO
;
for
(
lOOO\
l\
lOOOl\

=
0
;
lO\
OOl\
l\
OOOl
<
lOOlll\
O\
l\
lO\

;
lO\
O\
Ol\
lOOOl\

++
)
llOlll\
O\
lOO\
Ol
[
lO\
OOllOO\
Ol\

]
=
llOlllOlOO\
OO
[
lOOOl\
l\
OOO\
l
]
;
for\

(
lOOOll\
O\
OOl\

=
0
;
lO\
O\
Ol\
lOOOl
<
lOO\
l\
l\
lOllO
;
lO\
OOl\
lOO\
Ol
++
)
{
llO\
lOlOll\
ll\
O
=
llOlllOlOOOl\

[
lOO\
OllOO\
Ol
]
;
for
(
lO\
Ol\
OlO\
OOl
=
0
;
lOO\
lO\
lOOOl
<
lOOOllOOOl
;
lOOlOl\
O\
OO\
l\

++
)
llO\
lO\
lOl\
lllO\

-=
lOOOl\
l\
lOll\
l\

[
lOOOl\
l\
O\
O\
Ol
*
llO\
OOlO\
lllll
+
lOOl\
O\
lOOOl
]
*
llOlllOl\
O\
OOl
[
lO\
OlOlOOOl
]
;
ll\
OlllOlOOOl
[
lO\
OOllO\
OOl
]
=
llOlOlOllllO
;
}
for\

(
lOO\
OllO\
OOl\

=
0
;
lOOO\
llOOO\
l\

<
lOOl\
l\
l\
Oll\
O
;
lOO\
OllOOOl
++
)
llO\
l\
llOlOOOl
[
lO\
OOll\
O\
O\
Ol\

]
/=
lO\
O\
Olll\
Oll\
l
[
lOOOl\
lOOOl
*
llOOOl\
Oll\
l\
l\
l
+
lOO\
Ol\
lOOO\
l
]
;
fo\
r
(
lO\
OOllOOOl
=
lO\
Olll\
OllO\

;
--
lO\
O\
Ol\
lOO\
Ol
>=
0
;
)
{
ll\
Ol\
Ol\
Oll\
ll\
O
=
llO\
ll\
lOl\
OO\
Ol
[
lO\
O\
Ol\
lO\
OO\
l
]
;
for
(
lOO\
lOl\
OOOl\

=
lOOOl\
lO\
O\
Ol
+
1
;
lOO\
lOl\
OOOl\

<
lOOl\
llOl\
lO
;
lOOl\
Ol\
OOO\
l
++
)
llO\
lO\
lOllllO
-=
lOO\
Oll\
lOl\
l\
l\

[
lOOlO\
l\
O\
OO\
l
*
llOOO\
l\
O\
lllll
+
lOO\
O\
llOO\
Ol\

]
*
llOlllOlOO\
O\
l
[
lOOlOlOOO\
l
]
;
llOlllO\
lOOO\
l
[
lO\
OOl\
lO\
OOl
]
=
ll\
OlOlOlll\
l\
O
;
}
}
voi\
d
lOl\
lOlOlOOOl
::
ll\
lOOOO\
l\
Olll\

(
int\

lO\
OlllOl\
l\
O
,
int
llOOO\
lOl\
l\
l\
ll\

,
float
*
lllO\
OOOllO\
O\
O
,
float
*
lllOOOOllO\
Ol
)
{
TA\
_ASSERT
(
0
)
;
}
vo\
id\

lOllOlOl\
OOOl
::
lllOOOO\
OlOlO\

(
in\
t
lO\
OlllOllO
,
int\

llOOOlOl\
ll\
ll
,
flo\
at
*
lOOOlllOl\
ll
,
int
lllOOOOll\
Ol\
O\

)
{
lO\
OlOlll\
O\
ll\

(
llOl\
OO\
l\
lOllO
)
;
int
lOOOllO\
OO\
l
;
in\
t
lOOlOOlOlO
;
#define llOlllOOllll(lOOOllOOOl) lOOOlllOlll[(lOOOllOOOl) * llOOOlOlllll + lllOOOOllOlO]
#define lllOOOOllOll(lOOOllOOOl, lOOlOOlOlO) lOOOlllOlll[(lOOOllOOOl) * llOOOlOlllll + (lOOlOOlOlO)]
floa\
t
llOllOl\
lll\

=
Sqrt\

(
llOll\
lO\
Oll\
ll
(
ll\
lOO\
OOll\
OlO
)
)
;
for
(
lOOlOOlO\
lO
=
ll\
lOOOOl\
lOlO
+
1
;
lOOlO\
OlO\
lO
<
lOOlll\
OllO\

;
lO\
O\
lOOlOlO
++
)
llOll\
lO\
Ol\
lll
(
lO\
O\
lOOlOlO
)
*=
llOllO\
llll
;
flo\
at
lll\
O\
OOOlllOO
=
1.0f
;
for
(
lOOl\
OOlOlO
=
lllOOO\
Ol\
lO\
lO
+
1
;
lOOlO\
O\
lOlO
<
lOOlllO\
llO
;
lOOl\
OOlOlO
++
)
{
float
lllO\
O\
O\
Olll\
Ol
=
llOlllOOllll
(
lOOl\
O\
O\
lOlO\

)
;
float
lO\
lll\
l\
lOlO\

=
lll\
OO\
OO\
lll\
O\
O
+
lllOO\
OOl\
llOl
*
lll\
O\
O\
O\
Oll\
lO\
l
/
lll\
OO\
O\
Oll\
Oll
(
lOOlOOlOl\
O
,
lOOlOOl\
O\
lO
)
;
float\

ll\
lOOOO\
lll\
lO
=
lllOOOOlllOl
/
(
lllO\
O\
OOllOll
(
lOOlOOlOl\
O
,
lO\
OlOOlOl\
O
)
*
lOlllllOlO\

)
;
lOO\
O\
OOOllO\

(
lllOOOOll\
lOO\

>
0.0f
,
llOlOOllOOl\
l
)
;
ll\
lOO\
OOl\
lOl\
l
(
lOO\
lO\
OlOlO
,
lOOlO\
OlO\
l\
O
)
=
lllOOOOll\
Ol\
l
(
lOOlO\
OlO\
lO\

,
lOOlO\
O\
lO\
lO
)
*
lOl\
llllOl\
O\

/
lllOOO\
O\
lllO\
O\

;
lOOOOOO\
l\
lO\

(
lllOOO\
OllOl\
l
(
lO\
O\
lO\
OlOlO
,
lOOl\
OOlOlO
)
>
0.0f
,
llOlOOllO\
Oll
)
;
fo\
r
(
lOOOllOO\
O\
l
=
lOO\
lOOlOl\
O
+
1
;
lOOO\
ll\
OO\
Ol
<
lOO\
lllOl\
l\
O\

;
lOOOl\
lOOOl
++
)
{
llOl\
llOO\
llll
(
lOOOllO\
OOl
)
=
llOl\
llOOllll
(
lOO\
Ol\
lO\
OOl
)
-
lll\
OOOOlll\
Ol
*
lllO\
OOOl\
l\
Oll
(
lOOOllOO\
O\
l
,
lOOlO\
Ol\
OlO
)
;
ll\
lOOOOllO\
ll
(
lO\
O\
Ol\
l\
OOO\
l
,
lO\
OlOOl\
Ol\
O
)
=
ll\
l\
O\
OOO\
llOll
(
lO\
OOllOO\
Ol\

,
lOOlOOlOlO
)
+
lllO\
O\
OO\
llllO\

*
llOlllOOl\
lll
(
lOOOllOOOl
)
;
}
lllO\
O\
OOlllOO
=
lOl\
l\
ll\
lOl\
O\

;
}
#undef llOlllOOllll
#undef lllOOOOllOll
for\

(
lO\
OlOO\
l\
OlO\

=
ll\
lOOOOll\
O\
l\
O
;
lOO\
lOOlOl\
O
<
lOOlllO\
llO\

-
1
;
lOO\
lO\
OlO\
lO
++
)
{
ll\
Oll\
llOOO\
ll
[
lOOlO\
OlOl\
O
]
=
llOll\
llOOO\
ll
[
lOOlOOlOl\
O
+
1
]
;
for\

(
lOOOllO\
O\
Ol
=
lOOl\
OOlOlO
;
lOOOllOO\
Ol
<
lOOl\
ll\
OllO
-
1
;
lOOOllOOO\
l
++
)
lOOOlll\
O\
ll\
l
[
lOOOl\
l\
OO\
Ol
*
llOO\
OlOlllll
+
lOOlOO\
lOlO
]
=
lO\
OOlllOlll\

[
(
lOOO\
l\
l\
OOOl
+
1
)
*
llOOOl\
O\
l\
lll\
l\

+
lOOlOO\
lOlO\

+
1
]
;
}
for
(
lO\
OlOO\
lOlO
=
0
;
lOOlOOl\
OlO
<
lllOOOOllOl\
O
;
lOOlOOlOlO
++
)
fo\
r
(
lOO\
O\
llOOOl
=
ll\
l\
OOO\
OllOl\
O
;
lO\
OOll\
OOOl\

<
lOOlll\
Ol\
lO
-
1
;
lOOO\
l\
lOOOl\

++
)
lOOOl\
llOlll\

[
lOOOll\
OO\
Ol
*
ll\
O\
OOl\
Olll\
l\
l
+
lOOlO\
Ol\
O\
lO
]
=
lOOO\
ll\
lOlll
[
(
lOOOllOOO\
l
+
1
)
*
llOO\
Ol\
Oll\
l\
l\
l\

+
lOOlOOlOlO
]
;
}
boo\
l\

lO\
llOlOlO\
O\
O\
l
::
ll\
lOO\
OOOl\
O\
ll
(
int
lOOlllOllO
,
int
llO\
OOlO\
lllll
,
fl\
oat
*
lllOOOOll\
lll
,
co\
nst
flo\
at\

*
ll\
l\
OOOlOOOO\
O
,
int
lll\
OOOlOOOO\
l
)
{
lOOlO\
lll\
O\
l\
l
(
llOlOOllO\
l\
lO
)
;
TA_A\
SSE\
R\
T
(
lO\
Oll\
lOllO
<
llO\
OOlOlllll
)
;
llOllllOOOll
[
lOOl\
llO\
llO
]
=
ll\
lOOOlOOOOl\

;
int
lOO\
Ol\
lOOOl
;
int
lOOl\
OOlOlO
;
int
lOOlOlO\
OOl
;
float
llO\
lOlOll\
l\
lO\

;
for\

(
lOOlOOl\
O\
l\
O
=
0
;
lOO\
lO\
Ol\
OlO
<
lOOll\
lOl\
lO\

+
1
;
lOOlO\
OlOl\
O
++
)
{
lOO\
OllOO\
Ol
=
lOO\
l\
llOl\
lO
;
{
llOlOlOlll\
l\
O
=
lllOO\
Ol\
OO\
OOO\

[
ll\
lOO\
OlOOOOl
*
llOOOlOll\
l\
ll
+
llO\
ll\
llOOOll\

[
lOOlO\
Ol\
OlO\

]
]
;
for
(
lOOlOlO\
OO\
l
=
0
;
lOOlOlOOO\
l
<
lOOlOOlOl\
O
;
lOOlOlOOOl\

++
)
{
llO\
lOlO\
llllO
-=
lll\
OOOOllll\
l
[
lOOOl\
lOOOl
*
ll\
OOOlOlllll
+
lO\
OlOlOO\
Ol
]
*
ll\
lOOOO\
lllll
[
lOOlOOlOl\
O
*
llOO\
OlOlllll
+
lOO\
lOlOO\
O\
l
]
*
lllOOOOllll\
l
[
lOOl\
OlOOOl
*
llOOOlOlll\
ll
+
lOOlOlOOOl
]
;
}
if\

(
lOOO\
llOOO\
l\

==
lOO\
l\
OOlOl\
O\

)
{
if
(
ll\
Ol\
OlOllllO\

<=
0.005f
)
{
llO\
lO\
lO\
ll\
ll\
O\

=
0.005f
;
retur\
n
fals\
e
;
}
ll\
lOO\
O\
Ol\
llll
[
lOO\
O\
llOOOl
*
ll\
O\
O\
OlO\
lllll
+
lOO\
lO\
O\
lOlO\

]
=
ll\
O\
l\
O\
l\
Oll\
ll\
O\

;
}
els\
e\

{
TA_ASSE\
RT
(
Fabs
(
lll\
OO\
O\
Ol\
l\
l\
ll
[
lO\
O\
lO\
OlOlO
*
llOO\
O\
lO\
lll\
ll
+
lO\
OlOOlOlO
]
)
>
0.0f
)
;
ll\
l\
OOOO\
l\
llll\

[
lO\
OOl\
lO\
OOl\

*
llO\
OOlOl\
l\
l\
l\
l
+
lOOlOOlOlO
]
=
llOl\
O\
lOllllO
/
ll\
lO\
O\
OO\
l\
lll\
l
[
lO\
OlOOlOlO\

*
llOOOlOll\
lll
+
lOOlOOlO\
lO
]
;
}
}
}
ret\
u\
rn\

tr\
u\
e
;
}
#ifdef _DEBUG
voi\
d
lO\
llOlO\
l\
OOOl
::
llOlllllO\
OOl
(
)
{
#define lllOOOlOOOlO(lOOOllOOOl, lOOlOOlOlO) llOllllOOOOl[(lOOOllOOOl) * lOlOOOlOlO + (lOOlOOlOlO)]
#define lllOOOlOOOll(lOOOllOOOl, lOOlOOlOlO) llOllllOOOlO[(lOOOllOOOl) * lOlOOOlOlO + (lOOlOOlOlO)]
ll\
lOOO\
l\
O\
O\
OlO\

(
0
,
0
)
=
13.0f
;
lllO\
OOl\
O\
OOl\
O
(
0
,
1
)
=
12.0f
;
lllOO\
OlOO\
OlO
(
0
,
2
)
=
11.0f
;
lllOO\
OlOOOlO\

(
1
,
0
)
=
12.0f
;
lllOOOlOOO\
lO\

(
1
,
1
)
=
14.0f
;
ll\
lO\
OOlOO\
OlO\

(
1
,
2
)
=
10.0f
;
lll\
OO\
Ol\
OOOlO
(
2
,
0
)
=
11.0f
;
lllOOOl\
O\
O\
OlO
(
2
,
1
)
=
10.0f
;
lllOOOl\
OOOlO
(
2
,
2
)
=
15.0f
;
in\
t
lOOll\
lOllO
=
3
;
mem\
set
(
ll\
O\
l\
l\
llOll\
O\
l
,
0
,
sizeof
(
float\

)
*
lO\
lOOO\
lOlO
)
;
memset
(
llO\
llllOlllO
,
0
,
sizeof
(
fl\
oat
)
*
lOlOO\
O\
lOlO
)
;
ll\
O\
lOlOlllOl
(
lO\
Ol\
l\
l\
Ol\
lO
,
lOlO\
OOlO\
lO\

,
llO\
l\
lllO\
OOOl
,
llO\
ll\
ll\
O\
l\
lOl
,
ll\
Oll\
llO\
lllO
)
;
lllOOOlOOOll
(
0
,
0
)
=
14.0f
;
ll\
l\
O\
OOl\
O\
OOll
(
0
,
1
)
=
10.0f
;
lllOOOlOOO\
l\
l
(
1
,
0
)
=
10.0f
;
lll\
OOOl\
OOOl\
l
(
1
,
1
)
=
15.0f
;
me\
mse\
t
(
llO\
llll\
O\
ll\
Ol
,
0
,
sizeof
(
flo\
at\

)
*
lOlO\
OOlOlO
)
;
me\
mset
(
ll\
O\
lll\
lO\
lll\
O
,
0
,
sizeof\

(
float
)
*
lOlOOOl\
OlO\

)
;
llO\
lOlO\
lllOl
(
lOOl\
ll\
Ol\
lO
-
1
,
lOlO\
O\
OlOlO
,
llOl\
lllOOO\
l\
O
,
llO\
ll\
ll\
OllOl
,
llO\
ll\
ll\
O\
lllO
)
;
lll\
O\
OOOOlO\
lO\

(
lOOll\
lO\
llO
,
lO\
lO\
OOlOl\
O
,
ll\
OllllOOOOl
,
0
)
;
lOOlllOl\
l\
O
--
;
{
for\

(
in\
t
lOOl\
O\
OlOlO\

=
0
;
lO\
Ol\
OOl\
O\
l\
O\

<
lOOlllO\
llO
;
lOOlO\
O\
lOlO\

++
)
{
for\

(
int\

lOOOll\
OOOl
=
lOO\
lOOlOlO
;
lOOOllOOOl
<
lOOlllOllO
;
lOOOllO\
OOl
++
)
{
floa\
t
lOOOOOll\
l\
O
=
ll\
Ollll\
OOOO\
l\

[
lO\
OOllOO\
Ol
*
lO\
lOO\
OlOl\
O
+
lOOlOOlO\
lO\

]
-
llOl\
l\
llOOO\
lO
[
lOO\
OllO\
O\
Ol\

*
lOl\
OOO\
lOl\
O
+
lOO\
lOOlO\
lO
]
;
TA_ASSERT
(
Flo\
at\
Is\
OK
(
lOO\
OOOll\
lO\

)
)
;
TA_ASSE\
R\
T
(
Fabs\

(
lOOOOO\
lll\
O\

)
<
0.0001f
)
;
}
}
}
ll\
lOOOlOOO\
lO
(
0
,
0
)
=
13.0f
;
lll\
OO\
OlOO\
O\
lO
(
0
,
1
)
=
12.0f
;
ll\
lOOO\
lOOOl\
O
(
0
,
2
)
=
11.0f
;
ll\
l\
O\
OOlOOOlO
(
1
,
0
)
=
12.0f
;
ll\
l\
OOOlOOOl\
O\

(
1
,
1
)
=
14.0f
;
lllO\
OO\
lOOOlO\

(
1
,
2
)
=
10.0f
;
ll\
lOOOl\
OOO\
lO
(
2
,
0
)
=
11.0f
;
lll\
OO\
OlOO\
OlO
(
2
,
1
)
=
10.0f
;
ll\
lOOO\
lO\
OOlO
(
2
,
2
)
=
15.0f
;
lO\
Ol\
llOll\
O
=
3
;
memset\

(
llO\
llllO\
llO\
l\

,
0
,
size\
of
(
floa\
t
)
*
lOlOOO\
lOlO
)
;
mem\
set
(
llOll\
llOlllO
,
0
,
siz\
eo\
f
(
flo\
a\
t
)
*
lOlO\
OOl\
OlO\

)
;
llOl\
OlOlllOl
(
lOOl\
ll\
OllO
,
lO\
lO\
OO\
lOlO
,
llOlll\
lOO\
OOl\

,
ll\
OllllO\
ll\
Ol
,
llOllllO\
lllO
)
;
ll\
l\
O\
OOl\
OOO\
ll
(
0
,
0
)
=
13.0f
;
lllO\
OOlO\
O\
O\
l\
l
(
0
,
1
)
=
11.0f
;
lllOOOlOOOll
(
1
,
0
)
=
11.0f
;
lllOOOl\
OOO\
ll
(
1
,
1
)
=
15.0f
;
mem\
s\
et
(
ll\
Oll\
llOllO\
l
,
0
,
sizeof
(
float
)
*
lOlO\
OOlO\
lO
)
;
mem\
s\
et
(
llOl\
l\
l\
lOl\
llO
,
0
,
sizeof\

(
float
)
*
lOlOOOlOlO
)
;
ll\
OlOl\
OlllOl
(
lOOl\
l\
lOll\
O
-
1
,
lO\
lOOOlO\
l\
O
,
llO\
l\
lll\
OOOlO\

,
llOl\
lllOll\
Ol
,
ll\
OllllOlll\
O\

)
;
lll\
OOOOOl\
OlO
(
lOOlllOllO
,
lO\
lOOOlOlO
,
ll\
OllllOOOOl
,
1
)
;
lO\
Ol\
llOllO
--
;
{
for\

(
in\
t
lO\
OlOOlOlO\

=
0
;
lOOlOO\
lO\
lO
<
lOOll\
l\
OllO\

;
lOOlOOl\
O\
lO
++
)
{
for
(
in\
t
lO\
OO\
llO\
OOl\

=
lOOlO\
O\
l\
O\
lO
;
lOOO\
l\
lO\
OOl
<
lOO\
l\
l\
lOll\
O
;
lO\
OOllO\
OO\
l
++
)
{
floa\
t\

lOOOO\
O\
ll\
lO
=
llO\
ll\
llOOOOl\

[
lO\
OOl\
lOOOl
*
lOlOOOlO\
l\
O\

+
lOOlOOlOlO
]
-
ll\
O\
llllOOO\
lO
[
lO\
OOll\
OOOl\

*
lOlOOOlO\
l\
O
+
lOOl\
OOl\
O\
l\
O
]
;
TA_ASSERT
(
Flo\
atI\
sOK
(
lO\
OOO\
Olll\
O
)
)
;
TA\
_ASS\
ERT\

(
Fabs
(
lOOO\
OOll\
lO\

)
<
0.0001f
)
;
}
}
}
ll\
lOOO\
lOO\
OlO\

(
0
,
0
)
=
13.0f
;
lllOOO\
lO\
OOlO\

(
0
,
1
)
=
12.0f
;
lll\
O\
OOlOOOlO
(
0
,
2
)
=
11.0f
;
lllOO\
OlOOOl\
O
(
1
,
0
)
=
12.0f
;
ll\
l\
O\
OOlOO\
Ol\
O
(
1
,
1
)
=
14.0f
;
lll\
O\
OOlOOOlO
(
1
,
2
)
=
10.0f
;
lll\
O\
O\
OlO\
OO\
lO
(
2
,
0
)
=
11.0f
;
lllOO\
OlOO\
Ol\
O
(
2
,
1
)
=
10.0f
;
lllOO\
Ol\
OOO\
lO
(
2
,
2
)
=
15.0f
;
lO\
Oll\
lOll\
O
=
3
;
memset
(
ll\
O\
ll\
llOllO\
l
,
0
,
sizeof
(
float
)
*
lOlOOO\
lOlO\

)
;
memset
(
llOllllOlllO
,
0
,
sizeof
(
fl\
oa\
t
)
*
lOlO\
OOlOlO
)
;
llO\
lOlO\
lllOl
(
lOO\
lllOllO
,
lOlOO\
O\
lOl\
O\

,
ll\
Ol\
ll\
lO\
OOOl
,
ll\
O\
lll\
lO\
ll\
Ol\

,
llOl\
lllO\
ll\
lO
)
;
lllOOOlOOOll
(
0
,
0
)
=
13.0f
;
ll\
l\
OOOlO\
O\
O\
l\
l
(
0
,
1
)
=
12.0f
;
lll\
OOO\
lOOO\
l\
l\

(
1
,
0
)
=
12.0f
;
ll\
l\
OOO\
lOOOll
(
1
,
1
)
=
14.0f
;
me\
mset
(
llOl\
lllOllOl
,
0
,
sizeof
(
fl\
o\
at
)
*
lO\
lOOOlO\
lO
)
;
me\
m\
se\
t
(
ll\
Olll\
l\
O\
lllO
,
0
,
siz\
eo\
f
(
floa\
t
)
*
lO\
l\
OOOlOlO
)
;
ll\
OlO\
lOlllOl
(
lO\
OlllO\
llO
-
1
,
lOl\
OO\
O\
lOlO
,
llO\
llll\
OOOl\
O
,
llO\
llll\
OllOl
,
ll\
O\
llllO\
l\
ll\
O
)
;
lllOOOO\
OlOlO
(
lOOl\
l\
lOl\
l\
O
,
lOlOOOlOl\
O\

,
llOl\
lll\
OOOO\
l\

,
2
)
;
lO\
O\
l\
l\
l\
OllO
--
;
{
for
(
int
lOO\
l\
OO\
lOlO
=
0
;
lOOlOOlOlO\

<
lOO\
lll\
O\
l\
lO
;
lOOlOOlOlO
++
)
{
fo\
r
(
int\

lOOO\
ll\
OO\
Ol
=
lOOl\
O\
O\
lOlO
;
lOOO\
l\
l\
O\
OOl
<
lOOlllOllO
;
lOOOllOOOl
++
)
{
float
lOOOO\
Ol\
l\
l\
O
=
llO\
llllO\
OOOl
[
lOOOllOO\
Ol
*
lOl\
OOOlOl\
O\

+
lOOlOO\
lOlO\

]
-
llO\
ll\
llOOOlO
[
lOOOllOOOl\

*
lOlOOOlOlO\

+
lOOlOOlOlO\

]
;
TA_AS\
S\
ER\
T
(
Floa\
tIs\
OK\

(
lOOOOO\
ll\
l\
O
)
)
;
TA_A\
SSER\
T
(
Fabs\

(
lOOOOOlllO
)
<
0.0001f
)
;
}
}
}
ll\
lOOO\
lOOOlO
(
0
,
0
)
=
13.0f
;
lllOOOlOOOl\
O
(
0
,
1
)
=
12.0f
;
lll\
OOOlO\
OOlO
(
0
,
2
)
=
11.0f
;
lllOOOl\
OOO\
lO\

(
1
,
0
)
=
12.0f
;
lllOOOlOOOlO
(
1
,
1
)
=
14.0f
;
lllOOOlOOOlO
(
1
,
2
)
=
10.0f
;
lllOOOlO\
OOlO
(
2
,
0
)
=
11.0f
;
ll\
lOO\
OlOOOlO
(
2
,
1
)
=
10.0f
;
ll\
l\
OOOlOO\
OlO
(
2
,
2
)
=
15.0f
;
lOOlllO\
ll\
O
=
3
;
{
fo\
r
(
int\

lOOl\
OOlOl\
O
=
0
;
lO\
O\
lOO\
lOlO\

<
lOO\
lllOllO\

;
lOOlOOl\
OlO\

++
)
for
(
int
lOOO\
llOO\
Ol
=
0
;
lOOOllOO\
Ol\

<
lOO\
lll\
OllO
;
lO\
OOllOOO\
l
++
)
ll\
O\
llllOOOlO
[
lO\
OO\
l\
lO\
O\
Ol
*
lOlOO\
O\
l\
OlO\

+
lOO\
lO\
OlOlO
]
=
ll\
Ollll\
OOO\
O\
l
[
lOOO\
llOOOl
*
lOlOO\
Ol\
OlO\

+
lOOlOOlOlO
]
;
}
llOlOlOlllO\
l
(
lOOlll\
OllO
,
lOlOOOlOlO
,
llOll\
llOOOO\
l
,
llOlll\
lOllOl\

,
llOl\
ll\
lOlllO\

)
;
lllOO\
OOO\
lOl\
l
(
0
,
lOlO\
OOlOl\
O\

,
ll\
Ollll\
OOOlO
,
llOllllOO\
OlO
,
0
)
;
ll\
l\
OOO\
O\
O\
l\
Oll\

(
1
,
lO\
lOOOlOlO\

,
llOll\
ll\
OOOl\
O
,
llO\
llllO\
OOlO
,
1
)
;
lllOOOOOlOll\

(
2
,
lO\
lO\
O\
OlO\
lO
,
llO\
llllOOOl\
O
,
llOllllO\
OOlO
,
2
)
;
ll\
Ollll\
lll\
lO
(
lOOlllOllO
,
lOlO\
OOlOl\
O\

,
llO\
llllOOOlO
,
ll\
OllllO\
llOl
,
llOllllOlllO
)
;
{
for
(
int
lOOlO\
Ol\
Ol\
O
=
0
;
lOO\
lOOlO\
l\
O
<
lOOlll\
OllO
;
lOO\
lOO\
l\
Ol\
O
++
)
{
for
(
in\
t\

lOOOl\
l\
OO\
Ol
=
lOO\
lOOlO\
l\
O\

;
lOOO\
ll\
OOOl
<
lOO\
l\
ll\
Oll\
O
;
lOO\
O\
llOO\
Ol\

++
)
{
float
lO\
OOOOlllO
=
ll\
O\
l\
l\
llO\
OOOl
[
lOOOllOOO\
l
*
lOlO\
OO\
lOlO
+
lOOlOO\
lO\
lO
]
-
llOllllOOOl\
O
[
lOOOl\
lOOO\
l\

*
lOlOOOlOlO\

+
lO\
O\
l\
OOlOlO
]
;
TA_ASSERT
(
Floa\
tIsO\
K\

(
lOO\
OOOll\
l\
O\

)
)
;
TA_ASSE\
R\
T
(
Fabs
(
lOOOOOlllO\

)
<
0.0001f
)
;
}
}
}
}
#endif
}
#endif //
