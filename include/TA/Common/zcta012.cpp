//---------------------------------------------------------------------------------
// File Name: zcta012.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#include "Matrix.h"
#ifndef TA_EULERANGLES_H
#include "EulerAngles.h"
#endif //
nam\
e\
s\
pace
TA
{
void
Mat3\
3
::
Initi\
alise
(
const
EulerA\
ngles
&
ll\
lOOll\
O\
Ol
)
{
float\

lOO\
O\
OOllOOl
;
flo\
at
lOOOOOl\
lOlO
;
SinAnd\
Cos
(
ll\
lOOll\
OO\
l\

.
x
,
lO\
OO\
O\
OllOO\
l
,
lO\
OOO\
O\
llOlO
)
;
floa\
t
lOO\
OOO\
ll\
Oll
;
float\

lO\
OO\
O\
Oll\
lOO
;
SinA\
ndC\
os
(
lllOOllOOl
.
y
,
lO\
O\
OO\
OllOll
,
lOO\
OO\
O\
l\
llOO
)
;
float\

lllOO\
lOllO\

;
float
lllOOll\
OOO
;
Sin\
AndCos
(
lll\
OO\
ll\
OOl
.
z
,
lllOOlOllO
,
ll\
lOOll\
OOO
)
;
M11\

(
)
=
ll\
l\
OOllO\
OO
*
lOOOO\
Ol\
l\
l\
O\
O
-
lllOOlOl\
lO\

*
lOOOOOllOOl
*
lOOO\
O\
OllOl\
l
;
M12
(
)
=
lllOOl\
O\
llO\

*
lOOOO\
OllOl\
O
;
M13
(
)
=
lllO\
OllOOO\

*
lOOOO\
O\
ll\
Ol\
l
+
lllOOlO\
ll\
O
*
lO\
O\
OOOllOOl
*
lO\
OOOOl\
l\
lOO
;
M2\
1
(
)
=
-
ll\
lOOl\
Ol\
l\
O\

*
lOOOOOl\
l\
lOO\

-
lllOOllOOO\

*
lOOOO\
OllO\
O\
l
*
lOOOOO\
llOll\

;
M22
(
)
=
lllOOll\
O\
OO
*
lO\
O\
OOO\
llOlO
;
M2\
3
(
)
=
-
ll\
lOO\
lOll\
O
*
lOO\
OOOll\
Ol\
l
+
lllO\
OllOOO
*
lOOOOO\
l\
lOO\
l\

*
lOOO\
OOlll\
OO\

;
M31
(
)
=
-
lOOOOOll\
O\
lO
*
lO\
O\
OO\
Oll\
O\
ll
;
M32\

(
)
=
-
lOOOOO\
llO\
Ol
;
M33
(
)
=
lOO\
OOO\
llOlO
*
lOOOOO\
lll\
O\
O\

;
}
void
Mat33
::
In\
itia\
lis\
e
(
co\
n\
s\
t
Vec3
&
lOOOO\
Oll\
lOl\

,
flo\
a\
t
lOOOOO\
llllO
)
{
TA\
_AS\
S\
ERT\

(
lOOOOOll\
lOl
.
IsNo\
rmalise\
d
(
)
)
;
float
lOO\
O\
O\
Olllll
,
lOOO\
OlOOO\
OO
,
lOOOOl\
OOOO\
l
,
lO\
OOOlOOO\
lO
,
lO\
OOOl\
OO\
Oll
,
lO\
O\
OOlO\
Ol\
OO
,
lOO\
OOlOOlO\
l\

,
lOOO\
O\
lOOl\
lO
,
lOOO\
O\
lOOlll
;
{
float
lO\
OOO\
l\
O\
lOOO
;
float
w
;
lO\
OOOOl\
l\
llO
*=
0.5f
;
Sin\
An\
dCos
(
lO\
OO\
OO\
ll\
llO
,
lOOOOlOlOOO
,
w
)
;
float
x
=
lOO\
O\
Ol\
OlO\
OO
*
lOOOOOlll\
Ol
.
x
;
float\

y
=
lOOOOlOlOO\
O
*
lO\
O\
OOOl\
l\
lOl
.
y
;
fl\
oat
z
=
lOOO\
OlOl\
O\
OO
*
lOOO\
O\
Ol\
llOl
.
z
;
float
lOOOOlOl\
OOl
=
x
+
x
;
flo\
at\

lO\
O\
O\
O\
l\
OlOlO
=
y
+
y
;
float
lO\
OOOlOlO\
ll
=
z
+
z
;
lOO\
OOlOOOlO\

=
x
*
lOOOOl\
Ol\
OOl
;
lOO\
O\
OlOOlOl
=
x
*
lOO\
OO\
l\
OlOlO
;
lO\
O\
O\
OlOOll\
O
=
x
*
lO\
OO\
OlOlOll
;
lOO\
OOl\
OOOll
=
y
*
lO\
OOOlOl\
Ol\
O
;
lOOOOl\
OOlO\
O
=
y
*
lOOO\
Ol\
Ol\
Oll
;
lOOOOlOOlll
=
z
*
lOOOO\
lO\
l\
Oll
;
lOO\
OOOl\
l\
ll\
l\

=
w
*
lOOOOl\
O\
lOOl
;
lO\
OO\
OlOOOOO
=
w
*
lOOOOlOlOlO
;
lOOOO\
l\
OOOOl
=
w
*
lO\
OOOlOlOll
;
}
M1\
1\

(
)
=
1.0f
-
(
lOOOOlO\
OO\
ll\

+
lOOOO\
lOO\
ll\
l
)
;
M21
(
)
=
lO\
OOO\
lO\
OlOl
-
lOOOO\
l\
OOOOl
;
M31
(
)
=
lO\
O\
OO\
lOOllO
+
lOOOO\
l\
O\
OOOO\

;
M12
(
)
=
lOOO\
OlO\
OlOl
+
lOOO\
OlOO\
OOl\

;
M2\
2
(
)
=
1.0f
-
(
lOOO\
Ol\
OO\
Ol\
O
+
lOOOOl\
OOlll
)
;
M3\
2
(
)
=
lOOOOlOOlOO
-
lO\
OOOOlllll\

;
M13
(
)
=
lO\
O\
OOlOO\
llO
-
lO\
OOOlOOOOO
;
M23
(
)
=
lOO\
OOlOOlOO
+
lOOOOO\
ll\
lll
;
M33\

(
)
=
1.0f
-
(
lO\
OOO\
l\
OO\
Ol\
O\

+
lO\
OOOlO\
OOll
)
;
TA_A\
SS\
ERT
(
IsOrt\
hogona\
l
(
)
)
;
}
void
Ma\
t33
::
Inter\
polat\
e
(
co\
ns\
t
Mat33\

&
lllOOl\
llO\
O
,
cons\
t
Mat33\

&
ll\
lO\
Olll\
Ol
,
fl\
oat
lOlllll\
O\
lO
)
{
*
this
=
lllOOlll\
OO\

+
(
lll\
OO\
lllOl\

-
lll\
OOlllOO\

)
*
lOll\
lllO\
lO\

;
Orthogonali\
se
(
)
;
}
#define lOOOOlOllOO(lOOOllOOOl, lOOlOOlOlO) (((float*)lOOOOlOllOl)[((lOOOllOOOl) - 1) * 4 + ((lOOlOOlOlO) - 1)])
void
Mat\
33
::
Initial\
is\
e
(
D3DXMA\
TRIX
*
lOOOOlOl\
l\
Ol
)
{
M1\
1\

(
)
=
lO\
OO\
Ol\
O\
ll\
OO
(
1
,
1
)
;
M12
(
)
=
lOOOOlOllO\
O
(
1
,
2
)
;
M13
(
)
=
lOO\
O\
OlO\
llO\
O
(
1
,
3
)
;
M21
(
)
=
lOOO\
OlOll\
OO
(
2
,
1
)
;
M2\
2
(
)
=
lO\
OO\
OlO\
llOO
(
2
,
2
)
;
M23
(
)
=
lOO\
OOlOllOO
(
2
,
3
)
;
M3\
1\

(
)
=
lOOOO\
lOll\
O\
O\

(
3
,
1
)
;
M32
(
)
=
lOOOOlOllOO
(
3
,
2
)
;
M33\

(
)
=
lOOOOlO\
llO\
O
(
3
,
3
)
;
}
void
Mat33
::
Ge\
tAs\
D3D\
Mat\
r\
ix\

(
D3DXM\
AT\
RI\
X
*
lOOOOl\
Ol\
lOl
)
co\
nst
{
lOOOOl\
Ol\
l\
OO
(
1
,
1
)
=
M11\

(
)
;
lO\
O\
OOlO\
ll\
OO
(
1
,
2
)
=
M1\
2\

(
)
;
lO\
OOOlOllO\
O
(
1
,
3
)
=
M13
(
)
;
lOO\
OOl\
Ol\
lO\
O
(
1
,
4
)
=
0.0f
;
lO\
OOOlO\
llO\
O
(
2
,
1
)
=
M21
(
)
;
lOOO\
Ol\
Ol\
lOO
(
2
,
2
)
=
M22
(
)
;
lOOOOlOl\
lOO
(
2
,
3
)
=
M2\
3
(
)
;
lOO\
O\
O\
l\
O\
l\
l\
OO\

(
2
,
4
)
=
0.0f
;
lOO\
OOlOllOO
(
3
,
1
)
=
M3\
1
(
)
;
lO\
O\
OOlOllOO
(
3
,
2
)
=
M32
(
)
;
lOOOO\
lOllOO
(
3
,
3
)
=
M33
(
)
;
lOO\
OO\
l\
O\
ll\
OO
(
3
,
4
)
=
0.0f
;
lOOO\
OlO\
llOO\

(
4
,
1
)
=
0.0f
;
lOOOOlO\
ll\
O\
O
(
4
,
2
)
=
0.0f
;
lOOO\
O\
l\
OllOO
(
4
,
3
)
=
0.0f
;
lO\
OOOl\
OllO\
O
(
4
,
4
)
=
1.0f
;
}
#undef lOOOOlOllOO
void
Ma\
t33\

::
GetRotationAxisAndM\
agnitude
(
Vec3
&
lO\
OOOOlllOl\

,
flo\
at
&
lOOOOO\
ll\
llO\

)
const\

{
co\
nst\

fl\
o\
at
lOl\
lOl\
O\
lOl\

=
1.0e-6f
;
float
lOOOOlOlllO\

=
M11
(
)
+
M22
(
)
+
M33\

(
)
;
if\

(
lOOO\
OlOll\
lO
>
0.0f
)
{
fl\
oat
lO\
OOOlOl\
lll
=
Sqr\
t
(
lOOO\
Ol\
Olll\
O
+
1.0f
)
;
lOOOOOllllO\

=
lO\
OO\
OlOlll\
l
*
0.5f
;
Clamp\
Po\
sN\
eg
(
lOOOOOlll\
lO
,
1.0f
)
;
lO\
O\
OOOl\
lllO
=
AC\
os
(
lO\
OOOO\
llll\
O
)
*
2.0f
;
lO\
OO\
OOlll\
Ol
.
x
=
(
M23
(
)
-
M3\
2
(
)
)
;
lOOOO\
Olll\
O\
l
.
y
=
(
M31
(
)
-
M13
(
)
)
;
lOOOO\
O\
lllO\
l
.
z
=
(
M12
(
)
-
M21\

(
)
)
;
floa\
t
lOlll\
l\
O\
Oll
=
lO\
OO\
OOlllOl
.
Get\
Mag\
nit\
u\
d\
e
(
)
;
if
(
lOll\
l\
lO\
Oll
>
lO\
l\
lOlOlOl
)
lO\
OOO\
O\
l\
l\
lOl
/=
lOllll\
OOll
;
els\
e\

lOOOOOlllO\
l
=
k_v\
3\
UnitY\

;
}
else
{
int
lOOOll\
O\
OOl\

=
0
;
if
(
M22\

(
)
>
M11
(
)
)
lOOOllO\
O\
Ol
=
1
;
if
(
M3\
3
(
)
>
(
*
this
)
[
lOOOll\
OOO\
l
]
[
lOO\
OllO\
OOl
]
)
lOOO\
ll\
OO\
O\
l\

=
2
;
int
lOOlO\
O\
lOlO
=
(
lO\
OOllO\
OO\
l\

+
1
)
%
3
;
int
lOOlO\
lOOOl
=
(
lOOl\
OO\
lO\
lO
+
1
)
%
3
;
fl\
oat\

lO\
OOOl\
O\
ll\
l\
l\

=
Sqr\
t
(
(
*
this\

)
[
lOOO\
l\
l\
O\
OOl\

]
[
lO\
OOllOOOl
]
-
(
(
*
thi\
s
)
[
lOOlOOlO\
l\
O\

]
[
lOO\
lOOlOlO\

]
+
(
*
this
)
[
lOOlO\
l\
OOO\
l
]
[
lOOlOlOO\
Ol\

]
)
+
1.0f
)
;
lOOOOOl\
l\
lOl
[
lOO\
OllOOO\
l\

]
=
lO\
O\
OO\
lOl\
lll\

*
0.5f
;
lOOOOlOllll
=
0.5f
/
lOOOOlOll\
l\
l
;
lOOOOOlllOl\

[
lOO\
lOOlOl\
O
]
=
(
(
*
this\

)
[
lOOOllOOOl\

]
[
lO\
OlO\
OlO\
lO
]
+
(
*
this
)
[
lOO\
lOOl\
Ol\
O
]
[
lO\
O\
OllOOO\
l
]
)
*
lOO\
OOlO\
l\
lll
;
lOO\
O\
OO\
l\
llOl\

[
lOOlOlOOO\
l\

]
=
(
(
*
this
)
[
lO\
OOllOO\
O\
l
]
[
lOO\
l\
O\
lOOO\
l
]
+
(
*
this
)
[
lOOlOl\
O\
O\
Ol
]
[
lOOOl\
lOOO\
l
]
)
*
lOOOO\
lOl\
l\
l\
l
;
flo\
at\

lOl\
lllOO\
ll
=
lO\
OOO\
Oll\
lOl
.
GetMa\
gnitude
(
)
;
if
(
lOlll\
lO\
Oll\

>
lOll\
O\
lOlO\
l
)
lOOOOOlllO\
l\

/=
lOllllOOll
;
el\
se
lOOO\
OO\
lllOl\

=
k_\
v3Un\
i\
tY
;
lOOOOOl\
lllO
=
(
(
*
this
)
[
lO\
OlOOlO\
l\
O
]
[
lO\
OlOlOO\
Ol
]
-
(
*
th\
i\
s
)
[
lOOlOlOOO\
l
]
[
lOOlOOlOlO\

]
)
*
lO\
OOO\
lOl\
lll
;
ClampPos\
Ne\
g
(
lOOOOOlll\
l\
O
,
1.0f
)
;
lO\
OOOOllllO\

=
AC\
os
(
lOOOOOll\
ll\
O
)
*
2.0f
;
}
}
void
Mat3\
3
::
Pre\
R\
otate
(
Rotation\
Axis
lOOO\
Oll\
OOOO\

,
fl\
oat\

lOOOO\
Oll\
llO
)
{
swit\
c\
h
(
lO\
OOOll\
OOOO\

)
{
case
RO\
TA\
T\
ION_A\
XIS_\
X
:
{
float\

lOO\
OOllOOOl\

;
floa\
t
lOOOOll\
OO\
lO
;
SinAndCos
(
lOO\
OOO\
llllO
,
lO\
OOOll\
OOOl
,
lOOOOll\
OOlO\

)
;
float
lll\
OOl\
Olll\

=
M21
(
)
;
M21
(
)
=
lO\
OO\
Ol\
lOO\
l\
O\

*
ll\
l\
OOl\
O\
lll
+
lOOOOll\
O\
OOl
*
M31
(
)
;
M31
(
)
=
(
-
lO\
OO\
O\
l\
lOOO\
l
)
*
lllO\
OlOl\
ll
+
lOO\
OOllOOlO
*
M31
(
)
;
lllOOlOl\
ll
=
M2\
2
(
)
;
M22
(
)
=
lOO\
O\
Oll\
OOl\
O
*
lllOOlOlll\

+
lOOOO\
llOOOl
*
M3\
2
(
)
;
M32
(
)
=
(
-
lOO\
OOl\
lOO\
Ol
)
*
lllO\
OlOlll
+
lOO\
OOl\
lO\
OlO
*
M32
(
)
;
lll\
OOlO\
ll\
l
=
M23\

(
)
;
M23
(
)
=
lO\
OOOl\
lOOlO
*
lll\
OOlOlll
+
lO\
OOOllOOO\
l
*
M3\
3
(
)
;
M3\
3
(
)
=
(
-
lOO\
OOllO\
OO\
l
)
*
lllOOl\
O\
lll
+
lOOOOl\
lOOl\
O
*
M33
(
)
;
}
br\
ea\
k
;
case
ROTATION_\
AXI\
S_Y
:
{
fl\
oat
lOO\
OO\
llOOOl
;
float
lO\
OOOl\
lOOlO\

;
Sin\
A\
n\
d\
Cos\

(
lOOOOOll\
llO\

,
lOOOOllOO\
Ol
,
lOOOOllOOlO\

)
;
float
lllOOl\
Ol\
ll
=
M11
(
)
;
M11
(
)
=
lOO\
OO\
llOOlO\

*
lll\
OOlOl\
l\
l
+
lOO\
OOllOOOl
*
M31\

(
)
;
M31
(
)
=
(
-
lOO\
OOl\
lOO\
Ol\

)
*
ll\
l\
O\
O\
lOl\
l\
l\

+
lOOOOll\
OO\
lO
*
M31
(
)
;
ll\
l\
OO\
lO\
lll
=
M12\

(
)
;
M12
(
)
=
lO\
O\
OOl\
lOO\
lO
*
lllOOlOl\
ll
+
lO\
OOOl\
lOO\
Ol
*
M32
(
)
;
M32
(
)
=
(
-
lO\
O\
OOl\
l\
O\
OOl
)
*
lllO\
Ol\
O\
ll\
l
+
lOO\
O\
Oll\
O\
OlO
*
M3\
2
(
)
;
lllOO\
lOl\
ll
=
M13
(
)
;
M13
(
)
=
lO\
OOOl\
lOOlO
*
lllOOlOl\
ll
+
lOOOOll\
O\
OOl
*
M33
(
)
;
M33\

(
)
=
(
-
lOOOO\
ll\
OO\
Ol\

)
*
lllOOlOl\
ll
+
lOOO\
Oll\
OOlO
*
M33
(
)
;
}
break
;
ca\
se
RO\
TAT\
ION_AX\
IS_Z
:
{
fl\
oat
lOO\
OOllOOO\
l
;
floa\
t
lOO\
OOl\
l\
OOl\
O
;
Si\
nAndCos
(
lOOOOOl\
l\
llO
,
lO\
OO\
OllO\
OOl
,
lOO\
OOllOO\
lO\

)
;
float
lllOO\
lOlll
=
M1\
1
(
)
;
M11
(
)
=
lOOOOllOOl\
O
*
lllOO\
l\
Olll
+
lO\
O\
OOllOOOl\

*
M21
(
)
;
M21
(
)
=
(
-
lOOOOllOOOl
)
*
lllOOlO\
l\
ll
+
lOO\
O\
OllO\
OlO
*
M21
(
)
;
ll\
l\
OO\
lOlll
=
M12
(
)
;
M12
(
)
=
lO\
O\
O\
O\
llOOl\
O\

*
lllOOlOlll\

+
lO\
OOOllOO\
O\
l
*
M22
(
)
;
M22
(
)
=
(
-
lOO\
OOl\
l\
OOO\
l
)
*
lllOOlOlll\

+
lOOO\
OllO\
OlO
*
M2\
2
(
)
;
ll\
l\
OO\
lOlll
=
M13
(
)
;
M13
(
)
=
lO\
OO\
OllOOl\
O
*
lllOOlOl\
ll\

+
lOOOOllO\
OOl
*
M23
(
)
;
M2\
3
(
)
=
(
-
lOOOOll\
OO\
Ol
)
*
lllOO\
l\
Olll
+
lO\
OO\
OllOO\
lO
*
M2\
3
(
)
;
}
bre\
ak\

;
de\
fa\
u\
lt
:
ll\
lO\
OOll\
l\
O
;
}
}
void\

Mat33
::
Mul\

(
const
Mat\
3\
3
&
lllO\
Ol\
llOO
,
co\
ns\
t\

Mat\
3\
3\

&
lll\
OOlll\
Ol
,
Ma\
t3\
3
&
lOO\
OO\
llOO\
ll
)
{
lOOO\
OllO\
O\
ll\

.
M11
(
)
=
lllOO\
l\
l\
l\
OO
.
M11
(
)
*
lllOO\
ll\
lOl
.
M1\
1
(
)
+
lllO\
Ol\
llOO
.
M1\
2
(
)
*
lllOOl\
llOl
.
M21
(
)
+
ll\
l\
OOl\
l\
l\
OO
.
M1\
3
(
)
*
lllOOlllO\
l
.
M31
(
)
;
lO\
OOOl\
lOOll
.
M12
(
)
=
lll\
OOlllOO
.
M11
(
)
*
lllOO\
ll\
lOl\

.
M12\

(
)
+
ll\
lO\
O\
lllOO
.
M12
(
)
*
ll\
lO\
O\
lll\
Ol
.
M22
(
)
+
lll\
OOlllOO\

.
M13\

(
)
*
ll\
lOOll\
lOl
.
M32
(
)
;
lOOOOl\
lOO\
l\
l\

.
M13
(
)
=
ll\
l\
OOlllO\
O
.
M11
(
)
*
lllO\
O\
l\
llOl
.
M13\

(
)
+
ll\
lOO\
l\
llOO
.
M12
(
)
*
ll\
l\
OOlll\
Ol\

.
M23
(
)
+
lllOOll\
lOO
.
M1\
3
(
)
*
lllOO\
lllO\
l
.
M33
(
)
;
lOOOOl\
lOOll
.
M21
(
)
=
ll\
lOOlll\
O\
O
.
M21\

(
)
*
ll\
lOOlll\
O\
l
.
M11
(
)
+
lllOOlllOO\

.
M22\

(
)
*
lllOOlllO\
l
.
M21\

(
)
+
lll\
O\
Olll\
OO
.
M23
(
)
*
ll\
lOOlll\
Ol
.
M31\

(
)
;
lOOO\
Ol\
lO\
Oll\

.
M22\

(
)
=
lll\
OOlllOO
.
M21\

(
)
*
lll\
OOl\
l\
lOl
.
M12
(
)
+
lllOOll\
lOO
.
M22
(
)
*
lll\
OOl\
llOl\

.
M22
(
)
+
lllOOlllOO\

.
M23\

(
)
*
lllOOlllOl\

.
M32
(
)
;
lOOOOllO\
Oll\

.
M23
(
)
=
ll\
lO\
O\
lll\
OO
.
M21
(
)
*
lllOOlllO\
l
.
M13
(
)
+
ll\
lOOlllOO
.
M2\
2
(
)
*
lllOOll\
l\
Ol\

.
M23\

(
)
+
lllO\
O\
l\
llOO\

.
M2\
3\

(
)
*
lllO\
Oll\
lOl\

.
M33\

(
)
;
lOOO\
O\
l\
lOOll
.
M31
(
)
=
lll\
OOlllOO\

.
M31\

(
)
*
lllOOll\
l\
Ol
.
M11
(
)
+
lllOOl\
ll\
O\
O\

.
M3\
2\

(
)
*
lll\
OO\
lll\
O\
l
.
M21
(
)
+
lllOOll\
lO\
O
.
M3\
3\

(
)
*
lllOO\
lllOl
.
M31
(
)
;
lOO\
OOl\
lOOll
.
M3\
2
(
)
=
lll\
OOlllO\
O
.
M3\
1
(
)
*
ll\
lOOll\
l\
Ol
.
M12
(
)
+
lll\
OOl\
llOO
.
M3\
2\

(
)
*
ll\
l\
O\
Olll\
Ol\

.
M22\

(
)
+
ll\
lOOlllOO
.
M3\
3\

(
)
*
lll\
OOl\
llOl\

.
M3\
2
(
)
;
lOOOOllO\
Oll\

.
M33\

(
)
=
lllOOl\
l\
l\
OO
.
M31\

(
)
*
lllOO\
ll\
lO\
l
.
M1\
3
(
)
+
lllO\
OlllOO
.
M32
(
)
*
lllOOlllOl
.
M23\

(
)
+
lllOOl\
llOO
.
M33
(
)
*
lllOOlllO\
l
.
M33
(
)
;
}
void
TA\
_\
FAST\
_CAL\
L\

Mat33\

::
MulInPla\
ce\

(
Ma\
t\
33\

&
lllOO\
ll\
l\
OO\

,
con\
st
Mat3\
3
&
lllOOlllOl
)
{
float
ll\
lOl\
ll\
lll\

=
lll\
OOl\
l\
l\
O\
O\

.
M11
(
)
;
float
llllOOO\
OOO
=
lllO\
OlllOO
.
M12
(
)
;
fl\
o\
at\

lllOlllllO
=
lll\
OO\
ll\
lO\
O\

.
M13
(
)
;
lll\
OOlll\
OO\

.
M11
(
)
=
ll\
lOllllll
*
lllOO\
l\
llOl
.
M11
(
)
+
ll\
llOOOOOO\

*
lllOOlll\
O\
l
.
M21\

(
)
+
lllOl\
llllO
*
lllO\
Ol\
llOl
.
M31\

(
)
;
lllO\
Ol\
llO\
O
.
M12\

(
)
=
lllOllll\
l\
l
*
lllOOlllOl
.
M1\
2
(
)
+
llllOOO\
OOO\

*
ll\
lOOlllO\
l
.
M22\

(
)
+
lllOllll\
lO
*
lllOOl\
l\
lOl
.
M32
(
)
;
ll\
lO\
Oll\
l\
OO
.
M1\
3
(
)
=
lll\
Ol\
llll\
l
*
lllOOl\
ll\
Ol
.
M1\
3\

(
)
+
llllOOOOOO
*
lllOO\
lll\
O\
l
.
M23\

(
)
+
lllO\
ll\
lllO
*
lllOOl\
l\
lOl
.
M3\
3\

(
)
;
lllO\
l\
l\
lll\
l
=
lll\
OO\
l\
ll\
OO
.
M2\
1
(
)
;
llll\
OOOOOO
=
ll\
lOOlllOO
.
M22
(
)
;
ll\
lOlllllO
=
lllOOl\
llOO
.
M23
(
)
;
lllOOll\
lO\
O
.
M21
(
)
=
ll\
l\
O\
llll\
ll
*
lllO\
OlllOl
.
M11
(
)
+
ll\
ll\
OO\
OOOO
*
ll\
l\
O\
Oll\
lO\
l\

.
M2\
1
(
)
+
ll\
lO\
lllllO
*
lllO\
OlllOl
.
M31
(
)
;
ll\
lOOlllO\
O
.
M2\
2\

(
)
=
lllOllll\
l\
l
*
lllOOll\
lOl
.
M12
(
)
+
llllO\
OOOOO\

*
ll\
l\
OOlllOl
.
M22
(
)
+
lllO\
lllllO
*
lllO\
OlllO\
l
.
M32\

(
)
;
lllO\
OlllO\
O
.
M2\
3
(
)
=
ll\
lOl\
lllll\

*
lllO\
O\
ll\
lOl
.
M13
(
)
+
llll\
OOO\
OOO
*
lll\
OO\
lllOl
.
M23
(
)
+
lllO\
l\
llllO
*
lllOO\
l\
llOl\

.
M33
(
)
;
lll\
Ollllll
=
lllOOlll\
OO
.
M31
(
)
;
lll\
l\
O\
O\
OOOO
=
lllOOll\
lOO
.
M32
(
)
;
lllO\
ll\
l\
llO
=
lll\
OOlllOO
.
M3\
3
(
)
;
lllOO\
lllOO
.
M31
(
)
=
lllOl\
lllll
*
ll\
lOO\
l\
ll\
Ol
.
M1\
1
(
)
+
lll\
lOOOOO\
O\

*
lllOO\
lllOl
.
M2\
1
(
)
+
lll\
OlllllO\

*
lllOO\
lllOl
.
M31
(
)
;
ll\
lOOll\
l\
OO
.
M32
(
)
=
lllOll\
llll
*
lll\
OOlllOl
.
M12\

(
)
+
llllOO\
OOOO\

*
ll\
lO\
Oll\
lOl\

.
M22\

(
)
+
lll\
Ol\
l\
ll\
lO\

*
lllOOlll\
Ol\

.
M32
(
)
;
ll\
lOOlllOO\

.
M33
(
)
=
lllOllllll
*
ll\
lOO\
ll\
lOl
.
M1\
3
(
)
+
llll\
O\
OOO\
OO
*
ll\
lOOl\
ll\
O\
l
.
M23
(
)
+
lllOlllllO
*
ll\
lOO\
lllOl\

.
M33
(
)
;
}
void\

TA_FA\
S\
T_CAL\
L\

Ma\
t\
33
::
MulByT\
r\
an\
spo\
s\
e
(
const
Mat33
&
ll\
l\
O\
Ol\
ll\
OO
,
const\

Mat33
&
ll\
l\
OO\
lllOl
,
Ma\
t33
&
lOOOOllO\
Oll\

)
{
lO\
OOO\
ll\
O\
Oll
.
v3\
X\

.
x
=
lll\
O\
Ol\
l\
lOO
.
v3\
X
.
Dot
(
lll\
OOl\
llO\
l\

.
v3X
)
;
lOOOOllOOl\
l
.
v3\
X
.
y
=
lllOO\
lllOO
.
v3X
.
Dot
(
lll\
OOl\
llOl
.
v3Y
)
;
lOOO\
O\
l\
lOOll
.
v3X\

.
z
=
lllOO\
ll\
lO\
O
.
v3X
.
Dot
(
lllO\
OlllOl
.
v3Z\

)
;
lOOOOll\
OO\
ll
.
v3\
Y
.
x
=
lll\
O\
Ol\
llOO
.
v3\
Y\

.
Dot
(
lll\
OO\
lllOl
.
v3X
)
;
lO\
OO\
OllOOll\

.
v3\
Y
.
y
=
lllOOlllOO
.
v3Y
.
Dot
(
ll\
l\
OOlllOl
.
v3\
Y
)
;
lOO\
OO\
llOOl\
l
.
v3Y
.
z
=
lll\
OOlllOO\

.
v3Y
.
Dot\

(
lll\
OOlllOl
.
v3Z
)
;
lOOOO\
ll\
O\
Ol\
l
.
v3Z\

.
x
=
lll\
OOlllOO
.
v3\
Z
.
Do\
t
(
ll\
l\
OOl\
llO\
l\

.
v3\
X
)
;
lOOOOl\
lOOll
.
v3Z
.
y
=
ll\
lOOl\
ll\
O\
O
.
v3Z
.
Do\
t
(
ll\
lOOlll\
O\
l\

.
v3Y
)
;
lOO\
OOllOOll
.
v3\
Z
.
z
=
lllOO\
lllOO\

.
v3Z
.
Dot
(
lllO\
OlllOl
.
v3\
Z
)
;
}
vo\
id
TA_FA\
ST_CALL
Mat\
33
::
MulByTr\
an\
sp\
o\
se\
InP\
l\
ace
(
Mat\
33\

&
lllO\
O\
lllO\
O
,
co\
nst
Ma\
t33\

&
lll\
OO\
lllOl
)
{
Ve\
c\
3\

lOO\
OOl\
lOl\
OO
;
lO\
OO\
Oll\
OlO\
O
=
lll\
OOlllOO
.
v3X
;
lllOOlll\
OO
.
v3X
.
x
=
lOOOOllO\
lOO
.
Dot
(
lllOOl\
llOl
.
v3X
)
;
ll\
l\
OOlllOO\

.
v3\
X
.
y
=
lOOO\
OllOlOO
.
Dot\

(
lllO\
O\
l\
l\
lO\
l\

.
v3Y
)
;
ll\
lOOl\
l\
lO\
O
.
v3\
X
.
z
=
lOOOO\
ll\
OlOO
.
Dot
(
ll\
lO\
OlllO\
l\

.
v3Z
)
;
lOOO\
O\
ll\
OlO\
O
=
lllOOl\
llOO\

.
v3Y
;
lllOOlllO\
O\

.
v3\
Y
.
x
=
lO\
O\
OO\
llOlO\
O
.
Dot
(
lllOOlllOl\

.
v3X
)
;
lllOO\
lll\
OO
.
v3\
Y\

.
y
=
lO\
OOOllOlO\
O
.
Do\
t
(
lll\
O\
Oll\
lOl
.
v3Y\

)
;
lllO\
O\
lllOO
.
v3Y\

.
z
=
lOOO\
O\
llO\
lOO
.
Do\
t\

(
ll\
lOO\
l\
ll\
Ol\

.
v3\
Z
)
;
lOOOOl\
lOlO\
O\

=
lll\
OOl\
l\
lOO\

.
v3Z
;
lll\
OOll\
lOO\

.
v3\
Z\

.
x
=
lOOOOl\
lOlO\
O\

.
Dot
(
lll\
OOlllOl\

.
v3X
)
;
lllOO\
ll\
lOO
.
v3Z
.
y
=
lO\
O\
O\
Oll\
OlOO
.
Do\
t
(
ll\
lOOlllOl
.
v3Y
)
;
lllOOlllOO\

.
v3Z
.
z
=
lOOOOllOlOO
.
Do\
t
(
lllOO\
lll\
Ol\

.
v3Z
)
;
}
void\

TA_FAST_CALL\

Mat33
::
MulByTrans\
p\
ose
(
co\
nst
Ve\
c3
&
llllll\
lll
,
const
Ma\
t\
33
&
ll\
lOOll\
l\
Ol\

,
Ve\
c3
&
lOOOOllO\
lOl
)
{
lOOOO\
llOl\
O\
l
.
x
=
llll\
lllll
.
Dot\

(
lllOOlllOl
.
v3X
)
;
lO\
OOOllOl\
Ol
.
y
=
lllllllll
.
Dot
(
ll\
lO\
OlllOl
.
v3\
Y
)
;
lOOOO\
llOl\
Ol\

.
z
=
lllllllll
.
Do\
t\

(
lllO\
O\
lllOl
.
v3\
Z
)
;
}
}
