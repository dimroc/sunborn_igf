//---------------------------------------------------------------------------------
// File Name: zcta005.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

namespace
TA
{
inl\
ine
MFrame
::
MFrame
(
)
{
}
inli\
ne
MFrame
::
MF\
r\
ame
(
con\
s\
t\

MFra\
me
&
lOOOOOO\
OOl
)
{
v3T\
ransla\
t\
ion
=
lOOOOOOOO\
l
.
v3Transla\
tion
;
m3\
3\
Rotati\
o\
n\

=
lOOOO\
O\
OOOl
.
m33Rot\
ation
;
}
in\
line\

MFram\
e
::
MFrame
(
co\
nst\

Vec3
&
lOOOll\
llOOO
)
{
v3Translati\
o\
n
=
lOOOll\
l\
lO\
O\
O\

;
m33Ro\
tat\
ion\

.
Se\
tToI\
den\
t\
ity
(
)
;
}
inl\
ine
MF\
rame\

::
MF\
rame
(
const
Mat33
&
lOOOllllOOl
)
{
v3Tr\
ans\
l\
ati\
on\

.
Clea\
r
(
)
;
m33Rotatio\
n
=
lO\
OO\
l\
lllOOl\

;
}
inline
voi\
d
MFr\
ame
::
Clear
(
)
{
v3T\
rans\
lat\
ion
.
Clear
(
)
;
m33Rot\
at\
i\
on
.
SetTo\
Id\
e\
ntit\
y
(
)
;
}
inline
MFr\
ame
::
MFrame
(
const
Vec3
&
lOOOl\
lllO\
OO
,
cons\
t\

Ma\
t\
33\

&
lOOOl\
lllOO\
l
)
{
v3T\
ransl\
ation\

=
lOO\
Oll\
l\
lO\
O\
O\

;
m33R\
o\
tatio\
n
=
lOOOll\
ll\
OOl\

;
}
inl\
ine
void
MF\
ram\
e
::
In\
te\
rpol\
ate
(
MFrame
&
ll\
lOOllOlO
,
MFrame
&
ll\
lOOll\
l\
lO
,
fl\
o\
a\
t\

lO\
lllll\
O\
lO
)
{
v3\
Translat\
i\
on
=
lllOOl\
l\
OlO
.
v3\
Trans\
lat\
ion\

+
(
ll\
lOO\
llllO\

.
v3\
Tr\
a\
ns\
lati\
on\

-
lllOOll\
OlO\

.
v3Trans\
lat\
i\
on\

)
*
lOlllllOlO\

;
m33Ro\
tat\
io\
n
.
Interpo\
l\
ate
(
lllOOllOlO
.
m33R\
ot\
a\
tio\
n
,
lllOOllllO\

.
m33Rotati\
on
,
lOllll\
lOlO\

)
;
}
inline\

MFram\
e
&
MFr\
ame
::
op\
e\
rat\
or\

*=
(
con\
s\
t
MFr\
ame
&
lOO\
OOOOOOl\

)
{
m33R\
otation\

*=
lOO\
OOOOOO\
l
.
m33Ro\
ta\
tion
;
v3T\
ra\
nslation
*=
lO\
O\
OOO\
OOO\
l
.
m33Rota\
tio\
n
;
v3Translation
+=
lOOOOOO\
OOl
.
v3\
Tran\
slati\
on
;
return
*
thi\
s
;
}
in\
line\

MFram\
e\

&
MFr\
am\
e
::
operator
*=
(
cons\
t
Mat33
&
lOO\
OOlllO\
Ol
)
{
m33\
Rotation
*=
lOOOO\
lll\
OO\
l
;
v3T\
ranslation
*=
lO\
OOOl\
ll\
O\
Ol
;
re\
turn
*
this
;
}
inline
MF\
rame\

&
MFr\
ame
::
op\
e\
ra\
to\
r
/=
(
con\
st
MFrame
&
lO\
O\
Ollll\
OlO
)
{
TA_ASSERT\

(
lOOOl\
lll\
OlO\

.
m33Rot\
at\
ion
.
IsOrt\
h\
ogonal
(
)
)
;
(
*
this
)
=
(
*
this
)
/
lO\
O\
OllllOlO\

;
return\

(
*
this
)
;
}
inlin\
e
MF\
rame
MFram\
e
::
oper\
at\
o\
r
*
(
co\
ns\
t
MFr\
ame
&
lOOO\
O\
OO\
OO\
l
)
con\
st
{
MF\
r\
am\
e\

lOOOlll\
lOl\
l
;
lOO\
OllllOll
.
m33Ro\
tatio\
n
=
m3\
3Ro\
tation
*
lO\
OO\
OOO\
OOl
.
m33Rot\
at\
i\
on
;
lOOO\
llll\
Oll
.
v3Translation
=
v3\
Tra\
nslati\
on\

*
lOO\
OOO\
OOO\
l\

.
m33Ro\
tation
;
lO\
O\
Ol\
l\
l\
lOll\

.
v3\
Tra\
nslation
+=
lOOOO\
OO\
O\
Ol
.
v3\
T\
ransl\
ation\

;
re\
t\
urn
lOOOllllOll\

;
}
inline
MF\
ra\
me
MFram\
e
::
oper\
ator
*
(
const\

Ma\
t\
33
&
lO\
O\
OOlllO\
O\
l
)
co\
n\
st
{
MFr\
ame
lOO\
OllllO\
ll
;
lO\
OOl\
l\
llOll
.
m33\
Ro\
t\
ation
=
m3\
3Ro\
t\
a\
ti\
on\

*
lOOOO\
l\
llOOl
;
lOOO\
llllOll
.
v3T\
ran\
sl\
at\
io\
n\

=
v3T\
rans\
lation
*
lO\
OOO\
l\
llOOl\

;
re\
tur\
n
lOO\
O\
llllOll
;
}
inli\
ne\

MF\
ra\
m\
e
MFr\
ame
::
operator
/
(
const
MFrame
&
lOO\
OllllOl\
O\

)
const
{
TA_ASSERT
(
lOOO\
llll\
OlO
.
m33\
Ro\
t\
ation\

.
IsOrthogona\
l
(
)
)
;
MFr\
ame
lO\
OOll\
l\
lOll
;
Mat33
::
MulByTran\
spose
(
m33Rot\
ati\
on\

,
lOO\
Ol\
l\
l\
lOl\
O\

.
m3\
3Rot\
a\
t\
i\
on
,
lO\
OO\
llllOll\

.
m3\
3R\
ota\
tio\
n
)
;
Mat\
33
::
MulByTra\
ns\
pos\
e
(
v3Tra\
nsl\
atio\
n
-
lO\
OO\
llllOlO
.
v3Translation
,
lOOOllllO\
l\
O
.
m3\
3R\
otation
,
lOO\
Olll\
lO\
ll\

.
v3Transla\
tio\
n\

)
;
re\
turn
lOOO\
llllO\
l\
l
;
}
in\
line
Vec\
3
ope\
rato\
r
*
(
cons\
t\

Vec3
&
llllll\
l\
ll
,
const
MFrame\

&
lOOOl\
lllO\
l\
O
)
{
Vec3
lOOOl\
OlOlOl
;
lOOOl\
OlOl\
Ol
=
llll\
ll\
ll\
l
*
lOOOlll\
l\
Ol\
O
.
m33Rota\
tion
;
lO\
O\
OlOlOlOl
+=
lOOOll\
l\
lOlO\

.
v3Translat\
ion\

;
re\
t\
urn
lOO\
OlOlOlO\
l
;
}
in\
line
Ve\
c3
op\
erator
/
(
co\
n\
s\
t\

Vec3
&
llllll\
lll
,
con\
st
MFrame\

&
lOO\
Ol\
lllOl\
O
)
{
Vec3\

lOO\
OlOl\
O\
lO\
l
;
Ve\
c\
3
lOOO\
O\
ll\
O\
l\
OO
;
lOO\
OOll\
O\
lOO
=
lll\
lll\
lll
-
lOO\
Ol\
lllO\
lO\

.
v3Transl\
at\
io\
n
;
lOOOOOOll\
O
(
lOOOllllOlO
.
m33Rotation
.
IsOrthogonal
(
)
,
"Vec3 / MFrame. m33Rotation isn't orthogonal")
;
Mat\
33
::
MulB\
y\
Transpose
(
lOOOOll\
O\
lOO
,
lOOOllllOlO\

.
m33Rotati\
on
,
lOOO\
l\
OlOlOl\

)
;
return
lOOO\
lOlOlOl
;
}
inline
Vec\
3
&
ope\
rato\
r\

*=
(
Ve\
c3
&
lll\
llllll
,
co\
nst
MFrame\

&
lOOOll\
llOlO
)
{
lllllllll
*=
lOOOl\
lllOlO
.
m3\
3\
Rot\
at\
ion
;
ll\
lll\
l\
lll
+=
lOOOl\
lllOlO
.
v3\
Tr\
an\
sla\
t\
ion\

;
ret\
u\
r\
n\

lllll\
l\
ll\
l
;
}
inli\
ne\

Vec3
&
op\
e\
rato\
r
/=
(
Ve\
c\
3\

&
lllllll\
ll
,
const
MFrame\

&
lO\
O\
OllllOl\
O\

)
{
lllllllll
=
llll\
l\
llll\

/
lOOOllllOlO
;
ret\
u\
rn
lllllll\
ll
;
}
inlin\
e\

boo\
l
MFra\
me
::
opera\
t\
or
==
(
cons\
t
MFrame\

&
lOOOOO\
OO\
Ol
)
con\
st\

{
ret\
urn
v3Transla\
tion
==
lO\
OOOOOOO\
l
.
v3T\
r\
an\
slat\
i\
on
&&
m33Rota\
tio\
n
==
lOOOOO\
O\
OOl\

.
m33\
Ro\
tatio\
n
;
}
in\
line
bool
MFrame\

::
opera\
tor
!=
(
co\
nst
MFrame
&
lOOOOOOOOl
)
const
{
re\
t\
urn
v3T\
ransl\
a\
tion
!=
lOOOOO\
OO\
Ol
.
v3Tra\
ns\
l\
a\
t\
io\
n
||
m33Rota\
tion
!=
lO\
OOO\
OOOOl
.
m33Ro\
ta\
tion
;
}
inli\
ne
void
MFr\
ame
::
Invert
(
)
{
*
th\
is
=
GetInv\
ers\
e
(
)
;
}
in\
li\
ne
MFr\
a\
me
MFram\
e
::
GetIn\
verse
(
cons\
t
MFrame
&
lOOOOOOOOl
)
{
re\
tur\
n
lO\
O\
OOO\
OOOl
.
GetI\
n\
ve\
rs\
e\

(
)
;
}
inl\
in\
e
MFrame
MFr\
ame
::
Ge\
tInverse
(
)
co\
ns\
t
{
MFrame
lOOOll\
l\
llOO
;
lOO\
Oll\
ll\
lOO\

.
m3\
3Rotat\
i\
o\
n
=
m33Rotation
.
GetT\
r\
anspos\
e\
AsI\
nvers\
e
(
)
;
lO\
O\
Olll\
ll\
OO
.
v3T\
ranslation\

=
-
(
v3Trans\
latio\
n
*
lO\
O\
Olll\
llOO
.
m33Rotati\
on
)
;
return\

lO\
OO\
l\
l\
lllOO
;
}
in\
l\
i\
ne\

Vec\
3
MFr\
ame
::
GetT\
ran\
sf\
or\
m
(
cons\
t
Ve\
c3\

&
llllOO\
Olll\

)
{
retu\
rn
llll\
O\
OOl\
ll\

*
(
*
this
)
;
}
inli\
ne
Vec3
MFrame
::
GetIn\
vers\
e\
T\
ransform
(
const
Ve\
c3
&
llllOO\
Olll
)
{
retur\
n\

ll\
l\
lOOOlll\

/
(
*
this\

)
;
}
}
