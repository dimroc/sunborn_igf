//---------------------------------------------------------------------------------
// File Name: zcta009.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifndef TA_MEMORYMGR_H
#include "MemoryMgr.h"
#endif //
nam\
espace
TA
{
te\
mplate\

<
cla\
ss
Type
>
lOOllOllO\
Ol
<
Type
>
::
lO\
OllO\
ll\
OOl
(
)
{
TA_A\
S\
SERT
(
size\
of
(
lOO\
ll\
OOOO\
O\

)
>
siz\
eof\

(
0
)
)
;
lOlOOlO\
llO
=
0
;
lOlOOOlO\
Ol\

=
0
;
lO\
Oll\
OllOl\
l\

=
0
;
lO\
OllO\
llOlO
=
0
;
}
te\
m\
p\
late
<
cla\
ss
Type
>
lOO\
l\
l\
Ol\
lOO\
l
<
Ty\
pe
>
::
~
lOOllOllOO\
l
(
)
{
Finalise
(
)
;
}
temp\
late
<
clas\
s\

Ty\
p\
e
>
void
lOOllOllO\
Ol\

<
Type
>
::
Ini\
tia\
l\
is\
e
(
int
lOO\
lllOllO\

)
{
TA_A\
SSERT
(
lOO\
ll\
lOllO
>
0
)
;
lOlOOOlOOl\

=
lOOll\
lO\
l\
lO
;
lOOllOl\
lOl\
O
=
lOl\
O\
OOlOOl
;
lOOO\
llllOO\

(
lOl\
O\
O\
lOllO
,
lOO\
llOO\
OOO\

,
lOlO\
OOlOOl
)
;
TA_ASSERT
(
lOlOOlOllO
)
;
lOOllOllOl\
l
=
lOl\
O\
O\
lO\
llO\

;
int
lOOOll\
O\
OOl
;
for\

(
lOOO\
llOOOl\

=
0
;
lOOOllOOOl
<
lO\
lOO\
Ol\
OOl\

-
1
;
lOOO\
llOOOl\

++
)
{
lOOll\
Ol\
llOO
(
lOlOO\
lO\
l\
lO\

[
lOOOll\
OOOl
]
)
=
&
lOlOO\
lOll\
O
[
lO\
OOllOOOl
]
+
1
;
}
}
templa\
te
<
class\

Type
>
vo\
id\

lOOllO\
ll\
OOl
<
Type
>
::
Fin\
al\
ise
(
)
{
TA_A\
S\
S\
ERT
(
lO\
Ol\
lOll\
OlO
==
lOlOO\
Ol\
OOl
)
;
lOlOOOlOOl\

=
0
;
lOOllOl\
lOll
=
0
;
lOOllO\
llOlO
=
0
;
lOlOOOlllO\

(
lOlOOlOllO\

,
lO\
OllOOOOO
)
;
lOlOOl\
O\
llO
=
0
;
}
template
<
cl\
a\
ss
Type\

>
Type
*
lO\
Oll\
OllOOl\

<
Ty\
p\
e
>
::
Alloc
(
)
{
TA_ASSE\
RT\

(
lO\
lO\
O\
lOllO
)
;
if
(
!
lOO\
llOl\
lO\
ll
)
return\

0
;
Type
*
lOOll\
O\
lllOl\

=
&
lOO\
ll\
OllOl\
l
->
lOO\
OOOlOOOO
;
lOOl\
lO\
llO\
ll
=
lO\
Ol\
lO\
l\
l\
lOO\

(
*
lOOl\
lOllOll
)
;
TA_A\
S\
SERT
(
(
u32
)
lOOll\
OllOl\
l
-
(
u32
)
lOlOOl\
O\
l\
lO
<
lO\
lOOOlO\
Ol
*
sizeo\
f
(
lO\
Ol\
lOOO\
OO\

)
)
;
lO\
OllO\
ll\
O\
lO\

--
;
retur\
n
lOOllOlllO\
l
;
}
templ\
ate\

<
class
Typ\
e
>
vo\
id
lOOllOllOOl\

<
Ty\
p\
e
>
::
Free
(
Typ\
e
*
lO\
O\
l\
ll\
OOOO
)
{
TA\
_ASSE\
RT
(
lOl\
OO\
l\
O\
l\
l\
O\

)
;
TA_ASSERT\

(
(
u3\
2\

)
lO\
O\
lllOO\
O\
O
-
(
u32
)
lO\
lO\
OlOll\
O
<
lO\
l\
O\
OOlOOl\

*
si\
zeof\

(
lOOllOOOOO\

)
)
;
lO\
OllOOOOO
*
lOO\
lllOOOl
=
re\
in\
terp\
r\
et_cas\
t
<
lO\
O\
l\
lOOOOO
*
>
(
lOOl\
l\
l\
O\
O\
OO
)
;
lO\
Ol\
lOlll\
OO\

(
*
lOOlllO\
OOl
)
=
lOOl\
lOllOll
;
lOOllOl\
lOll
=
lO\
O\
ll\
lO\
OOl
;
lO\
O\
l\
l\
Oll\
O\
lO
++
;
}
}
