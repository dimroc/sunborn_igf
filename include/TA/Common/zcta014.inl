//---------------------------------------------------------------------------------
// File Name: zcta014.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifndef TA_DEBUG_H
#include "Debug.h"
#endif //
name\
sp\
ace
TA
{
inl\
ine
Vec4
TA_\
VEC4_CAL\
L
opera\
to\
r
*
(
flo\
a\
t
lOOO\
O\
OlllO
,
cons\
t\

Vec4
&
lOlO\
Ol\
lllO\
l
)
{
Ve\
c4
lO\
lOOl\
l\
lll\
O
(
lOOOOOlll\
O
*
lO\
l\
O\
O\
lll\
lO\
l\

.
x
,
lOOOO\
OlllO
*
lOlOOl\
ll\
lOl\

.
y
,
lOOOO\
Ol\
llO\

*
lO\
l\
O\
Oll\
llO\
l
.
z
,
lOOOOOll\
lO
*
lO\
lOOl\
lllOl
.
w
)
;
retur\
n\

lOlOOl\
l\
l\
l\
lO
;
}
inl\
ine
vo\
id
Vec4
::
Ge\
tAxisOrder\

(
int
lll\
lOO\
lOOl\

[
4
]
)
const\

{
if
(
(
*
this
)
[
llllOOl\
OOl
[
0
]
]
<
(
*
th\
i\
s
)
[
llllOOl\
O\
Ol
[
1
]
]
)
Swap
(
llllOOlOO\
l
[
0
]
,
lll\
lOOlOOl
[
1
]
)
;
if
(
(
*
thi\
s\

)
[
lll\
lOO\
lO\
O\
l
[
1
]
]
<
(
*
th\
is
)
[
llll\
OOlOOl
[
2
]
]
)
Sw\
ap
(
ll\
l\
l\
OOlOOl
[
1
]
,
llllOOlOOl\

[
2
]
)
;
if
(
(
*
this
)
[
ll\
ll\
O\
OlOO\
l
[
0
]
]
<
(
*
this
)
[
llll\
O\
OlOOl
[
1
]
]
)
Swap\

(
ll\
llOO\
l\
O\
Ol
[
0
]
,
lll\
l\
OOl\
OO\
l
[
1
]
)
;
if
(
(
*
this
)
[
llllOOlOOl
[
2
]
]
<
(
*
th\
is\

)
[
ll\
llOOl\
OOl
[
3
]
]
)
Swap
(
ll\
llOOlOOl
[
2
]
,
llllO\
OlO\
O\
l\

[
3
]
)
;
if
(
(
*
thi\
s
)
[
llllOOlOOl\

[
1
]
]
<
(
*
th\
is
)
[
llll\
OOl\
O\
O\
l
[
2
]
]
)
Sw\
ap
(
llllO\
OlO\
Ol
[
1
]
,
llllOOlOOl
[
2
]
)
;
if
(
(
*
this
)
[
llllOOlO\
O\
l
[
0
]
]
<
(
*
thi\
s
)
[
llllOOlOO\
l\

[
1
]
]
)
Swap
(
ll\
l\
lOO\
lOOl
[
0
]
,
llllOOlOOl\

[
1
]
)
;
if\

(
(
*
this
)
[
llllOO\
lOOl
[
3
]
]
<
(
*
thi\
s
)
[
lll\
l\
OO\
lOOl\

[
4
]
]
)
Swa\
p
(
llll\
OOl\
OO\
l
[
3
]
,
llll\
O\
Ol\
OOl
[
4
]
)
;
if
(
(
*
thi\
s
)
[
ll\
llOOlOOl
[
2
]
]
<
(
*
th\
i\
s
)
[
llllOOlOOl
[
3
]
]
)
Swap
(
llllOOlOO\
l
[
2
]
,
ll\
llOO\
lOOl
[
3
]
)
;
if\

(
(
*
this\

)
[
llllOOlOOl
[
1
]
]
<
(
*
this\

)
[
llll\
OOlOOl\

[
2
]
]
)
Sw\
a\
p
(
llllOOlOOl
[
1
]
,
llllOO\
lO\
Ol
[
2
]
)
;
if
(
(
*
th\
is
)
[
lll\
l\
O\
OlOO\
l\

[
0
]
]
<
(
*
th\
is
)
[
lll\
lO\
OlOOl
[
1
]
]
)
Swap
(
llllOOlOO\
l
[
0
]
,
llllOO\
lO\
Ol\

[
1
]
)
;
}
inlin\
e
co\
nst
Vec4
&
Ve\
c4
::
GetUnit\
Vecto\
r
(
int\

lOO\
OlOOll\
l
)
{
switch\

(
lOOOlOOlll\

)
{
ca\
se
AXIS_X
:
return
k_v\
4U\
nitX\

;
bre\
ak
;
ca\
s\
e
AX\
IS\
_Y
:
retur\
n
k_v4Unit\
Y
;
break
;
cas\
e
AXIS_Z
:
ret\
urn
k_v4Uni\
tZ
;
br\
eak\

;
case
AX\
I\
S_W
:
re\
turn
k_v4UnitW
;
br\
eak
;
def\
ault\

:
lll\
OO\
OlllO
;
return
k_v4UnitX
;
}
}
}
