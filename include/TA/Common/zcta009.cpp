//---------------------------------------------------------------------------------
// File Name: zcta009.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#include "Geometry.h"
#ifndef TA_VECTOR_H
#include "Vector.h"
#endif //
na\
m\
espa\
c\
e
TA\

{
bo\
o\
l
TAC_CA\
L\
L
Geome\
try\

::
Li\
neI\
ntersect\
sB\
o\
x
(
co\
nst
Vec2
&
lllOllO\
OlO\

,
const
Vec2
&
lllOl\
l\
OOl\
l
,
co\
ns\
t
Ve\
c\
2
&
lllOll\
Ol\
OO
,
cons\
t
Vec2\

&
lllOllO\
lOl
)
{
if\

(
lllOl\
lOOlO
.
x
>
lllOll\
O\
lOO
.
x
+
ll\
lOllOlOl
.
x
&&
ll\
lOllO\
Oll\

.
x
>
lllOl\
lOlOO
.
x
+
lllOllOl\
Ol
.
x
)
re\
turn\

fa\
ls\
e
;
if
(
lllOllOOlO
.
x
<
ll\
lOl\
lOlOO
.
x
-
lllO\
llO\
l\
Ol
.
x
&&
ll\
l\
Ol\
lO\
Ol\
l
.
x
<
lllOll\
OlO\
O
.
x
-
lll\
O\
llO\
lOl
.
x
)
return
fal\
se
;
if\

(
lllOll\
OOlO
.
y
>
lllOllO\
lO\
O
.
y
+
lll\
O\
l\
lO\
lOl
.
y
&&
ll\
lOllOOl\
l
.
y
>
lllOl\
lOl\
OO\

.
y
+
lllOllOlO\
l
.
y
)
retur\
n
false\

;
if
(
lllO\
llO\
O\
l\
O
.
y
<
lllOllOl\
OO
.
y
-
lll\
OllOl\
Ol
.
y
&&
ll\
lO\
llOOll\

.
y
<
lllOll\
OlOO
.
y
-
lllOllOlOl\

.
y
)
ret\
u\
rn
false
;
Vec\
2\

ll\
lOll\
OllO
=
(
lllO\
l\
lOOll\

-
lllOll\
O\
O\
lO
)
;
float\

lOl\
lllOOll
=
ll\
l\
Ol\
lO\
llO
.
GetM\
agnitu\
d\
e
(
)
;
if
(
lOl\
l\
llOOll
<
k_fMinFloat
)
ret\
urn
fa\
lse
;
lllO\
llO\
llO
/=
lOllll\
O\
Oll
;
ll\
l\
Ol\
lOllO
.
Initiali\
s\
e\

(
lllOl\
l\
O\
l\
lO
.
y
,
-
ll\
lOllO\
llO
.
x
)
;
Vec2\

lllOll\
O\
lll
=
lllOl\
lOlOl
;
if
(
lllO\
ll\
O\
lll
.
x
*
lll\
OllO\
ll\
O
.
x
<
0.0f
)
lllOl\
lOl\
ll
.
x
=
-
lll\
O\
llO\
l\
ll
.
x
;
if\

(
ll\
lOl\
lOlll
.
y
*
lllOllOllO\

.
y
<
0.0f
)
lll\
Ol\
lOlll\

.
y
=
-
lllOllOl\
ll
.
y
;
if
(
ll\
lOl\
l\
OllO
.
Dot
(
lll\
OllOlO\
O\

+
lll\
OllOll\
l
-
lllOllOOlO
)
<
0.0f
)
retur\
n
false
;
if
(
lll\
OllO\
l\
l\
O\

.
Do\
t
(
lllOll\
O\
l\
O\
O
-
lll\
OllO\
ll\
l
-
lllOll\
OOlO
)
>
0.0f
)
re\
t\
ur\
n
false\

;
re\
t\
ur\
n
true
;
}
flo\
a\
t\

TA\
C_\
CALL\

Geometry\

::
CubicInter\
pola\
te
(
flo\
a\
t
lllOlllO\
OO
,
fl\
oat
lllOlllOOl
,
fl\
oat\

lllOlllOlO
,
float\

lllO\
lllOll
,
flo\
at
lll\
Olll\
lO\
O
)
{
floa\
t
ll\
lOl\
lll\
Ol
=
ll\
l\
Oll\
lO\
OO
;
flo\
at
lllOl\
l\
lllO
=
ll\
lOlllOlO\

;
flo\
a\
t
lllOlllll\
l
=
lllOlllOlO
+
lllOl\
llOll
+
2.0f
*
(
lllOlllOOO
-
lllOlllOOl
)
;
float
lll\
lOOOOOO
=
lllOlll\
OO\
l
-
lllOll\
lOO\
O
-
lll\
Ol\
llOlO\

-
ll\
l\
Ollll\
ll
;
fl\
oa\
t
lOO\
OOOlll\
O
=
lll\
OllllOl
+
lll\
Olll\
llO
*
lllOl\
lllOO\

+
lll\
lOOO\
O\
OO\

*
(
ll\
l\
O\
l\
lllOO
*
lll\
Olll\
lOO
)
+
lll\
Oll\
llll\

*
(
lllO\
llllOO
*
ll\
lOllll\
OO\

*
lllO\
llllOO\

)
;
retu\
rn
lOOOO\
O\
l\
llO
;
}
Vec3
TA\
C_CAL\
L
Geometry
::
CubicI\
nterp\
olat\
e
(
const
Vec3\

&
llll\
OOO\
O\
Ol
,
con\
st
Vec3
&
llllO\
O\
OOlO
,
con\
st\

Vec3\

&
ll\
ll\
OOOOll
,
const
Vec3
&
llll\
O\
OOl\
OO
,
fl\
oat
lllOl\
lll\
OO\

)
{
Vec\
3
llllOOOlOl
=
lll\
lOOO\
OOl
;
Vec3
llllOOO\
ll\
O\

=
ll\
llOO\
OOll
;
Vec3
llll\
llll\
l\

=
llll\
O\
OOOll\

+
lll\
l\
OOOlOO
+
2.0f
*
(
ll\
l\
lO\
OOO\
Ol
-
ll\
l\
lO\
OO\
OlO
)
;
Vec3
lOOOOOO\
OO\
O
=
ll\
ll\
OOOOl\
O
-
ll\
l\
lOOOOO\
l\

-
llllOOOOll
-
lllllll\
ll\

;
Ve\
c3\

ll\
llOOO\
lll\

=
lll\
lO\
OOlOl
+
ll\
llOO\
Ol\
lO
*
lll\
O\
lll\
l\
OO
+
lOOOOOOOOO
*
(
lllOll\
llOO
*
lllOllllOO
)
+
lllllll\
ll\

*
(
ll\
l\
Oll\
ll\
OO
*
lll\
Ollll\
OO\

*
lllOllllO\
O
)
;
re\
tu\
rn\

llllOOOlll\

;
}
fl\
o\
at
TAC_CALL
Geo\
me\
try
::
Cu\
bic\
In\
t\
er\
pol\
ateG\
rad\
ient
(
flo\
at
lllOlllOO\
O
,
float
ll\
lOl\
llOOl
,
float
lllOlllOl\
O
,
flo\
at
lllOl\
llO\
l\
l\

,
float\

lll\
Olll\
lOO
)
{
flo\
at
ll\
lOl\
l\
lllO
=
lllOlllOlO\

;
floa\
t\

lllO\
ll\
lll\
l
=
lllOlllO\
ll\

-
2.0f
*
lll\
OlllOOl
+
lll\
OlllOlO
+
2.0f
*
ll\
lOlllOOO\

;
float\

lll\
lOOOOOO
=
(
lllO\
lllOll\

-
3.0f
*
lllOl\
lllll
-
lllOlllOl\
O\

)
*
0.5f
;
float\

lOO\
OOOll\
lO\

=
lllOlllllO\

+
2.0f
*
lll\
l\
OOOOOO
*
lllO\
ll\
llOO
+
3.0f
*
lllO\
l\
llll\
l
*
(
lllOllllO\
O
*
ll\
lOl\
lllOO
)
;
ret\
u\
rn
lOOOOO\
lllO
;
}
stati\
c\

in\
line
Vec\
2
TAC_C\
AL\
L
llllOO\
lOOO
(
con\
s\
t
Vec3
&
lll\
lll\
lll
,
con\
st
Vec3\

&
lOOOOO\
OOOO
,
int
llllO\
Ol\
OOl
[
3
]
)
{
re\
tur\
n
Vec2
(
llll\
lllll
[
ll\
l\
lOOlO\
O\
l
[
0
]
]
*
lOO\
OOO\
OOOO
[
ll\
l\
l\
OO\
lOOl
[
1
]
]
-
llll\
l\
llll
[
llll\
OOlOOl
[
1
]
]
*
lOOOO\
OOOOO
[
ll\
llOOlO\
Ol
[
0
]
]
,
ll\
l\
llllll\

[
llllOOlOOl
[
0
]
]
*
lOOO\
OO\
OOOO
[
lll\
l\
OOl\
OOl
[
2
]
]
-
ll\
lllllll
[
ll\
ll\
O\
OlOO\
l
[
2
]
]
*
lOOOOO\
OOOO
[
lll\
lO\
O\
lO\
Ol
[
0
]
]
)
;
}
static\

in\
line
fl\
o\
a\
t\

TAC_CALL
llll\
OOl\
Ol\
O
(
co\
ns\
t
Vec2
&
lll\
O\
llOO\
lO\

,
const
Ve\
c2
&
lllOll\
O\
Oll
)
{
retur\
n
lll\
OllOO\
lO\

.
x
*
lllOll\
OO\
ll
.
y
-
lllOll\
OOlO
.
y
*
lllOll\
O\
Oll
.
x
;
}
boo\
l\

TAC_CA\
LL
Ge\
om\
etry\

::
Tes\
t\
E\
dgeMove\
mentAgain\
stEd\
ge
(
const
Vec\
3
&
llllOO\
lOl\
l
,
const\

Vec3\

&
ll\
llOOllO\
O
,
const
Vec3
&
llll\
OOll\
Ol
,
const\

Vec\
3\

&
llllOO\
lllO\

,
co\
ns\
t
Vec3
&
ll\
ll\
O\
Ol\
ll\
l\

,
co\
nst
Vec3
&
llllO\
lOOOO
,
fl\
oa\
t
&
ll\
l\
l\
Ol\
O\
OOl
,
Vec3
&
lOlll\
lO\
OOl
,
Vec\
3
&
lO\
lll\
l\
O\
Ol\
O
)
{
const
float
lOllOlO\
lOl
=
0.00001f
;
const\

Vec3
llllOOOlOl
=
ll\
llO\
Ol\
lll\

-
ll\
ll\
OOlO\
l\
l
;
const\

Vec\
3
llllO\
lO\
OlO
=
ll\
l\
lOOllll\

-
llll\
Ol\
O\
OOO
;
const
Vec3
llllOl\
O\
Oll\

=
llllOO\
llOl
-
lll\
lOO\
lO\
ll
;
co\
n\
st
Vec3
lll\
lO\
l\
Ol\
OO
=
ll\
l\
lOOll\
O\
O
-
ll\
llOOlOll
;
const\

Vec3\

lll\
lO\
lOlOl
=
ll\
llOOlOll
-
lll\
lOOllOO
+
llllOOlllO
-
llllOO\
llOl
;
int
llll\
OOlOO\
l
[
3
]
;
ll\
llOl\
OO\
l\
O
.
GetAxisO\
rde\
r
(
ll\
ll\
OOlO\
O\
l
)
;
const\

Vec2
llllOlOllO
=
llllOO\
lOOO
(
ll\
l\
lOOOlO\
l
,
llllOl\
OO\
lO\

,
llllOOlOO\
l\

)
;
cons\
t\

Vec2
llllOlOll\
l
=
llllOOlO\
OO
(
ll\
llO\
l\
OOll\

,
llllOlOO\
l\
O
,
llll\
O\
Ol\
O\
Ol
)
;
co\
nst
Vec2
lll\
lOl\
lOO\
O
=
lll\
l\
OO\
lOOO
(
llllOlOl\
OO
,
llllOlOOlO
,
ll\
ll\
OOl\
OOl
)
;
const
Vec2
llllOll\
OOl
=
lll\
lOO\
lOOO
(
llll\
OlO\
lOl\

,
ll\
l\
lOlO\
O\
lO
,
llllO\
O\
lOOl
)
;
fl\
oat\

ll\
lOllll\
l\
l\

=
ll\
l\
lOOlOlO
(
ll\
llOllOO\
l
,
lll\
lOl\
l\
OO\
O
)
;
flo\
a\
t
llllO\
OOOOO
=
lll\
lOO\
l\
OlO\

(
lll\
lO\
l\
OllO
,
llllO\
llOOl\

)
-
ll\
l\
l\
OOlOlO
(
llllO\
llOOO\

,
llll\
Ol\
Olll
)
;
floa\
t
lllOl\
llllO\

=
llllO\
O\
l\
O\
lO
(
lll\
lO\
lOl\
lO
,
llll\
OlOlll
)
;
float
ll\
ll\
OllOl\
O
=
0.0f
;
if
(
Fab\
s
(
lllOl\
ll\
l\
ll
)
<
lO\
llOlOlOl
)
{
if
(
Fabs
(
ll\
llOO\
O\
OOO
)
<
lO\
ll\
O\
lOlOl\

*
100.0f
)
re\
tu\
r\
n
false
;
llllOllOlO
=
-
lllOlllllO\

/
llllOOOOOO\

;
}
els\
e
{
float
lll\
O\
Ol\
O\
l\
l\
l
=
llll\
OO\
O\
OOO\

*
llllOOOOOO
-
4.0f
*
lllOlll\
l\
l\
l
*
lll\
Ol\
l\
l\
llO\

;
if
(
lll\
OOlO\
l\
ll
<
0.0f
)
ret\
ur\
n
false
;
else\

lllOO\
lOlll
=
Sqrt
(
lll\
OOlOlll
)
;
lll\
lOllO\
l\
O
=
(
-
llllOOOOO\
O
-
ll\
lO\
O\
l\
Ol\
l\
l
)
/
(
2.0f
*
ll\
l\
O\
llllll\

)
;
fl\
oat
llll\
OllO\
l\
l
=
(
-
lll\
l\
O\
O\
OOOO
+
lllOOl\
Ol\
ll
)
/
(
2.0f
*
lllOlll\
l\
ll
)
;
if
(
llllOllO\
l\
l
>
0.0f
&&
llllOl\
lOlO
>
lll\
lOl\
lOll
)
llllOllO\
lO\

=
llll\
O\
l\
lO\
ll
;
}
if
(
llllO\
llO\
lO
<
0.0f
||
llllO\
llOlO\

>
1.0f
)
retur\
n
fal\
se
;
fl\
oat\

lOlllll\
O\
lO
=
0.0f
;
fl\
oat
ll\
lOO\
lOlll
=
llllO\
lO\
l\
ll
.
x
+
ll\
ll\
OllOOl\

.
x
*
ll\
ll\
Ol\
lOlO\

;
float\

llllOl\
ll\
OO
=
llllOl\
Olll
.
y
+
lll\
l\
O\
llOOl
.
y
*
llll\
OllOlO
;
if
(
Fabs
(
lll\
l\
OlllO\
O
)
>
Fabs\

(
lll\
O\
OlO\
lll
)
)
{
lO\
lllllOlO
=
(
llllOlOllO
.
y
-
llllOl\
lOO\
O
.
y
*
ll\
llOllOlO\

)
/
llllOll\
l\
O\
O
;
}
els\
e\

{
if
(
Fa\
bs\

(
lllO\
OlOll\
l
)
<
lOllO\
l\
OlO\
l
*
0.001f
)
retur\
n
false
;
lO\
ll\
l\
llO\
lO
=
(
llllOlOllO
.
x
-
llllOl\
lOOO
.
x
*
ll\
llOllOlO
)
/
lllO\
OlOlll
;
}
if
(
lOll\
lllOlO\

<
0.0f
||
lOlllll\
OlO
>
1.0f
)
retu\
rn\

false
;
const\

int
lO\
OOlll\
l\
Ol\

=
llllOOlOOl
[
0
]
;
TA_ASSERT
(
Fabs
(
llll\
OlOOl\
O
[
lOOOlll\
l\
Ol
]
)
>
lO\
llOlO\
lOl
)
;
flo\
at
lll\
lOlllO\
l
=
(
llllO\
O\
Ol\
Ol
[
lOOOl\
lllOl
]
-
llllOlO\
Ol\
l\

[
lO\
OOlll\
l\
O\
l\

]
*
lOl\
llll\
O\
l\
O
-
llllO\
l\
OlOO\

[
lO\
OOllllOl
]
*
llllOllOlO
-
llllOlOl\
O\
l\

[
lO\
OOllllO\
l
]
*
lOll\
lllOlO
*
lll\
lOllOlO
)
/
llllOlOOlO
[
lOOO\
l\
l\
llO\
l
]
;
if
(
ll\
l\
lOl\
llO\
l
<
0.0f
||
llllOll\
lO\
l
>
1.0f
)
retu\
rn\

false
;
lO\
llllO\
OO\
l
=
ll\
llO\
OlO\
ll
+
(
llllO\
OllO\
O
-
ll\
llO\
OlOll
)
*
llllOll\
O\
lO\

;
Vec3
lOOOlOO\
OOO\

=
ll\
llOl\
O\
O\
lO
.
Cro\
s\
s
(
ll\
ll\
OOll\
OO
-
llllOOlOll
)
;
Vec3
ll\
llO\
l\
l\
l\
l\
O
=
(
llllOOlOl\
l
+
(
llll\
OOll\
OO
-
llllOOlO\
ll
)
*
llllOllOl\
O
)
-
(
llll\
OOll\
Ol
+
(
llllOOlll\
O
-
llll\
OO\
l\
l\
Ol\

)
*
llllOl\
l\
OlO
)
;
if
(
lOOOl\
O\
OOO\
O
.
Do\
t
(
lll\
lOl\
lllO
)
<
0.0f
)
lO\
OOlOOOOO
=
-
lOOOlOO\
OOO
;
if
(
lOOOlOOOOO
.
Get\
Ma\
gn\
it\
ude
(
)
<
lO\
llOl\
Ol\
Ol
)
return
false
;
lO\
OOlOO\
OOO
.
Norm\
alis\
e
(
)
;
lO\
llllO\
OlO\

=
lOOOlO\
OOO\
O
;
llllOlO\
OOl\

=
lO\
l\
ll\
llOlO
;
ret\
ur\
n
tru\
e\

;
}
bool
TAC_C\
ALL
Ge\
ometr\
y\

::
Tes\
tLineMo\
ve\
me\
nt\
Ag\
ainst\
Capsule
(
con\
st
Ve\
c\
3\

&
llllOO\
lOll\

,
cons\
t
Vec3
&
llll\
O\
Ol\
lOO
,
const
Vec3
&
lll\
lOO\
llO\
l
,
cons\
t
Ve\
c3
&
ll\
l\
lOOlllO\

,
con\
st\

Vec3
&
ll\
llOOllll
,
co\
n\
s\
t
Vec3
&
ll\
llO\
lOOO\
O
,
flo\
at\

llllOll\
ll\
l\

,
fl\
oa\
t
&
ll\
l\
lOlOOOl
,
Vec\
3\

&
lOll\
l\
lOOOl\

,
Vec3\

&
lOllllOOlO
)
{
con\
s\
t
floa\
t
lOll\
O\
lOlOl
=
0.0001f
;
Vec\
3
lO\
lll\
OllO\
l
=
(
llll\
OOl\
Oll\

-
llllOOllO\
O
)
.
Cross
(
lll\
lOO\
lll\
l
-
lll\
l\
Ol\
O\
OOO
)
;
floa\
t\

lO\
llllOOl\
l
=
lOll\
lOll\
Ol
.
Get\
M\
ag\
n\
itu\
de
(
)
;
if\

(
lOl\
ll\
lO\
O\
ll
<
lO\
ll\
O\
lO\
lO\
l
*
lOllOlOlOl
)
{
lOlllOllOl
=
lll\
lOlOO\
OO
-
llllOOll\
ll
;
lOll\
lO\
ll\
Ol
=
lOlllOllOl
.
Cross
(
(
lll\
lO\
O\
l\
Ol\
l
-
ll\
l\
l\
OO\
lll\
l
)
.
Cr\
o\
ss
(
lOlllOllOl
)
)
;
lOllllO\
Oll
=
lOll\
lOllO\
l\

.
Get\
Magnitu\
de\

(
)
;
if
(
lOllll\
OOll\

<
lO\
l\
lOlOl\
Ol
*
lOllOlOl\
Ol
)
return\

false
;
}
lOll\
l\
OllOl
.
Nor\
mali\
se\

(
)
;
float
llll\
lO\
OOOO
=
lOl\
l\
lOll\
O\
l
.
Dot
(
llllOOl\
Oll
-
llllO\
O\
l\
lll
)
;
if\

(
lllllO\
O\
OOO
<
0.0f
)
{
ll\
l\
ll\
O\
OOO\
O\

=
-
ll\
lllOO\
OOO
;
lOlll\
Ol\
l\
Ol
=
-
lOlllO\
llOl
;
}
Vec3
lOl\
llOlll\
l
=
(
llllOO\
l\
lOl\

-
llllOOlllO
)
.
Cross
(
ll\
llO\
Ol\
l\
ll
-
llllOlO\
OOO
)
;
lOllllOOll
=
lOlllO\
llll
.
GetMa\
g\
nitude\

(
)
;
if
(
lOllllOOll\

<
lO\
ll\
OlOlOl
*
lOllO\
lOl\
Ol\

)
{
lOlllOllll
=
ll\
llO\
lOO\
OO
-
ll\
llOOl\
lll
;
lOl\
llOl\
ll\
l\

=
lOlllO\
ll\
ll
.
Cr\
oss
(
(
llllOOl\
lOl
-
lll\
lOOll\
ll
)
.
Cros\
s
(
lO\
l\
llOllll
)
)
;
lOl\
lllOOl\
l\

=
lO\
l\
ll\
Ollll
.
GetMagni\
tude
(
)
;
TA\
_ASSERT
(
lOlll\
l\
OOl\
l
>
lOllOlO\
lO\
l\

*
lOll\
O\
lOl\
Ol
)
;
}
lOlll\
O\
l\
ll\
l
/=
lOll\
l\
l\
OOll
;
if
(
lOll\
lO\
ll\
l\
l
.
Dot
(
lOlllOllO\
l
)
<
0.0f
)
lOlllOllll
=
-
lOlllOl\
l\
ll
;
floa\
t\

ll\
l\
llOOO\
O\
l
=
lOl\
llOlll\
l
.
Dot
(
llllOOllOl
-
ll\
llOO\
lll\
l
)
;
if
(
lll\
llOOOO\
O
>
lll\
ll\
OOOOl
)
{
lO\
l\
llOl\
lOl
=
-
lOlllO\
llO\
l
;
lOll\
lOl\
l\
l\
l\

=
-
lOl\
llO\
llll
;
}
lOl\
ll\
Ol\
lOl\

*=
ll\
ll\
Ol\
l\
lll\

;
lOll\
lOll\
ll\

*=
llll\
Ol\
ll\
l\
l
;
co\
nst
Vec3
lll\
l\
l\
OOOlO
=
lll\
l\
OOlOll\

+
lO\
ll\
lO\
llOl
;
const
Vec\
3
lllll\
OOOll
=
llllOO\
llOO
+
lO\
lllO\
llOl
;
const
Vec3\

lllll\
OOlOO
=
llllOOll\
Ol\

+
lO\
lll\
O\
ll\
ll
;
const\

Vec3
lllllO\
OlOl
=
llll\
OOlllO
+
lOlllOlll\
l
;
ret\
ur\
n\

Tes\
tE\
dg\
eMo\
veme\
n\
tAgainstE\
dge
(
ll\
lll\
OOOlO\

,
ll\
l\
llO\
OOll
,
llll\
lOO\
lO\
O
,
llll\
l\
O\
OlO\
l
,
llllOO\
l\
lll
,
lll\
lOlO\
OO\
O
,
llllOlOOO\
l
,
lOlll\
l\
OOOl
,
lOllllOOl\
O
)
;
}
boo\
l\

TAC_C\
ALL
Ge\
o\
metry
::
TestPo\
i\
ntMovementA\
gain\
s\
tSp\
her\
e
(
const
Vec3
&
llllOO\
l\
O\
ll
,
const
Vec3
&
llllOOllO\
O\

,
co\
n\
st
Vec\
3\

&
lO\
OO\
O\
OOO\
OO\

,
floa\
t\

llllO\
lllll\

,
fl\
oat\

&
lll\
lOlO\
OO\
l\

,
Vec\
3
&
lOl\
ll\
lOOOl\

,
Ve\
c3
&
lOlll\
l\
OO\
lO
)
{
float\

lOllOlOlOl
=
0.0001f
;
Vec3
ll\
ll\
l\
OOllO
=
llllOOl\
lOO
-
llllOOlOll
;
fl\
oat
lO\
lOllOOlO
=
ll\
lllO\
Oll\
O
.
Do\
t
(
lOOO\
O\
O\
OOOO
-
ll\
llOOlOll
)
;
float
lOlO\
l\
lO\
Oll
=
lllll\
OOllO
.
Dot
(
lOOOOOO\
OOO\

-
ll\
llOO\
l\
l\
OO
)
;
if
(
Fa\
bs
(
lO\
lOllO\
O\
lO\

-
lOl\
Oll\
O\
Ol\
l
)
<
lOl\
lOlOl\
Ol
)
retu\
rn
fals\
e
;
flo\
at\

lllOllllOO\

=
lOlO\
l\
lOOlO
/
(
lO\
lOl\
lO\
O\
lO
-
lOl\
OllOOl\
l
)
;
con\
s\
t
Vec3
ll\
lll\
OO\
lll
=
lll\
lOOlOll\

+
lllllO\
OllO
*
lllO\
l\
l\
l\
lO\
O
;
con\
st
fl\
o\
at
lll\
llOl\
OOO\

=
llllOl\
l\
ll\
l
*
llllOl\
ll\
ll\

;
co\
nst
flo\
at
lllOO\
lOlO\
l
=
(
ll\
l\
ll\
O\
Ol\
ll
-
lOOOOOO\
OOO
)
.
GetMa\
g\
nit\
u\
deS\
qrd\

(
)
;
if\

(
lllO\
O\
lOlOl
>
lllllOl\
OOO\

)
return\

false\

;
float
lllllOl\
OO\
l\

=
ll\
lllOOllO
.
GetMa\
gni\
tude
(
)
;
TA\
_\
A\
SSERT\

(
ll\
ll\
lOlOOl
>
lOllOlOlOl
*
0.1f
)
;
lllOll\
llOO
-=
(
Sqrt
(
llll\
lOlO\
O\
O
-
lllOOlOlOl
)
/
lllllOl\
O\
Ol\

)
;
if
(
ll\
lOll\
llO\
O\

<
0.0f
||
ll\
lOll\
llOO
>
1.0f
)
retu\
rn
fa\
lse\

;
lll\
l\
OlOOOl
=
lllOl\
lllOO
;
lO\
ll\
llOOO\
l\

=
ll\
l\
lOOlO\
ll
+
lll\
llOOllO
*
ll\
lOlll\
lOO
;
lOl\
l\
l\
lOOlO\

=
(
lOllll\
OOO\
l
-
lOOO\
O\
OOOOO
)
.
Ge\
tNo\
rmal\

(
)
;
ret\
u\
r\
n\

true
;
}
bool
TAC_C\
AL\
L
Ge\
om\
etry
::
Test\
Sphe\
reM\
ovem\
e\
nt\
A\
g\
ains\
tLine\

(
co\
nst
Vec3\

&
ll\
llO\
O\
lOll
,
co\
nst\

Vec3
&
llllO\
OllO\
O
,
const
Vec3\

&
llll\
OOllO\
l
,
const
Vec3
&
llllOOlllO\

,
float\

lll\
l\
Olll\
ll
,
float
&
llll\
OlOO\
Ol
,
Ve\
c3
&
lOll\
l\
lO\
OOl
,
Vec3
&
lO\
llll\
OOlO
)
{
co\
n\
s\
t
float\

lOllOlOlO\
l
=
0.0001f
;
Vec3
ll\
l\
l\
lO\
lO\
lO\

=
ll\
l\
l\
OOll\
OO\

-
lll\
lOO\
lO\
ll\

;
Vec\
3
lllllOl\
Oll\

=
llllOOll\
l\
O
-
ll\
ll\
OOl\
lOl
;
Vec3
lOllll\
OllO
=
llll\
l\
OlOlO
.
Cross
(
lllllO\
lO\
l\
O
,
lllllO\
lOll
)
;
Vec\
3
lOllllOlll
=
lOllll\
OllO
.
Cross
(
ll\
ll\
lOlOl\
l\

)
;
float
lOll\
lllO\
OO\

=
lOllll\
Olll
.
Dot
(
ll\
llOOl\
Ol\
l
-
lll\
lO\
Ol\
lO\
l
)
;
fl\
oa\
t
lOll\
l\
llO\
Ol\

=
lO\
llllOlll
.
Do\
t
(
lll\
lOOl\
lO\
O
-
llll\
OOllOl\

)
;
if
(
Fa\
bs
(
lOl\
llll\
O\
Ol
-
lOl\
l\
lllOOO\

)
<
lOllOlOlOl
)
return\

fals\
e
;
floa\
t\

llllOll\
OlO\

=
lOllll\
lOOO
/
(
lO\
l\
lll\
lOOO
-
lO\
l\
llllOOl
)
;
Ve\
c3
lllllOOlll
=
ll\
llO\
Ol\
Oll
+
lllllOl\
OlO
*
ll\
llO\
ll\
OlO
;
lOllll\
lOO\
O
=
lllll\
OlOll
.
Do\
t
(
llllO\
Ol\
lOl\

-
lllllOOlll
)
;
lOlllllO\
Ol
=
ll\
ll\
l\
Ol\
Oll
.
Dot
(
lll\
l\
OOl\
ll\
O
-
llll\
l\
OOlll
)
;
if
(
Fabs\

(
lOll\
lllO\
O\
l\

-
lOlll\
ll\
OO\
O
)
<
lO\
llOlOlO\
l
)
return\

false
;
float
lll\
llO\
llO\
O\

=
lOlll\
llOOO
/
(
lOll\
lllOOO
-
lOl\
llllOOl
)
;
Vec3
lllllOl\
lOl\

=
llll\
OOllOl\

+
lllllO\
lOll
*
lllllOllOO
;
co\
nst
float\

lll\
l\
lOlOOO
=
llllOlll\
ll
*
ll\
llOlll\
ll
;
const
float
lllO\
Ol\
O\
lOl\

=
(
lllllOOl\
ll
-
ll\
l\
llOll\
Ol\

)
.
GetMagn\
i\
tudeS\
q\
rd
(
)
;
if
(
ll\
lOOlOlO\
l
>
ll\
lllO\
lOO\
O
)
return\

fals\
e
;
float
lll\
llO\
lllO\

=
llll\
lOlO\
lO\

.
GetM\
ag\
n\
itude
(
)
;
TA_\
A\
SSE\
RT\

(
lll\
llOl\
llO\

>
lOllOlOlO\
l
*
0.1f
)
;
float
ll\
l\
llO\
llll\

=
lllllOlOll
.
Get\
Mag\
nitude
(
)
;
TA_ASSERT
(
lll\
ll\
O\
llll
>
lOll\
OlO\
l\
O\
l
*
0.1f
)
;
float
lll\
ll\
lOOO\
O
=
lll\
ll\
Ol\
OlO
.
Dot
(
lllllOlOl\
l
)
/
(
lllll\
Olll\
O
*
ll\
ll\
lOl\
ll\
l\

)
;
float
lll\
lllOOOl
=
Sqr\
t
(
(
lll\
llOl\
OOO
-
ll\
lOO\
lO\
l\
Ol
)
/
(
1
-
llllllOOOO
*
lll\
lllOOOO
)
)
;
lll\
l\
O\
llO\
lO\

-=
llll\
l\
lOOOl
/
lllllOlllO
;
if
(
llllOllO\
lO\

<
0.0f
||
llllOll\
OlO
>
1.0f
)
re\
tu\
rn\

false
;
flo\
at
llllllOOlO
=
llllllOO\
Ol\

*
ll\
llll\
OOO\
O
;
llll\
lO\
l\
lO\
O
-=
llllllO\
OlO
/
lll\
llO\
lll\
l
;
if\

(
ll\
lll\
OllOO
<
0.0f
||
llll\
lO\
llO\
O
>
1.0f
)
return
false
;
llllOl\
OO\
Ol\

=
llllO\
ll\
OlO\

;
lO\
lll\
lOOOl
=
lll\
lOOll\
Ol
+
lllllO\
l\
Oll
*
lllllOll\
OO\

;
lOllllO\
OlO
=
(
llllOOlOll\

+
ll\
lllO\
lOlO
*
llllOll\
Ol\
O\

-
llllO\
OllOl\

-
lllll\
OlOl\
l\

*
lllllOll\
OO
)
.
GetNo\
r\
mal\

(
)
;
return
true
;
}
bool\

TAC\
_CAL\
L
Geometry
::
Tes\
tL\
i\
ne\
Move\
ment\
A\
ga\
i\
n\
stS\
ph\
ere\

(
con\
st
Vec3
&
ll\
llOOl\
Oll
,
con\
st
Vec3
&
ll\
ll\
O\
Ol\
lOO
,
co\
n\
st
Ve\
c3\

&
llll\
O\
OllOl
,
const\

Vec3\

&
llllOOlllO\

,
const
Vec3\

&
ll\
llOOOllO
,
flo\
at\

llll\
Ol\
ll\
l\
l
,
floa\
t
&
lll\
lO\
l\
O\
O\
Ol\

,
Ve\
c\
3
&
lO\
ll\
llOO\
O\
l\

,
Vec\
3
&
lOll\
ll\
O\
Ol\
O
)
{
const
fl\
oat
lO\
l\
lOlOlO\
l
=
0.0001f
;
Vec3
llll\
lOOllO
=
ll\
ll\
OOllOO
-
llllOO\
lOll
;
flo\
at
lOlO\
ll\
OOlO\

=
lllllOOl\
lO
.
Dot
(
ll\
llOOOl\
lO
-
llllOOl\
O\
l\
l
)
;
flo\
a\
t\

lOlO\
l\
l\
OO\
ll
=
lllll\
OOllO
.
Dot
(
ll\
llOOO\
ll\
O
-
ll\
llOOllOO\

)
;
TA\
_ASS\
ER\
T
(
lO\
lOl\
lOO\
lO\

-
lOlOllOO\
ll
>
0.0f
)
;
float\

lllOllllOO
=
lOlOllO\
O\
l\
O\

/
(
lO\
lOll\
O\
OlO
-
lOl\
Oll\
OOll
)
;
Cla\
m\
p\

(
lll\
Oll\
llOO
,
0.0f
,
1.0f
)
;
Vec3
ll\
l\
lll\
lll
=
ll\
l\
lOOl\
Oll
+
lllll\
OOl\
l\
O\

*
lll\
Ol\
l\
llOO
;
float
llll\
lOlOOO
=
ll\
l\
l\
Oll\
lll
*
llllO\
ll\
ll\
l
;
lllllOOllO
=
llll\
OO\
lllO
-
llllOOll\
Ol
;
lOl\
OllOOlO
=
lll\
llOOl\
lO\

.
Dot
(
lll\
l\
OOOllO
-
llllOOllOl
)
;
lO\
l\
O\
llOOl\
l\

=
ll\
lll\
OOllO
.
Dot
(
llll\
O\
O\
Ol\
lO
-
lll\
lOOll\
lO
)
;
TA\
_A\
S\
SE\
RT
(
lOlOllOOl\
O
-
lOl\
O\
llOO\
ll
>
0.0f
)
;
lllOllllOO\

=
lOlOl\
l\
OO\
lO
/
(
lO\
lOl\
l\
OO\
l\
O
-
lOlOllOOll
)
;
Cl\
amp\

(
ll\
l\
OllllOO
,
0.0f
,
1.0f
)
;
Vec3\

lOOOOO\
OOOO
=
ll\
llOOllO\
l\

+
lllllO\
OllO\

*
ll\
lO\
llllOO
;
lllllOOll\
O
=
lOOO\
OO\
OO\
O\
O\

-
lll\
lllll\
l
;
lO\
lOllOOlO\

=
lllllO\
OllO
.
Dot\

(
lll\
l\
OOO\
llO
-
ll\
l\
lllll\
l\

)
;
lOlOllO\
Oll
=
lllllO\
OllO
.
Dot
(
lll\
l\
OOOll\
O
-
lOOOO\
OOOO\
O
)
;
if
(
Fabs\

(
lO\
lOllOOlO
-
lOlO\
llOO\
ll
)
<
lOl\
l\
OlOlOl\

)
re\
tu\
rn
false
;
lll\
Oll\
llOO
=
lO\
lO\
ll\
O\
OlO
/
(
lOlO\
l\
lOOl\
O
-
lOl\
Ol\
lO\
O\
ll
)
;
Vec3
lll\
l\
llO\
Oll\

=
ll\
lllllll
+
ll\
ll\
lOOll\
O\

*
ll\
lOlll\
lOO
;
floa\
t\

lllOOlOlOl\

=
(
lllll\
lOO\
ll
-
lll\
lOOO\
ll\
O
)
.
GetM\
a\
gnitude\
Sqrd
(
)
;
if
(
ll\
lO\
OlOl\
O\
l\

>
lllllOl\
OOO
)
re\
turn
fal\
se
;
floa\
t
ll\
l\
llO\
lOOl
=
lllllOOll\
O
.
Ge\
tM\
agnitude
(
)
;
TA_AS\
SERT
(
lllllOlO\
Ol
>
lOllOlO\
lO\
l
*
0.1f
)
;
lllO\
l\
lllO\
O
-=
(
Sqr\
t
(
lll\
llOl\
OO\
O
-
lllOOl\
O\
lOl\

)
/
ll\
l\
llOlOOl
)
;
if\

(
lllOllllO\
O\

<
0.0f
||
ll\
lOllllO\
O
>
1.0f
)
re\
turn\

fal\
se
;
llll\
O\
l\
OOOl\

=
lllOllllO\
O\

;
lO\
l\
lllOO\
Ol
=
lll\
l\
l\
lll\
l
;
lO\
l\
lllOOlO
=
(
ll\
l\
ll\
ll\
ll
+
lllllOO\
llO\

*
lllO\
llllOO
-
ll\
llO\
O\
OllO
)
.
Ge\
tNorm\
al\

(
)
;
re\
t\
urn
true
;
}
vo\
id
TAC\
_CAL\
L
Geom\
e\
try
::
FindC\
l\
oses\
tPoi\
nt\
OnLin\
eToLi\
ne\

(
const
Vec3\

&
llllO\
O\
l\
Ol\
l
,
const
Vec3
&
llll\
O\
Ol\
lOO\

,
cons\
t
Vec3
&
llllO\
Ol\
lOl
,
co\
nst\

Ve\
c\
3
&
llll\
O\
OlllO
,
Vec3
&
lllll\
O\
O\
ll\
l
,
Vec3\

&
lllll\
Ol\
lOl\

)
{
const\

float\

lOll\
O\
lO\
l\
O\
l\

=
0.0001f
;
Vec3
lllllOlOlO
=
llllOO\
llOO
-
ll\
llO\
OlO\
ll
;
Vec\
3
lll\
llO\
lO\
ll\

=
llllOO\
ll\
lO\

-
lll\
lOOllOl
;
Vec\
3
lO\
l\
lllOl\
l\
O
=
ll\
ll\
lO\
lOlO
.
Cr\
oss\

(
llll\
lOlO\
lO
,
llll\
lOlOll\

)
;
Vec3
lOllllOlll
=
lOllll\
Ol\
lO
.
Cross
(
ll\
lllOlO\
l\
l
)
;
fl\
o\
at
lOl\
lll\
lOOO
=
lO\
lll\
l\
Ol\
l\
l
.
Dot\

(
llllO\
O\
l\
Oll
-
llll\
O\
Ol\
lOl
)
;
float
lOllll\
lOOl
=
lO\
l\
lllOl\
ll
.
Dot
(
lll\
lOO\
llOO\

-
llllO\
OllOl
)
;
fl\
oat
lO\
llll\
lOlO
;
if
(
Fa\
bs
(
lOll\
ll\
lOOl
-
lOllll\
lOO\
O
)
<
lOllOlOlO\
l
)
{
floa\
t\

lOllllOOll\

=
ll\
lllOlOll
.
GetMagnitude
(
)
;
if
(
lOll\
llOOll
<
lOllO\
lO\
lOl
)
{
lllllOllOl\

=
(
llll\
OOl\
lOl
+
llll\
OOlllO\

)
*
0.5f
;
float\

llllllO\
lOO
=
(
llllOO\
lOl\
l\

-
llll\
l\
O\
ll\
Ol\

)
.
GetMag\
nit\
ude
(
)
;
flo\
at
lllll\
O\
lO\
Ol
=
(
llllOOllOO\

-
lll\
llO\
llOl
)
.
GetM\
a\
gnitude
(
)
;
ll\
lll\
O\
Oll\
l
=
ll\
l\
ll\
lOlO\
O
<
lll\
llOl\
O\
Ol
?
ll\
llOO\
l\
Ol\
l
:
lll\
l\
OOl\
lO\
O
;
return
;
}
els\
e
{
lll\
llO\
l\
O\
ll
/=
lOlll\
l\
OOll\

;
Vec3
llllOOl\
ll\
l
;
Ve\
c3
ll\
llO\
lOOOO
;
if\

(
ll\
lllO\
lO\
lO
.
Dot\

(
lllllO\
l\
Oll
)
<
0.0f
)
{
lll\
llOlO\
l\
l\

=
-
lll\
l\
l\
Ol\
O\
ll
;
ll\
llO\
O\
lll\
l
=
lll\
lOOlllO
;
ll\
llOl\
OOOO\

=
llll\
OO\
llO\
l
;
}
else
{
llll\
OOll\
ll
=
ll\
llO\
O\
llO\
l
;
llllOl\
OO\
OO\

=
llll\
OOlllO
;
}
lOl\
lll\
l\
OOO
=
lllllOl\
Oll
.
Do\
t
(
lll\
lOOll\
O\
O
-
llllOO\
ll\
ll
)
;
if
(
lOlllllOOO
<
0.0f
)
{
ll\
ll\
l\
O\
Olll
=
llllO\
OllO\
O
;
lllll\
OllOl
=
llllO\
Ollll
;
ret\
urn
;
}
lOllll\
lOOl
=
lll\
ll\
OlOll
.
Dot
(
llll\
OO\
l\
Ol\
l
-
llllOlOOO\
O
)
;
if
(
lOlll\
l\
lOOl
>
0.0f
)
{
lllllOOll\
l
=
lll\
lOO\
lOll
;
lllll\
Ol\
l\
Ol
=
llllO\
lOO\
OO
;
re\
turn\

;
}
lO\
l\
ll\
l\
lOOO
=
ll\
l\
llOl\
O\
l\
l\

.
Dot\

(
llllO\
Ol\
Oll
-
llllOOll\
l\
l\

)
;
if\

(
lO\
lllllO\
OO\

<
0.0f
)
lOlllllOOO\

=
0.0f
;
lOlllllO\
Ol
=
ll\
l\
l\
lOl\
Oll
.
Dot\

(
llllOOllO\
O
-
llll\
OO\
llll
)
;
if
(
lO\
lllllO\
Ol\

>
lOllllOOll
)
lOl\
llllO\
Ol
=
lOl\
l\
ll\
OO\
l\
l\

;
lll\
llOllOl
=
llll\
OO\
l\
lll
+
lllllOlOl\
l
*
(
(
lOl\
llllOOO
+
lO\
ll\
lllO\
O\
l
)
*
0.5f
)
;
lOlllllOOO
=
llll\
lOlOlO
.
Dot
(
lll\
l\
O\
Ol\
O\
ll
-
lll\
l\
l\
Ol\
lO\
l
)
;
lOlllllOOl\

=
lllllOlOlO\

.
Dot
(
ll\
l\
l\
O\
O\
llOO
-
lll\
l\
lOllOl\

)
;
if
(
Fabs
(
lOlllll\
OOl\

-
lOlllllO\
OO
)
<
lOllOlOlOl\

)
lllllOOl\
l\
l
=
(
llllOO\
lOl\
l
+
llllOOll\
O\
O
)
*
0.5f
;
el\
se\

llll\
lO\
Olll
=
lll\
lO\
OlOl\
l
+
lllllO\
l\
OlO\

*
(
lO\
lllllOOO
/
(
lOllll\
l\
OOO
-
lOlllllO\
Ol
)
)
;
retu\
rn
;
}
}
else
{
lOlllllOlO
=
lO\
lllll\
OOO
/
(
lOl\
lll\
l\
OOO
-
lOllll\
l\
OOl
)
;
}
Clam\
p\

(
lOll\
lllOl\
O
,
0.0f
,
1.0f
)
;
lll\
l\
lOO\
l\
ll
=
llllOO\
lO\
ll
+
lllllO\
lOlO
*
lO\
l\
llll\
O\
l\
O
;
lOlllll\
OOO
=
lll\
llO\
l\
Oll
.
Dot
(
llll\
O\
O\
l\
l\
Ol\

-
lllllO\
O\
l\
ll\

)
;
lOll\
lllO\
Ol\

=
lllllOl\
Ol\
l
.
Dot
(
llllOO\
lll\
O
-
lllllOOlll
)
;
if
(
Fabs
(
lOllll\
lO\
O\
l
-
lOlll\
llOO\
O
)
<
lOl\
lOlOlOl
)
lOlll\
llOlO
=
0.0f
;
else\

lOl\
ll\
llOlO
=
lOlllll\
OOO
/
(
lOll\
l\
ll\
OOO
-
lO\
l\
ll\
l\
lOO\
l
)
;
bool
llllll\
OlO\
l
=
fal\
se
;
if
(
lOlllll\
OlO
<
0.0f
)
{
lOll\
lllOlO
=
0.0f
;
lllll\
l\
O\
lO\
l
=
true
;
}
el\
se
if
(
lOlll\
l\
lO\
l\
O
>
1.0f
)
{
lllll\
lOl\
Ol
=
tr\
ue
;
lO\
l\
ll\
ll\
OlO
=
1.0f
;
}
llll\
lO\
llO\
l\

=
ll\
llO\
Oll\
Ol\

+
lllllO\
lOll\

*
lOll\
ll\
lOlO\

;
if
(
lll\
lllOl\
Ol
)
{
lOl\
llllO\
OO
=
lllllOlOlO
.
Do\
t
(
ll\
l\
lOOlOll
-
lll\
llOl\
lOl
)
;
lOl\
llllOOl
=
lll\
llOlOlO
.
Do\
t\

(
lll\
lO\
OllOO
-
llll\
lO\
llO\
l
)
;
flo\
at\

lOlllllOl\
O
;
if
(
Fabs
(
lOl\
l\
l\
l\
lOOl
-
lOl\
ll\
ll\
OO\
O
)
<
lOllOlOlOl\

)
lOlllll\
Ol\
O
=
0.0f
;
el\
s\
e
lOl\
lll\
lOlO
=
lOlllllOOO
/
(
lOl\
l\
lllO\
O\
O
-
lOlllllO\
Ol
)
;
Clam\
p
(
lO\
lll\
l\
lOlO
,
0.0f
,
1.0f
)
;
lll\
llOOlll
=
lll\
lO\
Ol\
Oll
+
lllllO\
lOlO\

*
lOll\
ll\
lOlO
;
}
}
bool
TAC_C\
ALL
Geometry
::
Find\
Clo\
s\
estPointOnLineToLineUn\
Clamped\

(
co\
nst
Vec3\

&
ll\
llOOlOll\

,
const\

Ve\
c3
&
llllOOll\
OO\

,
con\
st
Vec3
&
ll\
llOOl\
lOl
,
co\
nst
Ve\
c3
&
llllOO\
lllO
,
Ve\
c3\

&
llll\
lOO\
ll\
l\

,
Ve\
c3\

&
lllllOl\
l\
O\
l
)
{
co\
nst
fl\
oat
lOll\
OlO\
l\
Ol
=
0.0001f
;
Vec3\

lllllOlOl\
O
=
ll\
llOO\
l\
lO\
O
-
llllOOlOll
;
Vec3\

lll\
ll\
O\
l\
O\
ll\

=
llllOO\
l\
llO
-
llll\
OO\
llOl
;
Vec3
lOllllO\
llO\

=
Vec3\

::
Cross
(
lll\
l\
l\
OlOlO\

,
lllllOlOl\
l\

)
;
Vec3
lOlll\
lOl\
ll
=
lOllllOllO
.
Cr\
os\
s
(
ll\
lll\
OlOll
)
;
fl\
oat
lO\
ll\
lllO\
OO\

=
lO\
lll\
lOlll
.
Dot
(
llllOOl\
Ol\
l
-
llllOOllOl
)
;
floa\
t
lOl\
lll\
lO\
Ol
=
lOllllOl\
ll
.
Do\
t
(
llllO\
OllOO
-
ll\
l\
l\
OO\
llOl
)
;
flo\
at
lO\
lllllOlO
;
if\

(
Fab\
s\

(
lOllll\
l\
OOl
-
lOlllll\
OOO
)
<
lO\
llO\
lO\
lOl
)
ret\
urn
fal\
se
;
els\
e
lOlllllO\
lO\

=
lO\
l\
lll\
l\
OO\
O\

/
(
lO\
lllllOOO
-
lO\
lllllO\
Ol\

)
;
if
(
lO\
ll\
l\
llOlO\

<
0.0f
||
lOllll\
lOlO\

>
1.0f
)
return
fal\
se
;
lllllOOlll\

=
llllOOlOll
+
lll\
l\
lO\
lOlO
*
lOlllllOl\
O
;
lO\
lllllO\
OO
=
lll\
llOlOl\
l
.
Dot
(
lll\
l\
O\
O\
llOl
-
lllllOOlll
)
;
lOl\
llll\
OOl
=
lllllOlOll
.
Dot\

(
llllOO\
l\
l\
lO
-
lllllO\
O\
l\
ll\

)
;
if\

(
Fabs
(
lO\
l\
ll\
l\
lOOl
-
lO\
lllll\
OOO
)
<
lOllOl\
OlO\
l
)
ret\
u\
rn
fal\
se
;
el\
se
lOlllllOlO
=
lOlll\
llO\
O\
O\

/
(
lOl\
lll\
l\
OOO
-
lOlll\
ll\
OOl
)
;
if
(
lOll\
lll\
OlO
<
0.0f
||
lOlll\
llOlO
>
1.0f
)
re\
tu\
r\
n\

fals\
e\

;
lll\
llOllOl
=
llll\
OO\
llOl
+
lllll\
OlOll
*
lOl\
llllOlO
;
retu\
r\
n
tr\
ue\

;
}
#ifndef TA_GCC
inline
#endif //
Vec\
3
TAC_\
CALL
Ge\
ometr\
y
::
Fin\
dC\
losest\
P\
ointOnLine
(
const
Vec3
&
lOOO\
O\
lO\
OOl
,
con\
st
Vec3
&
llll\
l\
OlOlO
,
co\
n\
st
Vec\
3
&
lllllOl\
Oll
)
{
Vec3
llllllOllO
=
lllllOlOll
-
lll\
llOlO\
l\
O\

;
flo\
a\
t
lOlO\
ll\
OOl\
O
=
ll\
llllOllO
.
Dot\

(
lOOOOlOOO\
l
-
lllll\
O\
lO\
l\
O
)
;
flo\
at
lOl\
O\
llOOll
=
lllll\
lOllO
.
Dot
(
lOOOOlOOO\
l\

-
ll\
lllO\
lOll
)
;
TA\
_\
ASSER\
T
(
lOlOllOOlO\

-
lOlOl\
lOO\
ll
>
0.0f
)
;
fl\
oat
lllOllllOO
=
lOlO\
llOOlO
/
(
lOl\
Oll\
OOlO\

-
lOlOllOOll
)
;
Clam\
p
(
lllOll\
llOO
,
0.0f
,
1.0f
)
;
return
ll\
ll\
lOl\
O\
lO
+
ll\
ll\
l\
lOllO
*
lllOl\
ll\
lOO
;
}
#ifndef TA_GCC
#endif //
float
TAC_C\
ALL
Geometry
::
Fi\
ndShortestDi\
stanc\
eToLine\
Sq\
rd
(
const
Vec3
&
lOOO\
OlOOOl
,
cons\
t\

Vec3\

&
ll\
ll\
lOlO\
lO
,
co\
n\
st\

Vec\
3
&
lllll\
OlOll
)
{
Ve\
c3
lO\
llll\
OO\
Ol\

=
FindCl\
osest\
PointOnLine
(
lOO\
O\
O\
lO\
OO\
l\

,
lllllO\
lOlO
,
lllll\
O\
lOll
)
;
return\

(
lO\
llllO\
OOl
-
lOOOOlOOO\
l
)
.
Ge\
t\
Magni\
tud\
eSqrd\

(
)
;
}
fl\
oa\
t\

TAC\
_CALL\

Geo\
metry\

::
FindSho\
rtestDi\
sta\
nceT\
o\
Lin\
e
(
const\

Vec\
3
&
lOO\
O\
OlO\
OO\
l
,
const\

Vec3
&
lll\
llOlO\
lO
,
co\
ns\
t
Vec3
&
lll\
llOl\
Oll\

)
{
return
Sqr\
t\

(
Fin\
dShortest\
D\
istanc\
eToLi\
ne\
Sqrd
(
lOOOOlO\
OOl
,
lllllOlOlO\

,
llll\
lOlO\
l\
l
)
)
;
}
bo\
ol
TAC_CAL\
L
Geome\
try
::
FindClo\
s\
estPoi\
ntO\
nLi\
ne\
UnClamped
(
const\

Vec3
&
lOOO\
OlOOOl
,
co\
ns\
t
Vec3
&
llll\
l\
O\
l\
O\
lO\

,
con\
st
Vec\
3
&
llll\
lOlO\
ll
,
Vec3\

&
lOll\
l\
lOOOl
)
{
Vec\
3
llllllO\
llO\

=
lllllOlOll
-
lll\
ll\
OlOlO
;
flo\
at
lOlOl\
lOO\
l\
O
=
lll\
lllOl\
lO
.
Dot
(
lOO\
OO\
lO\
OOl
-
ll\
l\
llOlOlO
)
;
float
lOlOllO\
Ol\
l
=
llll\
ll\
OllO
.
Dot
(
lOOO\
O\
lOO\
Ol
-
lllllOlOll
)
;
TA_ASS\
ERT
(
lOlOll\
O\
OlO\

-
lOl\
O\
llOOl\
l
>
0.0f
)
;
float
lll\
Olll\
lOO
=
lOlOll\
OOl\
O
/
(
lOlOl\
lO\
OlO
-
lOlOllOO\
ll
)
;
if
(
lllO\
llllOO
<
0.0f
||
ll\
lOll\
ll\
O\
O
>
1.0f
)
re\
turn
false
;
lOl\
lllO\
OOl\

=
lllllOlOlO
+
llllllO\
llO
*
ll\
lOllllOO\

;
return\

true
;
}
bool
TAC\
_CALL\

Geom\
et\
ry
::
Test\
PointAg\
ainstC\
o\
ne\

(
co\
n\
s\
t
Vec\
3
&
lO\
O\
OOlOOOl
,
cons\
t
Vec3
&
llll\
l\
OlOl\
O
,
co\
nst
Vec3\

&
lllllOlOll
,
fl\
oa\
t
llll\
Olllll
)
{
Vec3\

ll\
llllOllO
=
lllllOl\
O\
ll\

-
lllll\
OlOl\
O\

;
fl\
oat\

lOlO\
llOOlO
=
llllllOllO
.
Dot
(
lO\
OOOlOOOl\

-
lll\
llOlOlO
)
;
fl\
oa\
t\

lO\
lOllOO\
ll\

=
ll\
ll\
ll\
Oll\
O\

.
Dot
(
lOO\
O\
O\
l\
O\
OOl
-
lllll\
OlOll\

)
;
TA_AS\
SE\
RT
(
lOl\
O\
llOOlO
-
lOlOllOOll
>
0.0f
)
;
fl\
o\
at
lllO\
llllOO
=
lO\
l\
OllOOlO
/
(
lOlO\
ll\
OOl\
O
-
lO\
lO\
ll\
OOll
)
;
if
(
lll\
O\
l\
lll\
OO
<
0.0f
||
lll\
Oll\
llOO
>
1.0f
)
retur\
n
false\

;
Vec3
lOll\
llOO\
O\
l
=
lll\
llO\
l\
Ol\
O\

+
llllllOll\
O
*
lll\
OllllOO
;
floa\
t
llllll\
Oll\
l\

=
lll\
lOlllll
*
lllO\
llllOO
;
ll\
ll\
llOlll
*=
lllll\
lOlll
;
if\

(
(
lOllllOOO\
l
-
lOOO\
OlOO\
Ol
)
.
GetMag\
ni\
tu\
deS\
qrd
(
)
>
lllll\
lOl\
ll
)
return
fals\
e
;
ret\
ur\
n
true
;
}
}
