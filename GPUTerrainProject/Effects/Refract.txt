
//listing of all techniques and passes with embedded asm listings 

technique Bubble
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float4x4 matView;
            //   float4 vecLightPos;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   matView      c0       4
            //   vecLightPos  c4       1
            //
            
                preshader
                mov r0.xyz, c4.xyz
                mov r0.w, (1)
                dot c7.x, r0, c0
                dot c7.y, r0, c1
                dot c7.z, r0, c2
                dot c7.w, r0, c3
            
            // approximately 6 instructions used
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float4x4 matWorldView;
            //   float4x4 matWorldViewProj;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   matWorldViewProj c0       4
            //   matWorldView     c4       3
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dcl_tangent v3
                dcl_binormal v4
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp4 oT1.x, v0, c4
                dp4 oT1.y, v0, c5
                dp4 oT1.z, v0, c6
                dp3 oT2.x, v3, c4
                dp3 oT2.y, v3, c5
                dp3 oT2.z, v3, c6
                dp3 oT3.x, v4, c4
                dp3 oT3.y, v4, c5
                dp3 oT3.z, v4, c6
                dp3 oT4.x, v1, c4
                dp3 oT4.y, v1, c5
                dp3 oT4.z, v1, c6
                mov oT0.xy, v2
                mov oT5, c7
            
            // approximately 18 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   sampler2D NormalMapSampler;
            //   sampler2D TextureSampler;
            //   float3 ambient;
            //   float3 diffuse;
            //   float2 fTiles;
            //   float shine;
            //   float3 specular;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   fTiles           c0       1
            //   ambient          c1       1
            //   diffuse          c2       1
            //   specular         c3       1
            //   shine            c4       1
            //   TextureSampler   s0       1
            //   NormalMapSampler s1       1
            //
            
                ps_2_0
                def c5, 2, -1, 1, 0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl t3.xyz
                dcl t4.xyz
                dcl t5.xyz
                dcl_2d s0
                dcl_2d s1
                nrm r0.xyz, t1
                mov r1.xyz, t1
                add r1.xyz, -r1, t5
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mad r0.xyz, r1, r0.w, -r0
                nrm r1.xyz, r0
                mul r0.xy, t0, c0
                texld r2, r0, s1
                texld r0, r0, s0
                mad r2.xy, r2, c5.x, c5.y
                mul r3.xyz, r2.y, t3
                mad r3.xyz, r2.x, t2, -r3
                dp2add r1.w, r2, -r2, c5.z
                rsq r1.w, r1.w
                rcp r1.w, r1.w
                mad r2.xyz, r1.w, t4, r3
                nrm r3.xyz, r2
                dp3_sat r1.w, r1, r3
                pow r2.w, r1.w, c4.x
                mul r1.xyz, r2.w, c3
                mad r1.xyz, r0, c2, r1
                mad r0.xyz, c1, r0, r1
                mov_sat r0.w, r0.w
                mov oC0, r0
            
            // approximately 34 instruction slots used (2 texture, 32 arithmetic)
            };
    }
}

