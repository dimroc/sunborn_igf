
//listing of all techniques and passes with embedded asm listings 

technique Technique0
{
    pass Pass0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float2 PixelOffset;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   PixelOffset  c0       1
            //
            
                vs_2_0
                def c1, 1, 0.5, 0, 0
                dcl_position v0
                add r0.x, v0.x, c0.x
                add r0.x, r0.x, c1.x
                mul oT0.x, r0.x, c1.y
                add r0.x, -v0.y, c0.y
                add r0.x, r0.x, c1.x
                mul oT0.y, r0.x, c1.y
                mad oPos, v0.xyxx, c1.xxzz, c1.zzzx
            
            // approximately 7 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float2 PixelOffset;
            //   float color;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   PixelOffset  c0       1
            //   color        c1       1
            //
            
                preshader
                neg r0.x, c1.x
                add r1.x, r0.x, (1)
                mul r0.xy, r1.x, c0.xy
                mul r1.xy, (0.5, 0.5), r0.xy
                mov c0.x, r1.x
                mov c1.x, r1.y
            
            // approximately 6 instructions used
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float color;
            //   sampler2D texImageSampler;
            //   float thresh;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   thresh          c2       1
            //   color           c3       1
            //   texImageSampler s0       1
            //
            
                ps_2_0
                def c4, 0, 0.589999974, 0.300000012, 0.109999999
                def c5, 0, 1, 0, 0
                dcl t0.xy
                dcl_2d s0
                mov r0.x, c0.x
                mov r0.y, c4.x
                add r0.xy, r0, t0
                mov r1.x, -c0.x
                mov r1.y, c4.x
                add r1.xy, r1, t0
                mov r2.x, -c0.x
                mov r2.y, -c1.x
                add r2.xy, r2, t0
                mov r3.x, -c0.x
                mov r3.y, c1.x
                add r3.xy, r3, t0
                mov r4.x, c0.x
                mov r4.y, -c1.x
                add r4.xy, r4, t0
                mov r5.x, c4.x
                mov r5.y, -c1.x
                add r5.xy, r5, t0
                mov r6.x, c4.x
                mov r6.y, c1.x
                add r6.xy, r6, t0
                mov r7.x, c0.x
                mov r7.y, c1.x
                add r7.xy, r7, t0
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, t0, s0
                add r1, -r1, -r2
                add r1, -r3, r1
                add r1, r4, r1
                add r0, r0, r1
                add r0, r4, r0
                abs r0, r0
                add r1, -r2, -r5
                add r1, -r4, r1
                add r1, r3, r1
                add r1, r6, r1
                add r1, r7, r1
                abs r1, r1
                add r0, r0, r1
                add r1.w, r0.y, r0.x
                add r1.w, r0.z, r1.w
                add r0.w, r0.w, r1.w
                add r0.w, r0.w, -c2.x
                cmp r0.w, r0.w, c5.x, c5.y
                mul r1.w, r8.y, c4.y
                mad r1.w, r8.x, c4.z, r1.w
                mad r1.w, r8.z, c4.w, r1.w
                mul r0.xyz, r0.w, r1.w
                mov r0.w, c5.y
                lrp r1, c3.x, r8, r0
                mov oC0, r1
            
            // approximately 58 instruction slots used (9 texture, 49 arithmetic)
            };
    }
}

