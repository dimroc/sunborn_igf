vertexshader vsArray[4] = 
{
//listing for: vsArray[0]
asm {
//
// Generated by Microsoft (R) D3DX9 Shader Compiler 
//
// Parameters:
//
//   float fAmbient;
//   float2 fPixelOffset;
//   float4x4 mShadowMatrix;
//   float4x4 mViewProj;
//   float4x3 mWorldMatrixArray[26];
//   float3 vecCameraPos;
//   float4 vecLightDir;
//
//
// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   mWorldMatrixArray c0      78
//   mViewProj         c78      4
//   mShadowMatrix     c82      4
//   fPixelOffset      c86      1
//   vecLightDir       c87      1
//   fAmbient          c88      1
//   vecCameraPos      c89      1
//

    vs_1_1
    def c90, 765.005859, 1, 0.5, 0
    def c91, 9.99999975e-005, 1, -1, 0
    dcl_position v0
    dcl_blendindices v1
    dcl_normal v2
    dcl_texcoord v3
    mov r0.w, c90.y
    mul r1.x, v1.z, c90.x
    mov a0.x, r1.x
    dp4 r0.x, v0, c0[a0.x]
    dp4 r0.y, v0, c1[a0.x]
    dp4 r0.z, v0, c2[a0.x]
    dp4 oT4.z, r0, c84
    dp3 r1.y, v2, c0[a0.x]
    dp3 r1.z, v2, c1[a0.x]
    dp3 r1.w, v2, c2[a0.x]
    dp3 r1.x, r1.yzww, r1.yzww
    rsq r1.x, r1.x
    mul r1.xyz, r1.yzww, r1.x
    dp3 r1.w, r1, c87
    max r1.w, r1.w, c90.w
    min r1.w, r1.w, c90.y
    add r1.w, r1.w, c88.x
    add r1.w, r1.w, c91.x
    max r1.w, r1.w, c90.w
    min oT1.x, r1.w, c90.y
    add r2.xyz, -r0, c89
    dp3 r1.w, r2, r2
    rsq r1.w, r1.w
    mul r2.xyz, r2, r1.w
    dp3 r1.x, r1, r2
    max r1.x, r1.x, c90.w
    min oT2.x, r1.x, c90.y
    dp4 r1.x, r0, c78
    dp4 r1.y, r0, c79
    dp4 r1.z, r0, c80
    dp4 r1.w, r0, c81
    mov oPos, r1
    mov oT3, r1
    mov oT0.xy, v3
    dp4 r1.x, r0, c82
    dp4 r1.y, r0, c85
    dp4 r0.x, r0, c83
    rcp r0.y, r1.y
    mov oT4.w, r1.y
    mad r0.z, r1.x, r0.y, c86.x
    mad r0.w, r0.x, r0.y, -c86.y
    add r0.xy, r0.zwzw, c90.y
    mul r0.xy, r0, c90.z
    mad oT4.xy, r0, c91.yzzw, c91.wyzw

// approximately 44 instruction slots used
},

//listing for: vsArray[1]
asm {
//
// Generated by Microsoft (R) D3DX9 Shader Compiler 
//
// Parameters:
//
//   float fAmbient;
//   float2 fPixelOffset;
//   float4x4 mShadowMatrix;
//   float4x4 mViewProj;
//   float4x3 mWorldMatrixArray[26];
//   float3 vecCameraPos;
//   float4 vecLightDir;
//
//
// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   mWorldMatrixArray c0      78
//   mViewProj         c78      4
//   mShadowMatrix     c82      4
//   fPixelOffset      c86      1
//   vecLightDir       c87      1
//   fAmbient          c88      1
//   vecCameraPos      c89      1
//

    vs_1_1
    def c90, 765.005859, 1, 0.5, 0
    def c91, 9.99999975e-005, 1, -1, 0
    dcl_position v0
    dcl_blendweight v1
    dcl_blendindices v2
    dcl_normal v3
    dcl_texcoord v4
    add r0.x, -v1.x, c90.y
    mul r0.yz, v2.xzyw, c90.x
    mov a0.x, r0.z
    dp4 r1.x, v0, c0[a0.x]
    dp4 r1.y, v0, c1[a0.x]
    dp4 r1.z, v0, c2[a0.x]
    mul r1.xyz, r0.x, r1
    mov a0.x, r0.y
    dp4 r2.x, v0, c0[a0.x]
    dp4 r2.y, v0, c1[a0.x]
    dp4 r2.z, v0, c2[a0.x]
    mad r1.xyz, r2, v1.x, r1
    mov r1.w, c90.y
    dp4 oT4.z, r1, c84
    mov a0.x, r0.z
    dp3 r2.x, v3, c0[a0.x]
    dp3 r2.y, v3, c1[a0.x]
    dp3 r2.z, v3, c2[a0.x]
    mul r0.xzw, r0.x, r2.xyyz
    mov a0.x, r0.y
    dp3 r2.x, v3, c0[a0.x]
    dp3 r2.y, v3, c1[a0.x]
    dp3 r2.z, v3, c2[a0.x]
    mad r0.xyz, r2, v1.x, r0.xzww
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul r0.xyz, r0, r0.w
    dp3 r0.w, r0, c87
    max r0.w, r0.w, c90.w
    min r0.w, r0.w, c90.y
    add r0.w, r0.w, c88.x
    add r0.w, r0.w, c91.x
    max r0.w, r0.w, c90.w
    min oT1.x, r0.w, c90.y
    add r2.xyz, -r1, c89
    dp3 r0.w, r2, r2
    rsq r0.w, r0.w
    mul r2.xyz, r2, r0.w
    dp3 r0.x, r0, r2
    max r0.x, r0.x, c90.w
    min oT2.x, r0.x, c90.y
    dp4 r0.x, r1, c78
    dp4 r0.y, r1, c79
    dp4 r0.z, r1, c80
    dp4 r0.w, r1, c81
    mov oPos, r0
    mov oT3, r0
    mov oT0.xy, v4
    dp4 r0.x, r1, c82
    dp4 r0.y, r1, c85
    dp4 r0.z, r1, c83
    rcp r0.w, r0.y
    mov oT4.w, r0.y
    mad r0.x, r0.x, r0.w, c86.x
    mad r0.y, r0.z, r0.w, -c86.y
    add r0.xy, r0, c90.y
    mul r0.xy, r0, c90.z
    mad oT4.xy, r0, c91.yzzw, c91.wyzw

// approximately 58 instruction slots used
},

//listing for: vsArray[2]
asm {
//
// Generated by Microsoft (R) D3DX9 Shader Compiler 
//
// Parameters:
//
//   float fAmbient;
//   float2 fPixelOffset;
//   float4x4 mShadowMatrix;
//   float4x4 mViewProj;
//   float4x3 mWorldMatrixArray[26];
//   float3 vecCameraPos;
//   float4 vecLightDir;
//
//
// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   mWorldMatrixArray c0      78
//   mViewProj         c78      4
//   mShadowMatrix     c82      4
//   fPixelOffset      c86      1
//   vecLightDir       c87      1
//   fAmbient          c88      1
//   vecCameraPos      c89      1
//

    vs_1_1
    def c90, 765.005859, 1, 0.5, 0
    def c91, 9.99999975e-005, 1, -1, 0
    dcl_position v0
    dcl_blendweight v1
    dcl_blendindices v2
    dcl_normal v3
    dcl_texcoord v4
    add r0.x, v1.y, v1.x
    add r0.x, -r0.x, c90.y
    mul r0.yzw, v2.xzyx, c90.x
    mov a0.x, r0.z
    dp4 r1.x, v0, c0[a0.x]
    dp4 r1.y, v0, c1[a0.x]
    dp4 r1.z, v0, c2[a0.x]
    mul r1.xyz, r1, v1.y
    mov a0.x, r0.y
    dp4 r2.x, v0, c0[a0.x]
    dp4 r2.y, v0, c1[a0.x]
    dp4 r2.z, v0, c2[a0.x]
    mad r1.xyz, r2, v1.x, r1
    mov a0.x, r0.w
    dp4 r2.x, v0, c0[a0.x]
    dp4 r2.y, v0, c1[a0.x]
    dp4 r2.z, v0, c2[a0.x]
    mad r1.xyz, r2, r0.x, r1
    mov r1.w, c90.y
    dp4 oT4.z, r1, c84
    mov a0.x, r0.z
    dp3 r2.x, v3, c0[a0.x]
    dp3 r2.y, v3, c1[a0.x]
    dp3 r2.z, v3, c2[a0.x]
    mul r2.xyz, r2, v1.y
    mov a0.x, r0.y
    dp3 r3.x, v3, c0[a0.x]
    dp3 r3.y, v3, c1[a0.x]
    dp3 r3.z, v3, c2[a0.x]
    mad r2.xyz, r3, v1.x, r2
    mov a0.x, r0.w
    dp3 r3.x, v3, c0[a0.x]
    dp3 r3.y, v3, c1[a0.x]
    dp3 r3.z, v3, c2[a0.x]
    mad r0.xyz, r3, r0.x, r2
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul r0.xyz, r0, r0.w
    dp3 r0.w, r0, c87
    max r0.w, r0.w, c90.w
    min r0.w, r0.w, c90.y
    add r0.w, r0.w, c88.x
    add r0.w, r0.w, c91.x
    max r0.w, r0.w, c90.w
    min oT1.x, r0.w, c90.y
    add r2.xyz, -r1, c89
    dp3 r0.w, r2, r2
    rsq r0.w, r0.w
    mul r2.xyz, r2, r0.w
    dp3 r0.x, r0, r2
    max r0.x, r0.x, c90.w
    min oT2.x, r0.x, c90.y
    dp4 r0.x, r1, c78
    dp4 r0.y, r1, c79
    dp4 r0.z, r1, c80
    dp4 r0.w, r1, c81
    mov oPos, r0
    mov oT3, r0
    mov oT0.xy, v4
    dp4 r0.x, r1, c82
    dp4 r0.y, r1, c85
    dp4 r0.z, r1, c83
    rcp r0.w, r0.y
    mov oT4.w, r0.y
    mad r0.x, r0.x, r0.w, c86.x
    mad r0.y, r0.z, r0.w, -c86.y
    add r0.xy, r0, c90.y
    mul r0.xy, r0, c90.z
    mad oT4.xy, r0, c91.yzzw, c91.wyzw

// approximately 69 instruction slots used
},

//listing for: vsArray[3]
asm {
//
// Generated by Microsoft (R) D3DX9 Shader Compiler 
//
// Parameters:
//
//   float fAmbient;
//   float2 fPixelOffset;
//   float4x4 mShadowMatrix;
//   float4x4 mViewProj;
//   float4x3 mWorldMatrixArray[26];
//   float3 vecCameraPos;
//   float4 vecLightDir;
//
//
// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   mWorldMatrixArray c0      78
//   mViewProj         c78      4
//   mShadowMatrix     c82      4
//   fPixelOffset      c86      1
//   vecLightDir       c87      1
//   fAmbient          c88      1
//   vecCameraPos      c89      1
//

    vs_1_1
    def c90, 765.005859, 1, 0.5, 0
    def c91, 9.99999975e-005, 1, -1, 0
    dcl_position v0
    dcl_blendweight v1
    dcl_blendindices v2
    dcl_normal v3
    dcl_texcoord v4
    add r0.x, v1.y, v1.x
    add r0.x, r0.x, v1.z
    add r0.x, -r0.x, c90.y
    mul r1, v2.zyxw, c90.x
    mov a0.x, r1.y
    dp4 r0.y, v0, c0[a0.x]
    dp4 r0.z, v0, c1[a0.x]
    dp4 r0.w, v0, c2[a0.x]
    mul r0.yzw, r0, v1.y
    mov a0.x, r1.x
    dp4 r2.x, v0, c0[a0.x]
    dp4 r2.y, v0, c1[a0.x]
    dp4 r2.z, v0, c2[a0.x]
    mad r0.yzw, r2.xxyz, v1.x, r0
    mov a0.x, r1.z
    dp4 r2.x, v0, c0[a0.x]
    dp4 r2.y, v0, c1[a0.x]
    dp4 r2.z, v0, c2[a0.x]
    mad r0.yzw, r2.xxyz, v1.z, r0
    mov a0.x, r1.w
    dp4 r2.x, v0, c0[a0.x]
    dp4 r2.y, v0, c1[a0.x]
    dp4 r2.z, v0, c2[a0.x]
    mad r2.xyz, r2, r0.x, r0.yzww
    mov r2.w, c90.y
    dp4 oT4.z, r2, c84
    mov a0.x, r1.y
    dp3 r0.y, v3, c0[a0.x]
    dp3 r0.z, v3, c1[a0.x]
    dp3 r0.w, v3, c2[a0.x]
    mul r0.yzw, r0, v1.y
    mov a0.x, r1.x
    dp3 r3.x, v3, c0[a0.x]
    dp3 r3.y, v3, c1[a0.x]
    dp3 r3.z, v3, c2[a0.x]
    mad r0.yzw, r3.xxyz, v1.x, r0
    mov a0.x, r1.z
    dp3 r3.x, v3, c0[a0.x]
    dp3 r3.y, v3, c1[a0.x]
    dp3 r3.z, v3, c2[a0.x]
    mad r0.yzw, r3.xxyz, v1.z, r0
    mov a0.x, r1.w
    dp3 r1.x, v3, c0[a0.x]
    dp3 r1.y, v3, c1[a0.x]
    dp3 r1.z, v3, c2[a0.x]
    mad r0.xyz, r1, r0.x, r0.yzww
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul r0.xyz, r0, r0.w
    dp3 r0.w, r0, c87
    max r0.w, r0.w, c90.w
    min r0.w, r0.w, c90.y
    add r0.w, r0.w, c88.x
    add r0.w, r0.w, c91.x
    max r0.w, r0.w, c90.w
    min oT1.x, r0.w, c90.y
    add r1.xyz, -r2, c89
    dp3 r0.w, r1, r1
    rsq r0.w, r0.w
    mul r1.xyz, r1, r0.w
    dp3 r0.x, r0, r1
    max r0.x, r0.x, c90.w
    min oT2.x, r0.x, c90.y
    dp4 r0.x, r2, c78
    dp4 r0.y, r2, c79
    dp4 r0.z, r2, c80
    dp4 r0.w, r2, c81
    mov oPos, r0
    mov oT3, r0
    mov oT0.xy, v4
    dp4 r0.x, r2, c82
    dp4 r0.y, r2, c85
    dp4 r0.z, r2, c83
    rcp r0.w, r0.y
    mov oT4.w, r0.y
    mad r0.x, r0.x, r0.w, c86.x
    mad r0.y, r0.z, r0.w, -c86.y
    add r0.xy, r0, c90.y
    mul r0.xy, r0, c90.z
    mad oT4.xy, r0, c91.yzzw, c91.wyzw

// approximately 80 instruction slots used
}};

//listing of all techniques and passes with embedded asm listings 

technique CelShade
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float fAmbient;
            //   float2 fPixelOffset;
            //   float4x4 mShadowMatrix;
            //   float4x4 mViewProj;
            //   float4x3 mWorldMatrixArray[26];
            //   float3 vecCameraPos;
            //   float4 vecLightDir;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   mWorldMatrixArray c0      78
            //   mViewProj         c78      4
            //   mShadowMatrix     c82      4
            //   fPixelOffset      c86      1
            //   vecLightDir       c87      1
            //   fAmbient          c88      1
            //   vecCameraPos      c89      1
            //
            
                vs_1_1
                def c90, 765.005859, 1, 0.5, 0
                def c91, 9.99999975e-005, 1, -1, 0
                dcl_position v0
                dcl_blendweight v1
                dcl_blendindices v2
                dcl_normal v3
                dcl_texcoord v4
                add r0.x, v1.y, v1.x
                add r0.x, -r0.x, c90.y
                mul r0.yzw, v2.xzyx, c90.x
                mov a0.x, r0.z
                dp4 r1.x, v0, c0[a0.x]
                dp4 r1.y, v0, c1[a0.x]
                dp4 r1.z, v0, c2[a0.x]
                mul r1.xyz, r1, v1.y
                mov a0.x, r0.y
                dp4 r2.x, v0, c0[a0.x]
                dp4 r2.y, v0, c1[a0.x]
                dp4 r2.z, v0, c2[a0.x]
                mad r1.xyz, r2, v1.x, r1
                mov a0.x, r0.w
                dp4 r2.x, v0, c0[a0.x]
                dp4 r2.y, v0, c1[a0.x]
                dp4 r2.z, v0, c2[a0.x]
                mad r1.xyz, r2, r0.x, r1
                mov r1.w, c90.y
                dp4 oT4.z, r1, c84
                mov a0.x, r0.z
                dp3 r2.x, v3, c0[a0.x]
                dp3 r2.y, v3, c1[a0.x]
                dp3 r2.z, v3, c2[a0.x]
                mul r2.xyz, r2, v1.y
                mov a0.x, r0.y
                dp3 r3.x, v3, c0[a0.x]
                dp3 r3.y, v3, c1[a0.x]
                dp3 r3.z, v3, c2[a0.x]
                mad r2.xyz, r3, v1.x, r2
                mov a0.x, r0.w
                dp3 r3.x, v3, c0[a0.x]
                dp3 r3.y, v3, c1[a0.x]
                dp3 r3.z, v3, c2[a0.x]
                mad r0.xyz, r3, r0.x, r2
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul r0.xyz, r0, r0.w
                dp3 r0.w, r0, c87
                max r0.w, r0.w, c90.w
                min r0.w, r0.w, c90.y
                add r0.w, r0.w, c88.x
                add r0.w, r0.w, c91.x
                max r0.w, r0.w, c90.w
                min oT1.x, r0.w, c90.y
                add r2.xyz, -r1, c89
                dp3 r0.w, r2, r2
                rsq r0.w, r0.w
                mul r2.xyz, r2, r0.w
                dp3 r0.x, r0, r2
                max r0.x, r0.x, c90.w
                min oT2.x, r0.x, c90.y
                dp4 r0.x, r1, c78
                dp4 r0.y, r1, c79
                dp4 r0.z, r1, c80
                dp4 r0.w, r1, c81
                mov oPos, r0
                mov oT3, r0
                mov oT0.xy, v4
                dp4 r0.x, r1, c82
                dp4 r0.y, r1, c85
                dp4 r0.z, r1, c83
                rcp r0.w, r0.y
                mov oT4.w, r0.y
                mad r0.x, r0.x, r0.w, c86.x
                mad r0.y, r0.z, r0.w, -c86.y
                add r0.xy, r0, c90.y
                mul r0.xy, r0, c90.z
                mad oT4.xy, r0, c91.yzzw, c91.wyzw
            
            // approximately 69 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float fFarPlane;
            //   float fShades;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   fFarPlane    c0       1
            //   fShades      c1       1
            //
            
                preshader
                rcp c0.x, c0.x
                rcp c1.x, c1.x
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   sampler2D ShadowMapSampler;
            //   sampler2D TextureSampler;
            //   float fMinShade;
            //   float2 fPixelOffset;
            //   float fShades;
            //   float fThreshold;
            //   float3 vEdgeColor;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   fPixelOffset     c2       1
            //   fShades          c3       1
            //   fMinShade        c4       1
            //   vEdgeColor       c5       1
            //   fThreshold       c6       1
            //   ShadowMapSampler s0       1
            //   TextureSampler   s1       1
            //
            
                ps_2_0
                def c7, -0.00999999978, 0, 1, 0.111111112
                dcl t0.xy
                dcl t1.x
                dcl t2.x
                dcl t4.xyz
                dcl_2d s0
                dcl_2d s1
                add r0.z, t4.y, -c2.y
                mov r1.x, t4.x
                mov r1.y, r0.z
                add r0.y, t4.x, -c2.x
                mov r2.xy, r0.yzxw
                add r0.x, t4.x, c2.x
                mov r3.x, r0.x
                mov r3.y, r0.z
                mov r0.x, r0.y
                mov r0.y, t4.y
                mov r4.x, r3.x
                mov r4.y, t4.y
                mov r5.x, r4.x
                add r0.z, t4.y, c2.y
                mov r5.y, r0.z
                mov r6.x, r0.x
                mov r6.y, r0.z
                mov r7.x, t4.x
                mov r7.y, r0.z
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r0, r0, s0
                texld r8, t4, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r9, t0, s1
                mov r0.w, c7.x
                mad r0.w, t4.z, c0.x, r0.w
                add r1.w, r1.x, -r0.w
                add r2.w, r2.x, -r0.w
                cmp r2.w, r2.w, c7.y, c7.z
                add r3.w, r2.w, c7.z
                cmp r1.w, r1.w, r2.w, r3.w
                add r2.w, r3.x, -r0.w
                add r3.w, r1.w, c7.z
                cmp r1.w, r2.w, r1.w, r3.w
                add r2.w, r0.x, -r0.w
                add r3.w, r1.w, c7.z
                cmp r1.w, r2.w, r1.w, r3.w
                add r2.w, r8.x, -r0.w
                add r3.w, r1.w, c7.z
                cmp r1.w, r2.w, r1.w, r3.w
                add r2.w, r4.x, -r0.w
                add r3.w, r1.w, c7.z
                cmp r1.w, r2.w, r1.w, r3.w
                add r2.w, r5.x, -r0.w
                add r3.w, r6.x, -r0.w
                add r4.w, r1.w, c7.z
                cmp r1.w, r3.w, r1.w, r4.w
                add r0.w, r7.x, -r0.w
                add r3.w, r1.w, c7.z
                cmp r0.w, r0.w, r1.w, r3.w
                add r1.w, r0.w, c7.z
                cmp r0.w, r2.w, r0.w, r1.w
                mad r0.w, r0.w, -c7.w, c7.z
                mul r0.w, r0.w, c3.x
                frc r1.w, r0.w
                add r0.w, r0.w, -r1.w
                mul r0.w, r0.w, t1.x
                max r1.w, c4.x, r0.w
                mul_sat r0.w, r1.w, c1.x
                mul r0.xyz, r9, r0.w
                add r1.w, -t2.x, c6.x
                mov r0.w, r9.w
                mov r9.xyz, c5
                cmp r0, r1.w, r9, r0
                mov oC0, r0
            
            // approximately 70 instruction slots used (10 texture, 60 arithmetic)
            };
    }
}

technique Shadow
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float fAmbient;
            //   float2 fPixelOffset;
            //   float4x4 mShadowMatrix;
            //   float4x4 mViewProj;
            //   float4x3 mWorldMatrixArray[26];
            //   float3 vecCameraPos;
            //   float4 vecLightDir;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   mWorldMatrixArray c0      78
            //   mViewProj         c78      4
            //   mShadowMatrix     c82      4
            //   fPixelOffset      c86      1
            //   vecLightDir       c87      1
            //   fAmbient          c88      1
            //   vecCameraPos      c89      1
            //
            
                vs_1_1
                def c90, 765.005859, 1, 0.5, 0
                def c91, 9.99999975e-005, 1, -1, 0
                dcl_position v0
                dcl_blendweight v1
                dcl_blendindices v2
                dcl_normal v3
                dcl_texcoord v4
                add r0.x, v1.y, v1.x
                add r0.x, -r0.x, c90.y
                mul r0.yzw, v2.xzyx, c90.x
                mov a0.x, r0.z
                dp4 r1.x, v0, c0[a0.x]
                dp4 r1.y, v0, c1[a0.x]
                dp4 r1.z, v0, c2[a0.x]
                mul r1.xyz, r1, v1.y
                mov a0.x, r0.y
                dp4 r2.x, v0, c0[a0.x]
                dp4 r2.y, v0, c1[a0.x]
                dp4 r2.z, v0, c2[a0.x]
                mad r1.xyz, r2, v1.x, r1
                mov a0.x, r0.w
                dp4 r2.x, v0, c0[a0.x]
                dp4 r2.y, v0, c1[a0.x]
                dp4 r2.z, v0, c2[a0.x]
                mad r1.xyz, r2, r0.x, r1
                mov r1.w, c90.y
                dp4 oT4.z, r1, c84
                mov a0.x, r0.z
                dp3 r2.x, v3, c0[a0.x]
                dp3 r2.y, v3, c1[a0.x]
                dp3 r2.z, v3, c2[a0.x]
                mul r2.xyz, r2, v1.y
                mov a0.x, r0.y
                dp3 r3.x, v3, c0[a0.x]
                dp3 r3.y, v3, c1[a0.x]
                dp3 r3.z, v3, c2[a0.x]
                mad r2.xyz, r3, v1.x, r2
                mov a0.x, r0.w
                dp3 r3.x, v3, c0[a0.x]
                dp3 r3.y, v3, c1[a0.x]
                dp3 r3.z, v3, c2[a0.x]
                mad r0.xyz, r3, r0.x, r2
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul r0.xyz, r0, r0.w
                dp3 r0.w, r0, c87
                max r0.w, r0.w, c90.w
                min r0.w, r0.w, c90.y
                add r0.w, r0.w, c88.x
                add r0.w, r0.w, c91.x
                max r0.w, r0.w, c90.w
                min oT1.x, r0.w, c90.y
                add r2.xyz, -r1, c89
                dp3 r0.w, r2, r2
                rsq r0.w, r0.w
                mul r2.xyz, r2, r0.w
                dp3 r0.x, r0, r2
                max r0.x, r0.x, c90.w
                min oT2.x, r0.x, c90.y
                dp4 r0.x, r1, c78
                dp4 r0.y, r1, c79
                dp4 r0.z, r1, c80
                dp4 r0.w, r1, c81
                mov oPos, r0
                mov oT3, r0
                mov oT0.xy, v4
                dp4 r0.x, r1, c82
                dp4 r0.y, r1, c85
                dp4 r0.z, r1, c83
                rcp r0.w, r0.y
                mov oT4.w, r0.y
                mad r0.x, r0.x, r0.w, c86.x
                mad r0.y, r0.z, r0.w, -c86.y
                add r0.xy, r0, c90.y
                mul r0.xy, r0, c90.z
                mad oT4.xy, r0, c91.yzzw, c91.wyzw
            
            // approximately 69 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float fFarPlane;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   fFarPlane    c0       1
            //
            
                preshader
                rcp c0.x, c0.x
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   sampler2D TextureSampler;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   TextureSampler s0       1
            //
            
                ps_2_0
                def c1, 1, 1, 1, 0
                dcl t0.xy
                dcl t3.xyz
                dcl_2d s0
                texld r0, t0, s0
                mul r1.xyz, t3.z, c0.x
                mov r1.w, c1.x
                cmp r0, -r0.w, c1, r1
                mov oC0, r0
            
            // approximately 5 instruction slots used (1 texture, 4 arithmetic)
            };
    }
}

