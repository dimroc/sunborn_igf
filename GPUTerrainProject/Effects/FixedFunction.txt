
//listing of all techniques and passes with embedded asm listings 

technique AmbDifSpec
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float4 lightAmbient;
            //   float4 materialDiffuse;
            //   float4 materialSpecular;
            //   float4 vecLightColor;
            //   float4 vecLightDir;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   vecLightDir      c0       1
            //   vecLightColor    c1       1
            //   lightAmbient     c2       1
            //   materialDiffuse  c3       1
            //   materialSpecular c4       1
            //
            
                preshader
                neg r0.xyz, c0.xyz
                dot r1.x, r0.xyz, r0.xyz
                rsq r0.w, r1.x
                mul c9.xyz, r0.w, r0.xyz
                mul c10, c2, c3
                mul c11, c1, c4
            
            // approximately 6 instructions used
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float4x4 matInvTransposeWorld;
            //   float4x4 matViewInverse;
            //   float4x4 matWorld;
            //   float4 materialDiffuse;
            //   float shininess;
            //   float4 vecLightColor;
            //
            //
            // Registers:
            //
            //   Name                 Reg   Size
            //   -------------------- ----- ----
            //   matInvTransposeWorld c0       3
            //   matWorld             c3       3
            //   matViewInverse       c6       3
            //   vecLightColor        c12      1
            //   materialDiffuse      c13      1
            //   shininess            c14      1
            //
            
                vs_2_0
                def c15, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                mul r0, v1.y, c1
                mad r0, c0, v1.x, r0
                mad r0, c2, v1.z, r0
                dp4 r0.w, r0, r0
                rsq r0.w, r0.w
                mul r0.xyz, r0, r0.w
                dp3 r0.w, r0, c9
                max r0.w, r0.w, c15.x
                mul r1, r0.w, c13
                sge r0.w, c15.x, r0.w
                mov r2, c12
                mad oD0, r1, r2, c10
                dp4 r1.x, v0, c3
                dp4 r1.y, v0, c4
                dp4 r1.z, v0, c5
                mov r2.x, c6.w
                mov r2.y, c7.w
                mov r2.z, c8.w
                add r1.xyz, -r1, r2
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mad r1.xyz, r1, r1.w, c9
                nrm r2.xyz, r1
                dp3 r0.x, r0, r2
                max r0.x, r0.x, c15.x
                pow r1.x, r0.x, c14.x
                mad r0.x, r0.w, -r1.x, r1.x
                mul oD1, r0.x, c11
                mov oPos, c15.x
                mov oT0.xy, c15.x
            
            // approximately 34 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   sampler2D TextureSampler;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   TextureSampler s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl v0
                dcl v1
                dcl_2d s0
                texld r0, t0, s0
                mov r1, v0
                mad r0, r1, r0, v1
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

