
//listing of all techniques and passes with embedded asm listings 

technique Technique0
{
    pass Pass0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float2 PixelOffset;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   PixelOffset  c0       1
            //
            
                vs_2_0
                def c1, 1, 0.5, 0, 0
                dcl_position v0
                add r0.x, v0.x, c0.x
                add r0.x, r0.x, c1.x
                mul oT0.x, r0.x, c1.y
                add r0.x, -v0.y, c0.y
                add r0.x, r0.x, c1.x
                mul oT0.y, r0.x, c1.y
                mad oPos, v0.xyxx, c1.xxzz, c1.zzzx
            
            // approximately 7 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float2 PixelOffset;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   PixelOffset  c0       1
            //
            
                preshader
                mul r0.xy, (-1, -1), c0.xy
                add c0.x, r0.y, r0.x
                mul r0.xy, c0.xy, (1, -1)
                add c1.x, r0.y, r0.x
                mul r0.xy, c0.xy, (-1, 1)
                add c2.x, r0.y, r0.x
                add c3.x, c0.y, c0.x
            
            // approximately 7 instructions used
            //
            // Generated by Microsoft (R) D3DX9 Shader Compiler 
            //
            // Parameters:
            //
            //   float3x3 Kernel;
            //   float2 PixelOffset;
            //   sampler2D texImageSampler;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   Kernel          c4       3
            //   PixelOffset     c7       1
            //   texImageSampler s0       1
            //
            
                ps_2_0
                def c8, 1, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, -c7.y
                add r1.xy, t0, c0.x
                add r2.xy, t0, c1.x
                add r3.xy, t0, -c7.x
                add r4.xy, t0, c7.x
                add r5.xy, t0, c2.x
                add r6.xy, t0, c7.y
                add r7.xy, t0, c3.x
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, t0, s0
                mul r0, r0, c4.y
                mad r0, r1, c4.x, r0
                mad r0, r2, c4.z, r0
                mad r0, r3, c5.x, r0
                mad r0, r4, c5.z, r0
                mad r0, r5, c6.x, r0
                mad r0, r6, c6.y, r0
                mad r0, r7, c6.z, r0
                abs r0, r0
                mul r1.xyz, r8, c5.y
                mov r1.w, c8.x
                add r0, r0, r1
                mov oC0, r0
            
            // approximately 30 instruction slots used (9 texture, 21 arithmetic)
            };
    }
}

