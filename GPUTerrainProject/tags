!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ALT_ASCII_KEY	.\GameSettings.cpp	14;"	d	file:
ANIMATE	.\Button.h	/^	enum ButtonState { IDLE, CLICKED, ANIMATE, IN_ANIMATE, INACTIVE };$/;"	e	enum:CButton::ButtonState
ANIM_ATTACK_END	.\GameTables.h	/^        ANIM_ATTACK_END,$/;"	e	enum:GameTable::Animations
ANIM_ATTACK_MID	.\GameTables.h	/^        ANIM_ATTACK_MID,$/;"	e	enum:GameTable::Animations
ANIM_ATTACK_START	.\GameTables.h	/^        ANIM_ATTACK_START,$/;"	e	enum:GameTable::Animations
ANIM_BLOCK	.\GameTables.h	/^        ANIM_BLOCK,$/;"	e	enum:GameTable::Animations
ANIM_CELEBRATE	.\GameTables.h	/^        ANIM_CELEBRATE,$/;"	e	enum:GameTable::Animations
ANIM_DIVE_END	.\GameTables.h	/^        ANIM_DIVE_END,$/;"	e	enum:GameTable::Animations
ANIM_DIVE_MID	.\GameTables.h	/^        ANIM_DIVE_MID,$/;"	e	enum:GameTable::Animations
ANIM_DIVE_START	.\GameTables.h	/^        ANIM_DIVE_START,$/;"	e	enum:GameTable::Animations
ANIM_DODGE	.\GameTables.h	/^        ANIM_DODGE,$/;"	e	enum:GameTable::Animations
ANIM_DROP_END	.\GameTables.h	/^        ANIM_DROP_END,$/;"	e	enum:GameTable::Animations
ANIM_DROP_MID	.\GameTables.h	/^        ANIM_DROP_MID,$/;"	e	enum:GameTable::Animations
ANIM_DROP_START	.\GameTables.h	/^        ANIM_DROP_START,$/;"	e	enum:GameTable::Animations
ANIM_FALL_END	.\GameTables.h	/^        ANIM_FALL_END,$/;"	e	enum:GameTable::Animations
ANIM_FALL_MID	.\GameTables.h	/^        ANIM_FALL_MID,$/;"	e	enum:GameTable::Animations
ANIM_FALL_START	.\GameTables.h	/^        ANIM_FALL_START,$/;"	e	enum:GameTable::Animations
ANIM_FIREBALL_END	.\GameTables.h	/^        ANIM_FIREBALL_END,$/;"	e	enum:GameTable::Animations
ANIM_FIREBALL_MID	.\GameTables.h	/^        ANIM_FIREBALL_MID,$/;"	e	enum:GameTable::Animations
ANIM_FIREBALL_START	.\GameTables.h	/^        ANIM_FIREBALL_START,$/;"	e	enum:GameTable::Animations
ANIM_HIT_END	.\GameTables.h	/^        ANIM_HIT_END,$/;"	e	enum:GameTable::Animations
ANIM_HIT_MID	.\GameTables.h	/^        ANIM_HIT_MID,$/;"	e	enum:GameTable::Animations
ANIM_HIT_START	.\GameTables.h	/^        ANIM_HIT_START,$/;"	e	enum:GameTable::Animations
ANIM_IDLE	.\GameTables.h	/^        ANIM_IDLE,   \/\/ am i gonna have strafe?$/;"	e	enum:GameTable::Animations
ANIM_IDLE_MIDAIR	.\GameTables.h	/^        ANIM_IDLE_MIDAIR,$/;"	e	enum:GameTable::Animations
ANIM_JUMP	.\GameTables.h	/^        ANIM_JUMP,$/;"	e	enum:GameTable::Animations
ANIM_JUMP_DOUBLE	.\GameTables.h	/^        ANIM_JUMP_DOUBLE,$/;"	e	enum:GameTable::Animations
ANIM_JUMP_END	.\GameTables.h	/^        ANIM_JUMP_END,$/;"	e	enum:GameTable::Animations
ANIM_JUMP_MID	.\GameTables.h	/^        ANIM_JUMP_MID,$/;"	e	enum:GameTable::Animations
ANIM_JUMP_START	.\GameTables.h	/^        ANIM_JUMP_START,$/;"	e	enum:GameTable::Animations
ANIM_LIGHTNING_END	.\GameTables.h	/^        ANIM_LIGHTNING_END,$/;"	e	enum:GameTable::Animations
ANIM_LIGHTNING_MID	.\GameTables.h	/^        ANIM_LIGHTNING_MID,$/;"	e	enum:GameTable::Animations
ANIM_LIGHTNING_START	.\GameTables.h	/^        ANIM_LIGHTNING_START,$/;"	e	enum:GameTable::Animations
ANIM_NO	.\GameTables.h	/^        ANIM_NO = 0,$/;"	e	enum:GameTable::Animations
ANIM_NUM	.\GameTables.h	/^        ANIM_NUM$/;"	e	enum:GameTable::Animations
ANIM_RUN	.\GameTables.h	/^        ANIM_RUN,$/;"	e	enum:GameTable::Animations
ANIM_SPIN_END	.\GameTables.h	/^        ANIM_SPIN_END,$/;"	e	enum:GameTable::Animations
ANIM_SPIN_MID	.\GameTables.h	/^        ANIM_SPIN_MID,$/;"	e	enum:GameTable::Animations
ANIM_SPIN_SPIN	.\GameTables.h	/^        ANIM_SPIN_SPIN,$/;"	e	enum:GameTable::Animations
ANIM_SPIN_START	.\GameTables.h	/^        ANIM_SPIN_START,$/;"	e	enum:GameTable::Animations
ARROWSTATE	.\Common\DXUTgui.h	/^    enum ARROWSTATE { CLEAR, CLICKED_UP, CLICKED_DOWN, HELD_UP, HELD_DOWN };$/;"	g	class:CDXUTScrollBar
ATTACK_RANGE_ACTION	.\GameTables.h	/^        ATTACK_RANGE_ACTION,$/;"	e	enum:GameTable::Actions
ATTACK_SMASH_ACTION	.\GameTables.h	/^        ATTACK_SMASH_ACTION,$/;"	e	enum:GameTable::Actions
ATTACK_VERTICAL_ONE_ACTION	.\GameTables.h	/^        ATTACK_VERTICAL_ONE_ACTION,$/;"	e	enum:GameTable::Actions
ATTACK_VERTICAL_TWO_ACTION	.\GameTables.h	/^        ATTACK_VERTICAL_TWO_ACTION,$/;"	e	enum:GameTable::Actions
ActionIndexArray	.\GameTables.h	/^    static const NameIndexPair ActionIndexArray[] = $/;"	v
Actions	.\GameTables.h	/^    static enum Actions $/;"	g	namespace:GameTable
ActivateSubMenu	.\GameGUI.cpp	/^BOOL CGameGUI::ActivateSubMenu(int i){$/;"	f	class:CGameGUI
ActivateSubMenu	.\Menu.cpp	/^bool CMenu::ActivateSubMenu(int index){$/;"	f	class:CMenu
AdapterFormat	.\Common\DXUT.h	/^    D3DFORMAT AdapterFormat;$/;"	m	struct:DXUTDeviceSettings
AdapterFormat	.\Common\DXUTenum.h	/^    D3DFORMAT AdapterFormat;$/;"	m	struct:CD3DEnumDeviceSettingsCombo
AdapterIdentifier	.\Common\DXUTenum.h	/^    D3DADAPTER_IDENTIFIER9 AdapterIdentifier;$/;"	m	class:CD3DEnumAdapterInfo
AdapterOrdinal	.\Common\DXUT.h	/^    UINT AdapterOrdinal;$/;"	m	struct:DXUTDeviceSettings
AdapterOrdinal	.\Common\DXUTenum.h	/^    UINT AdapterOrdinal;$/;"	m	class:CD3DEnumAdapterInfo
AdapterOrdinal	.\Common\DXUTenum.h	/^    UINT AdapterOrdinal;$/;"	m	class:CD3DEnumDeviceInfo
AdapterOrdinal	.\Common\DXUTenum.h	/^    UINT AdapterOrdinal;$/;"	m	struct:CD3DEnumDeviceSettingsCombo
Add	.\Common\DXUTmisc.h	/^HRESULT CGrowableArray<TYPE>::Add( const TYPE& value )$/;"	f	class:CGrowableArray
AddAdapter	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::AddAdapter( const WCHAR* strDescription, UINT iAdapter )$/;"	f	class:CD3DSettingsDlg
AddAdapterFormat	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::AddAdapterFormat( D3DFORMAT format )$/;"	f	class:CD3DSettingsDlg
AddAnimation	.\SpriteAnimMgr.cpp	/^int CSpriteAnimMgr::AddAnimation(int idxTex, const vector<int> &vStillIndices, float speed, CSound *pSound)$/;"	f	class:CSpriteAnimMgr
AddAnimation	.\XModelHeirarchy.cpp	/^UINT CXModelHeirarchy::AddAnimation( LPDIRECT3DDEVICE9 pd3dDevice, LPCSTR strFileName )$/;"	f	class:CXModelHeirarchy
AddBackBufferFormat	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::AddBackBufferFormat( D3DFORMAT format )$/;"	f	class:CD3DSettingsDlg
AddBigStar	.\Sky.cpp	/^VOID CSky::AddBigStar(IDirect3DDevice9* pd3dDevice, $/;"	f	class:CSky
AddBubble	.\Bubbles.cpp	/^VOID CBubbles::AddBubble( LPDIRECT3DDEVICE9 pd3dDevice, $/;"	f	class:CBubbles
AddButton	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::AddButton( int ID, LPCWSTR strText, int x, int y, int width, int height, UINT nHotkey, bool bIsDefault, CDXUTButton** ppCreated )$/;"	f	class:CDXUTDialog
AddButton	.\Menu.cpp	/^void CMenu::AddButton(int mIndex, LPCSTR text, UCHAR cmd, int param){$/;"	f	class:CMenu
AddChar	.\ConsoleLine.h	/^	void AddChar(UINT c) $/;"	f	class:CConsoleLine
AddCheckBox	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::AddCheckBox( int ID, LPCWSTR strText, int x, int y, int width, int height, bool bChecked, UINT nHotkey, bool bIsDefault, CDXUTCheckBox** ppCreated )$/;"	f	class:CDXUTDialog
AddCloud	.\CloudBatch.cpp	/^CCloud* CCloudBatch::AddCloud(const SCloudInfo &ci)$/;"	f	class:CCloudBatch
AddColumn	.\MultiColumnList.cpp	/^void CMultiColumnList::AddColumn(LPCSTR title){$/;"	f	class:CMultiColumnList
AddComboBox	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::AddComboBox( int ID, int x, int y, int width, int height, UINT nHotkey, bool bIsDefault, CDXUTComboBox** ppCreated )$/;"	f	class:CDXUTDialog
AddCommand	.\GameGUI.cpp	/^VOID CGameGUI::AddCommand(UCHAR c, GameCommandPtr p){$/;"	f	class:CGameGUI
AddControl	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::AddControl( CDXUTControl* pControl )$/;"	f	class:CDXUTDialog
AddDepthStencilBufferFormat	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::AddDepthStencilBufferFormat( D3DFORMAT format )$/;"	f	class:CD3DSettingsDlg
AddDeviceType	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::AddDeviceType( D3DDEVTYPE devType )$/;"	f	class:CD3DSettingsDlg
AddDynamicCapsuleCombo	.\PhysicsRoot.cpp	/^int CPhysicsRoot::AddDynamicCapsuleCombo(const D3DXVECTOR3* pvPosition, $/;"	f	class:CPhysicsRoot
AddDynamicCylinder	.\PhysicsRoot.cpp	/^int CPhysicsRoot::AddDynamicCylinder(const D3DXVECTOR3* pvPosition, $/;"	f	class:CPhysicsRoot
AddDynamicSphere	.\PhysicsRoot.cpp	/^int CPhysicsRoot::AddDynamicSphere(const D3DXVECTOR3* pvPosition, $/;"	f	class:CPhysicsRoot
AddEditBox	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::AddEditBox( int ID, LPCWSTR strText, int x, int y, int width, int height, bool bIsDefault, CDXUTEditBox** ppCreated )$/;"	f	class:CDXUTDialog
AddFont	.\Common\DXUTgui.cpp	/^int CDXUTDialogResourceManager::AddFont( LPCWSTR strFaceName, LONG height, LONG weight )$/;"	f	class:CDXUTDialogResourceManager
AddGrassMap	.\Foliage.cpp	/^int CFoliage::AddGrassMap(LPCSTR mapFN, LPCSTR texFN, const ITerrain* pt)$/;"	f	class:CFoliage
AddIMEEditBox	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::AddIMEEditBox( int ID, LPCWSTR strText, int x, int y, int width, int height, bool bIsDefault, CDXUTIMEEditBox** ppCreated )$/;"	f	class:CDXUTDialog
AddItem	.\Common\DXUTgui.cpp	/^HRESULT CDXUTComboBox::AddItem( const WCHAR* strText, void* pData )$/;"	f	class:CDXUTComboBox
AddItem	.\Common\DXUTgui.cpp	/^HRESULT CDXUTListBox::AddItem( const WCHAR *wszText, void *pData )$/;"	f	class:CDXUTListBox
AddLine	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTLineManager::AddLine( int* pnLineID, D3DXVECTOR2* pVertexList, DWORD dwVertexListCount, D3DCOLOR Color, float fWidth, float fScaleRatio, bool bAntiAlias )$/;"	f	class:CDXUTLineManager
AddLine	.\ConsoleBuffer.cpp	/^void CConsoleBuffer::AddLine(LPCSTR text){$/;"	f	class:CConsoleBuffer
AddListBox	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::AddListBox( int ID, int x, int y, int width, int height, DWORD dwStyle, CDXUTListBox** ppCreated )$/;"	f	class:CDXUTDialog
AddMasterServer	.\NetworkRoot.cpp	/^VOID CNetworkRoot::AddMasterServer(const string &strIP, USHORT nPort)$/;"	f	class:CNetworkRoot
AddMultisampleQuality	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::AddMultisampleQuality( DWORD dwQuality )$/;"	f	class:CD3DSettingsDlg
AddMultisampleType	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::AddMultisampleType( D3DMULTISAMPLE_TYPE type )$/;"	f	class:CD3DSettingsDlg
AddPlayer	.\GameEngine.cpp	/^VOID CGameEngine::AddPlayer(int charType, int charID, bool bUsersPlayer)$/;"	f	class:CGameEngine
AddRadioButton	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::AddRadioButton( int ID, UINT nButtonGroup, LPCWSTR strText, int x, int y, int width, int height, bool bChecked, UINT nHotkey, bool bIsDefault, CDXUTRadioButton** ppCreated )$/;"	f	class:CDXUTDialog
AddRect	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTLineManager::AddRect( int* pnLineID, RECT rc, D3DCOLOR Color, float fWidth, float fScaleRatio, bool bAntiAlias )$/;"	f	class:CDXUTLineManager
AddRefreshRate	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::AddRefreshRate( DWORD dwRate )$/;"	f	class:CD3DSettingsDlg
AddResolution	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::AddResolution( DWORD dwWidth, DWORD dwHeight )$/;"	f	class:CD3DSettingsDlg
AddRow	.\MultiColumnList.cpp	/^void CMultiColumnList::AddRow(LPCSTR text){$/;"	f	class:CMultiColumnList
AddSlider	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::AddSlider( int ID, int x, int y, int width, int height, int min, int max, int value, bool bIsDefault, CDXUTSlider** ppCreated )$/;"	f	class:CDXUTDialog
AddSpriteAnimation	.\World.cpp	/^UINT CWorld::AddSpriteAnimation(UCHAR spriteAnimTableID, const D3DXMATRIX* pWorld, float ttl)$/;"	f	class:CWorld
AddStatic	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::AddStatic( int ID, LPCWSTR strText, int x, int y, int width, int height, bool bIsDefault, CDXUTStatic** ppCreated )$/;"	f	class:CDXUTDialog
AddTexture	.\Common\DXUTgui.cpp	/^int CDXUTDialogResourceManager::AddTexture( LPCWSTR strFilename )$/;"	f	class:CDXUTDialogResourceManager
AddTexture	.\Common\DXUTgui.cpp	/^int CDXUTDialogResourceManager::AddTexture( LPCWSTR strResourceName, HMODULE hResourceModule )$/;"	f	class:CDXUTDialogResourceManager
AddTexture	.\NumberToSprite.cpp	/^int CNumberToSprite::AddTexture(IDirect3DDevice9* pd3dDevice, LPCWSTR numberFileName)$/;"	f	class:CNumberToSprite
AddTexture	.\Sprite.cpp	/^VOID CSprite::AddTexture(IDirect3DDevice9* pd3dDevice, LPCWSTR texFileName)$/;"	f	class:CSprite
AddTexture	.\SpriteAnimMgr.cpp	/^int CSpriteAnimMgr::AddTexture(LPCSTR texFileName, int nRows, int nCols)$/;"	f	class:CSpriteAnimMgr
AddTexture	.\SpriteAnimMgr.cpp	/^int CSpriteAnimMgr::AddTexture(LPCWSTR texFileName, int nRows, int nCols)$/;"	f	class:CSpriteAnimMgr
AddToPlayerGroup	.\PhysicsRoot.h	/^	VOID AddToPlayerGroup(int physicsID) { m_hmDynamicObjects[physicsID]->SetUserGroup(m_nPlayerGroupID); }$/;"	f	class:CPhysicsRoot
AddToSLEGroup	.\PhysicsRoot.h	/^	VOID AddToSLEGroup(int physicsID) { m_hmDynamicObjects[physicsID]->SetUserGroup(m_nSLEGroupID); }$/;"	f	class:CPhysicsRoot
AddVertexProcessingType	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::AddVertexProcessingType( DWORD dwType )$/;"	f	class:CD3DSettingsDlg
AdjustAnimationSpeed	.\ModelInstance.h	/^    void AdjustAnimationSpeed( UINT idx, float fSpeedAdjust ) $/;"	f	class:CModelInstance
Advance	.\Common\DXUTmisc.cpp	/^void CDXUTTimer::Advance()$/;"	f	class:CDXUTTimer
AdvanceAnimController	.\ModelInstance.h	/^    void AdvanceAnimController( float fElapsedTime, LPD3DXANIMATIONCALLBACKHANDLER pCallBackHandler ) { $/;"	f	class:CModelInstance
AdvanceAnimController	.\XModelHeirarchy.h	/^    void AdvanceAnimController( float fElapsedTime, LPD3DXANIMATIONCALLBACKHANDLER pCallBackHandler ) $/;"	f	class:CXModelHeirarchy
AllocateName	.\XModelHeirarchy.cpp	/^HRESULT AllocateName ( LPCSTR Name, LPSTR *pNewName )$/;"	f
Analyse	.\Common\DXUTgui.cpp	/^HRESULT CUniBuffer::Analyse()$/;"	f	class:CUniBuffer
AngleCheck	.\IImpostorable.cpp	/^void IImpostorable::AngleCheck(const D3DXVECTOR3* pWorldUp, D3DXVECTOR3* pPrevWorldUp,$/;"	f	class:IImpostorable
AnimOb	.\AnimOb.h	/^	AnimOb() : endX(0), endY(0) , animType(NONE){ }$/;"	f	class:AnimOb
AnimOb	.\AnimOb.h	/^	AnimOb(int x, int y, int h, int w) : CGUIObject(x,y,h,w) { }$/;"	f	class:AnimOb
AnimOb	.\AnimOb.h	/^class AnimOb : public CGUIObject$/;"	c
AnimType	.\AnimOb.h	/^	enum AnimType { NONE, BUTTON, WINDOW };$/;"	g	class:AnimOb
Animate	.\Button.cpp	/^void CButton::Animate(){$/;"	f	class:CButton
Animate	.\Menu.cpp	/^void CMenu::Animate() {$/;"	f	class:CMenu
Animate	.\ScrollingWindow.cpp	/^void CScrollingWindow::Animate()$/;"	f	class:CScrollingWindow
Animate	.\ServerBrowser.cpp	/^void CServerBrowser::Animate() {$/;"	f	class:CServerBrowser
AnimationIndexArray	.\GameTables.h	/^    static const NameIndexPair AnimationIndexArray[] = $/;"	v
AnimationKeyIndexHashMap	.\World.h	/^    typedef hash_map<UCHAR, UINT>       AnimationKeyIndexHashMap;$/;"	t	class:CWorld
Animations	.\GameTables.h	/^    static enum Animations $/;"	g	namespace:GameTable
ApplyLinearImpulse	.\PhysicsRoot.cpp	/^VOID CPhysicsRoot::ApplyLinearImpulse(int physicsID, const D3DXVECTOR3* pvImpulse){$/;"	f	class:CPhysicsRoot
AssignCharacterSetFile	.\GameRoot.h	/^    VOID AssignCharacterSetFile(LPCSTR charFN) { m_strCharacterFile.assign(charFN); }$/;"	f	class:CGameRoot
AssignModelSetFile	.\GameRoot.h	/^    VOID AssignModelSetFile(LPCSTR modelFN) { m_strModelFile.assign(modelFN); }    $/;"	f	class:CGameRoot
AssignSettings	.\PhysicsRoot.cpp	/^VOID CPhysicsRoot::AssignSettings(CGameSettings* pSettings)$/;"	f	class:CPhysicsRoot
AssignSpriteAnimationSetFile	.\GameRoot.h	/^    VOID AssignSpriteAnimationSetFile(LPCSTR spriteFN) { m_strSpriteFile.assign(spriteFN); }$/;"	f	class:CGameRoot
AssignTriListUVs	.\ImpostorAtlas.cpp	/^VOID CImpostorAtlas::AssignTriListUVs(BoxVertTex* verts, const RECTF* rectf)$/;"	f	class:CImpostorAtlas
AssignWorldFile	.\GameRoot.h	/^    VOID AssignWorldFile(LPCSTR levelFN) { m_strWorldFile.assign(levelFN); }$/;"	f	class:CGameRoot
BACKPEDAL_SETTING	.\GameTables.h	/^        BACKPEDAL_SETTING,$/;"	e	enum:GameTable::Settings
BACKTOFRONT	.\PolySprite.h	/^    static const int BACKTOFRONT                      =       (0x01 << 10);$/;"	m	class:CPolySprite
BASINHEIGHT	.\GameDefine.h	18;"	d
BLOCK_ACTION	.\GameTables.h	/^        BLOCK_ACTION,$/;"	e	enum:GameTable::Actions
BLOCK_WIDTH	.\MipmapTerrain.h	/^    static const UINT BLOCK_WIDTH           =       129;$/;"	m	class:CMipmapTerrain
BORDEROFFSET	.\ServerBrowser.h	8;"	d
BOTTOM	.\ScrollingWindow.h	/^	enum WindowAnchor{ NONE, TOP, RIGHT, BOTTOM, LEFT };$/;"	e	enum:CScrollingWindow::WindowAnchor
BOUNCE_SETTING	.\GameTables.h	/^        BOUNCE_SETTING,$/;"	e	enum:GameTable::Settings
BROWSER	.\GameGUI.h	/^	enum GUIReg { CONSOLE = 0, MENU, BROWSER, NUM_REGS };$/;"	e	enum:CGameGUI::GUIReg
BUBBLE_RESOLUTION	.\World.cpp	25;"	d	file:
BUTTON	.\AnimOb.h	/^	enum AnimType { NONE, BUTTON, WINDOW };$/;"	e	enum:AnimOb::AnimType
BackBufferFormat	.\Common\DXUTenum.h	/^    D3DFORMAT BackBufferFormat;$/;"	m	struct:CD3DEnumDeviceSettingsCombo
Backspace	.\ConsoleLine.h	/^	void Backspace() { $/;"	f	class:CConsoleLine
Begin	.\Common\DXUTmisc.cpp	/^void CDXUTTextHelper::Begin()$/;"	f	class:CDXUTTextHelper
Begin	.\PolySprite.cpp	/^VOID CPolySprite::Begin(UINT flags)$/;"	f	class:CPolySprite
Begin	.\Sprite.cpp	/^HRESULT CSprite::Begin(DWORD flags)$/;"	f	class:CSprite
BeginScene	.\PostProcEffects.cpp	/^HRESULT PostProcEffects::BeginScene()$/;"	f	class:PostProcEffects
BehaviorFlags	.\Common\DXUT.h	/^    DWORD BehaviorFlags;$/;"	m	struct:DXUTDeviceSettings
Blend	.\Common\DXUTgui.cpp	/^void DXUTBlendColor::Blend( UINT iState, float fElapsedTime, float fRate )$/;"	f	class:DXUTBlendColor
Block	.\QuadTree.cpp	/^CQuadTree::Block::Block(UINT minX, $/;"	f	class:CQuadTree::Block
Block	.\QuadTree.h	/^		Block() : pVB(NULL), skirtBuffer(NULL){};$/;"	f	struct:CQuadTree::Block
Block	.\QuadTree.h	/^	struct Block {$/;"	s	class:CQuadTree
Bloom	.\PostProcEffects.cpp	/^void PostProcEffects::Bloom(void)$/;"	f	class:PostProcEffects
BoxVertColor	.\FXDecl.h	/^struct BoxVertColor  {$/;"	s
BoxVertTex	.\FXDecl.h	/^    BoxVertTex() {}$/;"	f	struct:BoxVertTex
BoxVertTex	.\FXDecl.h	/^    BoxVertTex(D3DXVECTOR3 vec, float _u, float _v) :$/;"	f	struct:BoxVertTex
BoxVertTex	.\FXDecl.h	/^struct BoxVertTex {$/;"	s
BoxVertTexColor	.\FXDecl.h	/^    BoxVertTexColor() {}$/;"	f	struct:BoxVertTexColor
BoxVertTexColor	.\FXDecl.h	/^    BoxVertTexColor(const D3DXVECTOR3 &vec, ULONG _color, float _u, float _v) :$/;"	f	struct:BoxVertTexColor
BoxVertTexColor	.\FXDecl.h	/^struct BoxVertTexColor {$/;"	s
BroadcastReality	.\GameEngine.cpp	/^VOID CGameEngine::BroadcastReality()    \/\/! PREREQ: m_pHost != NULL ( player is server ).$/;"	f	class:CGameEngine
BuildDSMSConflictList	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::BuildDSMSConflictList( CD3DEnumDeviceSettingsCombo* pDeviceCombo )$/;"	f	class:CD3DEnumeration
BuildDepthStencilFormatList	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::BuildDepthStencilFormatList( CD3DEnumDeviceSettingsCombo* pDeviceCombo )$/;"	f	class:CD3DEnumeration
BuildMenu	.\GameGUI.cpp	/^VOID CGameGUI::BuildMenu()$/;"	f	class:CGameGUI
BuildMultiSampleTypeList	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::BuildMultiSampleTypeList( CD3DEnumDeviceSettingsCombo* pDeviceCombo )$/;"	f	class:CD3DEnumeration
BuildPresentIntervalList	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::BuildPresentIntervalList( CD3DEnumDeviceInfo* pDeviceInfo, $/;"	f	class:CD3DEnumeration
ButtonCallback	.\Menu.h	/^	typedef void (*ButtonCallback)(void);$/;"	t	class:CMenu
ButtonClick	.\Menu.cpp	/^void CMenu::ButtonClick(UCHAR c, int param){$/;"	f	class:CMenu
ButtonState	.\Button.h	/^	enum ButtonState { IDLE, CLICKED, ANIMATE, IN_ANIMATE, INACTIVE };$/;"	g	class:CButton
CAMERA_LOOKAT_OFFSET_X_SETTING	.\GameTables.h	/^		CAMERA_LOOKAT_OFFSET_X_SETTING,$/;"	e	enum:GameTable::Settings
CAMERA_LOOKAT_OFFSET_Y_SETTING	.\GameTables.h	/^		CAMERA_LOOKAT_OFFSET_Y_SETTING,$/;"	e	enum:GameTable::Settings
CAMERA_LOOKAT_OFFSET_Z_SETTING	.\GameTables.h	/^		CAMERA_LOOKAT_OFFSET_Z_SETTING,$/;"	e	enum:GameTable::Settings
CAMERA_OFFSET_X_SETTING	.\GameTables.h	/^        CAMERA_OFFSET_X_SETTING,$/;"	e	enum:GameTable::Settings
CAMERA_OFFSET_Y_SETTING	.\GameTables.h	/^        CAMERA_OFFSET_Y_SETTING,$/;"	e	enum:GameTable::Settings
CAMERA_OFFSET_Z_SETTING	.\GameTables.h	/^        CAMERA_OFFSET_Z_SETTING,$/;"	e	enum:GameTable::Settings
CAMERA_SPRING_DIST_SETTING	.\GameTables.h	/^        CAMERA_SPRING_DIST_SETTING,$/;"	e	enum:GameTable::Settings
CAMERA_SPRING_K_SETTING	.\GameTables.h	/^        CAMERA_SPRING_K_SETTING,$/;"	e	enum:GameTable::Settings
CAMERA_SPRING_LOOK_DIST_SETTING	.\GameTables.h	/^        CAMERA_SPRING_LOOK_DIST_SETTING,$/;"	e	enum:GameTable::Settings
CAMERA_SPRING_LOOK_K_SETTING	.\GameTables.h	/^        CAMERA_SPRING_LOOK_K_SETTING,$/;"	e	enum:GameTable::Settings
CAM_CONTROLDOWN	.\Common\DXUTmisc.h	/^    CAM_CONTROLDOWN,$/;"	e	enum:D3DUtil_CameraKeys
CAM_MAX_KEYS	.\Common\DXUTmisc.h	/^    CAM_MAX_KEYS,$/;"	e	enum:D3DUtil_CameraKeys
CAM_MOVE_BACKWARD	.\Common\DXUTmisc.h	/^    CAM_MOVE_BACKWARD,$/;"	e	enum:D3DUtil_CameraKeys
CAM_MOVE_DOWN	.\Common\DXUTmisc.h	/^    CAM_MOVE_DOWN,$/;"	e	enum:D3DUtil_CameraKeys
CAM_MOVE_FORWARD	.\Common\DXUTmisc.h	/^    CAM_MOVE_FORWARD,$/;"	e	enum:D3DUtil_CameraKeys
CAM_MOVE_UP	.\Common\DXUTmisc.h	/^    CAM_MOVE_UP,$/;"	e	enum:D3DUtil_CameraKeys
CAM_RESET	.\Common\DXUTmisc.h	/^    CAM_RESET,$/;"	e	enum:D3DUtil_CameraKeys
CAM_STRAFE_LEFT	.\Common\DXUTmisc.h	/^    CAM_STRAFE_LEFT = 0,$/;"	e	enum:D3DUtil_CameraKeys
CAM_STRAFE_RIGHT	.\Common\DXUTmisc.h	/^    CAM_STRAFE_RIGHT,$/;"	e	enum:D3DUtil_CameraKeys
CAM_UNKNOWN	.\Common\DXUTmisc.h	/^    CAM_UNKNOWN = 0xFF$/;"	e	enum:D3DUtil_CameraKeys
CBaseCamera	.\Common\DXUTmisc.cpp	/^CBaseCamera::CBaseCamera()$/;"	f	class:CBaseCamera
CBaseCamera	.\Common\DXUTmisc.h	/^class CBaseCamera$/;"	c
CBubbles	.\Bubbles.cpp	/^CBubbles::CBubbles( IDirect3DDevice9* pd3dDevice, int nRings, int nSegments ) :$/;"	f	class:CBubbles
CBubbles	.\Bubbles.h	/^class CBubbles$/;"	c
CButton	.\Button.cpp	/^CButton::CButton (CMenu* menu) : AnimOb(0,0,DEFAULTHEIGHT,DEFAULTWIDTH), $/;"	f	class:CButton
CButton	.\Button.cpp	/^CButton::CButton (LPCSTR bText, int index) : menuIndex(index){$/;"	f	class:CButton
CButton	.\Button.cpp	/^CButton::CButton (int x, int y, int h, int w) : AnimOb(x,y,h,w) {$/;"	f	class:CButton
CButton	.\Button.h	/^class CButton : public AnimOb$/;"	c
CButtonPtr	.\Menu.h	/^	typedef CButton* CButtonPtr;$/;"	t	class:CMenu
CCandList	.\Common\DXUTgui.h	/^    struct CCandList$/;"	s	class:CDXUTIMEEditBox
CClient	.\Client.cpp	/^CClient::CClient(NetworkID networkID)  :$/;"	f	class:CClient
CClient	.\Client.h	/^class CClient$/;"	c
CCloud	.\CloudBatch.cpp	/^CCloud::CCloud(CPolySprite *pSprite, CImpostorAtlas* pImpostorAtlas, const SCloudInfo &ci, UINT batchID) $/;"	f	class:CCloud
CCloud	.\CloudBatch.h	/^class CCloud$/;"	c
CCloudBatch	.\CloudBatch.cpp	/^CCloudBatch::CCloudBatch( CPolySprite *pSprite, CImpostorAtlas *pImpostorAtlas ) :$/;"	f	class:CCloudBatch
CCloudBatch	.\CloudBatch.h	/^class CCloudBatch$/;"	c
CCloudSky	.\CloudSky.cpp	/^CCloudSky::CCloudSky(LPCSTR pszCloudMap, LPCSTR pszCloudAtlasTex, LPCSTR pszSkyToneTex, const D3DXVECTOR3 *pvCenter, float fSkyRadius) : $/;"	f	class:CCloudSky
CCloudSky	.\CloudSky.h	/^class CCloudSky$/;"	c
CConsole	.\Console.cpp	/^CConsole::CConsole(LPDIRECT3DDEVICE9 pd3dDevice, WindowAnchor _anchor, float _xpercent, float _ypercent, CGameGUI* _m_pGUI, GUICallback _func) : $/;"	f	class:CConsole
CConsole	.\Console.h	/^class CConsole : public CScrollingWindow$/;"	c
CConsoleBuffer	.\ConsoleBuffer.cpp	/^CConsoleBuffer::CConsoleBuffer(int _maxLines) : m_iMaxLines(_maxLines), m_start(0), m_end(0) { };$/;"	f	class:CConsoleBuffer
CConsoleBuffer	.\ConsoleBuffer.h	/^class CConsoleBuffer$/;"	c
CConsoleLine	.\ConsoleLine.h	/^	CConsoleLine() { };$/;"	f	class:CConsoleLine
CConsoleLine	.\ConsoleLine.h	/^	CConsoleLine(LPCSTR text) { m_strText.assign(text); }$/;"	f	class:CConsoleLine
CConsoleLine	.\ConsoleLine.h	/^class CConsoleLine$/;"	c
CD3DArcBall	.\Common\DXUTmisc.cpp	/^CD3DArcBall::CD3DArcBall()$/;"	f	class:CD3DArcBall
CD3DArcBall	.\Common\DXUTmisc.h	/^class CD3DArcBall$/;"	c
CD3DEnumAdapterInfo	.\Common\DXUTenum.h	/^class CD3DEnumAdapterInfo$/;"	c
CD3DEnumDSMSConflict	.\Common\DXUTenum.h	/^struct CD3DEnumDSMSConflict$/;"	s
CD3DEnumDeviceInfo	.\Common\DXUTenum.h	/^class CD3DEnumDeviceInfo$/;"	c
CD3DEnumDeviceSettingsCombo	.\Common\DXUTenum.h	/^struct CD3DEnumDeviceSettingsCombo$/;"	s
CD3DEnumeration	.\Common\DXUTenum.cpp	/^CD3DEnumeration::CD3DEnumeration()$/;"	f	class:CD3DEnumeration
CD3DEnumeration	.\Common\DXUTenum.h	/^class CD3DEnumeration$/;"	c
CD3DSettingsDlg	.\Common\DXUTSettingsDlg.cpp	/^CD3DSettingsDlg::CD3DSettingsDlg()$/;"	f	class:CD3DSettingsDlg
CD3DSettingsDlg	.\Common\DXUTSettingsDlg.h	/^class CD3DSettingsDlg$/;"	c
CDXUTButton	.\Common\DXUTgui.cpp	/^CDXUTButton::CDXUTButton( CDXUTDialog *pDialog )$/;"	f	class:CDXUTButton
CDXUTButton	.\Common\DXUTgui.h	/^class CDXUTButton : public CDXUTStatic$/;"	c
CDXUTCheckBox	.\Common\DXUTgui.cpp	/^CDXUTCheckBox::CDXUTCheckBox( CDXUTDialog *pDialog )$/;"	f	class:CDXUTCheckBox
CDXUTCheckBox	.\Common\DXUTgui.h	/^class CDXUTCheckBox : public CDXUTButton$/;"	c
CDXUTComboBox	.\Common\DXUTgui.cpp	/^CDXUTComboBox::CDXUTComboBox( CDXUTDialog *pDialog ) :$/;"	f	class:CDXUTComboBox
CDXUTComboBox	.\Common\DXUTgui.h	/^class CDXUTComboBox : public CDXUTButton$/;"	c
CDXUTControl	.\Common\DXUTgui.cpp	/^CDXUTControl::CDXUTControl( CDXUTDialog *pDialog )$/;"	f	class:CDXUTControl
CDXUTControl	.\Common\DXUTgui.h	/^class CDXUTControl$/;"	c
CDXUTDialog	.\Common\DXUTgui.cpp	/^CDXUTDialog::CDXUTDialog()$/;"	f	class:CDXUTDialog
CDXUTDialog	.\Common\DXUTgui.h	/^class CDXUTDialog$/;"	c
CDXUTDialogResourceManager	.\Common\DXUTgui.cpp	/^CDXUTDialogResourceManager::CDXUTDialogResourceManager()$/;"	f	class:CDXUTDialogResourceManager
CDXUTDialogResourceManager	.\Common\DXUTgui.h	/^class CDXUTDialogResourceManager$/;"	c
CDXUTDirectionWidget	.\Common\DXUTmisc.cpp	/^CDXUTDirectionWidget::CDXUTDirectionWidget()$/;"	f	class:CDXUTDirectionWidget
CDXUTDirectionWidget	.\Common\DXUTmisc.h	/^class CDXUTDirectionWidget$/;"	c
CDXUTEditBox	.\Common\DXUTgui.cpp	/^CDXUTEditBox::CDXUTEditBox( CDXUTDialog *pDialog )$/;"	f	class:CDXUTEditBox
CDXUTEditBox	.\Common\DXUTgui.h	/^class CDXUTEditBox : public CDXUTControl$/;"	c
CDXUTElement	.\Common\DXUTgui.h	/^class CDXUTElement$/;"	c
CDXUTIMEEditBox	.\Common\DXUTgui.cpp	/^CDXUTIMEEditBox::CDXUTIMEEditBox( CDXUTDialog *pDialog )$/;"	f	class:CDXUTIMEEditBox
CDXUTIMEEditBox	.\Common\DXUTgui.h	/^class CDXUTIMEEditBox : public CDXUTEditBox$/;"	c
CDXUTLineManager	.\Common\DXUTmisc.cpp	/^CDXUTLineManager::CDXUTLineManager()$/;"	f	class:CDXUTLineManager
CDXUTLineManager	.\Common\DXUTmisc.h	/^class CDXUTLineManager$/;"	c
CDXUTListBox	.\Common\DXUTgui.cpp	/^CDXUTListBox::CDXUTListBox( CDXUTDialog *pDialog ) :$/;"	f	class:CDXUTListBox
CDXUTListBox	.\Common\DXUTgui.h	/^class CDXUTListBox : public CDXUTControl$/;"	c
CDXUTMesh	.\Common\DXUTMesh.cpp	/^CDXUTMesh::CDXUTMesh( LPCWSTR strName )$/;"	f	class:CDXUTMesh
CDXUTMesh	.\Common\DXUTMesh.h	/^class CDXUTMesh$/;"	c
CDXUTMeshFile	.\Common\DXUTMesh.h	/^    CDXUTMeshFile() : CDXUTMeshFrame( L"CDXUTMeshFile_Root" ) {}$/;"	f	class:CDXUTMeshFile
CDXUTMeshFile	.\Common\DXUTMesh.h	/^class CDXUTMeshFile : public CDXUTMeshFrame$/;"	c
CDXUTMeshFrame	.\Common\DXUTMesh.cpp	/^CDXUTMeshFrame::CDXUTMeshFrame( LPCWSTR strName )$/;"	f	class:CDXUTMeshFrame
CDXUTMeshFrame	.\Common\DXUTMesh.h	/^class CDXUTMeshFrame$/;"	c
CDXUTPerfEventGenerator	.\Common\DXUTmisc.h	/^    CDXUTPerfEventGenerator( D3DCOLOR color, LPCWSTR pstrMessage ) { DXUT_BeginPerfEvent( color, pstrMessage ); }$/;"	f	class:CDXUTPerfEventGenerator
CDXUTPerfEventGenerator	.\Common\DXUTmisc.h	/^class CDXUTPerfEventGenerator$/;"	c
CDXUTRadioButton	.\Common\DXUTgui.cpp	/^CDXUTRadioButton::CDXUTRadioButton( CDXUTDialog *pDialog )$/;"	f	class:CDXUTRadioButton
CDXUTRadioButton	.\Common\DXUTgui.h	/^class CDXUTRadioButton : public CDXUTCheckBox$/;"	c
CDXUTResourceCache	.\Common\DXUTmisc.h	/^    CDXUTResourceCache() { }$/;"	f	class:CDXUTResourceCache
CDXUTResourceCache	.\Common\DXUTmisc.h	/^class CDXUTResourceCache$/;"	c
CDXUTScrollBar	.\Common\DXUTgui.cpp	/^CDXUTScrollBar::CDXUTScrollBar( CDXUTDialog *pDialog )$/;"	f	class:CDXUTScrollBar
CDXUTScrollBar	.\Common\DXUTgui.h	/^class CDXUTScrollBar : public CDXUTControl$/;"	c
CDXUTSlider	.\Common\DXUTgui.cpp	/^CDXUTSlider::CDXUTSlider( CDXUTDialog *pDialog )$/;"	f	class:CDXUTSlider
CDXUTSlider	.\Common\DXUTgui.h	/^class CDXUTSlider : public CDXUTControl$/;"	c
CDXUTStatic	.\Common\DXUTgui.cpp	/^CDXUTStatic::CDXUTStatic( CDXUTDialog *pDialog )$/;"	f	class:CDXUTStatic
CDXUTStatic	.\Common\DXUTgui.h	/^class CDXUTStatic : public CDXUTControl$/;"	c
CDXUTTextHelper	.\Common\DXUTmisc.cpp	/^CDXUTTextHelper::CDXUTTextHelper( ID3DXFont* pFont, ID3DXSprite* pSprite, int nLineHeight )$/;"	f	class:CDXUTTextHelper
CDXUTTextHelper	.\Common\DXUTmisc.h	/^class CDXUTTextHelper$/;"	c
CDXUTTimer	.\Common\DXUTmisc.cpp	/^CDXUTTimer::CDXUTTimer()$/;"	f	class:CDXUTTimer
CDXUTTimer	.\Common\DXUTmisc.h	/^class CDXUTTimer$/;"	c
CELEBRATE_ACTION	.\GameTables.h	/^        CELEBRATE_ACTION,$/;"	e	enum:GameTable::Actions
CFirstPersonCamera	.\Common\DXUTmisc.cpp	/^CFirstPersonCamera::CFirstPersonCamera() :$/;"	f	class:CFirstPersonCamera
CFirstPersonCamera	.\Common\DXUTmisc.h	/^class CFirstPersonCamera : public CBaseCamera$/;"	c
CFoliage	.\Foliage.cpp	/^CFoliage::CFoliage() :    $/;"	f	class:CFoliage
CFoliage	.\Foliage.h	/^class CFoliage$/;"	c
CGUIObject	.\GUIObject.h	/^	CGUIObject(): m_nX(0), m_nY(0), m_nHeight(0), m_nWidth(0){ }$/;"	f	class:CGUIObject
CGUIObject	.\GUIObject.h	/^	CGUIObject(int x, int y, int h, int w) : m_nX(x), m_nY(y), m_nHeight(h), m_nWidth(w){ }$/;"	f	class:CGUIObject
CGUIObject	.\GUIObject.h	/^class CGUIObject {$/;"	c
CGameEngine	.\GameEngine.cpp	/^CGameEngine::CGameEngine(bool bHosting) :$/;"	f	class:CGameEngine
CGameEngine	.\GameEngine.h	/^class CGameEngine : public NetworkIDGenerator$/;"	c
CGameGUI	.\GameGUI.cpp	/^CGameGUI::CGameGUI(CGameRoot* root){$/;"	f	class:CGameGUI
CGameGUI	.\GameGUI.h	/^class CGameGUI {$/;"	c
CGameRoot	.\GameRoot.cpp	/^CGameRoot::CGameRoot(void)  :$/;"	f	class:CGameRoot
CGameRoot	.\GameRoot.h	/^class CGameRoot$/;"	c
CGameSettings	.\GameSettings.cpp	/^CGameSettings::CGameSettings() :$/;"	f	class:CGameSettings
CGameSettings	.\GameSettings.h	/^class CGameSettings$/;"	c
CGrowableArray	.\Common\DXUTmisc.h	/^    CGrowableArray( const CGrowableArray<TYPE>& a ) { for( int i=0; i < a.m_nSize; i++ ) Add( a.m_pData[i] ); }$/;"	f	class:CGrowableArray
CGrowableArray	.\Common\DXUTmisc.h	/^    CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }$/;"	f	class:CGrowableArray
CGrowableArray	.\Common\DXUTmisc.h	/^class CGrowableArray$/;"	c
CHARACTER_SCALE	.\GameDefine.h	16;"	d
CHAR_SET_TO_LOAD	.\GPUTerrainProject.cpp	22;"	d	file:
CHS_IMEFILENAME1	.\Common\DXUTgui.cpp	5756;"	d	file:
CHS_IMEFILENAME2	.\Common\DXUTgui.cpp	5757;"	d	file:
CHT_IMEFILENAME1	.\Common\DXUTgui.cpp	5753;"	d	file:
CHT_IMEFILENAME2	.\Common\DXUTgui.cpp	5754;"	d	file:
CHT_IMEFILENAME3	.\Common\DXUTgui.cpp	5755;"	d	file:
CHud	.\HUD.cpp	/^CHud::CHud(LPDIRECT3DDEVICE9 pd3dDevice) : CScrollingWindow(0x00000000), alpha(255), pMyPlayer(NULL), m_Sprite(NULL), m_Texture(NULL), m_font(NULL), timeLeft(FADETIME) {$/;"	f	class:CHud
CHud	.\HUD.h	/^class CHud : CScrollingWindow$/;"	c
CImpostorAtlas	.\ImpostorAtlas.cpp	/^CImpostorAtlas::CImpostorAtlas(int nAtlasWidth, int nAtlasHeight, int nImpostorWidth, int nImpostorHeight) :$/;"	f	class:CImpostorAtlas
CImpostorAtlas	.\ImpostorAtlas.h	/^class CImpostorAtlas :$/;"	c
CInputLocale	.\Common\DXUTgui.h	/^    struct CInputLocale$/;"	s	class:CDXUTIMEEditBox
CLEAR	.\Common\DXUTgui.h	/^    enum ARROWSTATE { CLEAR, CLICKED_UP, CLICKED_DOWN, HELD_UP, HELD_DOWN };$/;"	e	enum:CDXUTScrollBar::ARROWSTATE
CLICKED	.\Button.h	/^	enum ButtonState { IDLE, CLICKED, ANIMATE, IN_ANIMATE, INACTIVE };$/;"	e	enum:CButton::ButtonState
CLICKED_DOWN	.\Common\DXUTgui.h	/^    enum ARROWSTATE { CLEAR, CLICKED_UP, CLICKED_DOWN, HELD_UP, HELD_DOWN };$/;"	e	enum:CDXUTScrollBar::ARROWSTATE
CLICKED_UP	.\Common\DXUTgui.h	/^    enum ARROWSTATE { CLEAR, CLICKED_UP, CLICKED_DOWN, HELD_UP, HELD_DOWN };$/;"	e	enum:CDXUTScrollBar::ARROWSTATE
CLIENT_PORT	.\NetworkDefine.h	9;"	d
CLOUD_ALPHA_CUTOFF	.\GameDefine.h	19;"	d
CLOUD_BLOCKS_PER_DIMENSION	.\CloudBatch.h	/^    static const int CLOUD_BLOCKS_PER_DIMENSION     =   4;  \/\/! Means there are 4x4 texture patches in cloud atlas.$/;"	m	struct:SCloudInfo
CLOUD_DAY_SHADE	.\CloudBatch.h	18;"	d
CLOUD_IMPOSTOR_UPDATES_PER_FRAME	.\World.cpp	32;"	d	file:
CLOUD_LOADFILE	.\CloudSky.cpp	25;"	d	file:
CLOUD_NIGHT_DIF	.\CloudBatch.h	19;"	d
CLOUD_SAVEFILE	.\CloudSky.cpp	24;"	d	file:
CLoadArea	.\QuadTree.cpp	/^CQuadTree::CLoadArea::CLoadArea(UINT cellSpacing) :         $/;"	f	class:CQuadTree::CLoadArea
CLoadArea	.\QuadTree.h	/^    class CLoadArea {        $/;"	c	class:CQuadTree
CMD_BAN	.\GameTables.h	/^		CMD_BAN,$/;"	e	enum:GameTable::Commands
CMD_BOUNDING_BOX	.\GameTables.h	/^		CMD_BOUNDING_BOX,$/;"	e	enum:GameTable::Commands
CMD_CAMERA_CONTROL	.\GameTables.h	/^		CMD_CAMERA_CONTROL,$/;"	e	enum:GameTable::Commands
CMD_CAMERA_DIST	.\GameTables.h	/^		CMD_CAMERA_DIST,$/;"	e	enum:GameTable::Commands
CMD_CONNECT	.\GameTables.h	/^		CMD_CONNECT,$/;"	e	enum:GameTable::Commands
CMD_CONSOLE	.\GameTables.h	/^        CMD_CONSOLE,$/;"	e	enum:GameTable::Commands
CMD_CYCLE_ANIMATION	.\GameTables.h	/^		CMD_CYCLE_ANIMATION,$/;"	e	enum:GameTable::Commands
CMD_HELP	.\GameTables.h	/^		CMD_HELP,$/;"	e	enum:GameTable::Commands
CMD_HOST	.\GameTables.h	/^        CMD_HOST,$/;"	e	enum:GameTable::Commands
CMD_KICK	.\GameTables.h	/^		CMD_KICK,$/;"	e	enum:GameTable::Commands
CMD_MENU	.\GameTables.h	/^		CMD_MENU,$/;"	e	enum:GameTable::Commands
CMD_PHYSICS_RENDER	.\GameTables.h	/^		CMD_PHYSICS_RENDER,$/;"	e	enum:GameTable::Commands
CMD_QUIT	.\GameTables.h	/^		CMD_QUIT,$/;"	e	enum:GameTable::Commands
CMD_REFRESH_SERVER_LIST	.\GameTables.h	/^		CMD_REFRESH_SERVER_LIST,$/;"	e	enum:GameTable::Commands
CMD_SAVE_SHADOW_MAP	.\GameTables.h	/^		CMD_SAVE_SHADOW_MAP,$/;"	e	enum:GameTable::Commands
CMD_SUBMENU	.\GameTables.h	/^		CMD_SUBMENU,$/;"	e	enum:GameTable::Commands
CMD_SUNSTOP	.\GameTables.h	/^		CMD_SUNSTOP,$/;"	e	enum:GameTable::Commands
CMD_SUNTEST	.\GameTables.h	/^		CMD_SUNTEST,$/;"	e	enum:GameTable::Commands
CMD_TOGGLE_SERVER_LIST	.\GameTables.h	/^        CMD_TOGGLE_SERVER_LIST,$/;"	e	enum:GameTable::Commands
CMenu	.\Menu.cpp	/^CMenu::CMenu(LPDIRECT3DDEVICE9 pd3dDevice, WindowAnchor _anchor, float _xpercent, float _ypercent, CGameGUI* _gui, GUICallback _func) : $/;"	f	class:CMenu
CMenu	.\Menu.h	/^class CMenu : public CScrollingWindow {$/;"	c
CMipmapTerrain	.\MipmapTerrain.cpp	/^CMipmapTerrain::CMipmapTerrain(LPCSTR fn, $/;"	f	class:CMipmapTerrain
CMipmapTerrain	.\MipmapTerrain.h	/^class CMipmapTerrain :$/;"	c
CModelInstance	.\ModelInstance.cpp	/^CModelInstance::CModelInstance( CXModelHeirarchy* pXmodel ) :$/;"	f	class:CModelInstance
CModelInstance	.\ModelInstance.h	/^class CModelInstance$/;"	c
CModelViewerCamera	.\Common\DXUTmisc.cpp	/^CModelViewerCamera::CModelViewerCamera()$/;"	f	class:CModelViewerCamera
CModelViewerCamera	.\Common\DXUTmisc.h	/^class CModelViewerCamera : public CBaseCamera$/;"	c
CMultiColumnList	.\MultiColumnList.cpp	/^CMultiColumnList::CMultiColumnList(int _maxLines) : m_iMaxLines(_maxLines), m_start(1), m_end(1) {$/;"	f	class:CMultiColumnList
CMultiColumnList	.\MultiColumnList.h	/^class CMultiColumnList : public CGUIObject$/;"	c
CNetworkRoot	.\NetworkRoot.cpp	/^CNetworkRoot::CNetworkRoot()$/;"	f	class:CNetworkRoot
CNetworkRoot	.\NetworkRoot.h	/^class CNetworkRoot$/;"	c
CNumberToSprite	.\NumberToSprite.cpp	/^CNumberToSprite::CNumberToSprite(IDirect3DDevice9* pd3dDevice) :$/;"	f	class:CNumberToSprite
CNumberToSprite	.\NumberToSprite.h	/^class CNumberToSprite$/;"	c
COLOR_TIME_UPDATE	.\CloudBatch.h	22;"	d
CONSOLE	.\GameGUI.h	/^	enum GUIReg { CONSOLE = 0, MENU, BROWSER, NUM_REGS };$/;"	e	enum:CGameGUI::GUIReg
CPhysicsRoot	.\PhysicsRoot.cpp	/^CPhysicsRoot::CPhysicsRoot(CWorld* pWorld, CGameSettings* pSettings) :$/;"	f	class:CPhysicsRoot
CPhysicsRoot	.\PhysicsRoot.h	/^class CPhysicsRoot$/;"	c
CPillar	.\Pillar.cpp	/^CPillar::CPillar(LPCSTR texFN) : m_Length(LENGTH), m_cylinderRadius(RAD1),$/;"	f	class:CPillar
CPillar	.\Pillar.cpp	/^CPillar::CPillar(LPCSTR texFN, D3DXMATRIX mWorld) : m_Length(LENGTH), m_cylinderRadius(RAD1),$/;"	f	class:CPillar
CPillar	.\Pillar.cpp	/^CPillar::CPillar(LPCSTR texFN, D3DXMATRIX mWorld, float cylRad, float splineRad, float length,$/;"	f	class:CPillar
CPillar	.\Pillar.cpp	/^CPillar::CPillar(const SPillarInfo* pillInfo, D3DXMATRIX mWorld) : $/;"	f	class:CPillar
CPillar	.\Pillar.h	/^class CPillar$/;"	c
CPolySprite	.\PolySprite.cpp	/^CPolySprite::CPolySprite(IDirect3DDevice9 *pd3dDevice) : $/;"	f	class:CPolySprite
CPolySprite	.\PolySprite.h	/^class CPolySprite$/;"	c
CProgressBar	.\ProgressBar.h	/^	CProgressBar() { }$/;"	f	class:CProgressBar
CProgressBar	.\ProgressBar.h	/^	CProgressBar(int x, int y, int h, int w, int curr, int max) : $/;"	f	class:CProgressBar
CProgressBar	.\ProgressBar.h	/^class CProgressBar : public CGUIObject{$/;"	c
CPtoX	.\Common\DXUTgui.cpp	/^HRESULT CUniBuffer::CPtoX( int nCP, BOOL bTrail, int *pX )$/;"	f	class:CUniBuffer
CQuadTree	.\QuadTree.cpp	/^CQuadTree::CQuadTree(const SQuadTreeInfo* pinfo, const SPillarInfo* pillarInfo) $/;"	f	class:CQuadTree
CQuadTree	.\QuadTree.h	/^class CQuadTree$/;"	c
CScrollingWindow	.\ScrollingWindow.cpp	/^CScrollingWindow::CScrollingWindow(DWORD _bgColor) : AnimOb(-1,-1,-1,-1), $/;"	f	class:CScrollingWindow
CScrollingWindow	.\ScrollingWindow.h	/^class CScrollingWindow : public AnimOb$/;"	c
CServer	.\Server.cpp	/^CServer::CServer(NetworkID networkID) :$/;"	f	class:CServer
CServer	.\Server.h	/^class CServer$/;"	c
CServerBrowser	.\ServerBrowser.cpp	/^CServerBrowser::CServerBrowser(WindowAnchor _anchor, float _xpercent, float _ypercent) : CScrollingWindow(0xaa000000) {$/;"	f	class:CServerBrowser
CServerBrowser	.\ServerBrowser.h	/^class CServerBrowser : public CScrollingWindow$/;"	c
CServerFinder	.\ServerFinder.h	/^class CServerFinder$/;"	c
CServerInfoComparator	.\ServerInfo.cpp	/^CServerInfoComparator::CServerInfoComparator(UCHAR _SortFlag) : $/;"	f	class:CServerInfoComparator
CServerInfoComparator	.\ServerInfo.h	/^class CServerInfoComparator$/;"	c
CShadowMap	.\ShadowMap.cpp	/^CShadowMap::CShadowMap(void) :$/;"	f	class:CShadowMap
CShadowMap	.\ShadowMap.h	/^class CShadowMap$/;"	c
CSky	.\Sky.cpp	/^CSky::CSky(const D3DXVECTOR3* pvCenter, float fRadius) :$/;"	f	class:CSky
CSky	.\Sky.h	/^class CSky$/;"	c
CSound	.\Common\DXUTsound.cpp	/^CSound::CSound( LPDIRECTSOUNDBUFFER* apDSBuffer, DWORD dwDSBufferSize,$/;"	f	class:CSound
CSound	.\Common\DXUTsound.h	/^class CSound$/;"	c
CSoundManager	.\Common\DXUTsound.cpp	/^CSoundManager::CSoundManager()$/;"	f	class:CSoundManager
CSoundManager	.\Common\DXUTsound.h	/^class CSoundManager$/;"	c
CSphere	.\Sphere.cpp	/^CSphere::CSphere(IDirect3DDevice9* pd3dDevice, int nRings, int nSegments, $/;"	f	class:CSphere
CSphere	.\Sphere.h	/^class CSphere$/;"	c
CSprite	.\Sprite.cpp	/^CSprite::CSprite(IDirect3DDevice9* pd3dDevice, float animThresh) :    $/;"	f	class:CSprite
CSprite	.\Sprite.h	/^class CSprite$/;"	c
CSpriteAnimMgr	.\SpriteAnimMgr.cpp	/^CSpriteAnimMgr::CSpriteAnimMgr(LPDIRECT3DDEVICE9 pd3dDevice) :$/;"	f	class:CSpriteAnimMgr
CSpriteAnimMgr	.\SpriteAnimMgr.h	/^class CSpriteAnimMgr$/;"	c
CStreamingSound	.\Common\DXUTsound.cpp	/^CStreamingSound::CStreamingSound( LPDIRECTSOUNDBUFFER pDSBuffer, DWORD dwDSBufferSize,$/;"	f	class:CStreamingSound
CStreamingSound	.\Common\DXUTsound.h	/^class CStreamingSound : public CSound$/;"	c
CTARR_ALTOCUMULUS	.\CloudBatch.cpp	/^const UINT SCloudInfo::CTARR_ALTOCUMULUS[6]      =   { 6, 10, 5, 11, 8, 12 };$/;"	m	class:SCloudInfo	file:
CTARR_ALTOCUMULUS	.\CloudBatch.h	/^    static const UINT CTARR_ALTOCUMULUS[6];$/;"	m	struct:SCloudInfo
CTARR_CIRRUS	.\CloudBatch.cpp	/^const UINT SCloudInfo::CTARR_CIRRUS[6]           =   { 4, 5, 6, 7, 8, 9 };$/;"	m	class:SCloudInfo	file:
CTARR_CIRRUS	.\CloudBatch.h	/^    static const UINT CTARR_CIRRUS[6];$/;"	m	struct:SCloudInfo
CTARR_CUMULUSNIMBUS	.\CloudBatch.cpp	/^const UINT SCloudInfo::CTARR_CUMULUSNIMBUS[6]    =   { 3, 12, 13, 14, 15, 0 };$/;"	m	class:SCloudInfo	file:
CTARR_CUMULUSNIMBUS	.\CloudBatch.h	/^    static const UINT CTARR_CUMULUSNIMBUS[6];$/;"	m	struct:SCloudInfo
CTARR_FAIRCUMULUS	.\CloudBatch.cpp	/^const UINT SCloudInfo::CTARR_FAIRCUMULUS[6]      =   { 10, 11, 12, 13, 14, 15 };$/;"	m	class:SCloudInfo	file:
CTARR_FAIRCUMULUS	.\CloudBatch.h	/^    static const UINT CTARR_FAIRCUMULUS[6];$/;"	m	struct:SCloudInfo
CTARR_NIMBOSTRATUS	.\CloudBatch.cpp	/^const UINT SCloudInfo::CTARR_NIMBOSTRATUS[6]     =   { 0, 1, 2, 0, 6, 2 };$/;"	m	class:SCloudInfo	file:
CTARR_NIMBOSTRATUS	.\CloudBatch.h	/^    static const UINT CTARR_NIMBOSTRATUS[6];$/;"	m	struct:SCloudInfo
CTARR_STRATOCUMULUS	.\CloudBatch.cpp	/^const UINT SCloudInfo::CTARR_STRATOCUMULUS[6]    =   { 0, 1, 2, 3, 7, 1 };$/;"	m	class:SCloudInfo	file:
CTARR_STRATOCUMULUS	.\CloudBatch.h	/^    static const UINT CTARR_STRATOCUMULUS[6];$/;"	m	struct:SCloudInfo
CTRL_ASCII_KEY	.\GameSettings.cpp	13;"	d	file:
CT_ALTOCUMULUS	.\CloudBatch.h	/^    static const UINT CT_ALTOCUMULUS            =   5;  \/\/ field of parallel cotton balls    $/;"	m	struct:SCloudInfo
CT_CIRRUS	.\CloudBatch.h	/^    static const UINT CT_CIRRUS                 =   6;  \/\/ super high level clouds, thin and wispy$/;"	m	struct:SCloudInfo
CT_CUMULUSNIMBUS	.\CloudBatch.h	/^    static const UINT CT_CUMULUSNIMBUS          =   4;  \/\/more vertically developed than fair weather cumulus. They can exist as individual towers$/;"	m	struct:SCloudInfo
CT_FAIRCUMULUS	.\CloudBatch.h	/^    static const UINT CT_FAIRCUMULUS            =   3;  \/\/ Fair weather cumulus. floating cotton$/;"	m	struct:SCloudInfo
CT_NIMBOSTRATUS	.\CloudBatch.h	/^    static const UINT CT_NIMBOSTRATUS           =   1;  \/\/dark low level clouds bringing rain$/;"	m	struct:SCloudInfo
CT_STRATOCUMULUS	.\CloudBatch.h	/^    static const UINT CT_STRATOCUMULUS          =   2;  \/\/low, lumpy layer of clouds that is sometimes accompanied by weak intensity precipitation$/;"	m	struct:SCloudInfo
CURRENT_GAME_SETTINGS	.\GameSettings.cpp	6;"	d	file:
CURRENT_HOST_SETTINGS	.\GameSettings.cpp	9;"	d	file:
CURVESTACKS	.\Pillar.cpp	18;"	d	file:
CUniBuffer	.\Common\DXUTgui.cpp	/^CUniBuffer::CUniBuffer( int nInitialSize )$/;"	f	class:CUniBuffer
CUniBuffer	.\Common\DXUTgui.h	/^class CUniBuffer$/;"	c
CWaveFile	.\Common\DXUTsound.cpp	/^CWaveFile::CWaveFile()$/;"	f	class:CWaveFile
CWaveFile	.\Common\DXUTsound.h	/^class CWaveFile$/;"	c
CWorld	.\World.cpp	/^CWorld::CWorld(const string& levelFN, const string& modelFN, const string& charFN, const string& spriteFN) :$/;"	f	class:CWorld
CWorld	.\World.h	/^class CWorld$/;"	c
CXModelHeirarchy	.\XModelHeirarchy.cpp	/^CXModelHeirarchy::CXModelHeirarchy( IDirect3DDevice9* pd3dDevice, LPCSTR strFileName, bool bHeirarchy )$/;"	f	class:CXModelHeirarchy
CXModelHeirarchy	.\XModelHeirarchy.h	/^class CXModelHeirarchy$/;"	c
CalcTextRect	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::CalcTextRect( LPCWSTR strText, CDXUTElement* pElement, RECT* prcDest, int nCount )$/;"	f	class:CDXUTDialog
CalcWorldOrientAheadTransformation	.\PolySprite.cpp	/^VOID CPolySprite::CalcWorldOrientAheadTransformation()$/;"	f	class:CPolySprite
CalcWorldOrientRightTransformation	.\PolySprite.cpp	/^VOID CPolySprite::CalcWorldOrientRightTransformation()$/;"	f	class:CPolySprite
CalcWorldOrientUpTransformation	.\PolySprite.cpp	/^VOID CPolySprite::CalcWorldOrientUpTransformation()$/;"	f	class:CPolySprite
CameraControl	.\GameEngine.h	/^        SCameraControl CameraControl;   \/\/! the lookAt and Pos offset are then applied to mCameraTarget.$/;"	m	struct:CGameEngine::SPlayer
CanHaveFocus	.\Common\DXUTgui.h	/^    virtual bool    CanHaveFocus() { return (m_bVisible && m_bEnabled); }$/;"	f	class:CDXUTListBox
CanHaveFocus	.\Common\DXUTgui.h	/^    virtual bool CanHaveFocus() { return (m_bVisible && m_bEnabled); }$/;"	f	class:CDXUTButton
CanHaveFocus	.\Common\DXUTgui.h	/^    virtual bool CanHaveFocus() { return (m_bVisible && m_bEnabled); }$/;"	f	class:CDXUTComboBox
CanHaveFocus	.\Common\DXUTgui.h	/^    virtual bool CanHaveFocus() { return (m_bVisible && m_bEnabled); }$/;"	f	class:CDXUTEditBox
CanHaveFocus	.\Common\DXUTgui.h	/^    virtual bool CanHaveFocus() { return (m_bVisible && m_bEnabled); }$/;"	f	class:CDXUTSlider
CanHaveFocus	.\Common\DXUTgui.h	/^    virtual bool CanHaveFocus() { return false; }$/;"	f	class:CDXUTControl
Cap	.\Common\DXUTgui.cpp	/^void CDXUTScrollBar::Cap()  \/\/ Clips position at boundaries. Ensures it stays within legal range.$/;"	f	class:CDXUTScrollBar
Caps	.\Common\DXUTenum.h	/^    D3DCAPS9 Caps;$/;"	m	class:CD3DEnumDeviceInfo
CheckFitsInArea	.\QuadTree.cpp	/^VOID CQuadTree::CLoadArea::CheckFitsInArea(int dim) {$/;"	f	class:CQuadTree::CLoadArea
CheckInBounds	.\GUIObject.h	/^	bool CheckInBounds(int x, int y){$/;"	f	class:CGUIObject
CheckInputLocale	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::CheckInputLocale()$/;"	f	class:CDXUTIMEEditBox
CheckToUpdateImpostor	.\IImpostorable.cpp	/^bool IImpostorable::CheckToUpdateImpostor(bool &bRenderImpostor, const D3DXVECTOR3* pWorldUp, D3DXVECTOR3* pViewpointDif, float fDistanceScale, bool bForce)$/;"	f	class:IImpostorable
CheckToUpdateImpostor	.\ImpostorAtlas.cpp	/^bool CImpostorAtlas::CheckToUpdateImpostor(bool &bShouldRenderImpostor, const D3DXVECTOR3* pWorldUp, D3DXVECTOR3* pViewpointDif, float fDistanceScale, int &id, bool bForce) $/;"	f	class:CImpostorAtlas
CheckToggleState	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::CheckToggleState()$/;"	f	class:CDXUTIMEEditBox
ClampId	.\ImpostorAtlas.h	/^    int ClampId(int id) { assert(id >= 0); if(id >= m_nMaxImpostors) return id - m_nMaxImpostors; return id; }$/;"	f	class:CImpostorAtlas
CleanUp	.\Button.cpp	/^void CButton::CleanUp() { $/;"	f	class:CButton
CleanUp	.\Menu.cpp	/^void CMenu::CleanUp() {$/;"	f	class:CMenu
CleanUpCopyHeirarchy	.\ModelInstance.cpp	/^VOID CModelInstance::CleanUpCopyHeirarchy(LPD3DXFRAME pFrame, bool bCopyMeshContainer\/*true*\/)$/;"	f	class:CModelInstance
CleanupApp	.\GPUTerrainProject.cpp	/^void CleanupApp() $/;"	f
Clear	.\Common\DXUTgui.cpp	/^void CUniBuffer::Clear()$/;"	f	class:CUniBuffer
Clear	.\ConsoleLine.h	/^	void Clear() { m_strText.clear(); }$/;"	f	class:CConsoleLine
ClearAdapterInfoList	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::ClearAdapterInfoList()$/;"	f	class:CD3DEnumeration
ClearAtlasFlags	.\CloudSky.cpp	/^VOID CCloudSky::ClearAtlasFlags()$/;"	f	class:CCloudSky
ClearCharges	.\GameEngine.h	/^	VOID ClearCharges(SPlayer* pplayer) { 	memset(&pplayer->bCharge, 0, sizeof(pplayer->bCharge));	}$/;"	f	class:CGameEngine
ClearComboBox	.\Common\DXUTgui.cpp	/^void CDXUTDialog::ClearComboBox( int ID )$/;"	f	class:CDXUTDialog
ClearControls	.\GameSettings.cpp	/^VOID CGameSettings::ClearControls() $/;"	f	class:CGameSettings
ClearDevice	.\IImpostorable.cpp	/^HRESULT IImpostorable::ClearDevice(IDirect3DDevice9 *pd3dDevice)$/;"	f	class:IImpostorable
ClearFlags	.\ImpostorAtlas.h	/^    VOID ClearFlags() $/;"	f	class:CImpostorAtlas
ClearFocus	.\Common\DXUTgui.cpp	/^void CDXUTDialog::ClearFocus()$/;"	f	class:CDXUTDialog
ClearFocus	.\GameGUI.cpp	/^VOID CGameGUI::ClearFocus(){$/;"	f	class:CGameGUI
ClearHostSettings	.\GameSettings.cpp	/^VOID CGameSettings::ClearHostSettings()$/;"	f	class:CGameSettings
ClearInvalidEntries	.\ImpostorAtlas.cpp	/^VOID CImpostorAtlas::ClearInvalidEntries(LPDIRECT3DDEVICE9 pd3dDevice)$/;"	f	class:CImpostorAtlas
ClearList	.\MultiColumnList.cpp	/^void CMultiColumnList::ClearList(bool bClearTitles) {$/;"	f	class:CMultiColumnList
ClearMasterServers	.\NetworkRoot.h	/^    VOID ClearMasterServers()                           { m_vMasterServers.clear(); }$/;"	f	class:CNetworkRoot
ClearRadioButtonGroup	.\Common\DXUTgui.cpp	/^void CDXUTDialog::ClearRadioButtonGroup( UINT nButtonGroup )$/;"	f	class:CDXUTDialog
ClearText	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::ClearText()$/;"	f	class:CDXUTEditBox
Click	.\Button.cpp	/^void CButton::Click() { $/;"	f	class:CButton
ClientRealityUpdateFromServer	.\GameEngine.cpp	/^void __cdecl CGameEngine::ClientRealityUpdateFromServer(RPCParameters *pRpcParms)$/;"	f	class:CGameEngine
ClientUpdateServer	.\GameEngine.cpp	/^VOID CGameEngine::ClientUpdateServer(float fElapsedTime)$/;"	f	class:CGameEngine
Close	.\Common\DXUTsound.cpp	/^HRESULT CWaveFile::Close()$/;"	f	class:CWaveFile
CloudType	.\CloudBatch.h	/^    UINT CloudType;$/;"	m	struct:SCloudInfo
CollisionObjectAABBMesh	.\PhysicsRoot.h	/^class TA::CollisionObjectAABBMesh;$/;"	m	class:TA
Color	.\Common\DXUTmisc.h	/^        D3DCOLOR Color;$/;"	m	struct:CDXUTLineManager::LINE_NODE
Color	.\FXDecl.h	/^    ULONG Color;$/;"	m	struct:BoxVertColor
CombinedTransformationMatrix	.\XModelHeirarchy.h	/^    D3DXMATRIXA16        CombinedTransformationMatrix;$/;"	m	struct:D3DXFRAME_DERIVED
CommandIndexArray	.\GameTables.h	/^    static const NameIndexPair CommandIndexArray[] = $/;"	v
Commands	.\GameTables.h	/^    static enum Commands $/;"	g	namespace:GameTable
ConnectCmdFunc	.\GameRoot.cpp	/^VOID CGameRoot::ConnectCmdFunc(const string& s)$/;"	f	class:CGameRoot
ConnectToServer	.\Client.cpp	/^bool CClient::ConnectToServer(const SServerInfo& serverInfo)$/;"	f	class:CClient
ConnectToServer	.\GameEngine.cpp	/^VOID CGameEngine::ConnectToServer(const SServerInfo &serverInfo)         $/;"	f	class:CGameEngine
ConsoleCmdFunc	.\GameRoot.cpp	/^VOID CGameRoot::ConsoleCmdFunc(const string& s){$/;"	f	class:CGameRoot
ConstrainToBoundary	.\Common\DXUTmisc.cpp	/^void CBaseCamera::ConstrainToBoundary( D3DXVECTOR3* pV )$/;"	f	class:CBaseCamera
Contains	.\Common\DXUTmisc.h	/^    bool    Contains( const TYPE& value ){ return ( -1 != IndexOf( value ) ); }$/;"	f	class:CGrowableArray
ContainsItem	.\Common\DXUTgui.cpp	/^bool CDXUTComboBox::ContainsItem( const WCHAR* strText, UINT iStart )$/;"	f	class:CDXUTComboBox
ContainsPoint	.\Common\DXUTgui.cpp	/^BOOL CDXUTCheckBox::ContainsPoint( POINT pt ) $/;"	f	class:CDXUTCheckBox
ContainsPoint	.\Common\DXUTgui.cpp	/^BOOL CDXUTSlider::ContainsPoint( POINT pt ) $/;"	f	class:CDXUTSlider
ContainsPoint	.\Common\DXUTgui.h	/^    virtual BOOL ContainsPoint( POINT pt ) { return PtInRect( &m_rcBoundingBox, pt ); }$/;"	f	class:CDXUTButton
ContainsPoint	.\Common\DXUTgui.h	/^    virtual BOOL ContainsPoint( POINT pt ) { return PtInRect( &m_rcBoundingBox, pt ); }$/;"	f	class:CDXUTControl
ContainsPoint	.\Common\DXUTgui.h	/^    virtual BOOL ContainsPoint( POINT pt ) { return false; }$/;"	f	class:CDXUTStatic
ConvertKeyToVKeyChar	.\GameTables.cpp	/^UCHAR GameTable::ConvertKeyToVKeyChar(const string& key)$/;"	f	class:GameTable
CopyFrameHeirarchy	.\ModelInstance.cpp	/^LPD3DXFRAME CModelInstance::CopyFrameHeirarchy( LPD3DXFRAME pOtherRoot, bool bCopyMeshContainer \/*true*\/ )$/;"	f	class:CModelInstance
CopyFrameHelper	.\ModelInstance.cpp	/^VOID CModelInstance::CopyFrameHelper( D3DXFRAME_DERIVED** ppReturn, D3DXFRAME_DERIVED* pOther, bool bCopyMeshContainer)$/;"	f	class:CModelInstance
CopyToClipboard	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::CopyToClipboard()$/;"	f	class:CDXUTEditBox
Create	.\Common\DXUT.cpp	/^    void Create()$/;"	f	class:DXUTState
Create	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::Create( LPDIRECT3DDEVICE9 pd3dDevice, ID3DXMesh* pInMesh, $/;"	f	class:CDXUTMesh
Create	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::Create( LPDIRECT3DDEVICE9 pd3dDevice, LPCWSTR strFilename )$/;"	f	class:CDXUTMesh
Create	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::Create( LPDIRECT3DDEVICE9 pd3dDevice,$/;"	f	class:CDXUTMesh
Create	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMeshFile::Create( LPDIRECT3DDEVICE9 pd3dDevice, LPCWSTR strFilename )$/;"	f	class:CDXUTMeshFile
Create	.\Common\DXUTsound.cpp	/^HRESULT CSoundManager::Create( CSound** ppSound,$/;"	f	class:CSoundManager
CreateBasin	.\QuadTree.cpp	/^VOID CQuadTree::CreateBasin(VOID)$/;"	f	class:CQuadTree
CreateCharacter	.\World.cpp	/^int CWorld::CreateCharacter(UINT geomID)$/;"	f	class:CWorld
CreateCharacterGeoms	.\World.cpp	/^UINT CWorld::CreateCharacterGeoms( LPDIRECT3DDEVICE9 pd3dDevice, LPCSTR charFN ) $/;"	f	class:CWorld
CreateControls	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::CreateControls()$/;"	f	class:CD3DSettingsDlg
CreateCubeTextureFromFile	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateCubeTextureFromFile( LPDIRECT3DDEVICE9 pDevice, LPCTSTR pSrcFile, LPDIRECT3DCUBETEXTURE9 *ppCubeTexture )$/;"	f	class:CDXUTResourceCache
CreateCubeTextureFromFileEx	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateCubeTextureFromFileEx( LPDIRECT3DDEVICE9 pDevice, LPCTSTR pSrcFile, UINT Size, UINT MipLevels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, DWORD Filter, DWORD MipFilter, D3DCOLOR ColorKey, D3DXIMAGE_INFO *pSrcInfo, PALETTEENTRY *pPalette, LPDIRECT3DCUBETEXTURE9 *ppCubeTexture )$/;"	f	class:CDXUTResourceCache
CreateCubeTextureFromResource	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateCubeTextureFromResource( LPDIRECT3DDEVICE9 pDevice, HMODULE hSrcModule, LPCTSTR pSrcResource, LPDIRECT3DCUBETEXTURE9 *ppCubeTexture )$/;"	f	class:CDXUTResourceCache
CreateCubeTextureFromResourceEx	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateCubeTextureFromResourceEx( LPDIRECT3DDEVICE9 pDevice, HMODULE hSrcModule, LPCTSTR pSrcResource, UINT Size, UINT MipLevels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, DWORD Filter, DWORD MipFilter, D3DCOLOR ColorKey, D3DXIMAGE_INFO *pSrcInfo, PALETTEENTRY *pPalette, LPDIRECT3DCUBETEXTURE9 *ppCubeTexture )$/;"	f	class:CDXUTResourceCache
CreateEffectFromFile	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateEffectFromFile( LPDIRECT3DDEVICE9 pDevice, LPCTSTR pSrcFile, const D3DXMACRO *pDefines, LPD3DXINCLUDE pInclude, DWORD Flags, LPD3DXEFFECTPOOL pPool, LPD3DXEFFECT *ppEffect, LPD3DXBUFFER *ppCompilationErrors )$/;"	f	class:CDXUTResourceCache
CreateEffectFromResource	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateEffectFromResource( LPDIRECT3DDEVICE9 pDevice, HMODULE hSrcModule, LPCTSTR pSrcResource, const D3DXMACRO *pDefines, LPD3DXINCLUDE pInclude, DWORD Flags, LPD3DXEFFECTPOOL pPool, LPD3DXEFFECT *ppEffect, LPD3DXBUFFER *ppCompilationErrors )$/;"	f	class:CDXUTResourceCache
CreateFont	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialogResourceManager::CreateFont( UINT iFont )$/;"	f	class:CDXUTDialogResourceManager
CreateFont	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateFont( LPDIRECT3DDEVICE9 pDevice, UINT Height, UINT Width, UINT Weight, UINT MipLevels, BOOL Italic, DWORD CharSet, DWORD OutputPrecision, DWORD Quality, DWORD PitchAndFamily, LPCTSTR pFacename, LPD3DXFONT *ppFont )$/;"	f	class:CDXUTResourceCache
CreateFontIndirect	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateFontIndirect( LPDIRECT3DDEVICE9 pDevice, CONST D3DXFONT_DESC *pDesc, LPD3DXFONT *ppFont )$/;"	f	class:CDXUTResourceCache
CreateFrame	.\XModelHeirarchy.cpp	/^HRESULT SXHeirarchy::CreateFrame ( LPCSTR Name, LPD3DXFRAME *ppNewFrame )$/;"	f	class:SXHeirarchy
CreateFromMemory	.\Common\DXUTsound.cpp	/^HRESULT CSoundManager::CreateFromMemory( CSound** ppSound,$/;"	f	class:CSoundManager
CreateFromResource	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMeshFile::CreateFromResource( LPDIRECT3DDEVICE9 pd3dDevice, LPCWSTR strResource, LPCWSTR strType )$/;"	f	class:CDXUTMeshFile
CreateGrassCluster	.\Foliage.cpp	/^VOID CFoliage::CreateGrassCluster(IDirect3DDevice9* pd3dDevice)$/;"	f	class:CFoliage
CreateMaterials	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::CreateMaterials( LPCWSTR strPath, IDirect3DDevice9 *pd3dDevice, D3DXMATERIAL* d3dxMtrls, DWORD dwNumMaterials )$/;"	f	class:CDXUTMesh
CreateMeshContainer	.\XModelHeirarchy.cpp	/^HRESULT SXHeirarchy::CreateMeshContainer ($/;"	f	class:SXHeirarchy
CreatePhysicsWorld	.\GameEngine.cpp	/^VOID CGameEngine::CreatePhysicsWorld(CWorld* pWorld)$/;"	f	class:CGameEngine
CreateSkirt	.\MipmapTerrain.cpp	/^void CMipmapTerrain::CreateSkirt(IDirect3DIndexBuffer9* &IB, int res, IDirect3DDevice9 * pd3dDevice)$/;"	f	class:CMipmapTerrain
CreateSphere	.\Sky.cpp	/^HRESULT CSky::CreateSphere(IDirect3DDevice9* pd3dDevice, int nRings, int nSegments)$/;"	f	class:CSky
CreateSphere	.\Sphere.cpp	/^HRESULT CSphere::CreateSphere(IDirect3DDevice9* pd3dDevice, $/;"	f	class:CSphere
CreateSphereWithTangents	.\Sphere.cpp	/^HRESULT CSphere::CreateSphereWithTangents(IDirect3DDevice9* pd3dDevice, $/;"	f	class:CSphere
CreateSprite	.\PolySprite.cpp	/^VOID CPolySprite::CreateSprite(PolySpriteVertex *pvb, $/;"	f	class:CPolySprite
CreateStaticCollisionObject	.\PhysicsRoot.cpp	/^TA::CollisionObjectAABBMesh* CPhysicsRoot::CreateStaticCollisionObject( vector<D3DXVECTOR3> &vVerts,$/;"	f	class:CPhysicsRoot
CreateStaticGeomsEntities	.\World.cpp	/^HRESULT CWorld::CreateStaticGeomsEntities( LPDIRECT3DDEVICE9 pd3dDevice )$/;"	f	class:CWorld
CreateStreaming	.\Common\DXUTsound.cpp	/^HRESULT CSoundManager::CreateStreaming( CStreamingSound** ppStreamingSound,$/;"	f	class:CSoundManager
CreateSymbolRect	.\NumberToSprite.cpp	/^RECT CNumberToSprite::CreateSymbolRect(char c, int width)$/;"	f	class:CNumberToSprite
CreateTexture	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialogResourceManager::CreateTexture( UINT iTexture )$/;"	f	class:CDXUTDialogResourceManager
CreateTextureFromFile	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateTextureFromFile( LPDIRECT3DDEVICE9 pDevice, LPCTSTR pSrcFile, LPDIRECT3DTEXTURE9 *ppTexture )$/;"	f	class:CDXUTResourceCache
CreateTextureFromFileEx	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateTextureFromFileEx( LPDIRECT3DDEVICE9 pDevice, LPCTSTR pSrcFile, UINT Width, UINT Height, UINT MipLevels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, DWORD Filter, DWORD MipFilter, D3DCOLOR ColorKey, D3DXIMAGE_INFO *pSrcInfo, PALETTEENTRY *pPalette, LPDIRECT3DTEXTURE9 *ppTexture )$/;"	f	class:CDXUTResourceCache
CreateTextureFromResource	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateTextureFromResource( LPDIRECT3DDEVICE9 pDevice, HMODULE hSrcModule, LPCTSTR pSrcResource, LPDIRECT3DTEXTURE9 *ppTexture )$/;"	f	class:CDXUTResourceCache
CreateTextureFromResourceEx	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateTextureFromResourceEx( LPDIRECT3DDEVICE9 pDevice, HMODULE hSrcModule, LPCTSTR pSrcResource, UINT Width, UINT Height, UINT MipLevels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, DWORD Filter, DWORD MipFilter, D3DCOLOR ColorKey, D3DXIMAGE_INFO *pSrcInfo, PALETTEENTRY *pPalette, LPDIRECT3DTEXTURE9 *ppTexture )$/;"	f	class:CDXUTResourceCache
CreateTriangleStrip	.\MipmapTerrain.cpp	/^bool CMipmapTerrain::CreateTriangleStrip(IDirect3DIndexBuffer9* IB, int sideLength, int resolution, int sizeBuffer)$/;"	f	class:CMipmapTerrain
CreateVolumeTextureFromFile	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateVolumeTextureFromFile( LPDIRECT3DDEVICE9 pDevice, LPCTSTR pSrcFile, LPDIRECT3DVOLUMETEXTURE9 *ppVolumeTexture )$/;"	f	class:CDXUTResourceCache
CreateVolumeTextureFromFileEx	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateVolumeTextureFromFileEx( LPDIRECT3DDEVICE9 pDevice, LPCTSTR pSrcFile, UINT Width, UINT Height, UINT Depth, UINT MipLevels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, DWORD Filter, DWORD MipFilter, D3DCOLOR ColorKey, D3DXIMAGE_INFO *pSrcInfo, PALETTEENTRY *pPalette, LPDIRECT3DVOLUMETEXTURE9 *ppTexture )$/;"	f	class:CDXUTResourceCache
CreateVolumeTextureFromResource	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateVolumeTextureFromResource( LPDIRECT3DDEVICE9 pDevice, HMODULE hSrcModule, LPCTSTR pSrcResource, LPDIRECT3DVOLUMETEXTURE9 *ppVolumeTexture )$/;"	f	class:CDXUTResourceCache
CreateVolumeTextureFromResourceEx	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::CreateVolumeTextureFromResourceEx( LPDIRECT3DDEVICE9 pDevice, HMODULE hSrcModule, LPCTSTR pSrcResource, UINT Width, UINT Height, UINT Depth, UINT MipLevels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, DWORD Filter, DWORD MipFilter, D3DCOLOR ColorKey, D3DXIMAGE_INFO *pSrcInfo, PALETTEENTRY *pPalette, LPDIRECT3DVOLUMETEXTURE9 *ppVolumeTexture )$/;"	f	class:CDXUTResourceCache
CreateWorldMatrix	.\Foliage.cpp	/^VOID CFoliage::CreateWorldMatrix(D3DXMATRIX* mWorld, const D3DXVECTOR3& pos, const D3DXVECTOR3& norm, float scale)$/;"	f	class:CFoliage
CullCloud	.\QuadTree.cpp	/^VOID CQuadTree::CullCloud(CCloud *pc)$/;"	f	class:CQuadTree
CullEntity	.\World.cpp	/^bool CWorld::CullEntity(SMeshEntity* pent)$/;"	f	class:CWorld
CullTerrainTile	.\QuadTree.cpp	/^bool CQuadTree::CullTerrainTile(QTNode *n) {        $/;"	f	class:CQuadTree
CullVisibleNodes	.\QuadTree.cpp	/^VOID CQuadTree::CullVisibleNodes() {$/;"	f	class:CQuadTree
Current	.\Common\DXUTgui.h	/^    D3DXCOLOR Current;$/;"	m	struct:DXUTBlendColor
CycleCharactersAnimation	.\World.cpp	/^VOID CWorld::CycleCharactersAnimation() $/;"	f	class:CWorld
CyclePlayerAnimation	.\GameRoot.h	/^	VOID CyclePlayerAnimation(const string& s) { m_pWorld->CycleCharactersAnimation(); }    $/;"	f	class:CGameRoot
D3DUtil_CameraKeys	.\Common\DXUTmisc.h	/^enum D3DUtil_CameraKeys$/;"	g
D3DXFRAME_DERIVED	.\XModelHeirarchy.h	/^struct D3DXFRAME_DERIVED: public D3DXFRAME$/;"	s
D3DXMESHCONTAINER_DERIVED	.\XModelHeirarchy.h	/^struct D3DXMESHCONTAINER_DERIVED: public D3DXMESHCONTAINER$/;"	s
D3D_DEBUG_INFO	.\Common\dxstdafx.h	94;"	d
DASH_SETTING	.\GameTables.h	/^		DASH_SETTING,$/;"	e	enum:GameTable::Settings
DEFAULTHEIGHT	.\Button.h	7;"	d
DEFAULTWIDTH	.\Button.h	8;"	d
DEFAULT_BROADCAST_INTERVAL	.\Server.cpp	5;"	d	file:
DEFAULT_GAME_SETTINGS	.\GameSettings.cpp	5;"	d	file:
DEFAULT_HOST_SETTINGS	.\GameSettings.cpp	8;"	d	file:
DEFAULT_LOG_FILE	.\GameDefine.h	8;"	d
DEFAULT_SPEED	.\ScrollingWindow.h	8;"	d
DEFAULT_TILESIZE	.\MipmapTerrain.h	/^    static const UINT DEFAULT_TILESIZE      =       65;$/;"	m	class:CMipmapTerrain
DEFAULT_UPDATE_INTERVAL	.\Client.cpp	5;"	d	file:
DESCEND_ACTION	.\GameTables.h	/^        DESCEND_ACTION,$/;"	e	enum:GameTable::Actions
DIVE	.\GameEngine.h	/^		enum { FIREBALL = 0, LIGHTNING, SWEEP, SMASH, DIVE, NUM_SLES }; $/;"	e	enum:CGameEngine::SShortLifeEntity::<anonymous>
DODGE_SPEED_SETTING	.\GameTables.h	/^        DODGE_SPEED_SETTING,$/;"	e	enum:GameTable::Settings
DRAWINSIDE	.\Bubbles.h	9;"	d
DRAWOUTSIDE	.\Bubbles.h	10;"	d
DSFormat	.\Common\DXUTenum.h	/^    D3DFORMAT DSFormat;$/;"	m	struct:CD3DEnumDSMSConflict
DSMSConflictList	.\Common\DXUTenum.h	/^    CGrowableArray<CD3DEnumDSMSConflict> DSMSConflictList; \/\/ List of CD3DEnumDSMSConflict$/;"	m	struct:CD3DEnumDeviceSettingsCombo
DXSDK_STDAFX_H	.\Common\dxstdafx.h	10;"	d
DXUTAllowShortcutKeys	.\Common\DXUT.cpp	/^void DXUTAllowShortcutKeys( bool bAllowKeys )$/;"	f
DXUTAlphaChannelBits	.\Common\DXUTenum.cpp	/^UINT DXUTAlphaChannelBits( D3DFORMAT fmt )$/;"	f
DXUTBlendColor	.\Common\DXUTgui.h	/^struct DXUTBlendColor$/;"	s
DXUTBuildOptimalDeviceSettings	.\Common\DXUT.cpp	/^void DXUTBuildOptimalDeviceSettings( DXUTDeviceSettings* pOptimalDeviceSettings, $/;"	f
DXUTBuildValidDeviceSettings	.\Common\DXUT.cpp	/^void DXUTBuildValidDeviceSettings( DXUTDeviceSettings* pValidDeviceSettings, $/;"	f
DXUTCACHE_LOCATION_FILE	.\Common\DXUTmisc.h	/^enum DXUTCACHE_SOURCELOCATION { DXUTCACHE_LOCATION_FILE, DXUTCACHE_LOCATION_RESOURCE };$/;"	e	enum:DXUTCACHE_SOURCELOCATION
DXUTCACHE_LOCATION_RESOURCE	.\Common\DXUTmisc.h	/^enum DXUTCACHE_SOURCELOCATION { DXUTCACHE_LOCATION_FILE, DXUTCACHE_LOCATION_RESOURCE };$/;"	e	enum:DXUTCACHE_SOURCELOCATION
DXUTCACHE_SOURCELOCATION	.\Common\DXUTmisc.h	/^enum DXUTCACHE_SOURCELOCATION { DXUTCACHE_LOCATION_FILE, DXUTCACHE_LOCATION_RESOURCE };$/;"	g
DXUTCache_Effect	.\Common\DXUTmisc.h	/^struct DXUTCache_Effect$/;"	s
DXUTCache_Font	.\Common\DXUTmisc.h	/^struct DXUTCache_Font : public D3DXFONT_DESC$/;"	s
DXUTCache_Texture	.\Common\DXUTmisc.h	/^struct DXUTCache_Texture$/;"	s
DXUTChangeDevice	.\Common\DXUT.cpp	/^HRESULT DXUTChangeDevice( DXUTDeviceSettings* pNewDeviceSettings, IDirect3DDevice9* pd3dDeviceFromApp, bool bForceRecreate, bool bClipWindowToSingleAdapter )$/;"	f
DXUTCheckForWindowChangingMonitors	.\Common\DXUT.cpp	/^void DXUTCheckForWindowChangingMonitors()$/;"	f
DXUTCheckForWindowSizeChange	.\Common\DXUT.cpp	/^void DXUTCheckForWindowSizeChange()$/;"	f
DXUTCleanup3DEnvironment	.\Common\DXUT.cpp	/^void DXUTCleanup3DEnvironment( bool bReleaseSettings )$/;"	f
DXUTColorChannelBits	.\Common\DXUTenum.cpp	/^UINT DXUTColorChannelBits( D3DFORMAT fmt )$/;"	f
DXUTComboBoxItem	.\Common\DXUTgui.h	/^struct DXUTComboBoxItem$/;"	s
DXUTCreate3DEnvironment	.\Common\DXUT.cpp	/^HRESULT DXUTCreate3DEnvironment( IDirect3DDevice9* pd3dDeviceFromApp )$/;"	f
DXUTCreateArrowMeshFromInternalArray	.\Common\DXUTRes.cpp	/^HRESULT DXUTCreateArrowMeshFromInternalArray( LPDIRECT3DDEVICE9 pd3dDevice, ID3DXMesh** ppMesh )$/;"	f
DXUTCreateDevice	.\Common\DXUT.cpp	/^HRESULT DXUTCreateDevice( UINT AdapterOrdinal, bool bWindowed, $/;"	f
DXUTCreateDeviceFromSettings	.\Common\DXUT.cpp	/^HRESULT DXUTCreateDeviceFromSettings( DXUTDeviceSettings* pDeviceSettings, bool bPreserveInput, bool bClipWindowToSingleAdapter )$/;"	f
DXUTCreateGUITextureFromInternalArray	.\Common\DXUTRes.cpp	/^HRESULT DXUTCreateGUITextureFromInternalArray( LPDIRECT3DDEVICE9 pd3dDevice, IDirect3DTexture9** ppTexture, D3DXIMAGE_INFO* pInfo )$/;"	f
DXUTCreateRefDevice	.\Common\DXUTmisc.cpp	/^IDirect3DDevice9* DXUTCreateRefDevice( HWND hWnd, bool bNullRef )$/;"	f
DXUTCreateWindow	.\Common\DXUT.cpp	/^HRESULT DXUTCreateWindow( const WCHAR* strWindowTitle, HINSTANCE hInstance, $/;"	f
DXUTD3DDeviceTypeToString	.\Common\DXUTSettingsDlg.cpp	/^WCHAR* DXUTD3DDeviceTypeToString(D3DDEVTYPE devType)$/;"	f
DXUTD3DFormatToString	.\Common\DXUTmisc.cpp	/^LPCWSTR DXUTD3DFormatToString( D3DFORMAT format, bool bWithPrefix )$/;"	f
DXUTDepthBits	.\Common\DXUTenum.cpp	/^UINT DXUTDepthBits( D3DFORMAT fmt )$/;"	f
DXUTDeviceSettings	.\Common\DXUT.h	/^struct DXUTDeviceSettings$/;"	s
DXUTDisplayErrorMessage	.\Common\DXUT.cpp	/^void DXUTDisplayErrorMessage( HRESULT hr )$/;"	f
DXUTDisplaySwitchingToREFWarning	.\Common\DXUTmisc.cpp	/^void DXUTDisplaySwitchingToREFWarning()$/;"	f
DXUTDoesDeviceComboMatchPreserveOptions	.\Common\DXUT.cpp	/^bool DXUTDoesDeviceComboMatchPreserveOptions( CD3DEnumDeviceSettingsCombo* pDeviceSettingsCombo, $/;"	f
DXUTERR_CREATINGDEVICE	.\Common\DXUT.h	51;"	d
DXUTERR_CREATINGDEVICEOBJECTS	.\Common\DXUT.h	53;"	d
DXUTERR_INCORRECTVERSION	.\Common\DXUT.h	55;"	d
DXUTERR_MEDIANOTFOUND	.\Common\DXUT.h	49;"	d
DXUTERR_NOCOMPATIBLEDEVICES	.\Common\DXUT.h	48;"	d
DXUTERR_NODIRECT3D	.\Common\DXUT.h	47;"	d
DXUTERR_NONZEROREFCOUNT	.\Common\DXUT.h	50;"	d
DXUTERR_RESETTINGDEVICE	.\Common\DXUT.h	52;"	d
DXUTERR_RESETTINGDEVICEOBJECTS	.\Common\DXUT.h	54;"	d
DXUTElementHolder	.\Common\DXUTgui.h	/^struct DXUTElementHolder$/;"	s
DXUTFindAdapterFormat	.\Common\DXUT.cpp	/^HRESULT DXUTFindAdapterFormat( UINT AdapterOrdinal, D3DDEVTYPE DeviceType, D3DFORMAT BackBufferFormat, $/;"	f
DXUTFindDXSDKMediaFileCch	.\Common\DXUTmisc.cpp	/^HRESULT DXUTFindDXSDKMediaFileCch( WCHAR* strDestPath, int cchDest, LPCWSTR strFilename )$/;"	f
DXUTFindMediaSearchParentDirs	.\Common\DXUTmisc.cpp	/^bool DXUTFindMediaSearchParentDirs( WCHAR* strSearchPath, int cchSearch, WCHAR* strStartAt, WCHAR* strLeafName )$/;"	f
DXUTFindMediaSearchTypicalDirs	.\Common\DXUTmisc.cpp	/^bool DXUTFindMediaSearchTypicalDirs( WCHAR* strSearchPath, int cchSearch, LPCWSTR strLeaf, $/;"	f
DXUTFindValidDeviceSettings	.\Common\DXUT.cpp	/^HRESULT DXUTFindValidDeviceSettings( DXUTDeviceSettings* pOut, DXUTDeviceSettings* pIn, $/;"	f
DXUTFindValidResolution	.\Common\DXUT.cpp	/^HRESULT DXUTFindValidResolution( CD3DEnumDeviceSettingsCombo* pBestDeviceSettingsCombo, $/;"	f
DXUTFontNode	.\Common\DXUTgui.h	/^struct DXUTFontNode$/;"	s
DXUTGetAdapterOrdinalFromMonitor	.\Common\DXUT.cpp	/^HRESULT DXUTGetAdapterOrdinalFromMonitor( HMONITOR hMonitor, UINT* pAdapterOrdinal )$/;"	f
DXUTGetAutomation	.\Common\DXUT.cpp	/^bool DXUTGetAutomation()                            { return GetDXUTState().GetAutomation(); }$/;"	f
DXUTGetBackBufferSurfaceDesc	.\Common\DXUT.cpp	/^const D3DSURFACE_DESC* DXUTGetBackBufferSurfaceDesc() { return GetDXUTState().GetBackBufferSurfaceDesc(); }$/;"	f
DXUTGetCmdParam	.\Common\DXUT.cpp	/^bool DXUTGetCmdParam( WCHAR*& strCmdLine, WCHAR* strFlag )$/;"	f
DXUTGetCubeMapViewMatrix	.\Common\DXUTmisc.cpp	/^D3DXMATRIX DXUTGetCubeMapViewMatrix( DWORD dwFace )$/;"	f
DXUTGetD3DDevice	.\Common\DXUT.cpp	/^IDirect3DDevice9* DXUTGetD3DDevice()                { return GetDXUTState().GetD3DDevice(); }  $/;"	f
DXUTGetD3DObject	.\Common\DXUT.cpp	/^IDirect3D9* DXUTGetD3DObject()                      { return GetDXUTState().GetD3D(); }        $/;"	f
DXUTGetDesktopResolution	.\Common\DXUTmisc.cpp	/^void DXUTGetDesktopResolution( UINT AdapterOrdinal, UINT* pWidth, UINT* pHeight )$/;"	f
DXUTGetDeviceCaps	.\Common\DXUT.cpp	/^const D3DCAPS9* DXUTGetDeviceCaps()                 { return GetDXUTState().GetCaps(); }$/;"	f
DXUTGetDeviceSettings	.\Common\DXUT.cpp	/^DXUTDeviceSettings DXUTGetDeviceSettings()   $/;"	f
DXUTGetDeviceStats	.\Common\DXUT.cpp	/^LPCWSTR DXUTGetDeviceStats()                        { return GetDXUTState().GetDeviceStats(); }$/;"	f
DXUTGetElapsedTime	.\Common\DXUT.cpp	/^float DXUTGetElapsedTime()                          { return GetDXUTState().GetElapsedTime(); }$/;"	f
DXUTGetEnumeration	.\Common\DXUTenum.cpp	/^CD3DEnumeration* DXUTGetEnumeration()$/;"	f
DXUTGetExitCode	.\Common\DXUT.cpp	/^int DXUTGetExitCode()                               { return GetDXUTState().GetExitCode(); }$/;"	f
DXUTGetFPS	.\Common\DXUT.cpp	/^float DXUTGetFPS()                                  { return GetDXUTState().GetFPS(); }$/;"	f
DXUTGetFrameStats	.\Common\DXUT.cpp	/^LPCWSTR DXUTGetFrameStats( bool bShowFPS )                         $/;"	f
DXUTGetFullsceenClientRectAtModeChange	.\Common\DXUT.cpp	/^RECT DXUTGetFullsceenClientRectAtModeChange()       { RECT rc = { 0, 0, GetDXUTState().GetFullScreenBackBufferWidthAtModeChange(), GetDXUTState().GetFullScreenBackBufferHeightAtModeChange() }; return rc; }$/;"	f
DXUTGetGamepadState	.\Common\DXUTmisc.cpp	/^HRESULT DXUTGetGamepadState( DWORD dwPort, DXUT_GAMEPAD* pGamePad, bool bThumbstickDeadZone, bool bSnapThumbstickToCardinals )$/;"	f
DXUTGetGlobalResourceCache	.\Common\DXUTmisc.cpp	/^CDXUTResourceCache& DXUTGetGlobalResourceCache()$/;"	f
DXUTGetGlobalTimer	.\Common\DXUTmisc.cpp	/^CDXUTTimer* DXUTGetGlobalTimer()$/;"	f
DXUTGetHINSTANCE	.\Common\DXUT.cpp	/^HINSTANCE DXUTGetHINSTANCE()                        { return GetDXUTState().GetHInstance(); }$/;"	f
DXUTGetHWND	.\Common\DXUT.cpp	/^HWND DXUTGetHWND()                                  { return DXUTIsWindowed() ? GetDXUTState().GetHWNDDeviceWindowed() : GetDXUTState().GetHWNDDeviceFullScreen(); }$/;"	f
DXUTGetHWNDDeviceFullScreen	.\Common\DXUT.cpp	/^HWND DXUTGetHWNDDeviceFullScreen()                  { return GetDXUTState().GetHWNDDeviceFullScreen(); }$/;"	f
DXUTGetHWNDDeviceWindowed	.\Common\DXUT.cpp	/^HWND DXUTGetHWNDDeviceWindowed()                    { return GetDXUTState().GetHWNDDeviceWindowed(); }$/;"	f
DXUTGetHWNDFocus	.\Common\DXUT.cpp	/^HWND DXUTGetHWNDFocus()                             { return GetDXUTState().GetHWNDFocus(); }$/;"	f
DXUTGetHandleDefaultHotkeys	.\Common\DXUT.cpp	/^bool DXUTGetHandleDefaultHotkeys()                  { return GetDXUTState().GetHandleDefaultHotkeys(); }$/;"	f
DXUTGetMediaSearchPath	.\Common\DXUTmisc.cpp	/^LPCWSTR DXUTGetMediaSearchPath()$/;"	f
DXUTGetMonitorInfo	.\Common\DXUTmisc.cpp	/^BOOL DXUTGetMonitorInfo(HMONITOR hMonitor, LPMONITORINFO lpMonitorInfo)$/;"	f
DXUTGetPresentParameters	.\Common\DXUT.cpp	/^D3DPRESENT_PARAMETERS DXUTGetPresentParameters()    $/;"	f
DXUTGetSettingsDialog	.\Common\DXUTSettingsDlg.cpp	/^CD3DSettingsDlg* DXUTGetSettingsDialog()$/;"	f
DXUTGetShowMsgBoxOnError	.\Common\DXUT.cpp	/^bool DXUTGetShowMsgBoxOnError()                     { return GetDXUTState().GetShowMsgBoxOnError(); }$/;"	f
DXUTGetTime	.\Common\DXUT.cpp	/^double DXUTGetTime()                                { return GetDXUTState().GetTime(); }$/;"	f
DXUTGetWindowClientRect	.\Common\DXUT.cpp	/^RECT DXUTGetWindowClientRect()                      { RECT rc; GetClientRect( DXUTGetHWND(), &rc ); return rc; }$/;"	f
DXUTGetWindowClientRectAtModeChange	.\Common\DXUT.cpp	/^RECT DXUTGetWindowClientRectAtModeChange()          { RECT rc = { 0, 0, GetDXUTState().GetWindowBackBufferWidthAtModeChange(), GetDXUTState().GetWindowBackBufferHeightAtModeChange() }; return rc; }$/;"	f
DXUTGetWindowTitle	.\Common\DXUT.cpp	/^LPCWSTR DXUTGetWindowTitle()                        { return GetDXUTState().GetWindowTitle(); }$/;"	f
DXUTHandleTimers	.\Common\DXUT.cpp	/^void DXUTHandleTimers()$/;"	f
DXUTInit	.\Common\DXUT.cpp	/^HRESULT DXUTInit( bool bParseCommandLine, bool bHandleDefaultHotkeys, bool bShowMsgBoxOnError, bool bHandleAltEnter )$/;"	f
DXUTIsActive	.\Common\DXUT.cpp	/^bool DXUTIsActive()									{ return GetDXUTState().GetActive(); }$/;"	f
DXUTIsKeyDown	.\Common\DXUT.cpp	/^bool DXUTIsKeyDown( BYTE vKey )$/;"	f
DXUTIsMouseButtonDown	.\Common\DXUT.cpp	/^bool DXUTIsMouseButtonDown( BYTE vButton )          $/;"	f
DXUTIsNextArg	.\Common\DXUT.cpp	/^bool DXUTIsNextArg( WCHAR*& strCmdLine, WCHAR* strArg )$/;"	f
DXUTIsRenderingPaused	.\Common\DXUT.cpp	/^bool DXUTIsRenderingPaused()                        { return GetDXUTState().GetPauseRenderingCount() > 0; }$/;"	f
DXUTIsTimePaused	.\Common\DXUT.cpp	/^bool DXUTIsTimePaused()                             { return GetDXUTState().GetPauseTimeCount() > 0; }$/;"	f
DXUTIsWindowed	.\Common\DXUT.cpp	/^bool DXUTIsWindowed()                               $/;"	f
DXUTKillTimer	.\Common\DXUT.cpp	/^HRESULT DXUTKillTimer( UINT nIDEvent ) $/;"	f
DXUTListBoxItem	.\Common\DXUTgui.h	/^struct DXUTListBoxItem$/;"	s
DXUTLock	.\Common\DXUT.cpp	/^    inline DXUTLock()  { if( g_bThreadSafe ) EnterCriticalSection( &g_cs ); }$/;"	f	class:DXUTLock
DXUTLock	.\Common\DXUT.cpp	/^class DXUTLock$/;"	c	file:
DXUTMESH_H	.\Common\DXUTMesh.h	10;"	d
DXUTMT_CLOSEST_TO_INPUT	.\Common\DXUT.h	/^    DXUTMT_CLOSEST_TO_INPUT   \/\/ Use the closest valid value to the input $/;"	e	enum:DXUT_MATCH_TYPE
DXUTMT_IGNORE_INPUT	.\Common\DXUT.h	/^    DXUTMT_IGNORE_INPUT = 0,  \/\/ Use the closest valid value to a default $/;"	e	enum:DXUT_MATCH_TYPE
DXUTMT_PRESERVE_INPUT	.\Common\DXUT.h	/^    DXUTMT_PRESERVE_INPUT,    \/\/ Use input without change, but may cause no valid device to be found$/;"	e	enum:DXUT_MATCH_TYPE
DXUTMainLoop	.\Common\DXUT.cpp	/^HRESULT DXUTMainLoop( HACCEL hAccel )$/;"	f
DXUTMapButtonToArrayIndex	.\Common\DXUT.cpp	/^int DXUTMapButtonToArrayIndex( BYTE vButton )$/;"	f
DXUTMatchOptions	.\Common\DXUT.h	/^struct DXUTMatchOptions$/;"	s
DXUTMediaSearchPath	.\Common\DXUTmisc.cpp	/^WCHAR* DXUTMediaSearchPath()$/;"	f
DXUTMonitorFromWindow	.\Common\DXUTmisc.cpp	/^HMONITOR DXUTMonitorFromWindow(HWND hWnd, DWORD dwFlags)$/;"	f
DXUTMultisampleTypeToString	.\Common\DXUTSettingsDlg.cpp	/^WCHAR* DXUTMultisampleTypeToString(D3DMULTISAMPLE_TYPE MultiSampleType)$/;"	f
DXUTOutputDebugString	.\Common\DXUTmisc.h	654;"	d
DXUTOutputDebugString	.\Common\DXUTmisc.h	656;"	d
DXUTOutputDebugStringA	.\Common\DXUTmisc.cpp	/^VOID DXUTOutputDebugStringA( LPCSTR strMsg, ... )$/;"	f
DXUTOutputDebugStringW	.\Common\DXUTmisc.cpp	/^VOID DXUTOutputDebugStringW( LPCWSTR strMsg, ... )$/;"	f
DXUTParseCommandLine	.\Common\DXUT.cpp	/^void DXUTParseCommandLine()$/;"	f
DXUTPause	.\Common\DXUT.cpp	/^void DXUTPause( bool bPauseTime, bool bPauseRendering )$/;"	f
DXUTPrepareEnumerationObject	.\Common\DXUT.cpp	/^CD3DEnumeration* DXUTPrepareEnumerationObject( bool bEnumerate )$/;"	f
DXUTPresentIntervalToString	.\Common\DXUTSettingsDlg.cpp	/^WCHAR* DXUTPresentIntervalToString( UINT pi )$/;"	f
DXUTRankDeviceCombo	.\Common\DXUT.cpp	/^float DXUTRankDeviceCombo( CD3DEnumDeviceSettingsCombo* pDeviceSettingsCombo, $/;"	f
DXUTReLaunchMediaCenter	.\Common\DXUTmisc.cpp	/^bool DXUTReLaunchMediaCenter()$/;"	f
DXUTRender3DEnvironment	.\Common\DXUT.cpp	/^void DXUTRender3DEnvironment()$/;"	f
DXUTReset3DEnvironment	.\Common\DXUT.cpp	/^HRESULT DXUTReset3DEnvironment()$/;"	f
DXUTResetFrameworkState	.\Common\DXUT.cpp	/^void DXUTResetFrameworkState()$/;"	f
DXUTSETTINGSDLG_ADAPTER	.\Common\DXUTSettingsDlg.h	17;"	d
DXUTSETTINGSDLG_ADAPTER_FORMAT	.\Common\DXUTSettingsDlg.h	21;"	d
DXUTSETTINGSDLG_ADAPTER_FORMAT_LABEL	.\Common\DXUTSettingsDlg.h	22;"	d
DXUTSETTINGSDLG_BACK_BUFFER_FORMAT	.\Common\DXUTSettingsDlg.h	27;"	d
DXUTSETTINGSDLG_CANCEL	.\Common\DXUTSettingsDlg.h	16;"	d
DXUTSETTINGSDLG_DEPTH_STENCIL	.\Common\DXUTSettingsDlg.h	28;"	d
DXUTSETTINGSDLG_DEVICECLIP	.\Common\DXUTSettingsDlg.h	33;"	d
DXUTSETTINGSDLG_DEVICE_TYPE	.\Common\DXUTSettingsDlg.h	18;"	d
DXUTSETTINGSDLG_FULLSCREEN	.\Common\DXUTSettingsDlg.h	20;"	d
DXUTSETTINGSDLG_MULTISAMPLE_QUALITY	.\Common\DXUTSettingsDlg.h	30;"	d
DXUTSETTINGSDLG_MULTISAMPLE_TYPE	.\Common\DXUTSettingsDlg.h	29;"	d
DXUTSETTINGSDLG_OK	.\Common\DXUTSettingsDlg.h	15;"	d
DXUTSETTINGSDLG_PRESENT_INTERVAL	.\Common\DXUTSettingsDlg.h	32;"	d
DXUTSETTINGSDLG_REFRESH_RATE	.\Common\DXUTSettingsDlg.h	25;"	d
DXUTSETTINGSDLG_REFRESH_RATE_LABEL	.\Common\DXUTSettingsDlg.h	26;"	d
DXUTSETTINGSDLG_RESOLUTION	.\Common\DXUTSettingsDlg.h	23;"	d
DXUTSETTINGSDLG_RESOLUTION_LABEL	.\Common\DXUTSettingsDlg.h	24;"	d
DXUTSETTINGSDLG_RESOLUTION_SHOW_ALL	.\Common\DXUTSettingsDlg.h	34;"	d
DXUTSETTINGSDLG_STATIC	.\Common\DXUTSettingsDlg.h	14;"	d
DXUTSETTINGSDLG_VERTEX_PROCESSING	.\Common\DXUTSettingsDlg.h	31;"	d
DXUTSETTINGSDLG_WINDOWED	.\Common\DXUTSettingsDlg.h	19;"	d
DXUTSETTINGSDLG_WINDOWED_GROUP	.\Common\DXUTSettingsDlg.h	35;"	d
DXUTSOUND_H	.\Common\DXUTsound.h	7;"	d
DXUTSetCallbackDeviceChanging	.\Common\DXUT.cpp	/^void DXUTSetCallbackDeviceChanging( LPDXUTCALLBACKMODIFYDEVICESETTINGS pCallbackModifyDeviceSettings, void* pUserContext ) { GetDXUTState().SetModifyDeviceSettingsFunc( pCallbackModifyDeviceSettings );  GetDXUTState().SetModifyDeviceSettingsFuncUserContext( pUserContext ); }$/;"	f
DXUTSetCallbackDeviceCreated	.\Common\DXUT.cpp	/^void DXUTSetCallbackDeviceCreated( LPDXUTCALLBACKDEVICECREATED pCallbackDeviceCreated, void* pUserContext ) { GetDXUTState().SetDeviceCreatedFunc( pCallbackDeviceCreated ); GetDXUTState().SetDeviceCreatedFuncUserContext( pUserContext ); }$/;"	f
DXUTSetCallbackDeviceDestroyed	.\Common\DXUT.cpp	/^void DXUTSetCallbackDeviceDestroyed( LPDXUTCALLBACKDEVICEDESTROYED pCallbackDeviceDestroyed, void* pUserContext ) { GetDXUTState().SetDeviceDestroyedFunc( pCallbackDeviceDestroyed );  GetDXUTState().SetDeviceDestroyedFuncUserContext( pUserContext ); }$/;"	f
DXUTSetCallbackDeviceLost	.\Common\DXUT.cpp	/^void DXUTSetCallbackDeviceLost( LPDXUTCALLBACKDEVICELOST pCallbackDeviceLost, void* pUserContext )          { GetDXUTState().SetDeviceLostFunc( pCallbackDeviceLost );  GetDXUTState().SetDeviceLostFuncUserContext( pUserContext ); }$/;"	f
DXUTSetCallbackDeviceReset	.\Common\DXUT.cpp	/^void DXUTSetCallbackDeviceReset( LPDXUTCALLBACKDEVICERESET pCallbackDeviceReset, void* pUserContext )       { GetDXUTState().SetDeviceResetFunc( pCallbackDeviceReset );  GetDXUTState().SetDeviceResetFuncUserContext( pUserContext ); }$/;"	f
DXUTSetCallbackFrameMove	.\Common\DXUT.cpp	/^void DXUTSetCallbackFrameMove( LPDXUTCALLBACKFRAMEMOVE pCallbackFrameMove, void* pUserContext ) { GetDXUTState().SetFrameMoveFunc( pCallbackFrameMove );  GetDXUTState().SetFrameMoveFuncUserContext( pUserContext ); }$/;"	f
DXUTSetCallbackFrameRender	.\Common\DXUT.cpp	/^void DXUTSetCallbackFrameRender( LPDXUTCALLBACKFRAMERENDER pCallbackFrameRender, void* pUserContext )       { GetDXUTState().SetFrameRenderFunc( pCallbackFrameRender );  GetDXUTState().SetFrameRenderFuncUserContext( pUserContext ); }$/;"	f
DXUTSetCallbackKeyboard	.\Common\DXUT.cpp	/^void DXUTSetCallbackKeyboard( LPDXUTCALLBACKKEYBOARD pCallbackKeyboard, void* pUserContext )                { GetDXUTState().SetKeyboardFunc( pCallbackKeyboard );  GetDXUTState().SetKeyboardFuncUserContext( pUserContext ); }$/;"	f
DXUTSetCallbackMouse	.\Common\DXUT.cpp	/^void DXUTSetCallbackMouse( LPDXUTCALLBACKMOUSE pCallbackMouse, bool bIncludeMouseMove, void* pUserContext ) { GetDXUTState().SetMouseFunc( pCallbackMouse ); GetDXUTState().SetNotifyOnMouseMove( bIncludeMouseMove );  GetDXUTState().SetMouseFuncUserContext( pUserContext ); }$/;"	f
DXUTSetCallbackMsgProc	.\Common\DXUT.cpp	/^void DXUTSetCallbackMsgProc( LPDXUTCALLBACKMSGPROC pCallbackMsgProc, void* pUserContext )                   { GetDXUTState().SetWindowMsgFunc( pCallbackMsgProc );  GetDXUTState().SetWindowMsgFuncUserContext( pUserContext ); }$/;"	f
DXUTSetConstantFrameTime	.\Common\DXUT.cpp	/^void DXUTSetConstantFrameTime( bool bEnabled, float fTimePerFrame ) $/;"	f
DXUTSetCursorSettings	.\Common\DXUT.cpp	/^void DXUTSetCursorSettings( bool bShowCursorWhenFullScreen, bool bClipCursorWhenFullScreen ) $/;"	f
DXUTSetDevice	.\Common\DXUT.cpp	/^HRESULT DXUTSetDevice( IDirect3DDevice9* pd3dDevice )$/;"	f
DXUTSetDeviceCursor	.\Common\DXUT.cpp	/^HRESULT DXUTSetDeviceCursor( IDirect3DDevice9* pd3dDevice, HCURSOR hCursor, bool bAddWatermark )$/;"	f
DXUTSetMediaSearchPath	.\Common\DXUTmisc.cpp	/^HRESULT DXUTSetMediaSearchPath( LPCWSTR strPath )$/;"	f
DXUTSetMultimonSettings	.\Common\DXUT.cpp	/^void DXUTSetMultimonSettings( bool bAutoChangeAdapter )$/;"	f
DXUTSetShortcutKeySettings	.\Common\DXUT.cpp	/^void DXUTSetShortcutKeySettings( bool bAllowWhenFullscreen, bool bAllowWhenWindowed )$/;"	f
DXUTSetTimer	.\Common\DXUT.cpp	/^HRESULT DXUTSetTimer( LPDXUTCALLBACKTIMER pCallbackTimer, float fTimeoutInSecs, UINT* pnIDEvent, void* pCallbackUserContext ) $/;"	f
DXUTSetWindow	.\Common\DXUT.cpp	/^HRESULT DXUTSetWindow( HWND hWndFocus, HWND hWndDeviceFullScreen, HWND hWndDeviceWindowed, bool bHandleMessages )$/;"	f
DXUTSetWindowSettings	.\Common\DXUT.cpp	/^void DXUTSetWindowSettings( bool bCallDefWindowProc )$/;"	f
DXUTSetupCursor	.\Common\DXUT.cpp	/^void DXUTSetupCursor()$/;"	f
DXUTShutdown	.\Common\DXUT.cpp	/^void DXUTShutdown( int nExitCode )$/;"	f
DXUTState	.\Common\DXUT.cpp	/^    DXUTState()  { Create(); }$/;"	f	class:DXUTState
DXUTState	.\Common\DXUT.cpp	/^class DXUTState$/;"	c	file:
DXUTStaticWndProc	.\Common\DXUT.cpp	/^LRESULT CALLBACK DXUTStaticWndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f
DXUTStencilBits	.\Common\DXUTenum.cpp	/^UINT DXUTStencilBits( D3DFORMAT fmt )$/;"	f
DXUTStopRumbleOnAllControllers	.\Common\DXUTmisc.cpp	/^HRESULT DXUTStopRumbleOnAllControllers()$/;"	f
DXUTTRACE	.\Common\DXUTmisc.h	664;"	d
DXUTTRACE	.\Common\DXUTmisc.h	668;"	d
DXUTTextureNode	.\Common\DXUTgui.h	/^struct DXUTTextureNode$/;"	s
DXUTToggleFullScreen	.\Common\DXUT.cpp	/^HRESULT DXUTToggleFullScreen()$/;"	f
DXUTToggleREF	.\Common\DXUT.cpp	/^HRESULT DXUTToggleREF()$/;"	f
DXUTTrace	.\Common\DXUT.cpp	/^HRESULT WINAPI DXUTTrace( const CHAR* strFile, DWORD dwLine, HRESULT hr,$/;"	f
DXUTTraceD3DDECLMETHODtoString	.\Common\DXUTmisc.cpp	/^WCHAR* DXUTTraceD3DDECLMETHODtoString( BYTE m )$/;"	f
DXUTTraceD3DDECLTYPEtoString	.\Common\DXUTmisc.cpp	/^WCHAR* DXUTTraceD3DDECLTYPEtoString( BYTE t )$/;"	f
DXUTTraceD3DDECLUSAGEtoString	.\Common\DXUTmisc.cpp	/^WCHAR* DXUTTraceD3DDECLUSAGEtoString( BYTE u )$/;"	f
DXUTTraceDecl	.\Common\DXUTmisc.cpp	/^void DXUTTraceDecl( D3DVERTEXELEMENT9 decl[MAX_FVF_DECL_SIZE] )$/;"	f
DXUTUpdateBackBufferDesc	.\Common\DXUT.cpp	/^void DXUTUpdateBackBufferDesc()$/;"	f
DXUTUpdateDeviceSettingsWithOverrides	.\Common\DXUT.cpp	/^void DXUTUpdateDeviceSettingsWithOverrides( DXUTDeviceSettings* pDeviceSettings )$/;"	f
DXUTUpdateDeviceStats	.\Common\DXUT.cpp	/^void DXUTUpdateDeviceStats( D3DDEVTYPE DeviceType, DWORD BehaviorFlags, D3DADAPTER_IDENTIFIER9* pAdapterIdentifier )$/;"	f
DXUTUpdateFrameStats	.\Common\DXUT.cpp	/^void DXUTUpdateFrameStats()$/;"	f
DXUTUpdateStaticFrameStats	.\Common\DXUT.cpp	/^void DXUTUpdateStaticFrameStats()$/;"	f
DXUTVertexProcessingTypeToString	.\Common\DXUTSettingsDlg.cpp	/^WCHAR* DXUTVertexProcessingTypeToString(DWORD vpt)$/;"	f
DXUT_BeginPerfEvent	.\Common\DXUTmisc.h	712;"	d
DXUT_BeginPerfEvent	.\Common\DXUTmisc.h	717;"	d
DXUT_CONTROL_BUTTON	.\Common\DXUTgui.h	/^    DXUT_CONTROL_BUTTON, $/;"	e	enum:DXUT_CONTROL_TYPE
DXUT_CONTROL_CHECKBOX	.\Common\DXUTgui.h	/^    DXUT_CONTROL_CHECKBOX,$/;"	e	enum:DXUT_CONTROL_TYPE
DXUT_CONTROL_COMBOBOX	.\Common\DXUTgui.h	/^    DXUT_CONTROL_COMBOBOX,$/;"	e	enum:DXUT_CONTROL_TYPE
DXUT_CONTROL_EDITBOX	.\Common\DXUTgui.h	/^    DXUT_CONTROL_EDITBOX,$/;"	e	enum:DXUT_CONTROL_TYPE
DXUT_CONTROL_IMEEDITBOX	.\Common\DXUTgui.h	/^    DXUT_CONTROL_IMEEDITBOX,$/;"	e	enum:DXUT_CONTROL_TYPE
DXUT_CONTROL_LISTBOX	.\Common\DXUTgui.h	/^    DXUT_CONTROL_LISTBOX,$/;"	e	enum:DXUT_CONTROL_TYPE
DXUT_CONTROL_RADIOBUTTON	.\Common\DXUTgui.h	/^    DXUT_CONTROL_RADIOBUTTON,$/;"	e	enum:DXUT_CONTROL_TYPE
DXUT_CONTROL_SCROLLBAR	.\Common\DXUTgui.h	/^    DXUT_CONTROL_SCROLLBAR,$/;"	e	enum:DXUT_CONTROL_TYPE
DXUT_CONTROL_SLIDER	.\Common\DXUTgui.h	/^    DXUT_CONTROL_SLIDER,$/;"	e	enum:DXUT_CONTROL_TYPE
DXUT_CONTROL_STATE	.\Common\DXUTgui.h	/^enum DXUT_CONTROL_STATE$/;"	g
DXUT_CONTROL_STATIC	.\Common\DXUTgui.h	/^    DXUT_CONTROL_STATIC, $/;"	e	enum:DXUT_CONTROL_TYPE
DXUT_CONTROL_TYPE	.\Common\DXUTgui.h	/^enum DXUT_CONTROL_TYPE $/;"	g
DXUT_Dynamic_D3DPERF_BeginEvent	.\Common\DXUTmisc.cpp	/^int WINAPI DXUT_Dynamic_D3DPERF_BeginEvent( D3DCOLOR col, LPCWSTR wszName )$/;"	f
DXUT_Dynamic_D3DPERF_EndEvent	.\Common\DXUTmisc.cpp	/^int WINAPI DXUT_Dynamic_D3DPERF_EndEvent( void )$/;"	f
DXUT_Dynamic_D3DPERF_GetStatus	.\Common\DXUTmisc.cpp	/^DWORD WINAPI DXUT_Dynamic_D3DPERF_GetStatus( void )$/;"	f
DXUT_Dynamic_D3DPERF_QueryRepeatFrame	.\Common\DXUTmisc.cpp	/^BOOL WINAPI DXUT_Dynamic_D3DPERF_QueryRepeatFrame( void )$/;"	f
DXUT_Dynamic_D3DPERF_SetMarker	.\Common\DXUTmisc.cpp	/^void WINAPI DXUT_Dynamic_D3DPERF_SetMarker( D3DCOLOR col, LPCWSTR wszName )$/;"	f
DXUT_Dynamic_D3DPERF_SetOptions	.\Common\DXUTmisc.cpp	/^void WINAPI DXUT_Dynamic_D3DPERF_SetOptions( DWORD dwOptions )$/;"	f
DXUT_Dynamic_D3DPERF_SetRegion	.\Common\DXUTmisc.cpp	/^void WINAPI DXUT_Dynamic_D3DPERF_SetRegion( D3DCOLOR col, LPCWSTR wszName )$/;"	f
DXUT_Dynamic_Direct3DCreate9	.\Common\DXUTmisc.cpp	/^IDirect3D9 * WINAPI DXUT_Dynamic_Direct3DCreate9(UINT SDKVersion) $/;"	f
DXUT_ENUM_H	.\Common\DXUTenum.h	10;"	d
DXUT_ERR	.\Common\DXUTmisc.h	662;"	d
DXUT_ERR	.\Common\DXUTmisc.h	666;"	d
DXUT_ERR_MSGBOX	.\Common\DXUTmisc.h	663;"	d
DXUT_ERR_MSGBOX	.\Common\DXUTmisc.h	667;"	d
DXUT_EndPerfEvent	.\Common\DXUTmisc.h	713;"	d
DXUT_EndPerfEvent	.\Common\DXUTmisc.h	718;"	d
DXUT_EnsureD3DAPIs	.\Common\DXUTmisc.cpp	/^static bool DXUT_EnsureD3DAPIs( void )$/;"	f	file:
DXUT_GAMEPAD	.\Common\DXUTmisc.h	/^struct DXUT_GAMEPAD$/;"	s
DXUT_GAMEPAD_TRIGGER_THRESHOLD	.\Common\DXUTmisc.cpp	9;"	d	file:
DXUT_GUI_H	.\Common\DXUTgui.h	10;"	d
DXUT_H	.\Common\DXUT.h	8;"	d
DXUT_INPUT_DEADZONE	.\Common\DXUTmisc.cpp	10;"	d	file:
DXUT_MATCH_TYPE	.\Common\DXUT.h	/^enum DXUT_MATCH_TYPE$/;"	g
DXUT_MAX_CONTROLLERS	.\Common\DXUTmisc.h	23;"	d
DXUT_MAX_EDITBOXLENGTH	.\Common\DXUTgui.cpp	54;"	d	file:
DXUT_MIN_WINDOW_SIZE_X	.\Common\DXUT.cpp	7;"	d	file:
DXUT_MIN_WINDOW_SIZE_Y	.\Common\DXUT.cpp	8;"	d	file:
DXUT_MISC_H	.\Common\DXUTmisc.h	10;"	d
DXUT_PERFEVENTCOLOR	.\Common\DXUTmisc.h	/^const D3DCOLOR DXUT_PERFEVENTCOLOR  = D3DCOLOR_XRGB(200,100,100);$/;"	v
DXUT_PERFEVENTCOLOR2	.\Common\DXUTmisc.h	/^const D3DCOLOR DXUT_PERFEVENTCOLOR2 = D3DCOLOR_XRGB(100,200,100);$/;"	v
DXUT_PERFEVENTCOLOR3	.\Common\DXUTmisc.h	/^const D3DCOLOR DXUT_PERFEVENTCOLOR3 = D3DCOLOR_XRGB(100,100,200);$/;"	v
DXUT_PRIMARY_MONITOR	.\Common\DXUTmisc.cpp	3036;"	d	file:
DXUT_PlaySound	.\Common\DXUTsound.h	25;"	d
DXUT_PlaySoundLooping	.\Common\DXUTsound.h	26;"	d
DXUT_RES_H	.\Common\DXUTRes.h	10;"	d
DXUT_SCREEN_VERTEX	.\Common\DXUTgui.cpp	/^struct DXUT_SCREEN_VERTEX$/;"	s	file:
DXUT_SCREEN_VERTEX_UNTEX	.\Common\DXUTgui.cpp	/^struct DXUT_SCREEN_VERTEX_UNTEX$/;"	s	file:
DXUT_SETTINGS_H	.\Common\DXUTSettingsDlg.h	8;"	d
DXUT_STATE_DISABLED	.\Common\DXUTgui.h	/^    DXUT_STATE_DISABLED,$/;"	e	enum:DXUT_CONTROL_STATE
DXUT_STATE_FOCUS	.\Common\DXUTgui.h	/^    DXUT_STATE_FOCUS,$/;"	e	enum:DXUT_CONTROL_STATE
DXUT_STATE_HIDDEN	.\Common\DXUTgui.h	/^    DXUT_STATE_HIDDEN,$/;"	e	enum:DXUT_CONTROL_STATE
DXUT_STATE_MOUSEOVER	.\Common\DXUTgui.h	/^    DXUT_STATE_MOUSEOVER,$/;"	e	enum:DXUT_CONTROL_STATE
DXUT_STATE_NORMAL	.\Common\DXUTgui.h	/^    DXUT_STATE_NORMAL = 0,$/;"	e	enum:DXUT_CONTROL_STATE
DXUT_STATE_PRESSED	.\Common\DXUTgui.h	/^    DXUT_STATE_PRESSED,$/;"	e	enum:DXUT_CONTROL_STATE
DXUT_SetPerfMarker	.\Common\DXUTmisc.h	714;"	d
DXUT_SetPerfMarker	.\Common\DXUTmisc.h	719;"	d
DXUT_StopSound	.\Common\DXUTsound.h	24;"	d
DXUT_TIMER	.\Common\DXUT.cpp	/^struct DXUT_TIMER$/;"	s	file:
Decl	.\FXDecl.cpp	/^const D3DVERTEXELEMENT9 MESHVERT::Decl[] =$/;"	m	class:MESHVERT	file:
Decl	.\FXDecl.cpp	/^const D3DVERTEXELEMENT9 PPVERT::Decl[] =$/;"	m	class:PPVERT	file:
Decl	.\FXDecl.cpp	/^const D3DVERTEXELEMENT9 TERRAINVERT::Decl[] =$/;"	m	class:TERRAINVERT	file:
Decl	.\FXDecl.h	/^    const static D3DVERTEXELEMENT9 Decl[4];$/;"	m	struct:PPVERT
Decl	.\FXDecl.h	/^    const static D3DVERTEXELEMENT9 Decl[4];$/;"	m	struct:TERRAINVERT
Decl	.\FXDecl.h	/^    static const D3DVERTEXELEMENT9 Decl[4];$/;"	m	struct:MESHVERT
Decl	.\Foliage.cpp	/^const D3DVERTEXELEMENT9 GRASSVERT::Decl[] =$/;"	m	class:GRASSVERT	file:
Decl	.\Foliage.h	/^    const static D3DVERTEXELEMENT9 Decl[4];$/;"	m	struct:GRASSVERT
Decl	.\Sphere.cpp	/^const D3DVERTEXELEMENT9 CSphere::SphereTanBinVert::Decl[] =$/;"	m	class:CSphere::SphereTanBinVert	file:
Decl	.\Sphere.cpp	/^const D3DVERTEXELEMENT9 CSphere::SphereVert::Decl[] =$/;"	m	class:CSphere::SphereVert	file:
Decl	.\Sphere.h	/^        static const D3DVERTEXELEMENT9 Decl[4];$/;"	m	struct:CSphere::SphereVert
Decl	.\Sphere.h	/^        static const D3DVERTEXELEMENT9 Decl[6];$/;"	m	struct:CSphere::SphereTanBinVert
DecrementPSPower	.\CloudSky.h	/^    VOID DecrementPSPower(int idx) { m_pSky->SetSunPSPower(m_pSky->GetSunPSPower(idx) - SUNSTATE_INCREMENT, idx); }$/;"	f	class:CCloudSky
DecrementVSMult	.\CloudSky.h	/^    VOID DecrementVSMult(int idx) { m_pSky->SetSunVSMult(m_pSky->GetSunVSMult(idx) - SUNSTATE_INCREMENT, idx); }$/;"	f	class:CCloudSky
DecrementVSPower	.\CloudSky.h	/^    VOID DecrementVSPower(int idx) { m_pSky->SetSunVSPower(m_pSky->GetSunVSPower(idx) - SUNSTATE_INCREMENT, idx); }$/;"	f	class:CCloudSky
DefaultFunc	.\GameRoot.cpp	/^VOID CGameRoot::DefaultFunc(const string& s){$/;"	f	class:CGameRoot
DeleteAllCharacters	.\World.cpp	/^VOID CWorld::DeleteAllCharacters()$/;"	f	class:CWorld
DeleteCharacter	.\World.cpp	/^VOID CWorld::DeleteCharacter(UINT charID)$/;"	f	class:CWorld
DeleteDynamicObject	.\PhysicsRoot.cpp	/^void CPhysicsRoot::DeleteDynamicObject(int physicsID)$/;"	f	class:CPhysicsRoot
DeleteSelectionText	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::DeleteSelectionText()$/;"	f	class:CDXUTEditBox
Depth	.\Common\DXUTmisc.h	/^    UINT Depth;$/;"	m	struct:DXUTCache_Texture
DepthSortFunctor	.\PolySprite.cpp	/^CPolySprite::DepthSortFunctor::DepthSortFunctor(const D3DXVECTOR3 &lookAtNormal, $/;"	f	class:CPolySprite::DepthSortFunctor
DepthSortFunctor	.\PolySprite.h	/^    struct DepthSortFunctor {$/;"	s	class:CPolySprite
Destroy	.\Common\DXUT.cpp	/^    void Destroy()$/;"	f	class:DXUTState
Destroy	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::Destroy()$/;"	f	class:CDXUTMesh
Destroy	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMeshFrame::Destroy()$/;"	f	class:CDXUTMeshFrame
DestroyFrame	.\XModelHeirarchy.cpp	/^HRESULT SXHeirarchy::DestroyFrame (LPD3DXFRAME pFrameToFree)$/;"	f	class:SXHeirarchy
DestroyMeshContainer	.\XModelHeirarchy.cpp	/^HRESULT SXHeirarchy::DestroyMeshContainer (LPD3DXMESHCONTAINER pMeshContainerBase)$/;"	f	class:SXHeirarchy
DetermineDistanceLOD	.\QuadTree.cpp	/^UINT CQuadTree::DetermineDistanceLOD(const D3DXVECTOR3* pEyePt,$/;"	f	class:CQuadTree
DetermineNeighbours	.\QuadTree.cpp	/^VOID CQuadTree::DetermineNeighbours(VOID)$/;"	f	class:CQuadTree
DeviceType	.\Common\DXUT.h	/^    D3DDEVTYPE DeviceType;$/;"	m	struct:DXUTDeviceSettings
DeviceType	.\Common\DXUTenum.h	/^    D3DDEVTYPE DeviceType;$/;"	m	class:CD3DEnumDeviceInfo
DeviceType	.\Common\DXUTenum.h	/^    D3DDEVTYPE DeviceType;$/;"	m	struct:CD3DEnumDeviceSettingsCombo
Disconnect	.\Client.cpp	/^VOID CClient::Disconnect()$/;"	f	class:CClient
Disconnect	.\Server.cpp	/^VOID CServer::Disconnect()$/;"	f	class:CServer
DisplaceExpandQuadTree	.\QuadTree.cpp	/^VOID CQuadTree::DisplaceExpandQuadTree(QTNode* n, UINT cellSpacing, UINT heightSpacing) {$/;"	f	class:CQuadTree
DisplaySwitchToREFWarningProc	.\Common\DXUTmisc.cpp	/^INT_PTR CALLBACK DisplaySwitchToREFWarningProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) $/;"	f
DiveAttack	.\GameEngine.cpp	/^void CGameEngine::DiveAttack(SPlayer* pplayer){$/;"	f	class:CGameEngine
DoEffect	.\PostProcEffects.cpp	/^void PostProcEffects::DoEffect(LPD3DXEFFECT& pEff)$/;"	f	class:PostProcEffects
Draw	.\Bubbles.cpp	/^VOID CBubbles::Draw(IDirect3DDevice9* pd3dDevice, $/;"	f	class:CBubbles
Draw	.\PolySprite.cpp	/^VOID CPolySprite::Draw( LPDIRECT3DTEXTURE9 pTex, $/;"	f	class:CPolySprite
Draw	.\Sphere.h	/^    HRESULT Draw(IDirect3DDevice9* pd3dDevice) {$/;"	f	class:CSphere
Draw	.\Sprite.cpp	/^HRESULT CSprite::Draw($/;"	f	class:CSprite
DrawBasin	.\QuadTree.cpp	/^VOID CQuadTree::DrawBasin(VOID)$/;"	f	class:CQuadTree
DrawBoundingBoxes	.\QuadTree.cpp	/^HRESULT CQuadTree::DrawBoundingBoxes()$/;"	f	class:CQuadTree
DrawBoundingBoxes	.\World.cpp	/^HRESULT CWorld::DrawBoundingBoxes()$/;"	f	class:CWorld
DrawCloudBBs	.\QuadTree.cpp	/^HRESULT CQuadTree::DrawCloudBBs(ULONG color)$/;"	f	class:CQuadTree
DrawEntityBBs	.\World.cpp	/^HRESULT CWorld::DrawEntityBBs(ULONG color)$/;"	f	class:CWorld
DrawFormattedTextLine	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTTextHelper::DrawFormattedTextLine( RECT &rc, DWORD dwFlags, const WCHAR* strMsg, ... )$/;"	f	class:CDXUTTextHelper
DrawFormattedTextLine	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTTextHelper::DrawFormattedTextLine( const WCHAR* strMsg, ... )$/;"	f	class:CDXUTTextHelper
DrawFrame	.\XModelHeirarchy.cpp	/^void CXModelHeirarchy::DrawFrame( IDirect3DDevice9 *pd3dDevice, LPD3DXFRAME pFrame, const D3DXMATRIX* pMatView )$/;"	f	class:CXModelHeirarchy
DrawHUDText	.\HUD.cpp	/^void CHud::DrawHUDText(LPDIRECT3DDEVICE9 pd3dDevice, LPCSTR text, int x, int y, int height, int width, DWORD format, SColor c){$/;"	f	class:CHud
DrawInfo	.\PolySprite.cpp	/^CPolySprite::DrawInfo::DrawInfo(LPDIRECT3DTEXTURE9 _pTex, const RECTF &_rectf, const D3DXMATRIX &_mtx, UINT _color) :$/;"	f	class:CPolySprite::DrawInfo
DrawInfo	.\PolySprite.h	/^        DrawInfo() {}$/;"	f	struct:CPolySprite::DrawInfo
DrawInfo	.\PolySprite.h	/^    struct DrawInfo {$/;"	s	class:CPolySprite
DrawLimboCloudBBs	.\World.cpp	/^HRESULT CWorld::DrawLimboCloudBBs(ULONG color)$/;"	f	class:CWorld
DrawMeshContainer	.\XModelHeirarchy.cpp	/^void CXModelHeirarchy::DrawMeshContainer( IDirect3DDevice9 *pd3dDevice, $/;"	f	class:CXModelHeirarchy
DrawNumberToScreen	.\NumberToSprite.cpp	/^HRESULT CNumberToSprite::DrawNumberToScreen(float num, const D3DXVECTOR3& screenPos, DWORD color, float scale, UINT texIndex)$/;"	f	class:CNumberToSprite
DrawObjects	.\QuadTree.cpp	/^UINT CQuadTree::DrawObjects(const D3DXVECTOR3* pEyePt, $/;"	f	class:CQuadTree
DrawPolyLine	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::DrawPolyLine( POINT* apPoints, UINT nNumPoints, D3DCOLOR color )$/;"	f	class:CDXUTDialog
DrawProgressBar	.\HUD.cpp	/^void CHud::DrawProgressBar(LPDIRECT3DDEVICE9 pd3dDevice, int x, int y, int height, int width, float percent, SColor c, bool bDrawBack){$/;"	f	class:CHud
DrawQuadBBs	.\QuadTree.cpp	/^HRESULT CQuadTree::DrawQuadBBs(ULONG Color) {$/;"	f	class:CQuadTree
DrawRect	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::DrawRect( RECT* pRect, D3DCOLOR color )$/;"	f	class:CDXUTDialog
DrawRowText	.\MultiColumnList.cpp	/^void CMultiColumnList::DrawRowText(int r, long rowHeight, long columnWidth, bool bTitles){$/;"	f	class:CMultiColumnList
DrawSprite	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::DrawSprite( CDXUTElement* pElement, RECT* prcDest )$/;"	f	class:CDXUTDialog
DrawSpriteAnimations	.\World.cpp	/^VOID CWorld::DrawSpriteAnimations(CPolySprite* pPolySprite)$/;"	f	class:CWorld
DrawSprites	.\PolySprite.cpp	/^VOID CPolySprite::DrawSprites() $/;"	f	class:CPolySprite
DrawStandard	.\XModelHeirarchy.cpp	/^void CXModelHeirarchy::DrawStandard( LPDIRECT3DDEVICE9 pd3dDevice )$/;"	f	class:CXModelHeirarchy
DrawTerrain	.\QuadTree.cpp	/^HRESULT CQuadTree::DrawTerrain(const D3DXMATRIX &matViewProj, const D3DXMATRIX* pMatShadow, LPDIRECT3DTEXTURE9 pShadowMap) $/;"	f	class:CQuadTree
DrawTerrainTiles	.\QuadTree.cpp	/^HRESULT CQuadTree::DrawTerrainTiles() {	$/;"	f	class:CQuadTree
DrawText	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::DrawText( LPCWSTR strText, CDXUTElement* pElement, RECT* prcDest, bool bShadow, int nCount )$/;"	f	class:CDXUTDialog
DrawTextLine	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTTextHelper::DrawTextLine( RECT &rc, DWORD dwFlags, const WCHAR* strMsg )$/;"	f	class:CDXUTTextHelper
DrawTextLine	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTTextHelper::DrawTextLine( const WCHAR* strMsg )$/;"	f	class:CDXUTTextHelper
Dummy_GetFileVersionInfoA	.\Common\DXUTgui.h	/^    static BOOL APIENTRY Dummy_GetFileVersionInfoA( LPSTR, DWORD, DWORD, LPVOID ) { return 0; }$/;"	f	class:CDXUTIMEEditBox
Dummy_GetFileVersionInfoSizeA	.\Common\DXUTgui.h	/^    static DWORD APIENTRY Dummy_GetFileVersionInfoSizeA( LPSTR, LPDWORD ) { return 0; }$/;"	f	class:CDXUTIMEEditBox
Dummy_GetReadingString	.\Common\DXUTgui.h	/^    static UINT WINAPI Dummy_GetReadingString( HIMC, UINT, LPWSTR, PINT, BOOL*, PUINT ) { return 0; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmAssociateContext	.\Common\DXUTgui.h	/^    static HIMC WINAPI Dummy_ImmAssociateContext( HWND, HIMC ) { return NULL; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmDisableTextFrameService	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmDisableTextFrameService( DWORD ) { return TRUE; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmGetCandidateListW	.\Common\DXUTgui.h	/^    static DWORD WINAPI Dummy_ImmGetCandidateListW( HIMC, DWORD, LPCANDIDATELIST, DWORD ) { return 0; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmGetCompositionStringW	.\Common\DXUTgui.h	/^    static LONG WINAPI Dummy_ImmGetCompositionStringW( HIMC, DWORD, LPVOID, DWORD ) { return IMM_ERROR_GENERAL; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmGetContext	.\Common\DXUTgui.h	/^    static HIMC WINAPI Dummy_ImmGetContext( HWND ) { return NULL; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmGetConversionStatus	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmGetConversionStatus( HIMC, LPDWORD, LPDWORD ) { return 0; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmGetDefaultIMEWnd	.\Common\DXUTgui.h	/^    static HWND WINAPI Dummy_ImmGetDefaultIMEWnd( HWND ) { return NULL; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmGetIMEFileNameA	.\Common\DXUTgui.h	/^    static UINT WINAPI Dummy_ImmGetIMEFileNameA( HKL, LPSTR, UINT ) { return 0; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmGetOpenStatus	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmGetOpenStatus( HIMC ) { return 0; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmGetVirtualKey	.\Common\DXUTgui.h	/^    static UINT WINAPI Dummy_ImmGetVirtualKey( HWND ) { return 0; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmIsIME	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmIsIME( HKL ) { return FALSE; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmLockIMC	.\Common\DXUTgui.h	/^    static INPUTCONTEXT* WINAPI Dummy_ImmLockIMC( HIMC ) { return NULL; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmLockIMCC	.\Common\DXUTgui.h	/^    static LPVOID WINAPI Dummy_ImmLockIMCC( HIMCC ) { return NULL; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmNotifyIME	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmNotifyIME( HIMC, DWORD, DWORD, DWORD ) { return FALSE; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmReleaseContext	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmReleaseContext( HWND, HIMC ) { return FALSE; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmSetConversionStatus	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmSetConversionStatus( HIMC, DWORD, DWORD ) { return FALSE; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmSetOpenStatus	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmSetOpenStatus( HIMC, BOOL ) { return 0; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmSimulateHotKey	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmSimulateHotKey( HWND, DWORD ) { return FALSE; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmUnlockIMC	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmUnlockIMC( HIMC ) { return FALSE; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ImmUnlockIMCC	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ImmUnlockIMCC( HIMCC ) { return FALSE; }$/;"	f	class:CDXUTIMEEditBox
Dummy_ScriptApplyDigitSubstitution	.\Common\DXUTgui.h	/^    static HRESULT WINAPI Dummy_ScriptApplyDigitSubstitution( const SCRIPT_DIGITSUBSTITUTE*, SCRIPT_CONTROL*, SCRIPT_STATE* ) { return E_NOTIMPL; }$/;"	f	class:CUniBuffer
Dummy_ScriptStringAnalyse	.\Common\DXUTgui.h	/^    static HRESULT WINAPI Dummy_ScriptStringAnalyse( HDC, const void *, int, int, int, DWORD, int, SCRIPT_CONTROL*, SCRIPT_STATE*, const int*, SCRIPT_TABDEF*, const BYTE*, SCRIPT_STRING_ANALYSIS* ) { return E_NOTIMPL; }$/;"	f	class:CUniBuffer
Dummy_ScriptStringCPtoX	.\Common\DXUTgui.h	/^    static HRESULT WINAPI Dummy_ScriptStringCPtoX( SCRIPT_STRING_ANALYSIS, int, BOOL, int* ) { return E_NOTIMPL; }$/;"	f	class:CUniBuffer
Dummy_ScriptStringFree	.\Common\DXUTgui.h	/^    static HRESULT WINAPI Dummy_ScriptStringFree( SCRIPT_STRING_ANALYSIS* ) { return E_NOTIMPL; }$/;"	f	class:CUniBuffer
Dummy_ScriptStringXtoCP	.\Common\DXUTgui.h	/^    static HRESULT WINAPI Dummy_ScriptStringXtoCP( SCRIPT_STRING_ANALYSIS, int, int*, int* ) { return E_NOTIMPL; }$/;"	f	class:CUniBuffer
Dummy_ScriptString_pLogAttr	.\Common\DXUTgui.h	/^    static const SCRIPT_LOGATTR* WINAPI Dummy_ScriptString_pLogAttr( SCRIPT_STRING_ANALYSIS ) { return NULL; }$/;"	f	class:CUniBuffer
Dummy_ScriptString_pcOutChars	.\Common\DXUTgui.h	/^    static const int* WINAPI Dummy_ScriptString_pcOutChars( SCRIPT_STRING_ANALYSIS ) { return NULL; }$/;"	f	class:CUniBuffer
Dummy_ShowReadingWindow	.\Common\DXUTgui.h	/^    static BOOL WINAPI Dummy_ShowReadingWindow( HIMC, BOOL ) { return FALSE; }$/;"	f	class:CDXUTIMEEditBox
Dummy_VerQueryValueA	.\Common\DXUTgui.h	/^    static BOOL APIENTRY Dummy_VerQueryValueA( const LPVOID, LPSTR, LPVOID *, PUINT ) { return 0; }$/;"	f	class:CDXUTIMEEditBox
DumpCapsToLog	.\GPUTerrainProject.cpp	/^void DumpCapsToLog() {$/;"	f
DumpSystemToLog	.\GPUTerrainProject.cpp	/^void DumpSystemToLog() {$/;"	f
DynamicObjectExists	.\PhysicsRoot.h	/^	bool DynamicObjectExists(int ID) { $/;"	f	class:CPhysicsRoot
DynamicObjectsHashMap	.\PhysicsRoot.h	/^    typedef hash_map<int, TA::DynamicObject*>   DynamicObjectsHashMap;$/;"	t	class:CPhysicsRoot
EDITBOX_SCROLLEXTENT	.\Common\DXUTgui.cpp	5038;"	d	file:
EVENT_BUTTON_CLICKED	.\Common\DXUTgui.h	19;"	d
EVENT_CHECKBOX_CHANGED	.\Common\DXUTgui.h	22;"	d
EVENT_COMBOBOX_SELECTION_CHANGED	.\Common\DXUTgui.h	20;"	d
EVENT_EDITBOX_CHANGE	.\Common\DXUTgui.h	27;"	d
EVENT_EDITBOX_STRING	.\Common\DXUTgui.h	24;"	d
EVENT_LISTBOX_ITEM_DBLCLK	.\Common\DXUTgui.h	28;"	d
EVENT_LISTBOX_SELECTION	.\Common\DXUTgui.h	31;"	d
EVENT_LISTBOX_SELECTION_END	.\Common\DXUTgui.h	32;"	d
EVENT_RADIOBUTTON_CHANGED	.\Common\DXUTgui.h	21;"	d
EVENT_SLIDER_VALUE_CHANGED	.\Common\DXUTgui.h	23;"	d
EdgeEnhance	.\PostProcEffects.cpp	/^void PostProcEffects::EdgeEnhance(float minStr, float maxStr, float timeOfDay)$/;"	f	class:PostProcEffects
Element	.\Common\DXUTgui.h	/^    CDXUTElement Element;$/;"	m	struct:DXUTElementHolder
EnableCaption	.\Common\DXUTgui.h	/^    void EnableCaption( bool bEnable ) { m_bCaption = bEnable; }$/;"	f	class:CDXUTDialog
EnableImeSystem	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::EnableImeSystem( bool bEnable )$/;"	f	class:CDXUTIMEEditBox
EnableKeyboardInput	.\Common\DXUTgui.h	/^    void EnableKeyboardInput( bool bEnable ) { m_bKeyboardInput = bEnable; }$/;"	f	class:CDXUTDialog
EnableKeyboardInputForAllDialogs	.\Common\DXUTgui.cpp	/^void CDXUTDialogResourceManager::EnableKeyboardInputForAllDialogs()$/;"	f	class:CDXUTDialogResourceManager
EnableMouseInput	.\Common\DXUTgui.h	/^    void EnableMouseInput( bool bEnable ) { m_bMouseInput = bEnable; }$/;"	f	class:CDXUTDialog
EnableNonUserEvents	.\Common\DXUTgui.h	/^    void EnableNonUserEvents( bool bEnable ) { m_bNonUserEvents = bEnable; }$/;"	f	class:CDXUTDialog
End	.\Common\DXUTmisc.cpp	/^void CDXUTTextHelper::End()$/;"	f	class:CDXUTTextHelper
End	.\PolySprite.cpp	/^VOID CPolySprite::End()$/;"	f	class:CPolySprite
End	.\Sprite.cpp	/^HRESULT CSprite::End()$/;"	f	class:CSprite
EndScene	.\PostProcEffects.cpp	/^HRESULT PostProcEffects::EndScene(DWORD mipFilter)$/;"	f	class:PostProcEffects
EndShadowMapRender	.\ShadowMap.cpp	/^HRESULT CShadowMap::EndShadowMapRender(LPDIRECT3DDEVICE9 pd3dDevice)$/;"	f	class:CShadowMap
EntityHashMap	.\MeshEntity.h	/^typedef stdext::hash_map<UINT, SMeshEntity> EntityHashMap;$/;"	t
EnumMeshes	.\Common\DXUTMesh.cpp	/^bool CDXUTMeshFrame::EnumMeshes( bool (*EnumMeshCB)(CDXUTMesh*,void*),$/;"	f	class:CDXUTMeshFrame
Enumerate	.\Common\DXUTenum.cpp	/^HRESULT CD3DEnumeration::Enumerate( IDirect3D9* pD3D,$/;"	f	class:CD3DEnumeration
EnumerateDeviceCombos	.\Common\DXUTenum.cpp	/^HRESULT CD3DEnumeration::EnumerateDeviceCombos( CD3DEnumAdapterInfo* pAdapterInfo, CD3DEnumDeviceInfo* pDeviceInfo, CGrowableArray<D3DFORMAT>* pAdapterFormatList )$/;"	f	class:CD3DEnumeration
EnumerateDevices	.\Common\DXUTenum.cpp	/^HRESULT CD3DEnumeration::EnumerateDevices( CD3DEnumAdapterInfo* pAdapterInfo, CGrowableArray<D3DFORMAT>* pAdapterFormatList )$/;"	f	class:CD3DEnumeration
ExecuteCommand	.\GameGUI.cpp	/^VOID CGameGUI::ExecuteCommand(UCHAR c, string& param){$/;"	f	class:CGameGUI
ExecuteKernel	.\PostProcEffects.cpp	/^void PostProcEffects::ExecuteKernel( void )$/;"	f	class:PostProcEffects
FADETIME	.\HUD.h	10;"	d
FARPLANE_DISTANCE	.\GameDefine.h	14;"	d
FIREBALL	.\GameEngine.h	/^		enum { FIREBALL = 0, LIGHTNING, SWEEP, SMASH, DIVE, NUM_SLES }; $/;"	e	enum:CGameEngine::SShortLifeEntity::<anonymous>
FISHEYE_MULT	.\World.cpp	29;"	d	file:
FORMAT128	.\PostProcEffects.h	80;"	d
FORMAT64	.\PostProcEffects.h	79;"	d
FOV_DIVISOR	.\GameDefine.h	9;"	d
FRICTION_SETTING	.\GameTables.h	/^        FRICTION_SETTING,$/;"	e	enum:GameTable::Settings
FRONTTOBACK	.\PolySprite.h	/^    static const int FRONTTOBACK                      =       (0x01 << 11);$/;"	m	class:CPolySprite
FULL_DAY	.\Sky.cpp	/^float CSky::SClock::FULL_DAY = 24.0f;$/;"	m	class:CSky::SClock	file:
FULL_DAY	.\Sky.h	/^		static float FULL_DAY;$/;"	m	struct:CSky::SClock
FVF	.\Common\DXUTgui.cpp	/^    static DWORD FVF;$/;"	m	struct:DXUT_SCREEN_VERTEX	file:
FVF	.\Common\DXUTgui.cpp	/^    static DWORD FVF;$/;"	m	struct:DXUT_SCREEN_VERTEX_UNTEX	file:
FVF	.\Common\DXUTgui.cpp	/^DWORD DXUT_SCREEN_VERTEX::FVF = D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1;$/;"	m	class:DXUT_SCREEN_VERTEX	file:
FVF	.\Common\DXUTgui.cpp	/^DWORD DXUT_SCREEN_VERTEX_UNTEX::FVF = D3DFVF_XYZRHW | D3DFVF_DIFFUSE;$/;"	m	class:DXUT_SCREEN_VERTEX_UNTEX	file:
FVF	.\FXDecl.h	/^    static const UINT FVF = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1;$/;"	m	struct:MESHVERT
FVF	.\FXDecl.h	/^    static const UINT FVF = D3DFVF_XYZ | D3DFVF_TEX1 | D3DFVF_DIFFUSE;$/;"	m	struct:BoxVertTexColor
FVF	.\FXDecl.h	/^    static const UINT FVF = D3DFVF_XYZ | D3DFVF_TEX1;$/;"	m	struct:BoxVertTex
FVF	.\PolySprite.h	/^        static const UINT FVF = D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1 ;$/;"	m	struct:CPolySprite::PolySpriteVertex
FVF	.\Sphere.h	/^        static const UINT FVF = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1;$/;"	m	struct:CSphere::SphereVert
FillBufferWithSound	.\Common\DXUTsound.cpp	/^HRESULT CSound::FillBufferWithSound( LPDIRECTSOUNDBUFFER pDSB, BOOL bRepeatWavIfBufferLarger )$/;"	f	class:CSound
FinalizeString	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::FinalizeString( bool bSend )$/;"	f	class:CDXUTIMEEditBox
FindActionIndex	.\GameTables.cpp	/^UCHAR GameTable::FindActionIndex(const string &cmd)$/;"	f	class:GameTable
FindAnimationIndex	.\GameTables.cpp	/^UCHAR GameTable::FindAnimationIndex(const string& anm)$/;"	f	class:GameTable
FindCameraLookAtStep	.\World.cpp	/^VOID CWorld::FindCameraLookAtStep(D3DXVECTOR3 *pvOut, float fElapsedTime)$/;"	f	class:CWorld
FindCameraRelativeStep	.\World.cpp	/^VOID CWorld::FindCameraRelativeStep(D3DXVECTOR3 *pvOut, float fElapsedTime)$/;"	f	class:CWorld
FindCameraWorldStep	.\World.cpp	/^VOID CWorld::FindCameraWorldStep(D3DXVECTOR3 *pvOut, float fElapsedTime)$/;"	f	class:CWorld
FindCommandIndex	.\GameTables.cpp	/^UCHAR GameTable::FindCommandIndex(const string &cmd)$/;"	f	class:GameTable
FindFrame	.\Common\DXUTMesh.cpp	/^CDXUTMeshFrame* CDXUTMeshFrame::FindFrame( LPCWSTR strFrameName )$/;"	f	class:CDXUTMeshFrame
FindItem	.\Common\DXUTgui.cpp	/^int CDXUTComboBox::FindItem( const WCHAR* strText, UINT iStart )$/;"	f	class:CDXUTComboBox
FindMesh	.\Common\DXUTMesh.cpp	/^CDXUTMesh* CDXUTMeshFrame::FindMesh( LPCWSTR strMeshName )$/;"	f	class:CDXUTMeshFrame
FindMeshExtremities	.\XModelHeirarchy.cpp	/^HRESULT FindMeshExtremities( D3DXVECTOR3* pCenterOut, D3DXVECTOR3* pExtremitiesOut, ID3DXMesh* pMesh )$/;"	f
FindSettingIndex	.\GameTables.cpp	/^UCHAR GameTable::FindSettingIndex(const string& stg)$/;"	f	class:GameTable
FindSpriteAnimationIndex	.\GameTables.cpp	/^UCHAR GameTable::FindSpriteAnimationIndex(const string& spranm)$/;"	f	class:GameTable
FindSunStateIndex	.\GameTables.cpp	/^UCHAR GameTable::FindSunStateIndex(const string& sunname)$/;"	f	class:GameTable
FishEye	.\PostProcEffects.cpp	/^void PostProcEffects::FishEye(float speed)$/;"	f	class:PostProcEffects
FitToShape	.\PostProcEffects.cpp	/^void ScreenAlignedQuad::FitToShape()$/;"	f	class:ScreenAlignedQuad
FlagToDraw	.\ImpostorAtlas.h	/^    VOID FlagToDraw(int id) { $/;"	f	class:CImpostorAtlas
Flush	.\PolySprite.cpp	/^VOID CPolySprite::Flush()$/;"	f	class:CPolySprite
Flush	.\Sprite.h	/^    HRESULT Flush() { return m_pD3DXSprite->Flush(); }$/;"	f	class:CSprite
FocusDefaultControl	.\Common\DXUTgui.cpp	/^void CDXUTDialog::FocusDefaultControl()$/;"	f	class:CDXUTDialog
FontColor	.\Common\DXUTgui.h	/^    DXUTBlendColor FontColor;$/;"	m	class:CDXUTElement
Format	.\Common\DXUTmisc.h	/^    D3DFORMAT Format;$/;"	m	struct:DXUTCache_Texture
FrameMove	.\Common\DXUTmisc.cpp	/^VOID CFirstPersonCamera::FrameMove( FLOAT fElapsedTime )$/;"	f	class:CFirstPersonCamera
FrameMove	.\Common\DXUTmisc.cpp	/^VOID CModelViewerCamera::FrameMove( FLOAT fElapsedTime )$/;"	f	class:CModelViewerCamera
FrustumCullWorker	.\QuadTree.cpp	/^VOID CQuadTree::FrustumCullWorker(QTNode *n) {$/;"	f	class:CQuadTree
FrustumGatherChildren	.\QuadTree.cpp	/^VOID CQuadTree::FrustumGatherChildren(QTNode *n) {$/;"	f	class:CQuadTree
GETPROCADDRESS	.\Common\DXUTgui.cpp	36;"	d	file:
GETP_ACCESSOR	.\Common\DXUT.cpp	40;"	d	file:
GETP_SETP_ACCESSOR	.\Common\DXUT.cpp	41;"	d	file:
GET_ACCESSOR	.\Common\DXUT.cpp	36;"	d	file:
GET_SET_ACCESSOR	.\Common\DXUT.cpp	37;"	d	file:
GRASSVERT	.\Foliage.h	/^struct GRASSVERT {$/;"	s
GRASS_EFFECT_NAME	.\Foliage.h	7;"	d
GRASS_TECHNIQUE_NAME	.\Foliage.h	8;"	d
GRAV_MULT_SETTING	.\GameTables.h	/^        GRAV_MULT_SETTING,$/;"	e	enum:GameTable::Settings
GROUND_CAMERA_SPEED	.\GameDefine.h	13;"	d
GUICallback	.\Console.h	/^	typedef void (CGameGUI::* GUICallback)(UCHAR, string&);$/;"	t	class:CConsole
GUICallback	.\Menu.h	/^    typedef void (CGameGUI::* GUICallback)(UCHAR, string&);$/;"	t	class:CMenu
GUIReg	.\GameGUI.h	/^	enum GUIReg { CONSOLE = 0, MENU, BROWSER, NUM_REGS };$/;"	g	class:CGameGUI
GameCommandPtr	.\GameGUI.h	/^	typedef void (CGameRoot::* GameCommandPtr)(const string&);$/;"	t	class:CGameGUI
GameTable	.\GameTables.h	/^namespace GameTable$/;"	n
GatherStaticIsland	.\PhysicsRoot.cpp	/^VOID CPhysicsRoot::GatherStaticIsland(vector<D3DXVECTOR3> &vVerts, vector<int> &vIndices, const CQuadTree* pIsland)$/;"	f	class:CPhysicsRoot
GatherVerticesAndIndices	.\PhysicsRoot.cpp	/^VOID CPhysicsRoot::GatherVerticesAndIndices( vector<D3DXVECTOR3> &vVerts,$/;"	f	class:CPhysicsRoot
GenerateData	.\MipmapTerrain.cpp	/^UINT CMipmapTerrain::GenerateData(IDirect3DDevice9 * pd3dDevice,$/;"	f	class:CMipmapTerrain
GenerateDiffMap	.\ITerrain.cpp	/^UINT ITerrain::GenerateDiffMap(void) {$/;"	f	class:ITerrain
GenerateEffect	.\MipmapTerrain.cpp	/^UINT CMipmapTerrain::GenerateEffect(IDirect3DDevice9 *pd3dDevice,$/;"	f	class:CMipmapTerrain
GenerateIndexBuffers	.\MipmapTerrain.cpp	/^UINT CMipmapTerrain::GenerateIndexBuffers(IDirect3DDevice9 * pd3dDevice) {$/;"	f	class:CMipmapTerrain
GenerateQuads	.\QuadTree.cpp	/^VOID CQuadTree::GenerateQuads() {$/;"	f	class:CQuadTree
GenerateSkinnedMesh	.\XModelHeirarchy.cpp	/^HRESULT D3DXMESHCONTAINER_DERIVED::GenerateSkinnedMesh( IDirect3DDevice9 *pd3dDevice )$/;"	f	class:D3DXMESHCONTAINER_DERIVED
GenerateSubClouds	.\CloudBatch.cpp	/^VOID CCloud::GenerateSubClouds()$/;"	f	class:CCloud
GenerateWorldSpaceBBPlaneCoordinates	.\IImpostorable.cpp	/^VOID IImpostorable::GenerateWorldSpaceBBPlaneCoordinates(const D3DXVECTOR3* corners, $/;"	f	class:IImpostorable
Get3DBufferInterface	.\Common\DXUTsound.cpp	/^HRESULT CSound::Get3DBufferInterface( DWORD dwIndex, LPDIRECTSOUND3DBUFFER* ppDS3DBuffer )$/;"	f	class:CSound
Get3DListenerInterface	.\Common\DXUTsound.cpp	/^HRESULT CSoundManager::Get3DListenerInterface( LPDIRECTSOUND3DLISTENER* ppDSListener )$/;"	f	class:CSoundManager
GetAbsoluteTime	.\Common\DXUTmisc.cpp	/^double CDXUTTimer::GetAbsoluteTime()$/;"	f	class:CDXUTTimer
GetAdapterInfo	.\Common\DXUTenum.cpp	/^CD3DEnumAdapterInfo* CD3DEnumeration::GetAdapterInfo( UINT AdapterOrdinal )$/;"	f	class:CD3DEnumeration
GetAdapterInfoList	.\Common\DXUTenum.cpp	/^CGrowableArray<CD3DEnumAdapterInfo*>* CD3DEnumeration::GetAdapterInfoList()$/;"	f	class:CD3DEnumeration
GetAltKeyboard	.\GameSettings.h	/^    UCHAR GetAltKeyboard(UINT i)                        { assert(i < 256); return m_cAltKeyBoard[i]; }$/;"	f	class:CGameSettings
GetAnimStill	.\SpriteAnimMgr.cpp	/^VOID CSpriteAnimMgr::GetAnimStill(int runningAnimIdx, LPDIRECT3DTEXTURE9 *ppTex, RECTF &frect)$/;"	f	class:CSpriteAnimMgr
GetAnimType	.\AnimOb.h	/^	AnimType GetAnimType() { return animType; }$/;"	f	class:AnimOb
GetAnimationPeriod	.\ModelInstance.h	/^    double GetAnimationPeriod(UINT idx) { if(m_pXmodel->IsHeirarchy()) return m_pXmodel->GetAnimationPeriod(idx); return 0; }$/;"	f	class:CModelInstance
GetAnimationPeriod	.\XModelHeirarchy.h	/^    double GetAnimationPeriod(UINT idx) const { assert(idx<m_vAnimPeriods.size()); return m_vAnimPeriods[idx]; }$/;"	f	class:CXModelHeirarchy
GetAnimationSet	.\XModelHeirarchy.cpp	/^LPD3DXANIMATIONSET CXModelHeirarchy::GetAnimationSet(UINT idx)$/;"	f	class:CXModelHeirarchy
GetAt	.\Common\DXUTmisc.h	/^    TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }$/;"	f	class:CGrowableArray
GetAtlasId	.\CloudBatch.h	/^    int GetAtlasId() { return m_nAtlasId; }$/;"	f	class:CCloud
GetBatchID	.\CloudBatch.h	/^    UINT GetBatchID() { return m_BatchID; }    $/;"	f	class:CCloud
GetBloomColor	.\World.h	/^    gdef::COLOR GetBloomColor()                 { return m_BLOOMFLAGCOLOR; }$/;"	f	class:CWorld
GetBounce	.\GameSettings.h	/^    float GetBounce()							        { return m_hmSettings[BOUNCE_SETTING]; }   $/;"	f	class:CGameSettings
GetBubbleCenter	.\Bubbles.h	/^    const D3DXVECTOR3* GetBubbleCenter(int idx) { assert(GetNumBubbles() > 0); return &m_vBubbles[idx].vCenter; }$/;"	f	class:CBubbles
GetBubbleRadius	.\Bubbles.h	/^    float GetBubbleRadius(int idx) { assert(GetNumBubbles() > 0); return m_vBubbles[idx].fRadius; }$/;"	f	class:CBubbles
GetBuffer	.\Common\DXUTgui.h	/^    const WCHAR* GetBuffer() { return m_pwszBuffer; }$/;"	f	class:CUniBuffer
GetBuffer	.\Common\DXUTsound.cpp	/^LPDIRECTSOUNDBUFFER CSound::GetBuffer( DWORD dwIndex )$/;"	f	class:CSound
GetBufferSize	.\Common\DXUTgui.h	/^    int  GetBufferSize() { return m_nBufferSize; }$/;"	f	class:CUniBuffer
GetButton	.\Common\DXUTgui.h	/^    CDXUTButton*      GetButton( int ID ) { return (CDXUTButton*) GetControl( ID, DXUT_CONTROL_BUTTON ); }$/;"	f	class:CDXUTDialog
GetButtonCount	.\Menu.h	/^	int GetButtonCount() { return (int) buttons.size(); }$/;"	f	class:CMenu
GetButtonGroup	.\Common\DXUTgui.h	/^    UINT GetButtonGroup() { return m_nButtonGroup; }$/;"	f	class:CDXUTRadioButton
GetCamera	.\World.h	/^    CFirstPersonCamera& GetCamera()             { return m_Camera; }$/;"	f	class:CWorld
GetCameraLookAtOffset	.\GameEngine.h	/^	const D3DXVECTOR3* GetCameraLookAtOffset()                  { if(m_pMyPlayer) return &m_pMyPlayer->CameraControl.vLookAtOffset; return NULL;}$/;"	f	class:CGameEngine
GetCameraLookAtOffsetX	.\GameSettings.h	/^	float GetCameraLookAtOffsetX()                      { return m_hmSettings[CAMERA_LOOKAT_OFFSET_X_SETTING]; }$/;"	f	class:CGameSettings
GetCameraLookAtOffsetY	.\GameSettings.h	/^    float GetCameraLookAtOffsetY()                      { return m_hmSettings[CAMERA_LOOKAT_OFFSET_Y_SETTING]; }$/;"	f	class:CGameSettings
GetCameraLookAtOffsetZ	.\GameSettings.h	/^    float GetCameraLookAtOffsetZ()                      { return m_hmSettings[CAMERA_LOOKAT_OFFSET_Z_SETTING]; }$/;"	f	class:CGameSettings
GetCameraOffsetX	.\GameSettings.h	/^    float GetCameraOffsetX()                            { return m_hmSettings[CAMERA_OFFSET_X_SETTING]; }$/;"	f	class:CGameSettings
GetCameraOffsetY	.\GameSettings.h	/^    float GetCameraOffsetY()                            { return m_hmSettings[CAMERA_OFFSET_Y_SETTING]; }$/;"	f	class:CGameSettings
GetCameraOffsetZ	.\GameSettings.h	/^    float GetCameraOffsetZ()                            { return m_hmSettings[CAMERA_OFFSET_Z_SETTING]; }$/;"	f	class:CGameSettings
GetCameraPosOffset	.\GameEngine.h	/^    const D3DXVECTOR3* GetCameraPosOffset()                     { if(m_pMyPlayer) return &m_pMyPlayer->CameraControl.vPosOffSet; return NULL;}$/;"	f	class:CGameEngine
GetCameraSpringDist	.\GameSettings.h	/^    float GetCameraSpringDist()                         { return m_hmSettings[CAMERA_SPRING_DIST_SETTING]; }$/;"	f	class:CGameSettings
GetCameraSpringK	.\GameSettings.h	/^    float GetCameraSpringK()                            { return m_hmSettings[CAMERA_SPRING_K_SETTING]; }$/;"	f	class:CGameSettings
GetCameraSpringLookCoefficient	.\GameEngine.h	/^    float GetCameraSpringLookCoefficient()                      { return m_pGameSettings->GetCameraSpringLookK(); }$/;"	f	class:CGameEngine
GetCameraSpringLookDist	.\GameSettings.h	/^    float GetCameraSpringLookDist()                     { return m_hmSettings[CAMERA_SPRING_LOOK_DIST_SETTING]; }$/;"	f	class:CGameSettings
GetCameraSpringLookDistance	.\GameEngine.h	/^    float GetCameraSpringLookDistance()                         { return m_pGameSettings->GetCameraSpringLookDist(); }$/;"	f	class:CGameEngine
GetCameraSpringLookK	.\GameSettings.h	/^    float GetCameraSpringLookK()                        { return m_hmSettings[CAMERA_SPRING_LOOK_K_SETTING]; }$/;"	f	class:CGameSettings
GetCameraSpringPositionCoefficient	.\GameEngine.h	/^    float GetCameraSpringPositionCoefficient()                  { return m_pGameSettings->GetCameraSpringK(); }$/;"	f	class:CGameEngine
GetCameraSpringPositionDistance	.\GameEngine.h	/^    float GetCameraSpringPositionDistance()                     { return m_pGameSettings->GetCameraSpringDist(); }$/;"	f	class:CGameEngine
GetCaptionHeight	.\Common\DXUTgui.h	/^    int GetCaptionHeight() const { return m_nCaptionHeight; }$/;"	f	class:CDXUTDialog
GetCenter	.\QuadTree.h	/^    D3DXVECTOR3 GetCenter() { return D3DXVECTOR3((float)m_root->midx, (float)m_root->midy, (float)m_root->midz); }$/;"	f	class:CQuadTree
GetCenterVector	.\IImpostorable.h	/^    const D3DXVECTOR3& GetCenterVector() { return m_Center; }$/;"	f	class:IImpostorable
GetCharacterIDs	.\World.h	/^    const vector<UINT> &GetCharacterIDs()        { return m_vCharIDs; }$/;"	f	class:CWorld
GetCharacterObjectCenter	.\World.cpp	/^const D3DXVECTOR3* CWorld::GetCharacterObjectCenter(UINT charID) $/;"	f	class:CWorld
GetCharacterRadius	.\World.cpp	/^float CWorld::GetCharacterRadius(UINT charID) $/;"	f	class:CWorld
GetCheckBox	.\Common\DXUTgui.h	/^    CDXUTCheckBox*    GetCheckBox( int ID ) { return (CDXUTCheckBox*) GetControl( ID, DXUT_CONTROL_CHECKBOX ); }$/;"	f	class:CDXUTDialog
GetChecked	.\Common\DXUTgui.h	/^    bool GetChecked() { return m_bChecked; }$/;"	f	class:CDXUTCheckBox
GetCloudBatch	.\CloudSky.h	/^    const CCloudBatch* GetCloudBatch(int i) { return m_vpCloudBatches[i]; }$/;"	f	class:CCloudSky
GetCloudInfo	.\CloudBatch.h	/^    const SCloudInfo &GetCloudInfo() const { return m_CloudInfo; }$/;"	f	class:CCloud
GetCloudTex	.\CloudSky.h	/^    LPDIRECT3DTEXTURE9 GetCloudTex() { return m_pCloudAtlas; }$/;"	f	class:CCloudSky
GetClouds	.\CloudBatch.h	/^    const vector<CCloud*> &GetClouds() const { return m_vpClouds; }$/;"	f	class:CCloudBatch
GetComboBox	.\Common\DXUTgui.h	/^    CDXUTComboBox*    GetComboBox( int ID ) { return (CDXUTComboBox*) GetControl( ID, DXUT_CONTROL_COMBOBOX ); }$/;"	f	class:CDXUTDialog
GetCommand	.\GameGUI.cpp	/^CGameGUI::GameCommandPtr CGameGUI::GetCommand(UCHAR c) {$/;"	f	class:CGameGUI
GetControl	.\Common\DXUTgui.cpp	/^CDXUTControl* CDXUTDialog::GetControl( int ID )$/;"	f	class:CDXUTDialog
GetControl	.\Common\DXUTgui.cpp	/^CDXUTControl* CDXUTDialog::GetControl( int ID, UINT nControlType )$/;"	f	class:CDXUTDialog
GetControlAtPoint	.\Common\DXUTgui.cpp	/^CDXUTControl* CDXUTDialog::GetControlAtPoint( POINT pt )$/;"	f	class:CDXUTDialog
GetControlEnabled	.\Common\DXUTgui.cpp	/^bool CDXUTDialog::GetControlEnabled( int ID )$/;"	f	class:CDXUTDialog
GetCorners	.\CloudBatch.h	/^    const D3DXVECTOR3* GetCorners() const { return m_corners; }$/;"	f	class:CCloud
GetCtrlKeyboard	.\GameSettings.h	/^    UCHAR GetCtrlKeyboard(UINT i)                       { assert(i < 256); return m_cCtrlKeyBoard[i]; }        $/;"	f	class:CGameSettings
GetCurrentAdapterInfo	.\Common\DXUTSettingsDlg.cpp	/^CD3DEnumAdapterInfo* CD3DSettingsDlg::GetCurrentAdapterInfo()$/;"	f	class:CD3DSettingsDlg
GetCurrentDeviceInfo	.\Common\DXUTSettingsDlg.cpp	/^CD3DEnumDeviceInfo* CD3DSettingsDlg::GetCurrentDeviceInfo()$/;"	f	class:CD3DSettingsDlg
GetCurrentDeviceSettingsCombo	.\Common\DXUTSettingsDlg.cpp	/^CD3DEnumDeviceSettingsCombo* CD3DSettingsDlg::GetCurrentDeviceSettingsCombo()$/;"	f	class:CD3DSettingsDlg
GetD3DDevice	.\Common\DXUTgui.h	/^    IDirect3DDevice9* GetD3DDevice()                { return m_pd3dDevice; }$/;"	f	class:CDXUTDialogResourceManager
GetDXUTState	.\Common\DXUT.cpp	/^DXUTState& GetDXUTState()$/;"	f
GetData	.\Common\DXUTmisc.h	/^    TYPE*   GetData() { return m_pData; }$/;"	f	class:CGrowableArray
GetDecl	.\Sphere.h	/^    const D3DVERTEXELEMENT9* GetDecl() { return SphereVert::Decl; }$/;"	f	class:CSphere
GetDefaultElement	.\Common\DXUTgui.cpp	/^CDXUTElement* CDXUTDialog::GetDefaultElement( UINT nControlType, UINT iElement )$/;"	f	class:CDXUTDialog
GetDeviceInfo	.\Common\DXUTenum.cpp	/^CD3DEnumDeviceInfo* CD3DEnumeration::GetDeviceInfo( UINT AdapterOrdinal, D3DDEVTYPE DeviceType )$/;"	f	class:CD3DEnumeration
GetDeviceSettingsCombo	.\Common\DXUTenum.cpp	/^CD3DEnumDeviceSettingsCombo* CD3DEnumeration::GetDeviceSettingsCombo( UINT AdapterOrdinal, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, D3DFORMAT BackBufferFormat, BOOL bWindowed )$/;"	f	class:CD3DEnumeration
GetDeviceSettingsCombo	.\Common\DXUTenum.h	/^    CD3DEnumDeviceSettingsCombo*            GetDeviceSettingsCombo( DXUTDeviceSettings* pDeviceSettings ) { return GetDeviceSettingsCombo( pDeviceSettings->AdapterOrdinal, pDeviceSettings->DeviceType, pDeviceSettings->AdapterFormat, pDeviceSettings->pp.BackBufferFormat, pDeviceSettings->pp.Windowed ); }$/;"	f	class:CD3DEnumeration
GetDialogControl	.\Common\DXUTSettingsDlg.h	/^    CDXUTDialog* GetDialogControl() { return &m_Dialog; }$/;"	f	class:CD3DSettingsDlg
GetDiffAtLOD	.\ITerrain.h	/^    float GetDiffAtLOD(UINT LOD, UINT pos)     { $/;"	f	class:ITerrain
GetDiffMap	.\ITerrain.h	/^	float *GetDiffMap(UINT LOD) {$/;"	f	class:ITerrain
GetDirectSound	.\Common\DXUTsound.h	/^    inline  LPDIRECTSOUND8 GetDirectSound() { return m_pDS; }$/;"	f	class:CSoundManager
GetEdgeColor	.\ModelInstance.h	/^	const D3DXVECTOR3* GetEdgeColor() { return &m_vEdgeColor; }$/;"	f	class:CModelInstance
GetEditBox	.\Common\DXUTgui.h	/^    CDXUTEditBox*     GetEditBox( int ID ) { return (CDXUTEditBox*) GetControl( ID, DXUT_CONTROL_EDITBOX ); }$/;"	f	class:CDXUTDialog
GetElapsedTime	.\Common\DXUTmisc.cpp	/^double CDXUTTimer::GetElapsedTime()$/;"	f	class:CDXUTTimer
GetElement	.\Common\DXUTgui.h	/^    CDXUTElement* GetElement( UINT iElement ) { return m_Elements.GetAt( iElement ); }$/;"	f	class:CDXUTControl
GetEnabled	.\Common\DXUTgui.h	/^    virtual bool GetEnabled() { return m_bEnabled; }$/;"	f	class:CDXUTControl
GetEndX	.\AnimOb.h	/^	int GetEndX() { return endX; }$/;"	f	class:AnimOb
GetEndY	.\AnimOb.h	/^	int GetEndY() { return endY; }$/;"	f	class:AnimOb
GetEntities	.\World.h	/^    const EntityHashMap &GetEntities()          { return m_hmEntities; }$/;"	f	class:CWorld
GetEyePt	.\Common\DXUTmisc.h	/^    const D3DXVECTOR3* GetEyePt() const      { return &m_vEye; }$/;"	f	class:CBaseCamera
GetEyePt	.\Common\DXUTmisc.h	/^    const D3DXVECTOR3* GetEyePt() const      { return (D3DXVECTOR3*)&m_mCameraWorld._41; }$/;"	f	class:CFirstPersonCamera
GetFVF	.\Sphere.h	/^    UINT GetFVF() { return SphereVert::FVF; } $/;"	f	class:CSphere
GetFarClip	.\Common\DXUTmisc.h	/^    float GetFarClip() const { return m_fFarPlane; }$/;"	f	class:CBaseCamera
GetFont	.\Common\DXUTgui.cpp	/^DXUTFontNode* CDXUTDialog::GetFont( UINT index )$/;"	f	class:CDXUTDialog
GetFontNode	.\Common\DXUTgui.h	/^    DXUTFontNode*     GetFontNode( int iIndex )     { return m_FontCache.GetAt( iIndex ); };$/;"	f	class:CDXUTDialogResourceManager
GetFontNode	.\Common\DXUTgui.h	/^    DXUTFontNode* GetFontNode() { return m_pFontNode; }$/;"	f	class:CUniBuffer
GetFormat	.\Common\DXUTsound.h	/^    WAVEFORMATEX* GetFormat() { return m_pwfx; };$/;"	f	class:CWaveFile
GetFormat	.\Menu.h	/^	DWORD GetFormat() { return m_Format; }$/;"	f	class:CMenu
GetForwardVector	.\GameEngine.h	/^	D3DXVECTOR3 GetForwardVector(SPlayer* pplayer){$/;"	f	class:CGameEngine
GetFreeBuffer	.\Common\DXUTsound.cpp	/^LPDIRECTSOUNDBUFFER CSound::GetFreeBuffer()$/;"	f	class:CSound
GetFriction	.\GameSettings.h	/^    float GetFriction()							        { return m_hmSettings[FRICTION_SETTING]; }$/;"	f	class:CGameSettings
GetGravMult	.\GameSettings.h	/^    float GetGravMult()							        { return m_hmSettings[GRAV_MULT_SETTING]; }$/;"	f	class:CGameSettings
GetHeight	.\Common\DXUTgui.h	/^    int GetHeight() { return m_height; }$/;"	f	class:CDXUTDialog
GetHeightAt	.\ITerrain.h	/^	inline float GetHeightAt(int pos) const { return m_HeightMap[pos]; }$/;"	f	class:ITerrain
GetHeightMap	.\ITerrain.h	/^	inline const float *GetHeightMap(void) const {return m_HeightMap;}$/;"	f	class:ITerrain
GetHotkey	.\Common\DXUTgui.h	/^    UINT GetHotkey() { return m_nHotkey; }$/;"	f	class:CDXUTControl
GetID	.\Common\DXUTgui.h	/^    int  GetID() const { return m_ID; }$/;"	f	class:CDXUTControl
GetIMEEditBox	.\Common\DXUTgui.h	/^    CDXUTIMEEditBox*  GetIMEEditBox( int ID ) { return (CDXUTIMEEditBox*) GetControl( ID, DXUT_CONTROL_IMEEDITBOX ); }$/;"	f	class:CDXUTDialog
GetImeId	.\Common\DXUTgui.cpp	/^DWORD CDXUTIMEEditBox::GetImeId( UINT uIndex )$/;"	f	class:CDXUTIMEEditBox
GetIndexBufferAtLOD	.\MipmapTerrain.cpp	/^IDirect3DIndexBuffer9 *CMipmapTerrain::GetIndexBufferAtLOD(UINT LOD)$/;"	f	class:CMipmapTerrain
GetInput	.\Common\DXUTmisc.cpp	/^void CBaseCamera::GetInput( bool bGetKeyboardInput, bool bGetMouseInput, bool bGetGamepadInput, bool bResetCursorAfterMove )$/;"	f	class:CBaseCamera
GetIslands	.\World.h	/^    const vector<CQuadTree*> &GetIslands()      { return m_vpIslands; }$/;"	f	class:CWorld
GetItem	.\Common\DXUTgui.cpp	/^DXUTListBoxItem *CDXUTListBox::GetItem( int nIndex )$/;"	f	class:CDXUTListBox
GetItem	.\Common\DXUTgui.h	/^    DXUTComboBoxItem* GetItem( UINT index ) { return m_Items.GetAt( index ); }$/;"	f	class:CDXUTComboBox
GetItemData	.\Common\DXUTgui.cpp	/^void* CDXUTComboBox::GetItemData( const WCHAR* strText )$/;"	f	class:CDXUTComboBox
GetItemData	.\Common\DXUTgui.cpp	/^void* CDXUTComboBox::GetItemData( int nIndex )$/;"	f	class:CDXUTComboBox
GetKeyboardMappedFunction	.\GameSettings.cpp	/^UCHAR CGameSettings::GetKeyboardMappedFunction(UINT nKey, bool bKeyDown)$/;"	f	class:CGameSettings
GetLanguage	.\Common\DXUTgui.h	/^    static WORD GetLanguage() { return LOWORD( s_hklCurrent ); }$/;"	f	class:CDXUTIMEEditBox
GetLightDir	.\CloudSky.h	/^    const D3DXVECTOR4* GetLightDir() { return m_pSky->GetLightDir(); }$/;"	f	class:CCloudSky
GetLightDir	.\Sky.h	/^    const D3DXVECTOR4* GetLightDir() { return &m_LightDir; }$/;"	f	class:CSky
GetLightDirection	.\Common\DXUTmisc.h	/^    D3DXVECTOR3 GetLightDirection()         { return m_vCurrentDir; };$/;"	f	class:CDXUTDirectionWidget
GetLightPos	.\CloudSky.h	/^    const D3DXVECTOR3* GetLightPos() { return m_pSky->GetLightPos(); }$/;"	f	class:CCloudSky
GetLightPos	.\Sky.h	/^    const D3DXVECTOR3* GetLightPos() { assert(m_vpBigStars.size() > 0); return &m_vpBigStars[0]->lightPos; }$/;"	f	class:CSky
GetLightRight	.\Sky.h	/^    const D3DXVECTOR3* GetLightRight() { return &m_LightRight; }$/;"	f	class:CSky
GetLightUp	.\CloudSky.h	/^    const D3DXVECTOR3* GetLightUp() { return m_pSky->GetLightUp(); }$/;"	f	class:CCloudSky
GetLightUp	.\Sky.h	/^    const D3DXVECTOR3* GetLightUp() { return &m_LightUp; }$/;"	f	class:CSky
GetLinearVelocity	.\PhysicsRoot.h	/^	D3DXVECTOR3 GetLinearVelocity(int ID)$/;"	f	class:CPhysicsRoot
GetListBox	.\Common\DXUTgui.h	/^    CDXUTListBox*     GetListBox( int ID ) { return (CDXUTListBox*) GetControl( ID, DXUT_CONTROL_LISTBOX ); }$/;"	f	class:CDXUTDialog
GetLivableSphere	.\World.h	/^	VOID GetLivableSphere(D3DXVECTOR3 *vCenterOut, float *fRadiusOut)	$/;"	f	class:CWorld
GetLocation	.\Common\DXUTgui.h	/^    void GetLocation( POINT &Pt ) const { Pt.x = m_x; Pt.y = m_y; }$/;"	f	class:CDXUTDialog
GetLookAtPt	.\Common\DXUTmisc.h	/^    const D3DXVECTOR3* GetLookAtPt() const   { return &m_vLookAt; }$/;"	f	class:CBaseCamera
GetLowestNodes	.\QuadTree.cpp	/^VOID CQuadTree::QTNode::GetLowestNodes(vector<QTNode*> &vNodes, QTNode* top, $/;"	f	class:CQuadTree::QTNode
GetManager	.\Common\DXUTgui.h	/^    CDXUTDialogResourceManager* GetManager() { return m_pManager; }$/;"	f	class:CDXUTDialog
GetMass	.\GameSettings.h	/^    float GetMass()							            { return m_hmSettings[MASS_SETTING]; }$/;"	f	class:CGameSettings
GetMatrix	.\Common\DXUTMesh.h	/^    D3DXMATRIX* GetMatrix()                   { return &m_mat; }$/;"	f	class:CDXUTMeshFrame
GetMaxErrorVertexAtTile	.\ITerrain.cpp	/^void ITerrain::GetMaxErrorVertexAtTile(D3DXVECTOR3 v, vector<D3DXVECTOR3> &maxPoints, int &maxErrorIndex) {$/;"	f	class:ITerrain
GetMaxY	.\QuadTree.h	/^    float GetMaxY() { return (float)m_root->maxy; }$/;"	f	class:CQuadTree
GetMenuIndex	.\Button.h	/^	int GetMenuIndex() { return menuIndex; }$/;"	f	class:CButton
GetMesh	.\Common\DXUTMesh.h	/^    LPD3DXMESH GetMesh() { return m_pMesh; }$/;"	f	class:CDXUTMesh
GetMinMaxHeight	.\ITerrain.cpp	/^VOID ITerrain::GetMinMaxHeight(D3DXVECTOR3 v, float &min, float &max) $/;"	f	class:ITerrain
GetMinShade	.\ModelInstance.h	/^	int GetMinShade() { return (int)m_fMinShade; }$/;"	f	class:CModelInstance
GetMinY	.\QuadTree.h	/^    float GetMinY() { return (float)m_root->miny; }$/;"	f	class:CQuadTree
GetMinimized	.\Common\DXUTgui.h	/^    bool GetMinimized() { return m_bMinimized; }$/;"	f	class:CDXUTDialog
GetMouse	.\GameSettings.h	/^    UCHAR GetMouse(UINT i)                              { assert(i < NUM_MOUSE_BUTTONS); return m_cMouse[i]; } $/;"	f	class:CGameSettings
GetMouseMappedFunction	.\GameSettings.cpp	/^UCHAR CGameSettings::GetMouseMappedFunction(UINT nMouseButton, bool bKeyDown)$/;"	f	class:CGameSettings
GetMyPlayer	.\GameEngine.h	/^    const SPlayer* GetMyPlayer()                                { return m_pMyPlayer; }$/;"	f	class:CGameEngine
GetMyPlayerCameraTarget	.\GameEngine.h	/^    const D3DXMATRIX* GetMyPlayerCameraTarget() {$/;"	f	class:CGameEngine
GetNearClip	.\Common\DXUTmisc.h	/^    float GetNearClip() const { return m_fNearPlane; }$/;"	f	class:CBaseCamera
GetNextAnimStill	.\SpriteAnimMgr.cpp	/^bool CSpriteAnimMgr::GetNextAnimStill(LPDIRECT3DTEXTURE9 *ppTex, RECTF &frect)$/;"	f	class:CSpriteAnimMgr
GetNextControl	.\Common\DXUTgui.cpp	/^CDXUTControl* CDXUTDialog::GetNextControl( CDXUTControl* pControl )$/;"	f	class:CDXUTDialog
GetNextItemPos	.\Common\DXUTgui.cpp	/^void CUniBuffer::GetNextItemPos( int nCP, int *pPrior )$/;"	f	class:CUniBuffer
GetNormalAt	.\ITerrain.h	/^    inline D3DXVECTOR3 GetNormalAt(int pos) const { return m_NormalMap[pos]; }$/;"	f	class:ITerrain
GetNotBloomMap	.\World.h	/^    LPDIRECT3DTEXTURE9 GetNotBloomMap()         { return m_pNotBloomMap; }$/;"	f	class:CWorld
GetNumBubbles	.\Bubbles.h	/^    size_t GetNumBubbles() { return m_vBubbles.size(); }$/;"	f	class:CBubbles
GetNumCloudBatches	.\CloudSky.h	/^    size_t GetNumCloudBatches() { return m_vpCloudBatches.size(); }$/;"	f	class:CCloudSky
GetNumFlaggedToDraw	.\ImpostorAtlas.h	/^    int GetNumFlaggedToDraw() { return m_nFlaggedToDraw; }$/;"	f	class:CImpostorAtlas
GetNumItems	.\Common\DXUTgui.h	/^    UINT    GetNumItems() { return m_Items.GetSize(); }$/;"	f	class:CDXUTComboBox
GetNumMaxImpostors	.\ImpostorAtlas.h	/^    int GetNumMaxImpostors() { return m_nMaxImpostors; }$/;"	f	class:CImpostorAtlas
GetNumShades	.\ModelInstance.h	/^	int GetNumShades() { return (int)m_fShades; }$/;"	f	class:CModelInstance
GetNumTextures	.\Sprite.h	/^    int GetNumTextures() { return m_nTex; }    $/;"	f	class:CSprite
GetNumTrianglesAtLOD	.\MipmapTerrain.cpp	/^UINT CMipmapTerrain::GetNumTrianglesAtLOD(UINT LOD)$/;"	f	class:CMipmapTerrain
GetNumberOfAnimationSets	.\ModelInstance.h	/^    UINT GetNumberOfAnimationSets() const { if(m_pAnimController) return m_pAnimController->GetNumAnimationSets(); return 0; }$/;"	f	class:CModelInstance
GetNumberOfAnimationSets	.\XModelHeirarchy.h	/^    UINT GetNumberOfAnimationSets() const { if(m_pAnimController) return m_pAnimController->GetNumAnimationSets(); return 0; }$/;"	f	class:CXModelHeirarchy
GetNumberOfLODs	.\ITerrain.cpp	/^UINT ITerrain::GetNumberOfLODs(void)$/;"	f	class:ITerrain
GetObjectCenter	.\ModelInstance.h	/^    const D3DXVECTOR3* GetObjectCenter() { return &m_pXmodel->m_vObjectCenter; }$/;"	f	class:CModelInstance
GetObjectExtremities	.\ModelInstance.h	/^    const D3DXVECTOR3* GetObjectExtremities() { return &m_pXmodel->m_vObjectExtremities; }$/;"	f	class:CModelInstance
GetObjectRadius	.\ModelInstance.h	/^    float GetObjectRadius() { return m_pXmodel->m_fObjectRadius; }$/;"	f	class:CModelInstance
GetPageSize	.\Common\DXUTgui.h	/^    int GetPageSize() { return m_nPageSize; }$/;"	f	class:CDXUTScrollBar
GetPhysicsTimeStep	.\PhysicsRoot.h	/^    float GetPhysicsTimeStep()                              { return m_fTimeStep; } $/;"	f	class:CPhysicsRoot
GetPillarPointer	.\QuadTree.h	/^    CPillar *GetPillarPointer(void) { return m_pPillar; }$/;"	f	class:CQuadTree
GetPlayerBackpedalSpeed	.\GameSettings.h	/^    float GetPlayerBackpedalSpeed() 					{ return m_hmSettings[BACKPEDAL_SETTING]; }$/;"	f	class:CGameSettings
GetPlayerByPhysicsID	.\GameEngine.cpp	/^CGameEngine::SPlayer* CGameEngine::GetPlayerByPhysicsID( int physicsID )$/;"	f	class:CGameEngine
GetPlayerDashSpeed	.\GameSettings.h	/^	float GetPlayerDashSpeed()							{ return m_hmSettings[DASH_SETTING]; }$/;"	f	class:CGameSettings
GetPlayerDodgeSpeed	.\GameSettings.h	/^	float GetPlayerDodgeSpeed()							{ return m_hmSettings[DODGE_SPEED_SETTING]; }	$/;"	f	class:CGameSettings
GetPlayerHashMap	.\GameEngine.h	/^	PlayerHashMap &GetPlayerHashMap()   						{ return m_hmPlayers; }$/;"	f	class:CGameEngine
GetPlayerJumpAccel	.\GameSettings.h	/^	float GetPlayerJumpAccel()							{ return m_hmSettings[JUMP_ACCEL_SETTING]; }	$/;"	f	class:CGameSettings
GetPlayerJumpCount	.\GameSettings.h	/^	int   GetPlayerJumpCount()							{ return (int) m_hmSettings[JUMP_COUNT_SETTING]; }	$/;"	f	class:CGameSettings
GetPlayerPosition	.\GameEngine.cpp	/^D3DXVECTOR3 CGameEngine::GetPlayerPosition(int charID)$/;"	f	class:CGameEngine
GetPlayerPosition	.\GameEngine.h	/^	D3DXVECTOR3 GetPlayerPosition(SPlayer* pplayer){$/;"	f	class:CGameEngine
GetPlayerProjectileMaxIncr	.\GameSettings.h	/^    float GetPlayerProjectileMaxIncr()					{ return m_hmSettings[PROJ_MAX_INCR_SETTING]; }$/;"	f	class:CGameSettings
GetPlayerProjectileSpeed	.\GameSettings.h	/^    float GetPlayerProjectileSpeed()					{ return m_hmSettings[PROJ_SPEED_SETTING]; }$/;"	f	class:CGameSettings
GetPlayerRunSpeed	.\GameSettings.h	/^	float GetPlayerRunSpeed()							{ return m_hmSettings[RUN_SETTING]; }$/;"	f	class:CGameSettings
GetPlayerStartHealth	.\GameSettings.h	/^	float GetPlayerStartHealth()						{ return m_hmSettings[START_HEALTH_SETTING]; }$/;"	f	class:CGameSettings
GetPlayerStartLives	.\GameSettings.h	/^	int   GetPlayerStartLives()							{ return (int) m_hmSettings[START_LIVES_SETTING]; }$/;"	f	class:CGameSettings
GetPlayerTurnSpeed	.\GameSettings.h	/^    float GetPlayerTurnSpeed()                          { return m_hmSettings[TURN_SETTING]; }$/;"	f	class:CGameSettings
GetPlayerVelocity	.\GameEngine.h	/^    D3DXVECTOR3 GetPlayerVelocity(int physicsID)                { return m_pPhysicsRoot->GetLinearVelocity(physicsID); }$/;"	f	class:CGameEngine
GetPlayerWorldSpace	.\GameEngine.h	/^    const D3DXMATRIX* GetPlayerWorldSpace(int charID)           { return &m_hmPlayers[charID].mWorld; }$/;"	f	class:CGameEngine
GetPosition	.\PhysicsRoot.h	/^    D3DXVECTOR3 GetPosition(int ID) $/;"	f	class:CPhysicsRoot
GetPossibleDepthStencilFormatList	.\Common\DXUTenum.cpp	/^CGrowableArray<D3DFORMAT>* CD3DEnumeration::GetPossibleDepthStencilFormatList() $/;"	f	class:CD3DEnumeration
GetPossibleMultisampleTypeList	.\Common\DXUTenum.cpp	/^CGrowableArray<D3DMULTISAMPLE_TYPE>* CD3DEnumeration::GetPossibleMultisampleTypeList()$/;"	f	class:CD3DEnumeration
GetPossiblePresentIntervalList	.\Common\DXUTenum.cpp	/^CGrowableArray<UINT>* CD3DEnumeration::GetPossiblePresentIntervalList()$/;"	f	class:CD3DEnumeration
GetPossibleVertexProcessingList	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::GetPossibleVertexProcessingList( bool* pbSoftwareVP, bool* pbHardwareVP, bool* pbPureHarewareVP, bool* pbMixedVP )$/;"	f	class:CD3DEnumeration
GetPrevControl	.\Common\DXUTgui.cpp	/^CDXUTControl* CDXUTDialog::GetPrevControl( CDXUTControl* pControl )$/;"	f	class:CDXUTDialog
GetPrimaryLanguage	.\Common\DXUTgui.h	/^    static WORD GetPrimaryLanguage() { return PRIMARYLANGID( LOWORD( s_hklCurrent ) ); }$/;"	f	class:CDXUTIMEEditBox
GetPriorItemPos	.\Common\DXUTgui.cpp	/^void CUniBuffer::GetPriorItemPos( int nCP, int *pPrior )$/;"	f	class:CUniBuffer
GetPrivateReadingString	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::GetPrivateReadingString()$/;"	f	class:CDXUTIMEEditBox
GetProjMatrix	.\Common\DXUTmisc.h	/^    const D3DXMATRIX*  GetProjMatrix() const { return &m_mProj; }$/;"	f	class:CBaseCamera
GetProjViewMatrices	.\IImpostorable.cpp	/^VOID IImpostorable::GetProjViewMatrices(D3DXMATRIX* pproj, D3DXMATRIX* pview, D3DXVECTOR3* pnewcenter,$/;"	f	class:IImpostorable
GetPuffTexRect	.\CloudBatch.cpp	/^RECTF SCloudInfo::GetPuffTexRect(int pos)$/;"	f	class:SCloudInfo
GetQuatNow	.\Common\DXUTmisc.h	/^    D3DXQUATERNION GetQuatNow() const                       { return m_qNow; }$/;"	f	class:CD3DArcBall
GetRadioButton	.\Common\DXUTgui.h	/^    CDXUTRadioButton* GetRadioButton( int ID ) { return (CDXUTRadioButton*) GetControl( ID, DXUT_CONTROL_RADIOBUTTON ); }$/;"	f	class:CDXUTDialog
GetRadius	.\Common\DXUTmisc.h	/^    float GetRadius()                 { return m_fRadius; };$/;"	f	class:CDXUTDirectionWidget
GetRakTime	.\Client.h	/^    RakNetTime GetRakTime()                                 {   return RakNet::GetTime();  }$/;"	f	class:CClient
GetRange	.\Common\DXUTgui.h	/^    void GetRange( int &nMin, int &nMax ) const { nMin = m_nMin; nMax = m_nMax; }$/;"	f	class:CDXUTSlider
GetReadingWindowOrientation	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::GetReadingWindowOrientation( DWORD dwId )$/;"	f	class:CDXUTIMEEditBox
GetRightVector	.\GameEngine.h	/^	D3DXVECTOR3 GetRightVector(SPlayer* pplayer){$/;"	f	class:CGameEngine
GetRotationMatrix	.\Common\DXUTmisc.h	/^    const D3DXMATRIX* GetRotationMatrix()                   { return D3DXMatrixRotationQuaternion(&m_mRotation, &m_qNow); };$/;"	f	class:CD3DArcBall
GetScrollBarWidth	.\Common\DXUTgui.h	/^    int     GetScrollBarWidth() const { return m_nSBWidth; }$/;"	f	class:CDXUTComboBox
GetScrollBarWidth	.\Common\DXUTgui.h	/^    int  GetScrollBarWidth() const { return m_nSBWidth; }$/;"	f	class:CDXUTListBox
GetSelectedAdapter	.\Common\DXUTSettingsDlg.cpp	/^UINT CD3DSettingsDlg::GetSelectedAdapter()$/;"	f	class:CD3DSettingsDlg
GetSelectedAdapterFormat	.\Common\DXUTSettingsDlg.cpp	/^D3DFORMAT CD3DSettingsDlg::GetSelectedAdapterFormat()$/;"	f	class:CD3DSettingsDlg
GetSelectedBackBufferFormat	.\Common\DXUTSettingsDlg.cpp	/^D3DFORMAT CD3DSettingsDlg::GetSelectedBackBufferFormat()$/;"	f	class:CD3DSettingsDlg
GetSelectedData	.\Common\DXUTgui.cpp	/^void* CDXUTComboBox::GetSelectedData()$/;"	f	class:CDXUTComboBox
GetSelectedDepthStencilBufferFormat	.\Common\DXUTSettingsDlg.cpp	/^D3DFORMAT CD3DSettingsDlg::GetSelectedDepthStencilBufferFormat()$/;"	f	class:CD3DSettingsDlg
GetSelectedDeviceType	.\Common\DXUTSettingsDlg.cpp	/^D3DDEVTYPE CD3DSettingsDlg::GetSelectedDeviceType()$/;"	f	class:CD3DSettingsDlg
GetSelectedIndex	.\Common\DXUTgui.cpp	/^int CDXUTListBox::GetSelectedIndex( int nPreviousSelected )$/;"	f	class:CDXUTListBox
GetSelectedItem	.\Common\DXUTgui.cpp	/^DXUTComboBoxItem* CDXUTComboBox::GetSelectedItem()$/;"	f	class:CDXUTComboBox
GetSelectedItem	.\Common\DXUTgui.h	/^    DXUTListBoxItem *GetSelectedItem( int nPreviousSelected = -1 ) { return GetItem( GetSelectedIndex( nPreviousSelected ) ); }$/;"	f	class:CDXUTListBox
GetSelectedMultisampleQuality	.\Common\DXUTSettingsDlg.cpp	/^DWORD CD3DSettingsDlg::GetSelectedMultisampleQuality()$/;"	f	class:CD3DSettingsDlg
GetSelectedMultisampleType	.\Common\DXUTSettingsDlg.cpp	/^D3DMULTISAMPLE_TYPE CD3DSettingsDlg::GetSelectedMultisampleType()$/;"	f	class:CD3DSettingsDlg
GetSelectedPresentInterval	.\Common\DXUTSettingsDlg.cpp	/^DWORD CD3DSettingsDlg::GetSelectedPresentInterval()$/;"	f	class:CD3DSettingsDlg
GetSelectedRefreshRate	.\Common\DXUTSettingsDlg.cpp	/^DWORD CD3DSettingsDlg::GetSelectedRefreshRate()$/;"	f	class:CD3DSettingsDlg
GetSelectedResolution	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::GetSelectedResolution( DWORD* pdwWidth, DWORD* pdwHeight )$/;"	f	class:CD3DSettingsDlg
GetSelectedText	.\MultiColumnList.cpp	/^LPCSTR CMultiColumnList::GetSelectedText() {$/;"	f	class:CMultiColumnList
GetSelectedText	.\ServerBrowser.cpp	/^LPCSTR CServerBrowser::GetSelectedText() {$/;"	f	class:CServerBrowser
GetSelectedVertexProcessingType	.\Common\DXUTSettingsDlg.cpp	/^DWORD CD3DSettingsDlg::GetSelectedVertexProcessingType()$/;"	f	class:CD3DSettingsDlg
GetServerInfo	.\Client.h	/^    const SServerInfo& GetServerInfo()                      {   return m_ServerInfo; }$/;"	f	class:CClient
GetServerInfo	.\Server.h	/^    const SServerInfo& GetServerInfo()                      {   return m_ServerInfo; }$/;"	f	class:CServer
GetServerList	.\NetworkRoot.h	/^    const ServerInfoSet& GetServerList()                { return m_sServers; }$/;"	f	class:CNetworkRoot
GetShadowMap	.\ShadowMap.h	/^    LPDIRECT3DTEXTURE9 GetShadowMap() { return m_pShadowMapTex; }$/;"	f	class:CShadowMap
GetShadowViewMatrix	.\ShadowMap.h	/^    D3DXMATRIX* GetShadowViewMatrix() { return &m_mShadowView; }$/;"	f	class:CShadowMap
GetShadowViewProjMatrix	.\ShadowMap.cpp	/^VOID CShadowMap::GetShadowViewProjMatrix(D3DXMATRIX* pOut, const D3DXMATRIX* pProj)  \/\/ light projection (same as camera)$/;"	f	class:CShadowMap
GetShiftKeyboard	.\GameSettings.h	/^    UCHAR GetShiftKeyboard(UINT i)                      { assert(i < 256); return m_cShiftKeyBoard[i]; }        $/;"	f	class:CGameSettings
GetShortLives	.\GameEngine.h	/^    list<SShortLifeEntity> &GetShortLives()                     { return m_lShortLives; }$/;"	f	class:CGameEngine
GetSilhouetteThresh	.\ModelInstance.h	/^	float GetSilhouetteThresh() { return m_fThreshold; }$/;"	f	class:CModelInstance
GetSize	.\Common\DXUTgui.h	/^    int GetSize() const { return m_Items.GetSize(); }$/;"	f	class:CDXUTListBox
GetSize	.\Common\DXUTmisc.h	/^    int     GetSize() const { return m_nSize; }$/;"	f	class:CGrowableArray
GetSize	.\Common\DXUTsound.cpp	/^DWORD CWaveFile::GetSize()$/;"	f	class:CWaveFile
GetSkirtIndex	.\MipmapTerrain.cpp	/^IDirect3DIndexBuffer9 *CMipmapTerrain::GetSkirtIndex(int LOD, int &stripSize)$/;"	f	class:CMipmapTerrain
GetSlider	.\Common\DXUTgui.h	/^    CDXUTSlider*      GetSlider( int ID ) { return (CDXUTSlider*) GetControl( ID, DXUT_CONTROL_SLIDER ); }$/;"	f	class:CDXUTDialog
GetSpawnInfo	.\GameEngine.cpp	/^VOID CGameEngine::GetSpawnInfo( int charID,$/;"	f	class:CGameEngine
GetSprite	.\CloudSky.h	/^    CPolySprite* GetSprite() { return m_pPolySprite; }$/;"	f	class:CCloudSky
GetSquareNormal	.\ITerrain.cpp	/^D3DXVECTOR3 ITerrain::GetSquareNormal(int i, int j) {$/;"	f	class:ITerrain
GetStandardMesh	.\XModelHeirarchy.h	/^    ID3DXMesh* GetStandardMesh()                        { return m_pStandardMesh; }$/;"	f	class:CXModelHeirarchy
GetState	.\Button.h	/^	ButtonState GetState() { return state; }$/;"	f	class:CButton
GetStatic	.\Common\DXUTgui.h	/^    CDXUTStatic*      GetStatic( int ID ) { return (CDXUTStatic*) GetControl( ID, DXUT_CONTROL_STATIC ); }$/;"	f	class:CDXUTDialog
GetStyle	.\Common\DXUTgui.h	/^    DWORD GetStyle() const { return m_dwStyle; }$/;"	f	class:CDXUTListBox
GetSubLanguage	.\Common\DXUTgui.h	/^    static WORD GetSubLanguage() { return SUBLANGID( LOWORD( s_hklCurrent ) ); }$/;"	f	class:CDXUTIMEEditBox
GetSunColor	.\CloudSky.h	/^    const D3DXVECTOR4* GetSunColor(int idx) { return m_pSky->GetSunColor(idx); }$/;"	f	class:CCloudSky
GetSunColor	.\Sky.h	/^    const D3DXVECTOR4* GetSunColor(int idx) { return &m_CurrentSunStates[idx].color; }    $/;"	f	class:CSky
GetSunPSPower	.\Sky.h	/^    float GetSunPSPower(int idx) { return m_CurrentSunStates[idx].pspower; }$/;"	f	class:CSky
GetSunRequests	.\GameEngine.h	/^    vector<SSunStateRequest> &GetSunRequests()                  { return m_vSunStateRequests; }$/;"	f	class:CGameEngine
GetSunVSMult	.\Sky.h	/^    float GetSunVSMult(int idx) { return m_CurrentSunStates[idx].vsmult; }$/;"	f	class:CSky
GetSunVSPower	.\Sky.h	/^    float GetSunVSPower(int idx) { return m_CurrentSunStates[idx].vspower; }$/;"	f	class:CSky
GetTangentBinormalVector	.\Sphere.cpp	/^VOID CSphere::GetTangentBinormalVector(D3DXVECTOR3* pTangentOut, D3DXVECTOR3* pBinormalOut, const D3DXVECTOR3* pv0, const D3DXVECTOR3* pv1, const D3DXVECTOR3* pv2, $/;"	f	class:CSphere
GetTerrain	.\QuadTree.h	/^    const ITerrain* GetTerrain() const { return m_pTerrain; }$/;"	f	class:CQuadTree
GetText	.\Common\DXUTgui.h	/^    LPCWSTR GetText() { return m_Buffer.GetBuffer(); }$/;"	f	class:CDXUTEditBox
GetText	.\Common\DXUTgui.h	/^    LPCWSTR GetText() { return m_strText; }$/;"	f	class:CDXUTStatic
GetText	.\ConsoleLine.h	/^	LPCSTR GetText() { return m_strText.c_str(); }$/;"	f	class:CConsoleLine
GetTextCopy	.\Common\DXUTgui.cpp	/^HRESULT CDXUTEditBox::GetTextCopy( LPWSTR strDest, UINT bufferCount )$/;"	f	class:CDXUTEditBox
GetTextCopy	.\Common\DXUTgui.cpp	/^HRESULT CDXUTStatic::GetTextCopy( LPWSTR strDest, UINT bufferCount )$/;"	f	class:CDXUTStatic
GetTextLength	.\Common\DXUTgui.h	/^    int GetTextLength() { return m_Buffer.GetTextSize(); }  \/\/ Returns text length in chars excluding NULL.$/;"	f	class:CDXUTEditBox
GetTextSize	.\Common\DXUTgui.h	/^    int  GetTextSize()  { return lstrlenW( m_pwszBuffer ); }$/;"	f	class:CUniBuffer
GetTexture	.\Common\DXUTgui.cpp	/^DXUTTextureNode* CDXUTDialog::GetTexture( UINT index )$/;"	f	class:CDXUTDialog
GetTextureNode	.\Common\DXUTgui.h	/^    DXUTTextureNode*  GetTextureNode( int iIndex )  { return m_TextureCache.GetAt( iIndex ); };$/;"	f	class:CDXUTDialogResourceManager
GetTileSize	.\ITerrain.h	/^    virtual UINT GetTileSize() { return m_TileSize; }$/;"	f	class:ITerrain
GetTime	.\Common\DXUTmisc.cpp	/^double CDXUTTimer::GetTime()$/;"	f	class:CDXUTTimer
GetTimeOfDay	.\CloudSky.h	/^    float GetTimeOfDay() { return m_pSky->GetTimeOfDay(); }$/;"	f	class:CCloudSky
GetTimeOfDay	.\Sky.h	/^    float GetTimeOfDay() { return m_Clock.time; }$/;"	f	class:CSky
GetTimeOfDay	.\World.h	/^    float GetTimeOfDay()                        { return m_pCloudSky->GetTimeOfDay(); }$/;"	f	class:CWorld
GetTrackPos	.\Common\DXUTgui.h	/^    int GetTrackPos() { return m_nPosition; }$/;"	f	class:CDXUTScrollBar
GetTranslation	.\QuadTree.h	/^    const D3DXVECTOR3* GetTranslation() const { return &m_Info.vTranslation; }$/;"	f	class:CQuadTree
GetTranslationDeltaMatrix	.\Common\DXUTmisc.h	/^    const D3DXMATRIX* GetTranslationDeltaMatrix() const     { return &m_mTranslationDelta; }$/;"	f	class:CD3DArcBall
GetTranslationMatrix	.\Common\DXUTmisc.h	/^    const D3DXMATRIX* GetTranslationMatrix() const          { return &m_mTranslation; }$/;"	f	class:CD3DArcBall
GetType	.\Common\DXUTgui.h	/^    UINT GetType() const { return m_Type; }$/;"	f	class:CDXUTControl
GetUpVector	.\GameEngine.h	/^	D3DXVECTOR3 GetUpVector(SPlayer* pplayer){$/;"	f	class:CGameEngine
GetUserData	.\Common\DXUTgui.h	/^    void *GetUserData() const { return m_pUserData; }$/;"	f	class:CDXUTControl
GetValue	.\Common\DXUTgui.h	/^    int  GetValue() const { return m_nValue; };$/;"	f	class:CDXUTSlider
GetVanillaKeyboard	.\GameSettings.h	/^    UCHAR GetVanillaKeyboard(UINT i)                    { assert(i < 256); return m_cKeyBoard[i]; }        $/;"	f	class:CGameSettings
GetViewMatrix	.\Common\DXUTmisc.h	/^    const D3DXMATRIX*  GetViewMatrix() const { return &m_mView; }$/;"	f	class:CBaseCamera
GetVisible	.\Common\DXUTgui.h	/^    bool GetVisible() { return m_bVisible; }$/;"	f	class:CDXUTDialog
GetVisible	.\Common\DXUTgui.h	/^    virtual bool GetVisible() { return m_bVisible; }$/;"	f	class:CDXUTControl
GetWidth	.\Common\DXUTgui.h	/^    int GetWidth() { return m_width; }$/;"	f	class:CDXUTDialog
GetWorldAhead	.\Common\DXUTmisc.h	/^    const D3DXVECTOR3* GetWorldAhead() const { return (D3DXVECTOR3*)&m_mCameraWorld._31; }$/;"	f	class:CFirstPersonCamera
GetWorldExtent	.\World.h	/^    float GetWorldExtent()                      { return m_CloudSkyInfo.fSkyRadius; }$/;"	f	class:CWorld
GetWorldMatrix	.\Common\DXUTmisc.h	/^    D3DXMATRIX*  GetWorldMatrix()            { return &m_mCameraWorld; }$/;"	f	class:CFirstPersonCamera
GetWorldMatrix	.\Common\DXUTmisc.h	/^    const D3DXMATRIX* GetWorldMatrix() const { return &m_mWorld; }$/;"	f	class:CModelViewerCamera
GetWorldPosition	.\Sky.h	/^    VOID GetWorldPosition(D3DXVECTOR3 *pOut, float *pRadius) {  \/\/! Get this worlds position.$/;"	f	class:CSky
GetWorldRight	.\Common\DXUTmisc.h	/^    const D3DXVECTOR3* GetWorldRight() const { return (D3DXVECTOR3*)&m_mCameraWorld._11; } $/;"	f	class:CFirstPersonCamera
GetWorldUp	.\Common\DXUTmisc.h	/^    const D3DXVECTOR3* GetWorldUp() const    { return (D3DXVECTOR3*)&m_mCameraWorld._21; }$/;"	f	class:CFirstPersonCamera
GetXCoord	.\Button.h	/^	int GetXCoord() { return m_nX; }$/;"	f	class:CButton
GetXModel	.\ModelInstance.h	/^    CXModelHeirarchy* GetXModel() { return m_pXmodel; }$/;"	f	class:CModelInstance
GetYCoord	.\Button.h	/^	int GetYCoord() { return m_nY; }$/;"	f	class:CButton
GoGrey	.\PostProcEffects.cpp	/^void PostProcEffects::GoGrey(void)$/;"	f	class:PostProcEffects
HEIRARCHYEFFECTFILE	.\XModelHeirarchy.h	76;"	d
HELD_DOWN	.\Common\DXUTgui.h	/^    enum ARROWSTATE { CLEAR, CLICKED_UP, CLICKED_DOWN, HELD_UP, HELD_DOWN };$/;"	e	enum:CDXUTScrollBar::ARROWSTATE
HELD_UP	.\Common\DXUTgui.h	/^    enum ARROWSTATE { CLEAR, CLICKED_UP, CLICKED_DOWN, HELD_UP, HELD_DOWN };$/;"	e	enum:CDXUTScrollBar::ARROWSTATE
HandleInput	.\Pillar.cpp	/^UINT CPillar::HandleInput(UINT nchar, bool bAltDown)$/;"	f	class:CPillar
HandleKeyboard	.\Common\DXUTgui.cpp	/^bool CDXUTButton::HandleKeyboard( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTButton
HandleKeyboard	.\Common\DXUTgui.cpp	/^bool CDXUTCheckBox::HandleKeyboard( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTCheckBox
HandleKeyboard	.\Common\DXUTgui.cpp	/^bool CDXUTComboBox::HandleKeyboard( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTComboBox
HandleKeyboard	.\Common\DXUTgui.cpp	/^bool CDXUTEditBox::HandleKeyboard( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTEditBox
HandleKeyboard	.\Common\DXUTgui.cpp	/^bool CDXUTListBox::HandleKeyboard( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTListBox
HandleKeyboard	.\Common\DXUTgui.cpp	/^bool CDXUTRadioButton::HandleKeyboard( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTRadioButton
HandleKeyboard	.\Common\DXUTgui.cpp	/^bool CDXUTScrollBar::HandleKeyboard( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTScrollBar
HandleKeyboard	.\Common\DXUTgui.cpp	/^bool CDXUTSlider::HandleKeyboard( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTSlider
HandleKeyboard	.\Common\DXUTgui.h	/^    virtual bool HandleKeyboard( UINT uMsg, WPARAM wParam, LPARAM lParam ) { return false; }$/;"	f	class:CDXUTControl
HandleMessages	.\Common\DXUTmisc.cpp	/^LRESULT CBaseCamera::HandleMessages( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CBaseCamera
HandleMessages	.\Common\DXUTmisc.cpp	/^LRESULT CD3DArcBall::HandleMessages( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CD3DArcBall
HandleMessages	.\Common\DXUTmisc.cpp	/^LRESULT CDXUTDirectionWidget::HandleMessages( HWND hWnd, UINT uMsg, $/;"	f	class:CDXUTDirectionWidget
HandleMessages	.\Common\DXUTmisc.cpp	/^LRESULT CModelViewerCamera::HandleMessages( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CModelViewerCamera
HandleMouse	.\Common\DXUTgui.cpp	/^bool CDXUTButton::HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTButton
HandleMouse	.\Common\DXUTgui.cpp	/^bool CDXUTCheckBox::HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTCheckBox
HandleMouse	.\Common\DXUTgui.cpp	/^bool CDXUTComboBox::HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTComboBox
HandleMouse	.\Common\DXUTgui.cpp	/^bool CDXUTEditBox::HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTEditBox
HandleMouse	.\Common\DXUTgui.cpp	/^bool CDXUTIMEEditBox::HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTIMEEditBox
HandleMouse	.\Common\DXUTgui.cpp	/^bool CDXUTListBox::HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTListBox
HandleMouse	.\Common\DXUTgui.cpp	/^bool CDXUTRadioButton::HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTRadioButton
HandleMouse	.\Common\DXUTgui.cpp	/^bool CDXUTScrollBar::HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTScrollBar
HandleMouse	.\Common\DXUTgui.cpp	/^bool CDXUTSlider::HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTSlider
HandleMouse	.\Common\DXUTgui.h	/^    virtual bool HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam ) { return false; }$/;"	f	class:CDXUTControl
HandleWaveStreamNotification	.\Common\DXUTsound.cpp	/^HRESULT CStreamingSound::HandleWaveStreamNotification( BOOL bLoopedPlay )$/;"	f	class:CStreamingSound
Height	.\Common\DXUTmisc.h	/^    UINT Height;$/;"	m	struct:DXUTCache_Texture
HelpCmdFunc	.\GameRoot.cpp	/^VOID CGameRoot::HelpCmdFunc(const string& s){$/;"	f	class:CGameRoot
HitPlayer	.\GameEngine.cpp	/^void CGameEngine::HitPlayer(SPlayer* pVictim, float fDamage, float fDazeTime, D3DXVECTOR3* pvImpulse){$/;"	f	class:CGameEngine
HoriCand	.\Common\DXUTgui.h	/^        CUniBuffer HoriCand; \/\/ Candidate list string (for horizontal candidate window)$/;"	m	struct:CDXUTIMEEditBox::CCandList
HostCmdFunc	.\GameRoot.cpp	/^VOID CGameRoot::HostCmdFunc(const string& s)$/;"	f	class:CGameRoot
HostServer	.\GameEngine.cpp	/^VOID CGameEngine::HostServer(const SServerInfo &serverOptions)           $/;"	f	class:CGameEngine
IDC_CHANGEDEVICE	.\GPUTerrainProject.cpp	46;"	d	file:
IDC_FILEHEIGHTMAP	.\GPUTerrainProject.cpp	49;"	d	file:
IDC_LOADHEIGHTMAP	.\GPUTerrainProject.cpp	48;"	d	file:
IDC_TOGGLEFULLSCREEN	.\GPUTerrainProject.cpp	44;"	d	file:
IDC_TOGGLEREF	.\GPUTerrainProject.cpp	45;"	d	file:
IDI_MAIN_ICON	.\resource.h	5;"	d
IDLE	.\Button.h	/^	enum ButtonState { IDLE, CLICKED, ANIMATE, IN_ANIMATE, INACTIVE };$/;"	e	enum:CButton::ButtonState
IImpostorable	.\IImpostorable.cpp	/^IImpostorable::IImpostorable(int _SurfaceWidth, int _SurfaceHeight) :$/;"	f	class:IImpostorable
IImpostorable	.\IImpostorable.h	/^class IImpostorable$/;"	c
IMEID_CHS_VER41	.\Common\DXUTgui.cpp	5773;"	d	file:
IMEID_CHS_VER42	.\Common\DXUTgui.cpp	5774;"	d	file:
IMEID_CHS_VER53	.\Common\DXUTgui.cpp	5775;"	d	file:
IMEID_CHT_VER42	.\Common\DXUTgui.cpp	5766;"	d	file:
IMEID_CHT_VER43	.\Common\DXUTgui.cpp	5767;"	d	file:
IMEID_CHT_VER44	.\Common\DXUTgui.cpp	5768;"	d	file:
IMEID_CHT_VER50	.\Common\DXUTgui.cpp	5769;"	d	file:
IMEID_CHT_VER51	.\Common\DXUTgui.cpp	5770;"	d	file:
IMEID_CHT_VER52	.\Common\DXUTgui.cpp	5771;"	d	file:
IMEID_CHT_VER60	.\Common\DXUTgui.cpp	5772;"	d	file:
IMESTATE	.\Common\DXUTgui.h	/^    enum IMESTATE { IMEUI_STATE_OFF, IMEUI_STATE_ON, IMEUI_STATE_ENGLISH };$/;"	g	class:CDXUTIMEEditBox
IMEUI_STATE_ENGLISH	.\Common\DXUTgui.h	/^    enum IMESTATE { IMEUI_STATE_OFF, IMEUI_STATE_ON, IMEUI_STATE_ENGLISH };$/;"	e	enum:CDXUTIMEEditBox::IMESTATE
IMEUI_STATE_OFF	.\Common\DXUTgui.h	/^    enum IMESTATE { IMEUI_STATE_OFF, IMEUI_STATE_ON, IMEUI_STATE_ENGLISH };$/;"	e	enum:CDXUTIMEEditBox::IMESTATE
IMEUI_STATE_ON	.\Common\DXUTgui.h	/^    enum IMESTATE { IMEUI_STATE_OFF, IMEUI_STATE_ON, IMEUI_STATE_ENGLISH };$/;"	e	enum:CDXUTIMEEditBox::IMESTATE
IMM32_DLLNAME	.\Common\DXUTgui.cpp	44;"	d	file:
IMPOSTORATLASSHADOW_DIMENSION	.\CloudSky.cpp	20;"	d	file:
IMPOSTORATLAS_DIMENSION	.\CloudSky.cpp	17;"	d	file:
IMPOSTORSHADOW_DIMENSION	.\CloudSky.cpp	21;"	d	file:
IMPOSTOR_DELTA_AT_ANGLE_THRESH	.\IImpostorable.h	15;"	d
IMPOSTOR_DELTA_DISTANCE_THRESH	.\IImpostorable.h	19;"	d
IMPOSTOR_DELTA_UP_ANGLE_THRESH	.\IImpostorable.h	16;"	d
IMPOSTOR_DIMENSION	.\CloudSky.cpp	18;"	d	file:
IMPOSTOR_DISTANCE_FACTOR	.\IImpostorable.h	21;"	d
INACTIVE	.\Button.h	/^	enum ButtonState { IDLE, CLICKED, ANIMATE, IN_ANIMATE, INACTIVE };$/;"	e	enum:CButton::ButtonState
INDICATOR_CHS	.\Common\DXUTgui.h	/^    enum { INDICATOR_NON_IME, INDICATOR_CHS, INDICATOR_CHT, INDICATOR_KOREAN, INDICATOR_JAPANESE };$/;"	e	enum:CDXUTIMEEditBox::<anonymous>
INDICATOR_CHT	.\Common\DXUTgui.h	/^    enum { INDICATOR_NON_IME, INDICATOR_CHS, INDICATOR_CHT, INDICATOR_KOREAN, INDICATOR_JAPANESE };$/;"	e	enum:CDXUTIMEEditBox::<anonymous>
INDICATOR_JAPANESE	.\Common\DXUTgui.h	/^    enum { INDICATOR_NON_IME, INDICATOR_CHS, INDICATOR_CHT, INDICATOR_KOREAN, INDICATOR_JAPANESE };$/;"	e	enum:CDXUTIMEEditBox::<anonymous>
INDICATOR_KOREAN	.\Common\DXUTgui.h	/^    enum { INDICATOR_NON_IME, INDICATOR_CHS, INDICATOR_CHT, INDICATOR_KOREAN, INDICATOR_JAPANESE };$/;"	e	enum:CDXUTIMEEditBox::<anonymous>
INDICATOR_NON_IME	.\Common\DXUTgui.h	/^    enum { INDICATOR_NON_IME, INDICATOR_CHS, INDICATOR_CHT, INDICATOR_KOREAN, INDICATOR_JAPANESE };$/;"	e	enum:CDXUTIMEEditBox::<anonymous>
IN_ANIMATE	.\Button.h	/^	enum ButtonState { IDLE, CLICKED, ANIMATE, IN_ANIMATE, INACTIVE };$/;"	e	enum:CButton::ButtonState
IN_FLOAT_CHARSET	.\Common\DXUTgui.cpp	5692;"	d	file:
ISpatialSubdivision	.\ISpatialSubdivision.h	/^    ISpatialSubdivision(ITerrain *pt)      $/;"	f	class:ISpatialSubdivision
ISpatialSubdivision	.\ISpatialSubdivision.h	/^class ISpatialSubdivision$/;"	c
ITerrain	.\ITerrain.h	/^    ITerrain(void) : $/;"	f	class:ITerrain
ITerrain	.\ITerrain.h	/^class ITerrain $/;"	c
InLoadAreaSet	.\QuadTree.h	/^        set<QTNode *, QTNodeLessThanFunctor> InLoadAreaSet, PrevInLoadAreaSet;$/;"	m	class:CQuadTree::CLoadArea
IncrementCameraVelocity	.\World.cpp	/^VOID CWorld::IncrementCameraVelocity(float *fVelInOut, float fDist, float fAccel, float fElapsedTime)$/;"	f	class:CWorld
IncrementCharKey	.\World.cpp	/^VOID CWorld::IncrementCharKey()$/;"	f	class:CWorld
IncrementPSPower	.\CloudSky.h	/^    VOID IncrementPSPower(int idx) { m_pSky->SetSunPSPower(m_pSky->GetSunPSPower(idx) + SUNSTATE_INCREMENT, idx); }$/;"	f	class:CCloudSky
IncrementVSMult	.\CloudSky.h	/^    VOID IncrementVSMult(int idx) { m_pSky->SetSunVSMult(m_pSky->GetSunVSMult(idx) + SUNSTATE_INCREMENT, idx); }$/;"	f	class:CCloudSky
IncrementVSPower	.\CloudSky.h	/^    VOID IncrementVSPower(int idx) { m_pSky->SetSunVSPower(m_pSky->GetSunVSPower(idx) + SUNSTATE_INCREMENT, idx); }$/;"	f	class:CCloudSky
IndexOf	.\Common\DXUTmisc.h	/^    int     IndexOf( const TYPE& value ) { return ( m_nSize > 0 ) ? IndexOf( value, 0, m_nSize ) : -1; }$/;"	f	class:CGrowableArray
IndexOf	.\Common\DXUTmisc.h	/^    int     IndexOf( const TYPE& value, int iStart ) { return IndexOf( value, iStart, m_nSize - iStart ); }$/;"	f	class:CGrowableArray
IndexOf	.\Common\DXUTmisc.h	/^int CGrowableArray<TYPE>::IndexOf( const TYPE& value, int iStart, int nNumElements )$/;"	f	class:CGrowableArray
Init	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::Init( CDXUTDialogResourceManager* pManager )$/;"	f	class:CD3DSettingsDlg
Init	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::Init( CDXUTDialogResourceManager* pManager, LPCWSTR pszControlTextureResourcename, HMODULE hModule )$/;"	f	class:CD3DSettingsDlg
Init	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::Init( CDXUTDialogResourceManager* pManager, LPCWSTR szControlTextureFileName )$/;"	f	class:CD3DSettingsDlg
Init	.\Common\DXUTgui.cpp	/^void CDXUTDialog::Init( CDXUTDialogResourceManager* pManager, bool bRegisterDialog )$/;"	f	class:CDXUTDialog
Init	.\Common\DXUTgui.cpp	/^void CDXUTDialog::Init( CDXUTDialogResourceManager* pManager, bool bRegisterDialog, LPCWSTR pszControlTextureFilename )$/;"	f	class:CDXUTDialog
Init	.\Common\DXUTgui.cpp	/^void CDXUTDialog::Init( CDXUTDialogResourceManager* pManager, bool bRegisterDialog, LPCWSTR szControlTextureResourceName, HMODULE hControlTextureResourceModule )$/;"	f	class:CDXUTDialog
Init	.\Common\DXUTgui.cpp	/^void DXUTBlendColor::Init( D3DCOLOR defaultColor, D3DCOLOR disabledColor, D3DCOLOR hiddenColor )$/;"	f	class:DXUTBlendColor
Init	.\PostProcEffects.cpp	/^void ScreenAlignedQuad::Init(IDirect3DDevice9* pd3dDevice, UINT width, UINT height)$/;"	f	class:ScreenAlignedQuad
InitApp	.\GPUTerrainProject.cpp	/^void InitApp() {   $/;"	f
InitControl	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::InitControl( CDXUTControl* pControl )$/;"	f	class:CDXUTDialog
InitDefaultElements	.\Common\DXUTgui.cpp	/^void CDXUTDialog::InitDefaultElements()$/;"	f	class:CDXUTDialog
InitQuad	.\Sky.cpp	/^VOID CSky::SBigStar::InitQuad(IDirect3DDevice9* pd3dDevice)$/;"	f	class:CSky::SBigStar
InitRenderToSurface	.\IImpostorable.cpp	/^VOID IImpostorable::InitRenderToSurface(IDirect3DDevice9 *d3dDevice)$/;"	f	class:IImpostorable
Initialize	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::Initialize()$/;"	f	class:CDXUTIMEEditBox
Initialize	.\Common\DXUTgui.cpp	/^void CUniBuffer::Initialize()$/;"	f	class:CUniBuffer
Initialize	.\Common\DXUTsound.cpp	/^HRESULT CSoundManager::Initialize( HWND  hWnd,$/;"	f	class:CSoundManager
Insert	.\Common\DXUTmisc.h	/^HRESULT CGrowableArray<TYPE>::Insert( int nIndex, const TYPE& value )$/;"	f	class:CGrowableArray
InsertChar	.\Common\DXUTgui.cpp	/^bool CUniBuffer::InsertChar( int nIndex, WCHAR wChar )$/;"	f	class:CUniBuffer
InsertItem	.\Common\DXUTgui.cpp	/^HRESULT CDXUTListBox::InsertItem( int nIndex, const WCHAR *wszText, void *pData )$/;"	f	class:CDXUTListBox
InsertString	.\Common\DXUTgui.cpp	/^bool CUniBuffer::InsertString( int nIndex, const WCHAR *pStr, int nCount )$/;"	f	class:CUniBuffer
InvalidateDeviceObjects	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::InvalidateDeviceObjects()$/;"	f	class:CDXUTMesh
InvalidateDeviceObjects	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMeshFrame::InvalidateDeviceObjects()$/;"	f	class:CDXUTMeshFrame
IsAABBLimbo	.\World.cpp	/^bool CWorld::IsAABBLimbo(const vector<QTNode*>& vpTopNodes, const D3DXVECTOR3 *center, const D3DXVECTOR3 *displace)$/;"	f	class:CWorld
IsActive	.\Common\DXUTSettingsDlg.h	/^    bool IsActive() { return m_bActive; }$/;"	f	class:CD3DSettingsDlg
IsActive	.\Console.h	/^	bool IsActive() { return m_bActive; }$/;"	f	class:CConsole
IsBeingDragged	.\Common\DXUTmisc.h	/^    bool        IsBeingDragged() const                      { return m_bDrag; }$/;"	f	class:CD3DArcBall
IsBeingDragged	.\Common\DXUTmisc.h	/^    bool  IsBeingDragged() { return m_ArcBall.IsBeingDragged(); };$/;"	f	class:CDXUTDirectionWidget
IsBeingDragged	.\Common\DXUTmisc.h	/^    bool IsBeingDragged() const         { return (m_bMouseLButtonDown || m_bMouseMButtonDown || m_bMouseRButtonDown); }$/;"	f	class:CBaseCamera
IsCharged	.\GameEngine.h	/^	bool IsCharged(SPlayer* pplayer) {$/;"	f	class:CGameEngine
IsCheckedForDraw	.\CloudBatch.h	/^    bool IsCheckedForDraw() { return m_bCheckedForDraw; }$/;"	f	class:CCloud
IsConnected	.\Client.h	/^    bool IsConnected()                                      {   return m_bConnect;  }$/;"	f	class:CClient
IsConnected	.\GameEngine.cpp	/^bool CGameEngine::IsConnected()$/;"	f	class:CGameEngine
IsDeviceAcceptable	.\GPUTerrainProject.cpp	/^bool CALLBACK IsDeviceAcceptable( D3DCAPS9* pCaps, D3DFORMAT AdapterFormat, $/;"	f
IsDeviceClip	.\Common\DXUTSettingsDlg.cpp	/^bool CD3DSettingsDlg::IsDeviceClip()$/;"	f	class:CD3DSettingsDlg
IsFitsInArea	.\QuadTree.h	/^        bool IsFitsInArea() { return bFitsInArea; } \/\/! Returns whether entire terrain is loaded in VRAM.        $/;"	f	class:CQuadTree::CLoadArea
IsHeightQuadSectionVisible	.\QuadTree.cpp	/^bool CQuadTree::IsHeightQuadSectionVisible(const D3DXVECTOR3 &c11, \/\/ aligned quad corners for optimized plane testing$/;"	f	class:CQuadTree
IsHeirarchy	.\XModelHeirarchy.h	/^    bool IsHeirarchy()                                  { return m_bHeirarchy; }$/;"	f	class:CXModelHeirarchy
IsInit	.\ITerrain.h	/^    inline bool IsInit()                { return m_bInit; }    $/;"	f	class:ITerrain
IsInit	.\QuadTree.h	/^    bool IsInit()                { return m_bInit; }$/;"	f	class:CQuadTree
IsInitialized	.\Server.h	/^    bool IsInitialized()                                    {   return m_bInit; }$/;"	f	class:CServer
IsKeyDown	.\Common\DXUTmisc.h	/^    bool IsKeyDown( BYTE key ) const { return( (key & KEY_IS_DOWN_MASK) == KEY_IS_DOWN_MASK ); }$/;"	f	class:CBaseCamera
IsKeyboardInputEnabled	.\Common\DXUTgui.h	/^    bool IsKeyboardInputEnabled() const { return m_bKeyboardInput; }$/;"	f	class:CDXUTDialog
IsMouseLButtonDown	.\Common\DXUTmisc.h	/^    bool IsMouseLButtonDown() const     { return m_bMouseLButtonDown; } $/;"	f	class:CBaseCamera
IsMouseMButtonDown	.\Common\DXUTmisc.h	/^    bool IsMouseMButtonDown() const     { return m_bMouseMButtonDown; } $/;"	f	class:CBaseCamera
IsMouseRButtonDown	.\Common\DXUTmisc.h	/^    bool IsMouseRButtonDown() const     { return m_bMouseRButtonDown; } $/;"	f	class:CBaseCamera
IsMoving	.\GameEngine.h	/^	bool IsMoving(SPlayer* pplayer) {$/;"	f	class:CGameEngine
IsNetworkIDAuthority	.\GameEngine.h	/^    virtual bool IsNetworkIDAuthority(void) const { return m_bHosting;  }$/;"	f	class:CGameEngine
IsSoundPlaying	.\Common\DXUTsound.cpp	/^BOOL CSound::IsSoundPlaying()$/;"	f	class:CSound
IsStopped	.\Common\DXUTmisc.cpp	/^bool CDXUTTimer::IsStopped()$/;"	f	class:CDXUTTimer
IsTimeForRealityBroadcast	.\Server.cpp	/^bool CServer::IsTimeForRealityBroadcast(float fElapsedTime)$/;"	f	class:CServer
IsTimeForUpdate	.\Client.cpp	/^bool CClient::IsTimeForUpdate(float fElapsedTime)$/;"	f	class:CClient
IsUpdated	.\CloudBatch.h	/^    bool IsUpdated() { return m_bUpdated; }$/;"	f	class:CCloud
IsUsingImpostor	.\CloudBatch.h	/^    bool IsUsingImpostor() { return m_bUsingImpostor; }$/;"	f	class:CCloud
IsUsingImpostor	.\IImpostorable.h	/^    bool IsUsingImpostor() { return m_bUseImpostor; }$/;"	f	class:IImpostorable
IsUsingImpostor	.\ImpostorAtlas.h	/^    bool IsUsingImpostor(int id) { return m_vUpdates[ClampId(id)].bUseImpostor; }$/;"	f	class:CImpostorAtlas
IsUsingTangents	.\Sphere.h	/^    bool IsUsingTangents() { return m_bUseTangents; }$/;"	f	class:CSphere
IsVisible	.\CloudBatch.h	/^    bool IsVisible() { return m_bVisible; } \/\/! returns whether it has been deemed visible by the ViewFrustumFull$/;"	f	class:CCloud
IsWindowed	.\Common\DXUTSettingsDlg.cpp	/^bool CD3DSettingsDlg::IsWindowed()$/;"	f	class:CD3DSettingsDlg
JUMP_ACCEL_SETTING	.\GameTables.h	/^		JUMP_ACCEL_SETTING,	$/;"	e	enum:GameTable::Settings
JUMP_ACTION	.\GameTables.h	/^        JUMP_ACTION,$/;"	e	enum:GameTable::Actions
JUMP_COUNT_SETTING	.\GameTables.h	/^		JUMP_COUNT_SETTING,$/;"	e	enum:GameTable::Settings
KEY_0	.\Console.h	15;"	d
KEY_9	.\Console.h	16;"	d
KEY_A	.\Console.h	17;"	d
KEY_IS_DOWN_MASK	.\Common\DXUTmisc.h	295;"	d
KEY_SLASH	.\Console.h	14;"	d
KEY_TILDE	.\Console.h	13;"	d
KEY_WAS_DOWN_MASK	.\Common\DXUTmisc.h	294;"	d
KEY_Z	.\Console.h	18;"	d
KeyboardProc	.\Console.cpp	/^bool CConsole::KeyboardProc(UINT nChar, bool bKeyDown) $/;"	f	class:CConsole
KeyboardProc	.\GPUTerrainProject.cpp	/^void CALLBACK KeyboardProc( UINT nChar, bool bKeyDown, bool bAltDown, void* pUserContext )$/;"	f
KeyboardProc	.\GameEngine.cpp	/^void CGameEngine::KeyboardProc( UINT nChar, bool bKeyDown, bool bAltDown )$/;"	f	class:CGameEngine
KeyboardProc	.\GameGUI.cpp	/^BOOL CGameGUI::KeyboardProc( UINT nChar, bool bKeyDown){$/;"	f	class:CGameGUI
KeyboardProc	.\GameRoot.cpp	/^void CGameRoot::KeyboardProc( UINT nChar, bool bKeyDown, bool bAltDown )$/;"	f	class:CGameRoot
KeyboardProc	.\MultiColumnList.cpp	/^bool CMultiColumnList::KeyboardProc(UINT nChar, bool bKeyDown){$/;"	f	class:CMultiColumnList
KeyboardProc	.\ServerBrowser.cpp	/^bool CServerBrowser::KeyboardProc(UINT nChar, bool bKeyDown){ $/;"	f	class:CServerBrowser
KeyboardProc	.\World.cpp	/^VOID CWorld::KeyboardProc( UINT nChar, bool bKeyDown, bool bAltDown )$/;"	f	class:CWorld
LANG_CHS	.\Common\DXUTgui.cpp	5760;"	d	file:
LANG_CHT	.\Common\DXUTgui.cpp	5759;"	d	file:
LCID_INVARIANT	.\Common\DXUTgui.cpp	5938;"	d	file:
LEFT	.\ScrollingWindow.h	/^	enum WindowAnchor{ NONE, TOP, RIGHT, BOTTOM, LEFT };$/;"	e	enum:CScrollingWindow::WindowAnchor
LENGTH	.\Pillar.cpp	9;"	d	file:
LEVEL_TO_LOAD	.\GPUTerrainProject.cpp	20;"	d	file:
LIGHTNING	.\GameEngine.h	/^		enum { FIREBALL = 0, LIGHTNING, SWEEP, SMASH, DIVE, NUM_SLES }; $/;"	e	enum:CGameEngine::SShortLifeEntity::<anonymous>
LIGHTNING_SPRITE	.\GameTables.h	/^        LIGHTNING_SPRITE,$/;"	e	enum:GameTable::SpriteAnims
LINE_NODE	.\Common\DXUTmisc.h	/^    struct LINE_NODE$/;"	s	class:CDXUTLineManager
LIVE_ICON	.\GameDefine.h	24;"	d
LOADTIME_GAP	.\QuadTree.cpp	14;"	d	file:
LOAD_AREA_DIMENSION	.\QuadTree.cpp	13;"	d	file:
LOD	.\QuadTree.h	/^        float LOD, miny, maxy; \/\/ LOD, lowest\/highest terrain point$/;"	m	struct:CQuadTree::Tile
LOD_DISTANCE_MULTIPLIER	.\QuadTree.h	16;"	d
LOD_VERTEX_THRESHOLD	.\QuadTree.h	15;"	d
LPD3DPERF_BEGINEVENT	.\Common\DXUTmisc.cpp	/^typedef INT         (WINAPI * LPD3DPERF_BEGINEVENT)(D3DCOLOR, LPCWSTR);$/;"	t	file:
LPD3DPERF_ENDEVENT	.\Common\DXUTmisc.cpp	/^typedef INT         (WINAPI * LPD3DPERF_ENDEVENT)(void);$/;"	t	file:
LPD3DPERF_GETSTATUS	.\Common\DXUTmisc.cpp	/^typedef DWORD       (WINAPI * LPD3DPERF_GETSTATUS)( void );$/;"	t	file:
LPD3DPERF_QUERYREPEATFRAME	.\Common\DXUTmisc.cpp	/^typedef BOOL        (WINAPI * LPD3DPERF_QUERYREPEATFRAME)(void);$/;"	t	file:
LPD3DPERF_SETMARKER	.\Common\DXUTmisc.cpp	/^typedef VOID        (WINAPI * LPD3DPERF_SETMARKER)(D3DCOLOR, LPCWSTR);$/;"	t	file:
LPD3DPERF_SETOPTIONS	.\Common\DXUTmisc.cpp	/^typedef VOID        (WINAPI * LPD3DPERF_SETOPTIONS)( DWORD dwOptions );$/;"	t	file:
LPD3DPERF_SETREGION	.\Common\DXUTmisc.cpp	/^typedef VOID        (WINAPI * LPD3DPERF_SETREGION)(D3DCOLOR, LPCWSTR);$/;"	t	file:
LPDIRECT3DCREATE9	.\Common\DXUT.cpp	/^typedef IDirect3D9* (WINAPI* LPDIRECT3DCREATE9)(UINT SDKVersion);$/;"	t	file:
LPDIRECT3DCREATE9	.\Common\DXUTmisc.cpp	/^typedef IDirect3D9* (WINAPI * LPDIRECT3DCREATE9) (UINT);$/;"	t	file:
LPDXUTCALLBACKDEVICECREATED	.\Common\DXUT.h	/^typedef HRESULT (CALLBACK *LPDXUTCALLBACKDEVICECREATED)( IDirect3DDevice9* pd3dDevice, const D3DSURFACE_DESC* pBackBufferSurfaceDesc, void* pUserContext );$/;"	t
LPDXUTCALLBACKDEVICEDESTROYED	.\Common\DXUT.h	/^typedef void    (CALLBACK *LPDXUTCALLBACKDEVICEDESTROYED)( void* pUserContext );$/;"	t
LPDXUTCALLBACKDEVICELOST	.\Common\DXUT.h	/^typedef void    (CALLBACK *LPDXUTCALLBACKDEVICELOST)( void* pUserContext );$/;"	t
LPDXUTCALLBACKDEVICERESET	.\Common\DXUT.h	/^typedef HRESULT (CALLBACK *LPDXUTCALLBACKDEVICERESET)( IDirect3DDevice9* pd3dDevice, const D3DSURFACE_DESC* pBackBufferSurfaceDesc, void* pUserContext );$/;"	t
LPDXUTCALLBACKFRAMEMOVE	.\Common\DXUT.h	/^typedef void    (CALLBACK *LPDXUTCALLBACKFRAMEMOVE)( IDirect3DDevice9* pd3dDevice, double fTime, float fElapsedTime, void* pUserContext );$/;"	t
LPDXUTCALLBACKFRAMERENDER	.\Common\DXUT.h	/^typedef void    (CALLBACK *LPDXUTCALLBACKFRAMERENDER)( IDirect3DDevice9* pd3dDevice, double fTime, float fElapsedTime, void* pUserContext );$/;"	t
LPDXUTCALLBACKISDEVICEACCEPTABLE	.\Common\DXUT.h	/^typedef bool    (CALLBACK *LPDXUTCALLBACKISDEVICEACCEPTABLE)( D3DCAPS9* pCaps, D3DFORMAT AdapterFormat, D3DFORMAT BackBufferFormat, bool bWindowed, void* pUserContext );$/;"	t
LPDXUTCALLBACKKEYBOARD	.\Common\DXUT.h	/^typedef void    (CALLBACK *LPDXUTCALLBACKKEYBOARD)( UINT nChar, bool bKeyDown, bool bAltDown, void* pUserContext );$/;"	t
LPDXUTCALLBACKMODIFYDEVICESETTINGS	.\Common\DXUT.h	/^typedef bool    (CALLBACK *LPDXUTCALLBACKMODIFYDEVICESETTINGS)( DXUTDeviceSettings* pDeviceSettings, const D3DCAPS9* pCaps, void* pUserContext );$/;"	t
LPDXUTCALLBACKMOUSE	.\Common\DXUT.h	/^typedef void    (CALLBACK *LPDXUTCALLBACKMOUSE)( bool bLeftButtonDown, bool bRightButtonDown, bool bMiddleButtonDown, bool bSideButton1Down, bool bSideButton2Down, int nMouseWheelDelta, int xPos, int yPos, void* pUserContext );$/;"	t
LPDXUTCALLBACKMSGPROC	.\Common\DXUT.h	/^typedef LRESULT (CALLBACK *LPDXUTCALLBACKMSGPROC)( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, bool* pbNoFurtherProcessing, void* pUserContext );$/;"	t
LPDXUTCALLBACKTIMER	.\Common\DXUT.h	/^typedef void    (CALLBACK *LPDXUTCALLBACKTIMER)( UINT idEvent, void* pUserContext );$/;"	t
LPGETMONITORINFO	.\Common\DXUTmisc.cpp	/^typedef BOOL     (WINAPI* LPGETMONITORINFO)(HMONITOR, LPMONITORINFO);$/;"	t	file:
LPMONITORFROMWINDOW	.\Common\DXUTmisc.cpp	/^typedef HMONITOR (WINAPI* LPMONITORFROMWINDOW)(HWND, DWORD);$/;"	t	file:
LPMONITORINFO	.\Common\DXUTmisc.h	/^    } MONITORINFO, *LPMONITORINFO;$/;"	t
LPMONITORINFOEX	.\Common\DXUTmisc.h	/^    typedef LPMONITORINFOEXW LPMONITORINFOEX;$/;"	t
LPMONITORINFOEXW	.\Common\DXUTmisc.h	/^    } MONITORINFOEXW, *LPMONITORINFOEXW;$/;"	t
LPTIMEBEGINPERIOD	.\Common\DXUT.cpp	/^typedef DECLSPEC_IMPORT UINT (WINAPI* LPTIMEBEGINPERIOD)( UINT uPeriod );$/;"	t	file:
LPXINPUTGETCAPABILITIES	.\Common\DXUTmisc.cpp	/^typedef DWORD (WINAPI* LPXINPUTGETCAPABILITIES)( DWORD dwUserIndex, DWORD dwFlags, XINPUT_CAPABILITIES* pCapabilities );$/;"	t	file:
LPXINPUTGETSTATE	.\Common\DXUTmisc.cpp	/^typedef DWORD (WINAPI* LPXINPUTGETSTATE)(DWORD dwUserIndex, XINPUT_STATE* pState );$/;"	t	file:
LPXINPUTSETSTATE	.\Common\DXUTmisc.cpp	/^typedef DWORD (WINAPI* LPXINPUTSETSTATE)(DWORD dwUserIndex, XINPUT_VIBRATION* pVibration );$/;"	t	file:
LastIndexOf	.\Common\DXUTmisc.h	/^    int     LastIndexOf( const TYPE& value ) { return ( m_nSize > 0 ) ? LastIndexOf( value, m_nSize-1, m_nSize ) : -1; }$/;"	f	class:CGrowableArray
LastIndexOf	.\Common\DXUTmisc.h	/^    int     LastIndexOf( const TYPE& value, int nIndex ) { return LastIndexOf( value, nIndex, nIndex+1 ); }$/;"	f	class:CGrowableArray
LastIndexOf	.\Common\DXUTmisc.h	/^int CGrowableArray<TYPE>::LastIndexOf( const TYPE& value, int iEnd, int nNumElements )$/;"	f	class:CGrowableArray
Length	.\ConsoleLine.h	/^	UINT Length() { return (UINT) m_strText.length(); }$/;"	f	class:CConsoleLine
Length	.\Pillar.h	/^		float cylinderRadius, splineRadius, Length;$/;"	m	struct:CPillar::SPillarInfo
LoadClouds	.\CloudSky.cpp	/^VOID CCloudSky::LoadClouds(LPCSTR cloudFilename)$/;"	f	class:CCloudSky
LoadFrame	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMeshFile::LoadFrame( LPDIRECT3DDEVICE9 pd3dDevice,$/;"	f	class:CDXUTMeshFile
LoadGrassMap	.\Foliage.cpp	/^VOID CFoliage::LoadGrassMap(LPCSTR mapFN, UINT texID, const ITerrain* pt)$/;"	f	class:CFoliage
LoadHMP	.\ITerrain.cpp	/^UINT ITerrain::LoadHMP(LPCSTR fn) {$/;"	f	class:ITerrain
LoadMasterServersFile	.\GameRoot.cpp	/^VOID CGameRoot::LoadMasterServersFile(const string &mastersFN)$/;"	f	class:CGameRoot
LoadMesh	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMeshFile::LoadMesh( LPDIRECT3DDEVICE9 pd3dDevice,$/;"	f	class:CDXUTMeshFile
LoadMesh	.\XModelHeirarchy.cpp	/^HRESULT CXModelHeirarchy::LoadMesh( IDirect3DDevice9* pd3dDevice, LPCSTR strFileName )$/;"	f	class:CXModelHeirarchy
LoadModelFile	.\World.cpp	/^UINT CWorld::LoadModelFile(LPCSTR pszFN) $/;"	f	class:CWorld
LoadNewData	.\QuadTree.cpp	/^UINT CQuadTree::LoadNewData(const D3DXVECTOR3* pEyePt, double fTime) {$/;"	f	class:CQuadTree
LoadNewTerrainBlock	.\QuadTree.cpp	/^VOID CQuadTree::LoadNewTerrainBlock() {$/;"	f	class:CQuadTree
LoadNormals	.\ITerrain.cpp	/^VOID ITerrain::LoadNormals() {$/;"	f	class:ITerrain
LoadSpriteAnimationsFile	.\World.cpp	/^UINT CWorld::LoadSpriteAnimationsFile(LPDIRECT3DDEVICE9 pd3dDevice, LPCSTR pszFN)$/;"	f	class:CWorld
LoadTerrain	.\QuadTree.cpp	/^VOID CQuadTree::LoadTerrain(ITerrain *pt) {    $/;"	f	class:CQuadTree
LoadWorldFile	.\World.cpp	/^UINT CWorld::LoadWorldFile(LPCSTR pszFN) $/;"	f	class:CWorld
Load_Dimension	.\QuadTree.h	/^        const int Load_Dimension;$/;"	m	class:CQuadTree::CLoadArea
Location	.\Common\DXUTmisc.h	/^    DXUTCACHE_SOURCELOCATION Location;$/;"	m	struct:DXUTCache_Effect
Location	.\Common\DXUTmisc.h	/^    DXUTCACHE_SOURCELOCATION Location;$/;"	m	struct:DXUTCache_Texture
LockLOD	.\QuadTree.h	/^    VOID LockLOD(UINT lod)  { $/;"	f	class:CQuadTree
LookAtSpring	.\World.h	/^        gdef::SSpring PositionSpring, LookAtSpring;$/;"	m	struct:CWorld::SCameraMovement
LowLevelKeyboardProc	.\Common\DXUT.cpp	/^LRESULT CALLBACK LowLevelKeyboardProc( int nCode, WPARAM wParam, LPARAM lParam )$/;"	f
MAKEIMEVERSION	.\Common\DXUTgui.cpp	5764;"	d	file:
MASS_SETTING	.\GameTables.h	/^        MASS_SETTING,$/;"	e	enum:GameTable::Settings
MASTER_SERVERS_TO_LOAD	.\GPUTerrainProject.cpp	24;"	d	file:
MASTER_SERVER_PASSWORD	.\NetworkDefine.h	7;"	d
MASTER_TABLE_NAME	.\NetworkDefine.h	5;"	d
MASTER_TABLE_PASSWORD	.\NetworkDefine.h	6;"	d
MAX_CANDLIST	.\Common\DXUTgui.h	917;"	d
MAX_COMPSTRING_SIZE	.\Common\DXUTgui.h	918;"	d
MAX_CONTROL_STATES	.\Common\DXUTgui.h	84;"	d
MAX_DIMENSION	.\ITerrain.h	/^    static const UINT MAX_DIMENSION     =       4097; \/\/ Largest Dimension    $/;"	m	class:ITerrain
MAX_FILENAME_LENGTH	.\ITerrain.h	8;"	d
MAX_STRING_SIZE	.\ConsoleLine.h	5;"	d
MAX_VB_SIZE	.\PolySprite.h	/^    static const int MAX_VB_SIZE                            =       sizeof(PolySpriteVertex) * 65535;$/;"	m	class:CPolySprite
MENU	.\GameGUI.h	/^	enum GUIReg { CONSOLE = 0, MENU, BROWSER, NUM_REGS };$/;"	e	enum:CGameGUI::GUIReg
MENU_LOGO	.\GameDefine.h	23;"	d
MESHVERT	.\FXDecl.cpp	/^MESHVERT::MESHVERT(const D3DXVECTOR3& _pos, const D3DXVECTOR3& _norm, float _u, float _v) :$/;"	f	class:MESHVERT
MESHVERT	.\FXDecl.h	/^struct MESHVERT {$/;"	s
MINDOUBLE	.\Pillar.cpp	20;"	d	file:
MIN_DIMENSION	.\ITerrain.h	/^    static const UINT MIN_DIMENSION     =       65; \/\/ smallest hmp dimension$/;"	m	class:ITerrain
MIN_DIMENSION	.\QuadTree.h	/^    const UINT MIN_DIMENSION;	 $/;"	m	class:CQuadTree
MIPMAP_TILESIZE	.\ITerrain.h	9;"	d
MODEL_SET_TO_LOAD	.\GPUTerrainProject.cpp	21;"	d	file:
MONITORINFO	.\Common\DXUTmisc.h	/^    } MONITORINFO, *LPMONITORINFO;$/;"	t
MONITORINFOEX	.\Common\DXUTmisc.h	/^    typedef MONITORINFOEXW MONITORINFOEX;$/;"	t
MONITORINFOEXW	.\Common\DXUTmisc.h	/^    } MONITORINFOEXW, *LPMONITORINFOEXW;$/;"	t
MONITORINFOF_PRIMARY	.\Common\DXUTmisc.h	743;"	d
MONITOR_DEFAULTTONEAREST	.\Common\DXUTmisc.h	746;"	d
MONITOR_DEFAULTTONULL	.\Common\DXUTmisc.h	744;"	d
MONITOR_DEFAULTTOPRIMARY	.\Common\DXUTmisc.h	745;"	d
MOUSE_LEFT_BUTTON	.\Common\DXUTmisc.h	297;"	d
MOUSE_MIDDLE_BUTTON	.\Common\DXUTmisc.h	298;"	d
MOUSE_RIGHT_BUTTON	.\Common\DXUTmisc.h	299;"	d
MOUSE_WHEEL	.\Common\DXUTmisc.h	300;"	d
MOVE_BACKWARD_ACTION	.\GameTables.h	/^        MOVE_BACKWARD_ACTION,$/;"	e	enum:GameTable::Actions
MOVE_FORWARD_ACTION	.\GameTables.h	/^        MOVE_FORWARD_ACTION,$/;"	e	enum:GameTable::Actions
MOVE_LEFT_ACTION	.\GameTables.h	/^        MOVE_LEFT_ACTION,$/;"	e	enum:GameTable::Actions
MOVE_RIGHT_ACTION	.\GameTables.h	/^        MOVE_RIGHT_ACTION,$/;"	e	enum:GameTable::Actions
MSType	.\Common\DXUTenum.h	/^    D3DMULTISAMPLE_TYPE MSType;$/;"	m	struct:CD3DEnumDSMSConflict
MULTISELECTION	.\Common\DXUTgui.h	/^    enum STYLE { MULTISELECTION = 1 };$/;"	e	enum:CDXUTListBox::STYLE
MapKey	.\Common\DXUTmisc.cpp	/^D3DUtil_CameraKeys CBaseCamera::MapKey( UINT nKey )$/;"	f	class:CBaseCamera
MenuCmdFunc	.\GameRoot.cpp	/^VOID CGameRoot::MenuCmdFunc(const string& s){$/;"	f	class:CGameRoot
MipLevels	.\Common\DXUTmisc.h	/^    UINT MipLevels;$/;"	m	struct:DXUTCache_Texture
ModifyDeviceSettings	.\GPUTerrainProject.cpp	/^bool CALLBACK ModifyDeviceSettings( DXUTDeviceSettings* pDeviceSettings, const D3DCAPS9* pCaps, void* pUserContext )$/;"	f
MouseProc	.\Button.cpp	/^void CButton::MouseProc(int x, int y){$/;"	f	class:CButton
MouseProc	.\Console.cpp	/^bool CConsole::MouseProc(int x, int y, bool hadFocus){$/;"	f	class:CConsole
MouseProc	.\GPUTerrainProject.cpp	/^void CALLBACK MouseProc(bool bLeftButtonDown, bool bRightButtonDown, bool bMiddleButtonDown, bool bSideButton1Down, bool bSideButton2Down, int nMouseWheelDelta, int xPos, int yPos, void* pUserContext)$/;"	f
MouseProc	.\GameEngine.cpp	/^void CGameEngine::MouseProc(bool bLeftButtonDown, $/;"	f	class:CGameEngine
MouseProc	.\GameGUI.cpp	/^VOID CGameGUI::MouseProc(bool bLeftButtonDown, int xPos, int yPos){$/;"	f	class:CGameGUI
MouseProc	.\GameRoot.cpp	/^void CGameRoot::MouseProc(bool bLeftButtonDown, $/;"	f	class:CGameRoot
MouseProc	.\Menu.cpp	/^bool CMenu::MouseProc(int x, int y, bool hadFocus){$/;"	f	class:CMenu
MouseProc	.\MultiColumnList.cpp	/^void CMultiColumnList::MouseProc(int xPos, int yPos){$/;"	f	class:CMultiColumnList
MouseProc	.\ServerBrowser.cpp	/^bool CServerBrowser::MouseProc(int x, int y, bool hadFocus){$/;"	f	class:CServerBrowser
MsgProc	.\Common\DXUTSettingsDlg.cpp	/^LRESULT CD3DSettingsDlg::MsgProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CD3DSettingsDlg
MsgProc	.\Common\DXUTgui.cpp	/^bool CDXUTDialog::MsgProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTDialog
MsgProc	.\Common\DXUTgui.cpp	/^bool CDXUTDialogResourceManager::MsgProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTDialogResourceManager
MsgProc	.\Common\DXUTgui.cpp	/^bool CDXUTEditBox::MsgProc( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTEditBox
MsgProc	.\Common\DXUTgui.cpp	/^bool CDXUTIMEEditBox::MsgProc( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTIMEEditBox
MsgProc	.\Common\DXUTgui.cpp	/^bool CDXUTListBox::MsgProc( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTListBox
MsgProc	.\Common\DXUTgui.cpp	/^bool CDXUTScrollBar::MsgProc( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTScrollBar
MsgProc	.\Common\DXUTgui.h	/^    virtual bool MsgProc( UINT uMsg, WPARAM wParam, LPARAM lParam ) { return false; }$/;"	f	class:CDXUTControl
MsgProc	.\GPUTerrainProject.cpp	/^LRESULT CALLBACK MsgProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, $/;"	f
MsgProc	.\GameRoot.cpp	/^bool CGameRoot::MsgProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CGameRoot
NEGX	.\GameEngine.h	/^        enum { POSX = 0, NEGZ, NEGX, POSZ, NUMSPACES };$/;"	e	enum:CGameEngine::SPlayerSpaces::<anonymous>
NEGZ	.\GameEngine.h	/^        enum { POSX = 0, NEGZ, NEGX, POSZ, NUMSPACES };$/;"	e	enum:CGameEngine::SPlayerSpaces::<anonymous>
NONE	.\AnimOb.h	/^	enum AnimType { NONE, BUTTON, WINDOW };$/;"	e	enum:AnimOb::AnimType
NONE	.\ScrollingWindow.h	/^	enum WindowAnchor{ NONE, TOP, RIGHT, BOTTOM, LEFT };$/;"	e	enum:CScrollingWindow::WindowAnchor
NOTHING_TEX	.\CloudSky.cpp	27;"	d	file:
NO_ACTION	.\GameTables.h	/^        NO_ACTION = 0,$/;"	e	enum:GameTable::Actions
NO_COMMAND	.\GameTables.h	/^		NO_COMMAND = 0,$/;"	e	enum:GameTable::Commands
NO_SETTING	.\GameTables.h	/^        NO_SETTING = 0,$/;"	e	enum:GameTable::Settings
NO_SPRITE	.\GameTables.h	/^        NO_SPRITE = 0,$/;"	e	enum:GameTable::SpriteAnims
NUMBER_OF_TODRAW_RESERVE_SPOTS	.\PolySprite.h	/^    static const int NUMBER_OF_TODRAW_RESERVE_SPOTS         =       1000;$/;"	m	class:CPolySprite
NUMSPACES	.\GameEngine.h	/^        enum { POSX = 0, NEGZ, NEGX, POSZ, NUMSPACES };$/;"	e	enum:CGameEngine::SPlayerSpaces::<anonymous>
NUM_ACTIONS	.\GameTables.h	/^        NUM_ACTIONS$/;"	e	enum:GameTable::Actions
NUM_COMMANDS	.\GameTables.h	/^        NUM_COMMANDS$/;"	e	enum:GameTable::Commands
NUM_MOUSE_BUTTONS	.\GameSettings.h	6;"	d
NUM_REGS	.\GameGUI.h	/^	enum GUIReg { CONSOLE = 0, MENU, BROWSER, NUM_REGS };$/;"	e	enum:CGameGUI::GUIReg
NUM_SETTINGS	.\GameTables.h	/^        NUM_SETTINGS$/;"	e	enum:GameTable::Settings
NUM_SLES	.\GameEngine.h	/^		enum { FIREBALL = 0, LIGHTNING, SWEEP, SMASH, DIVE, NUM_SLES }; $/;"	e	enum:CGameEngine::SShortLifeEntity::<anonymous>
NUM_SPRITES	.\GameTables.h	/^        NUM_SPRITES$/;"	e	enum:GameTable::SpriteAnims
NameIndexPair	.\GameTables.h	/^	struct NameIndexPair $/;"	s	namespace:GameTable
NameIndexPair	.\GameTables.h	/^        NameIndexPair(LPCSTR _str, UCHAR _cmd) : str(_str), cmd(_cmd) {}$/;"	f	struct:GameTable::NameIndexPair
NodeOutsideBounds	.\QuadTree.cpp	/^BOOL CQuadTree::NodeOutsideBounds(QTNode *n, int min, int width, int height) {$/;"	f	class:CQuadTree
NumAttributeGroups	.\XModelHeirarchy.h	/^    DWORD                NumAttributeGroups; $/;"	m	struct:D3DXMESHCONTAINER_DERIVED
NumInfl	.\XModelHeirarchy.h	/^    DWORD                NumInfl;$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
NumPaletteEntries	.\XModelHeirarchy.h	/^    DWORD                NumPaletteEntries;$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
NumWordChars	.\GameTables.h	/^    static const int NumWordChars                   =      17;$/;"	v
ONLYACTUALCLOUDS	.\CloudSky.h	21;"	d
ONLYIMPOSTORS	.\CloudSky.h	22;"	d
OnAdapterChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnAdapterChanged()$/;"	f	class:CD3DSettingsDlg
OnAdapterFormatChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnAdapterFormatChanged()$/;"	f	class:CD3DSettingsDlg
OnBackBufferFormatChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnBackBufferFormatChanged()$/;"	f	class:CD3DSettingsDlg
OnBegin	.\Common\DXUTmisc.cpp	/^void CD3DArcBall::OnBegin( int nX, int nY )$/;"	f	class:CD3DArcBall
OnCreateDevice	.\CloudSky.cpp	/^VOID CCloudSky::OnCreateDevice(IDirect3DDevice9* pd3dDevice)$/;"	f	class:CCloudSky
OnCreateDevice	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnCreateDevice( IDirect3DDevice9* pd3dDevice )$/;"	f	class:CD3DSettingsDlg
OnCreateDevice	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialogResourceManager::OnCreateDevice( LPDIRECT3DDEVICE9 pd3dDevice )$/;"	f	class:CDXUTDialogResourceManager
OnCreateDevice	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::OnCreateDevice( IDirect3DDevice9 *pd3dDevice )$/;"	f	class:CDXUTResourceCache
OnCreateDevice	.\Foliage.cpp	/^VOID CFoliage::OnCreateDevice(IDirect3DDevice9* pd3dDevice)$/;"	f	class:CFoliage
OnCreateDevice	.\GPUTerrainProject.cpp	/^HRESULT CALLBACK OnCreateDevice( IDirect3DDevice9* pd3dDevice, const D3DSURFACE_DESC* pBackBufferSurfaceDesc, void* pUserContext )$/;"	f
OnCreateDevice	.\GameGUI.cpp	/^VOID CGameGUI::OnCreateDevice(LPDIRECT3DDEVICE9 pd3dDevice){ $/;"	f	class:CGameGUI
OnCreateDevice	.\GameRoot.cpp	/^HRESULT CGameRoot::OnCreateDevice(LPDIRECT3DDEVICE9 pd3dDevice)$/;"	f	class:CGameRoot
OnCreateDevice	.\IImpostorable.cpp	/^HRESULT IImpostorable::OnCreateDevice(IDirect3DDevice9* pd3dDevice)$/;"	f	class:IImpostorable
OnCreateDevice	.\ImpostorAtlas.h	/^    HRESULT OnCreateDevice(LPDIRECT3DDEVICE9 pd3dDevice) { return IImpostorable::OnCreateDevice(pd3dDevice); }$/;"	f	class:CImpostorAtlas
OnCreateDevice	.\PostProcEffects.cpp	/^HRESULT ScreenAlignedQuad::OnCreateDevice(IDirect3DDevice9* pd3dDevice, const D3DSURFACE_DESC* pBackBufferSurfaceDesc)$/;"	f	class:ScreenAlignedQuad
OnCreateDevice	.\QuadTree.cpp	/^UINT CQuadTree::OnCreateDevice( IDirect3DDevice9 * pd3dDevice ) {$/;"	f	class:CQuadTree
OnCreateDevice	.\Sky.cpp	/^VOID CSky::OnCreateDevice(IDirect3DDevice9* pd3dDevice,$/;"	f	class:CSky
OnCreateDevice	.\World.cpp	/^HRESULT CWorld::OnCreateDevice(LPDIRECT3DDEVICE9 pd3dDevice)$/;"	f	class:CWorld
OnCreatedDevice	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTLineManager::OnCreatedDevice( IDirect3DDevice9* pd3dDevice )$/;"	f	class:CDXUTLineManager
OnCycleFocus	.\Common\DXUTgui.cpp	/^bool CDXUTDialog::OnCycleFocus( bool bForward )$/;"	f	class:CDXUTDialog
OnDeletedDevice	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTLineManager::OnDeletedDevice()$/;"	f	class:CDXUTLineManager
OnDepthStencilBufferFormatChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnDepthStencilBufferFormatChanged()$/;"	f	class:CD3DSettingsDlg
OnDestroyDevice	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnDestroyDevice()$/;"	f	class:CD3DSettingsDlg
OnDestroyDevice	.\Common\DXUTgui.cpp	/^void CDXUTDialogResourceManager::OnDestroyDevice()$/;"	f	class:CDXUTDialogResourceManager
OnDestroyDevice	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::OnDestroyDevice()$/;"	f	class:CDXUTResourceCache
OnDestroyDevice	.\GPUTerrainProject.cpp	/^void CALLBACK OnDestroyDevice( void* pUserContext )$/;"	f
OnDestroyDevice	.\GameRoot.cpp	/^VOID CGameRoot::OnDestroyDevice()$/;"	f	class:CGameRoot
OnDeviceClipChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnDeviceClipChanged()$/;"	f	class:CD3DSettingsDlg
OnDeviceTypeChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnDeviceTypeChanged()$/;"	f	class:CD3DSettingsDlg
OnDynamicVsDynamicCollisionTest	.\PhysicsRoot.cpp	/^bool TA_CALL_BACK OnDynamicVsDynamicCollisionTest(TA::DynamicObject& objectA, TA::DynamicObject& objectB){$/;"	f
OnEnd	.\Common\DXUTmisc.cpp	/^void CD3DArcBall::OnEnd()$/;"	f	class:CD3DArcBall
OnEvent	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::OnEvent( UINT nEvent, int nControlID, $/;"	f	class:CD3DSettingsDlg
OnFocusIn	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::OnFocusIn()$/;"	f	class:CDXUTEditBox
OnFocusIn	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::OnFocusIn()$/;"	f	class:CDXUTIMEEditBox
OnFocusIn	.\Common\DXUTgui.h	/^    virtual void OnFocusIn() { m_bHasFocus = true; }$/;"	f	class:CDXUTControl
OnFocusOut	.\Common\DXUTgui.cpp	/^void CDXUTComboBox::OnFocusOut()$/;"	f	class:CDXUTComboBox
OnFocusOut	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::OnFocusOut()$/;"	f	class:CDXUTIMEEditBox
OnFocusOut	.\Common\DXUTgui.h	/^    virtual void OnFocusOut() { m_bHasFocus = false; }$/;"	f	class:CDXUTControl
OnFrameMove	.\Bubbles.cpp	/^VOID CBubbles::OnFrameMove(float fElapsedTime, const D3DXVECTOR3* pEyePt)$/;"	f	class:CBubbles
OnFrameMove	.\CloudBatch.cpp	/^VOID CCloud::OnFrameMove(const D3DXVECTOR3* pSunPos, const D3DXVECTOR3* pLightDir, $/;"	f	class:CCloud
OnFrameMove	.\CloudSky.cpp	/^VOID CCloudSky::OnFrameMove(IDirect3DDevice9* pd3dDevice, float fElapsedTime, const D3DXMATRIX* pmViewProj, const D3DXVECTOR3* pEyePt)$/;"	f	class:CCloudSky
OnFrameMove	.\Foliage.cpp	/^VOID CFoliage::OnFrameMove($/;"	f	class:CFoliage
OnFrameMove	.\GPUTerrainProject.cpp	/^void CALLBACK OnFrameMove( IDirect3DDevice9* pd3dDevice, double fTime, float fElapsedTime, void* pUserContext )$/;"	f
OnFrameMove	.\GameEngine.cpp	/^void CGameEngine::OnFrameMove( float fElapsedTime, float fClockTime )$/;"	f	class:CGameEngine
OnFrameMove	.\GameGUI.cpp	/^VOID CGameGUI::OnFrameMove(double fTime, float fElapsedTime){$/;"	f	class:CGameGUI
OnFrameMove	.\GameRoot.cpp	/^VOID CGameRoot::OnFrameMove( double fTime, float fElapsedTime )$/;"	f	class:CGameRoot
OnFrameMove	.\HUD.cpp	/^void CHud::OnFrameMove(float fElapsedTime){$/;"	f	class:CHud
OnFrameMove	.\ModelInstance.cpp	/^VOID CModelInstance::OnFrameMove( float fElapsedTime, const D3DXMATRIX* mWorld )$/;"	f	class:CModelInstance
OnFrameMove	.\PhysicsRoot.cpp	/^VOID CPhysicsRoot::OnFrameMove(float fElapsedTime)$/;"	f	class:CPhysicsRoot
OnFrameMove	.\QuadTree.cpp	/^VOID CQuadTree::OnFrameMove( $/;"	f	class:CQuadTree
OnFrameMove	.\Sky.cpp	/^VOID CSky::OnFrameMove(float fElapsedTime, const D3DXMATRIX* pmViewProj)$/;"	f	class:CSky
OnFrameMove	.\Sky.cpp	/^VOID CSky::SBigStar::OnFrameMove(float fTimeofDay)$/;"	f	class:CSky::SBigStar
OnFrameMove	.\SpriteAnimMgr.cpp	/^VOID CSpriteAnimMgr::OnFrameMove(float fElapsedTime)$/;"	f	class:CSpriteAnimMgr
OnFrameMove	.\World.cpp	/^VOID CWorld::OnFrameMove( const double fTime, const float fElapsedTime )$/;"	f	class:CWorld
OnFrameRender	.\Button.cpp	/^void CButton::OnFrameRender(LPDIRECT3DDEVICE9 pd3dDevice) {$/;"	f	class:CButton
OnFrameRender	.\Console.cpp	/^void CConsole::OnFrameRender(IDirect3DDevice9 *pd3dDevice, bool bHasFocus){$/;"	f	class:CConsole
OnFrameRender	.\ConsoleBuffer.cpp	/^void CConsoleBuffer::OnFrameRender(IDirect3DDevice9 *pd3dDevice, LPD3DXFONT font, RECT rct){$/;"	f	class:CConsoleBuffer
OnFrameRender	.\Foliage.cpp	/^VOID CFoliage::OnFrameRender(IDirect3DDevice9* pd3dDevice, $/;"	f	class:CFoliage
OnFrameRender	.\GPUTerrainProject.cpp	/^void CALLBACK OnFrameRender( IDirect3DDevice9* pd3dDevice, double fTime, float fElapsedTime, void* pUserContext )$/;"	f
OnFrameRender	.\GameGUI.cpp	/^VOID CGameGUI::OnFrameRender(LPDIRECT3DDEVICE9 pd3dDevice, const CGameEngine::PlayerHashMap &phm){$/;"	f	class:CGameGUI
OnFrameRender	.\GameRoot.cpp	/^VOID CGameRoot::OnFrameRender()$/;"	f	class:CGameRoot
OnFrameRender	.\HUD.cpp	/^void CHud::OnFrameRender(LPDIRECT3DDEVICE9 pd3dDevice, const PlayerHashMap &hmPlayers){ $/;"	f	class:CHud
OnFrameRender	.\Menu.cpp	/^void CMenu::OnFrameRender(LPDIRECT3DDEVICE9 pd3dDevice, bool bHasFocus) {$/;"	f	class:CMenu
OnFrameRender	.\ModelInstance.cpp	/^void CModelInstance::OnFrameRender( IDirect3DDevice9 *pd3dDevice,$/;"	f	class:CModelInstance
OnFrameRender	.\MultiColumnList.cpp	/^void CMultiColumnList::OnFrameRender(IDirect3DDevice9 *pd3dDevice){$/;"	f	class:CMultiColumnList
OnFrameRender	.\PhysicsRoot.cpp	/^VOID CPhysicsRoot::OnFrameRender(const D3DXMATRIX* pProj, const D3DXMATRIX* pView)$/;"	f	class:CPhysicsRoot
OnFrameRender	.\Pillar.cpp	/^HRESULT CPillar::OnFrameRender( IDirect3DDevice9 *pd3dDevice )$/;"	f	class:CPillar
OnFrameRender	.\PostProcEffects.cpp	/^HRESULT PostProcEffects::OnFrameRender(void)$/;"	f	class:PostProcEffects
OnFrameRender	.\PostProcEffects.cpp	/^HRESULT ScreenAlignedQuad::OnFrameRender(IDirect3DDevice9* pd3dDevice)$/;"	f	class:ScreenAlignedQuad
OnFrameRender	.\ProgressBar.h	/^	void OnFrameRender(LPDIRECT3DDEVICE9 pd3dDevice) {$/;"	f	class:CProgressBar
OnFrameRender	.\QuadTree.cpp	/^HRESULT CQuadTree::OnFrameRender($/;"	f	class:CQuadTree
OnFrameRender	.\ScrollingWindow.cpp	/^void CScrollingWindow::OnFrameRender(LPDIRECT3DDEVICE9 pd3dDevice, bool bHasFocus) {$/;"	f	class:CScrollingWindow
OnFrameRender	.\ServerBrowser.cpp	/^void CServerBrowser::OnFrameRender(IDirect3DDevice9 *pd3dDevice, bool bHasFocus){$/;"	f	class:CServerBrowser
OnFrameRender	.\Sky.cpp	/^HRESULT CSky::OnFrameRender(IDirect3DDevice9 *pd3dDevice)$/;"	f	class:CSky
OnFrameRender	.\Sky.cpp	/^VOID CSky::SBigStar::OnFrameRender(IDirect3DDevice9* pd3dDevice)$/;"	f	class:CSky::SBigStar
OnFrameRender	.\World.cpp	/^HRESULT CWorld::OnFrameRender( UINT param )$/;"	f	class:CWorld
OnGUIEvent	.\GPUTerrainProject.cpp	/^void CALLBACK OnGUIEvent( UINT nEvent, int nControlID, CDXUTControl* pControl, void* pUserContext )$/;"	f
OnHotkey	.\Common\DXUTgui.cpp	/^void CDXUTComboBox::OnHotkey()$/;"	f	class:CDXUTComboBox
OnHotkey	.\Common\DXUTgui.h	/^    virtual void OnHotkey() { if( m_pDialog->IsKeyboardInputEnabled() ) m_pDialog->RequestFocus( this ); SetCheckedInternal( !m_bChecked, true ); }$/;"	f	class:CDXUTCheckBox
OnHotkey	.\Common\DXUTgui.h	/^    virtual void OnHotkey() { if( m_pDialog->IsKeyboardInputEnabled() ) m_pDialog->RequestFocus( this ); SetCheckedInternal( true, true, true ); }$/;"	f	class:CDXUTRadioButton
OnHotkey	.\Common\DXUTgui.h	/^    virtual void OnHotkey() { if( m_pDialog->IsKeyboardInputEnabled() ) m_pDialog->RequestFocus( this ); m_pDialog->SendEvent( EVENT_BUTTON_CLICKED, true, this ); }$/;"	f	class:CDXUTButton
OnHotkey	.\Common\DXUTgui.h	/^    virtual void OnHotkey() {}$/;"	f	class:CDXUTControl
OnInit	.\Common\DXUTgui.h	/^    virtual HRESULT OnInit() { return S_OK; }$/;"	f	class:CDXUTControl
OnInit	.\Common\DXUTgui.h	/^    virtual HRESULT OnInit() { return m_pDialog->InitControl( &m_ScrollBar ); }$/;"	f	class:CDXUTComboBox
OnInit	.\Common\DXUTgui.h	/^    virtual HRESULT OnInit() { return m_pDialog->InitControl( &m_ScrollBar ); }$/;"	f	class:CDXUTListBox
OnLostDevice	.\Bubbles.cpp	/^VOID CBubbles::OnLostDevice()$/;"	f	class:CBubbles
OnLostDevice	.\Button.cpp	/^void CButton::OnLostDevice(){$/;"	f	class:CButton
OnLostDevice	.\CloudSky.cpp	/^HRESULT CCloudSky::OnLostDevice()$/;"	f	class:CCloudSky
OnLostDevice	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnLostDevice()$/;"	f	class:CD3DSettingsDlg
OnLostDevice	.\Common\DXUTgui.cpp	/^void CDXUTDialogResourceManager::OnLostDevice()$/;"	f	class:CDXUTDialogResourceManager
OnLostDevice	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTLineManager::OnLostDevice()$/;"	f	class:CDXUTLineManager
OnLostDevice	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::OnLostDevice()$/;"	f	class:CDXUTResourceCache
OnLostDevice	.\Console.cpp	/^void CConsole::OnLostDevice(){$/;"	f	class:CConsole
OnLostDevice	.\Foliage.cpp	/^VOID CFoliage::OnLostDevice()$/;"	f	class:CFoliage
OnLostDevice	.\GPUTerrainProject.cpp	/^void CALLBACK OnLostDevice( void* pUserContext )$/;"	f
OnLostDevice	.\GameGUI.cpp	/^VOID CGameGUI::OnLostDevice(){$/;"	f	class:CGameGUI
OnLostDevice	.\GameRoot.cpp	/^HRESULT CGameRoot::OnLostDevice()$/;"	f	class:CGameRoot
OnLostDevice	.\HUD.cpp	/^void CHud::OnLostDevice(){ $/;"	f	class:CHud
OnLostDevice	.\IImpostorable.cpp	/^HRESULT IImpostorable::OnLostDevice()$/;"	f	class:IImpostorable
OnLostDevice	.\ImpostorAtlas.cpp	/^HRESULT CImpostorAtlas::OnLostDevice() $/;"	f	class:CImpostorAtlas
OnLostDevice	.\Menu.cpp	/^void CMenu::OnLostDevice(){$/;"	f	class:CMenu
OnLostDevice	.\MipmapTerrain.cpp	/^HRESULT CMipmapTerrain::OnLostDevice() $/;"	f	class:CMipmapTerrain
OnLostDevice	.\MultiColumnList.cpp	/^void CMultiColumnList::OnLostDevice(){ $/;"	f	class:CMultiColumnList
OnLostDevice	.\NumberToSprite.h	/^    HRESULT OnLostDevice() { return m_pSprite->OnLostDevice(); }$/;"	f	class:CNumberToSprite
OnLostDevice	.\Pillar.cpp	/^HRESULT CPillar::OnLostDevice( void )$/;"	f	class:CPillar
OnLostDevice	.\PolySprite.cpp	/^VOID CPolySprite::OnLostDevice()$/;"	f	class:CPolySprite
OnLostDevice	.\PostProcEffects.cpp	/^HRESULT PostProcEffects::OnLostDevice(void)$/;"	f	class:PostProcEffects
OnLostDevice	.\PostProcEffects.cpp	/^HRESULT ScreenAlignedQuad::OnLostDevice(void)$/;"	f	class:ScreenAlignedQuad
OnLostDevice	.\ProgressBar.h	/^	void OnLostDevice(){ }$/;"	f	class:CProgressBar
OnLostDevice	.\QuadTree.cpp	/^HRESULT CQuadTree::OnLostDevice() {$/;"	f	class:CQuadTree
OnLostDevice	.\ServerBrowser.cpp	/^void CServerBrowser::OnLostDevice(){$/;"	f	class:CServerBrowser
OnLostDevice	.\ShadowMap.cpp	/^HRESULT CShadowMap::OnLostDevice()$/;"	f	class:CShadowMap
OnLostDevice	.\Sky.cpp	/^HRESULT CSky::OnLostDevice()$/;"	f	class:CSky
OnLostDevice	.\Sprite.cpp	/^HRESULT CSprite::OnLostDevice()$/;"	f	class:CSprite
OnLostDevice	.\World.cpp	/^HRESULT CWorld::OnLostDevice()$/;"	f	class:CWorld
OnLostDevice	.\XModelHeirarchy.cpp	/^VOID CXModelHeirarchy::OnLostDevice()$/;"	f	class:CXModelHeirarchy
OnMouseEnter	.\Common\DXUTgui.h	/^    virtual void OnMouseEnter() { m_bMouseOver = true; }$/;"	f	class:CDXUTControl
OnMouseLeave	.\Common\DXUTgui.h	/^    virtual void OnMouseLeave() { m_bMouseOver = false; }$/;"	f	class:CDXUTControl
OnMouseMove	.\Common\DXUTgui.cpp	/^void CDXUTDialog::OnMouseMove( POINT pt )$/;"	f	class:CDXUTDialog
OnMouseUp	.\Common\DXUTgui.cpp	/^void CDXUTDialog::OnMouseUp( POINT pt )$/;"	f	class:CDXUTDialog
OnMove	.\Common\DXUTmisc.cpp	/^void CD3DArcBall::OnMove( int nX, int nY )$/;"	f	class:CD3DArcBall
OnMultisampleQualityChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnMultisampleQualityChanged()$/;"	f	class:CD3DSettingsDlg
OnMultisampleTypeChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnMultisampleTypeChanged()$/;"	f	class:CD3DSettingsDlg
OnPresentIntervalChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnPresentIntervalChanged()$/;"	f	class:CD3DSettingsDlg
OnRefreshRateChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnRefreshRateChanged()$/;"	f	class:CD3DSettingsDlg
OnRender	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnRender( float fElapsedTime )$/;"	f	class:CD3DSettingsDlg
OnRender	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::OnRender( float fElapsedTime )$/;"	f	class:CDXUTDialog
OnRender	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTDirectionWidget::OnRender( D3DXCOLOR color, const D3DXMATRIX* pmView, $/;"	f	class:CDXUTDirectionWidget
OnRender	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTLineManager::OnRender()$/;"	f	class:CDXUTLineManager
OnResetDevice	.\Bubbles.cpp	/^VOID CBubbles::OnResetDevice(IDirect3DDevice9 *pd3dDevice)$/;"	f	class:CBubbles
OnResetDevice	.\Button.cpp	/^void CButton::OnResetDevice(){$/;"	f	class:CButton
OnResetDevice	.\CloudSky.cpp	/^HRESULT CCloudSky::OnResetDevice(IDirect3DDevice9* pd3dDevice)$/;"	f	class:CCloudSky
OnResetDevice	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnResetDevice()$/;"	f	class:CD3DSettingsDlg
OnResetDevice	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialogResourceManager::OnResetDevice()$/;"	f	class:CDXUTDialogResourceManager
OnResetDevice	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTDirectionWidget::OnResetDevice( const D3DSURFACE_DESC* pBackBufferSurfaceDesc )$/;"	f	class:CDXUTDirectionWidget
OnResetDevice	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTLineManager::OnResetDevice()$/;"	f	class:CDXUTLineManager
OnResetDevice	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTResourceCache::OnResetDevice( IDirect3DDevice9 *pd3dDevice )$/;"	f	class:CDXUTResourceCache
OnResetDevice	.\Console.cpp	/^void CConsole::OnResetDevice(){$/;"	f	class:CConsole
OnResetDevice	.\Foliage.cpp	/^VOID CFoliage::OnResetDevice(IDirect3DDevice9* pd3dDevice)$/;"	f	class:CFoliage
OnResetDevice	.\GPUTerrainProject.cpp	/^HRESULT CALLBACK OnResetDevice( IDirect3DDevice9* pd3dDevice, $/;"	f
OnResetDevice	.\GameGUI.cpp	/^VOID CGameGUI::OnResetDevice(LPDIRECT3DDEVICE9 pd3dDevice){$/;"	f	class:CGameGUI
OnResetDevice	.\GameRoot.cpp	/^HRESULT CGameRoot::OnResetDevice(LPDIRECT3DDEVICE9 pd3dDevice)$/;"	f	class:CGameRoot
OnResetDevice	.\HUD.cpp	/^void CHud::OnResetDevice(){$/;"	f	class:CHud
OnResetDevice	.\IImpostorable.cpp	/^HRESULT IImpostorable::OnResetDevice(IDirect3DDevice9 *pd3dDevice)$/;"	f	class:IImpostorable
OnResetDevice	.\ImpostorAtlas.cpp	/^HRESULT CImpostorAtlas::OnResetDevice(LPDIRECT3DDEVICE9 pd3dDevice) $/;"	f	class:CImpostorAtlas
OnResetDevice	.\Menu.cpp	/^void CMenu::OnResetDevice(){$/;"	f	class:CMenu
OnResetDevice	.\MipmapTerrain.cpp	/^HRESULT CMipmapTerrain::OnResetDevice() $/;"	f	class:CMipmapTerrain
OnResetDevice	.\MultiColumnList.cpp	/^void CMultiColumnList::OnResetDevice(){$/;"	f	class:CMultiColumnList
OnResetDevice	.\NumberToSprite.h	/^    HRESULT OnResetDevice() { return m_pSprite->OnResetDevice(); }$/;"	f	class:CNumberToSprite
OnResetDevice	.\Pillar.cpp	/^HRESULT CPillar::OnResetDevice( IDirect3DDevice9 *pd3dDevice )$/;"	f	class:CPillar
OnResetDevice	.\PolySprite.cpp	/^VOID CPolySprite::OnResetDevice()$/;"	f	class:CPolySprite
OnResetDevice	.\PostProcEffects.cpp	/^HRESULT PostProcEffects::OnResetDevice(IDirect3DDevice9* pd3dDevice, const D3DSURFACE_DESC* pBackBufferSurfaceDesc)$/;"	f	class:PostProcEffects
OnResetDevice	.\PostProcEffects.cpp	/^HRESULT ScreenAlignedQuad::OnResetDevice(IDirect3DDevice9* pd3dDevice, const D3DSURFACE_DESC* pBackBufferSurfaceDesc)$/;"	f	class:ScreenAlignedQuad
OnResetDevice	.\ProgressBar.h	/^	void OnResetDevice() { }$/;"	f	class:CProgressBar
OnResetDevice	.\QuadTree.cpp	/^HRESULT CQuadTree::OnResetDevice(IDirect3DDevice9* pd3dDevice) {$/;"	f	class:CQuadTree
OnResetDevice	.\ServerBrowser.cpp	/^void CServerBrowser::OnResetDevice(){$/;"	f	class:CServerBrowser
OnResetDevice	.\ShadowMap.cpp	/^HRESULT CShadowMap::OnResetDevice(LPDIRECT3DDEVICE9 pd3dDevice)$/;"	f	class:CShadowMap
OnResetDevice	.\Sky.cpp	/^HRESULT CSky::OnResetDevice(IDirect3DDevice9 * pd3dDevice)$/;"	f	class:CSky
OnResetDevice	.\Sprite.cpp	/^HRESULT CSprite::OnResetDevice()$/;"	f	class:CSprite
OnResetDevice	.\World.cpp	/^HRESULT CWorld::OnResetDevice(LPDIRECT3DDEVICE9 pd3dDevice)$/;"	f	class:CWorld
OnResetDevice	.\XModelHeirarchy.cpp	/^VOID CXModelHeirarchy::OnResetDevice(LPDIRECT3DDEVICE9 pd3dDevice, float zFarPlane)$/;"	f	class:CXModelHeirarchy
OnResolutionChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnResolutionChanged()$/;"	f	class:CD3DSettingsDlg
OnVertexProcessingChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnVertexProcessingChanged()$/;"	f	class:CD3DSettingsDlg
OnWindowedFullScreenChanged	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::OnWindowedFullScreenChanged()$/;"	f	class:CD3DSettingsDlg
Open	.\Common\DXUTsound.cpp	/^HRESULT CWaveFile::Open( LPWSTR strFileName, WAVEFORMATEX* pwfx, DWORD dwFlags )$/;"	f	class:CWaveFile
OpenFromMemory	.\Common\DXUTsound.cpp	/^HRESULT CWaveFile::OpenFromMemory( BYTE* pbData, ULONG ulDataSize,$/;"	f	class:CWaveFile
PBT_APMQUERYSUSPEND	.\Common\DXUT.cpp	4291;"	d	file:
PBT_APMRESUMESUSPEND	.\Common\DXUT.cpp	4301;"	d	file:
PCALLBACKDXUTGUIEVENT	.\Common\DXUTgui.h	/^typedef VOID (CALLBACK *PCALLBACKDXUTGUIEVENT) ( UINT nEvent, int nControlID, CDXUTControl* pControl, void* pUserContext );$/;"	t
PCTARR_TYPES	.\CloudBatch.cpp	/^const UINT* SCloudInfo::PCTARR_TYPES[6]           = { SCloudInfo::CTARR_NIMBOSTRATUS, $/;"	m	class:SCloudInfo	file:
PCTARR_TYPES	.\CloudBatch.h	/^    static const UINT* PCTARR_TYPES[6];$/;"	m	struct:SCloudInfo
PI	.\Pillar.cpp	7;"	d	file:
PLACEHOLDERPROC	.\Common\DXUTgui.cpp	41;"	d	file:
POSX	.\GameEngine.h	/^        enum { POSX = 0, NEGZ, NEGX, POSZ, NUMSPACES };$/;"	e	enum:CGameEngine::SPlayerSpaces::<anonymous>
POSZ	.\GameEngine.h	/^        enum { POSX = 0, NEGZ, NEGX, POSZ, NUMSPACES };$/;"	e	enum:CGameEngine::SPlayerSpaces::<anonymous>
PPVERT	.\FXDecl.h	/^struct PPVERT$/;"	s
PROJ_MAX_INCR_SETTING	.\GameTables.h	/^        PROJ_MAX_INCR_SETTING,$/;"	e	enum:GameTable::Settings
PROJ_SPEED_SETTING	.\GameTables.h	/^        PROJ_SPEED_SETTING,$/;"	e	enum:GameTable::Settings
PUSH_CMD_IN_HISTORY	.\GameEngine.cpp	940;"	d	file:
PageDown	.\ConsoleBuffer.cpp	/^void CConsoleBuffer::PageDown(){$/;"	f	class:CConsoleBuffer
PageDown	.\MultiColumnList.cpp	/^void CMultiColumnList::PageDown(){$/;"	f	class:CMultiColumnList
PageUp	.\ConsoleBuffer.cpp	/^void CConsoleBuffer::PageUp() {$/;"	f	class:CConsoleBuffer
PageUp	.\MultiColumnList.cpp	/^void CMultiColumnList::PageUp(){$/;"	f	class:CMultiColumnList
ParseFloatArray	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::ParseFloatArray( float *pNumbers, int nCount )$/;"	f	class:CDXUTEditBox
ParseText	.\Console.cpp	/^void CConsole::ParseText(LPCSTR text) {$/;"	f	class:CConsole
PasteFromClipboard	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::PasteFromClipboard()$/;"	f	class:CDXUTEditBox
PlaceCaret	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::PlaceCaret( int nCP )$/;"	f	class:CDXUTEditBox
Play	.\Common\DXUTsound.cpp	/^HRESULT CSound::Play( DWORD dwPriority, DWORD dwFlags, LONG lVolume, LONG lFrequency, LONG lPan )$/;"	f	class:CSound
Play3D	.\Common\DXUTsound.cpp	/^HRESULT CSound::Play3D( LPDS3DBUFFER p3DBuffer, DWORD dwPriority, DWORD dwFlags, LONG lFrequency )$/;"	f	class:CSound
PlayAnimationSetOnce	.\ModelInstance.cpp	/^float CModelInstance::PlayAnimationSetOnce(UINT idx)$/;"	f	class:CModelInstance
PlayerAttackRange	.\GameEngine.cpp	/^void CGameEngine::PlayerAttackRange(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerAttackSmash	.\GameEngine.cpp	/^void CGameEngine::PlayerAttackSmash(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerAttackSweep	.\GameEngine.cpp	/^void CGameEngine::PlayerAttackSweep(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerAttackVertical	.\GameEngine.cpp	/^void CGameEngine::PlayerAttackVertical(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerBlock	.\GameEngine.cpp	/^void CGameEngine::PlayerBlock(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerCelebrate	.\GameEngine.cpp	/^void CGameEngine::PlayerCelebrate(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerCommandFuncPtr	.\GameEngine.h	/^    typedef void(CGameEngine::* PlayerCommandFuncPtr)(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta);$/;"	t	class:CGameEngine
PlayerCommandHashMap	.\GameEngine.h	/^    typedef hash_map<UCHAR, PlayerCommandFuncPtr> PlayerCommandHashMap;$/;"	t	class:CGameEngine
PlayerDescend	.\GameEngine.cpp	/^void CGameEngine::PlayerDescend(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerHashMap	.\GameEngine.h	/^	typedef hash_map<int, SPlayer>		PlayerHashMap;$/;"	t	class:CGameEngine
PlayerHashMap	.\HUD.h	/^	typedef CGameEngine::PlayerHashMap PlayerHashMap;$/;"	t	class:CHud
PlayerJump	.\GameEngine.cpp	/^void CGameEngine::PlayerJump(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerMoveBackward	.\GameEngine.cpp	/^void CGameEngine::PlayerMoveBackward(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerMoveForward	.\GameEngine.cpp	/^void CGameEngine::PlayerMoveForward(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerMoveLeft	.\GameEngine.cpp	/^void CGameEngine::PlayerMoveLeft(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerMoveRight	.\GameEngine.cpp	/^void CGameEngine::PlayerMoveRight(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerNothing	.\GameEngine.h	/^    void PlayerNothing(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta) {}  \/\/ do nothing.$/;"	f	class:CGameEngine
PlayerRequestRespawn	.\GameEngine.cpp	/^void CGameEngine::PlayerRequestRespawn(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerResetCamera	.\GameEngine.cpp	/^void CGameEngine::PlayerResetCamera(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerRotateCameraLeft	.\GameEngine.cpp	/^void CGameEngine::PlayerRotateCameraLeft(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PlayerRotateCameraRight	.\GameEngine.cpp	/^void CGameEngine::PlayerRotateCameraRight(bool bKeyDown, int xPos, int yPos, int nMouseWheelDelta)$/;"	f	class:CGameEngine
PolySpriteVertex	.\PolySprite.h	/^        PolySpriteVertex() {}$/;"	f	struct:CPolySprite::PolySpriteVertex
PolySpriteVertex	.\PolySprite.h	/^        PolySpriteVertex(const D3DXVECTOR3 &vec, ULONG _color, float _u, float _v) :$/;"	f	struct:CPolySprite::PolySpriteVertex
PolySpriteVertex	.\PolySprite.h	/^    struct PolySpriteVertex { \/\/ 32 BYTES!!$/;"	s	class:CPolySprite
Pool	.\Common\DXUTmisc.h	/^    D3DPOOL Pool;$/;"	m	struct:DXUTCache_Texture
PopulateCommandHashMap	.\GameRoot.cpp	/^VOID CGameRoot::PopulateCommandHashMap()$/;"	f	class:CGameRoot
PopulateLeafNodesWithClouds	.\CloudSky.cpp	/^VOID CCloudSky::PopulateLeafNodesWithClouds(CQuadTree::QTNode* proot)$/;"	f	class:CCloudSky
PopulateLeafNodesWithFoliage	.\Foliage.cpp	/^VOID CFoliage::PopulateLeafNodesWithFoliage(CQuadTree::QTNode* proot)$/;"	f	class:CFoliage
PopulateLimboVectors	.\World.cpp	/^VOID CWorld::PopulateLimboVectors()$/;"	f	class:CWorld
PopulateLoadArea	.\QuadTree.cpp	/^int CQuadTree::CLoadArea::PopulateLoadArea(QTNode *top, float x, float z)$/;"	f	class:CQuadTree::CLoadArea
PopulatePlayerCommandHashMap	.\GameEngine.cpp	/^void CGameEngine::PopulatePlayerCommandHashMap()$/;"	f	class:CGameEngine
PopulateServerInfo	.\ServerFinder.cpp	/^VOID CServerFinder::PopulateServerInfo(SServerInfo *pOut, UINT nKey, PtrDatabaseRow row)$/;"	f	class:CServerFinder
PopulateVB	.\PolySprite.cpp	/^VOID CPolySprite::PopulateVB() {$/;"	f	class:CPolySprite
PopulateWorker	.\QuadTree.cpp	/^VOID CQuadTree::CLoadArea::PopulateWorker(QTNode *n)$/;"	f	class:CQuadTree::CLoadArea
Pos	.\FXDecl.h	/^    D3DXVECTOR3 Pos;$/;"	m	struct:BoxVertColor
PositionSpring	.\World.h	/^        gdef::SSpring PositionSpring, LookAtSpring;$/;"	m	struct:CWorld::SCameraMovement
PostConsoleMessage	.\GameGUI.cpp	/^VOID CGameGUI::PostConsoleMessage(LPCSTR text){$/;"	f	class:CGameGUI
PostMessage	.\Console.cpp	/^void CConsole::PostMessage(LPCSTR text){ $/;"	f	class:CConsole
PostProcEffects	.\PostProcEffects.cpp	/^PostProcEffects::PostProcEffects(void)$/;"	f	class:PostProcEffects
PostProcEffects	.\PostProcEffects.h	/^class PostProcEffects$/;"	c
PrepareEffect	.\MipmapTerrain.cpp	/^UINT CMipmapTerrain::PrepareEffect()$/;"	f	class:CMipmapTerrain
PrepareRenderTargets	.\PostProcEffects.cpp	/^void PostProcEffects::PrepareRenderTargets(LPDIRECT3DSURFACE9 pSurface)$/;"	f	class:PostProcEffects
PrepareRenderToImpostor	.\IImpostorable.cpp	/^VOID IImpostorable::PrepareRenderToImpostor(LPDIRECT3DDEVICE9 pd3dDevice,$/;"	f	class:IImpostorable
PrevInLoadAreaSet	.\QuadTree.h	/^        set<QTNode *, QTNodeLessThanFunctor> InLoadAreaSet, PrevInLoadAreaSet;$/;"	m	class:CQuadTree::CLoadArea
ProcessPackets	.\Client.h	/^    VOID ProcessPackets()                                   { if(m_bConnect) m_RakClientMultiplayer.ProcessPackets(m_pRakClient); }$/;"	f	class:CClient
ProcessPackets	.\Server.h	/^    VOID ProcessPackets()                                   { if(m_bInit) m_RakServerMultiplayer.ProcessPackets(m_pRakServer); }$/;"	f	class:CServer
PtrDatabaseRow	.\ServerFinder.h	/^    typedef DataStructures::Table::Row* PtrDatabaseRow;$/;"	t	class:CServerFinder
PtrEntrySort	.\ImpostorAtlas.h	/^        PtrEntrySort(const D3DXVECTOR3 *_pEyePt, const D3DXVECTOR3 *_pAhead, bool _bBackToFront) :$/;"	f	struct:CImpostorAtlas::PtrEntrySort
PtrEntrySort	.\ImpostorAtlas.h	/^    struct PtrEntrySort $/;"	s	class:CImpostorAtlas
PumpMessage	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::PumpMessage()$/;"	f	class:CDXUTIMEEditBox
PushBackSunState	.\CloudSky.h	/^    VOID PushBackSunState(const SSunMorphState& _sunState, int idx) { m_pSky->PushBackSunState(_sunState, idx); }$/;"	f	class:CCloudSky
PushBackSunState	.\Sky.h	/^    VOID PushBackSunState(const SSunMorphState &sunState, int idx) { m_dSunStates[idx].push_back(sunState); }$/;"	f	class:CSky
QTNode	.\CloudSky.h	/^    typedef CQuadTree::QTNode QTNode;$/;"	t	class:CCloudSky
QTNode	.\QuadTree.cpp	/^CQuadTree::QTNode::QTNode()    $/;"	f	class:CQuadTree::QTNode
QTNode	.\QuadTree.cpp	/^CQuadTree::QTNode::QTNode(int _midx, int _midz, int _length, int _bottomheight, int _topheight) :$/;"	f	class:CQuadTree::QTNode
QTNode	.\QuadTree.h	/^    struct QTNode {$/;"	s	class:CQuadTree
QTNode	.\World.h	/^    typedef CQuadTree::QTNode           QTNode;$/;"	t	class:CWorld
QTNodeLessThanFunctor	.\QuadTree.h	/^    class QTNodeLessThanFunctor  {$/;"	c	class:CQuadTree
QuadTrim	.\QuadTree.cpp	/^CQuadTree::QTNode * CQuadTree::QuadTrim(QTNode *n) {$/;"	f	class:CQuadTree
QuadWorker	.\QuadTree.cpp	/^VOID CQuadTree::QuadWorker(QTNode *n) {$/;"	f	class:CQuadTree
QuatFromBallPoints	.\Common\DXUTmisc.cpp	/^D3DXQUATERNION CD3DArcBall::QuatFromBallPoints(const D3DXVECTOR3 &vFrom, const D3DXVECTOR3 &vTo)$/;"	f	class:CD3DArcBall
QueryLanServers	.\ServerFinder.cpp	/^VOID CServerFinder::QueryLanServers(ServerInfoSet &sServerListOut, USHORT nClientPort, USHORT nServerPort)$/;"	f	class:CServerFinder
QueryMasterServer	.\ServerFinder.cpp	/^VOID CServerFinder::QueryMasterServer(ServerInfoSet &sServerListOut, SMasterServerInfo &masterInfo)$/;"	f	class:CServerFinder
QuitCmdFunc	.\GameRoot.cpp	/^VOID CGameRoot::QuitCmdFunc(const string& s) { $/;"	f	class:CGameRoot
RAD1	.\Pillar.cpp	10;"	d	file:
RAD2	.\Pillar.cpp	11;"	d	file:
RANGE_SPRITE	.\GameTables.h	/^        RANGE_SPRITE,   \/\/ am i gonna have strafe?$/;"	e	enum:GameTable::SpriteAnims
REFRACT_EFFECT_NAME	.\Bubbles.cpp	6;"	d	file:
REFRACT_TECHNIQUE_NAME	.\Bubbles.cpp	7;"	d	file:
REQUEST_RESPAWN	.\GameTables.h	/^        REQUEST_RESPAWN,$/;"	e	enum:GameTable::Actions
RESET_CAMERA_ACTION	.\GameTables.h	/^        RESET_CAMERA_ACTION,$/;"	e	enum:GameTable::Actions
RESOLUTION_HEIGHT	.\GameDefine.h	6;"	d
RESOLUTION_WIDTH	.\GameDefine.h	5;"	d
RIGHT	.\ScrollingWindow.h	/^	enum WindowAnchor{ NONE, TOP, RIGHT, BOTTOM, LEFT };$/;"	e	enum:CScrollingWindow::WindowAnchor
ROTATE_CAMERA_LEFT_ACTION	.\GameTables.h	/^        ROTATE_CAMERA_LEFT_ACTION,$/;"	e	enum:GameTable::Actions
ROTATE_CAMERA_RIGHT_ACTION	.\GameTables.h	/^        ROTATE_CAMERA_RIGHT_ACTION,$/;"	e	enum:GameTable::Actions
RPC	.\Client.cpp	/^bool CClient::RPC(LPSTR pszFunc, $/;"	f	class:CClient
RPC	.\Client.cpp	/^bool CClient::RPC(LPSTR pszFunc, RakNet::BitStream *pBitStream)$/;"	f	class:CClient
RPC	.\Server.cpp	/^bool CServer::RPC(LPSTR pszFunc, $/;"	f	class:CServer
RPC	.\Server.cpp	/^bool CServer::RPC(LPSTR pszFunc, RakNet::BitStream *pBitStream)$/;"	f	class:CServer
RUN_SETTING	.\GameTables.h	/^		RUN_SETTING,$/;"	e	enum:GameTable::Settings
RakNetFuncPtr	.\GameEngine.h	/^    typedef void (__cdecl CGameEngine::* RakNetFuncPtr)(RPCParameters *rpcParms);$/;"	t	class:CGameEngine
RangedAttack	.\GameEngine.cpp	/^void CGameEngine::RangedAttack(SPlayer* pplayer){$/;"	f	class:CGameEngine
Read	.\Common\DXUTsound.cpp	/^HRESULT CWaveFile::Read( BYTE* pBuffer, DWORD dwSizeToRead, DWORD* pdwSizeRead )$/;"	f	class:CWaveFile
ReadGameSettings	.\GameSettings.cpp	/^int CGameSettings::ReadGameSettings(LPCSTR settingsFN)$/;"	f	class:CGameSettings
ReadHostSettings	.\GameSettings.cpp	/^int CGameSettings::ReadHostSettings(LPCSTR settingsFN)$/;"	f	class:CGameSettings
ReadMMIO	.\Common\DXUTsound.cpp	/^HRESULT CWaveFile::ReadMMIO()$/;"	f	class:CWaveFile
RectHeight	.\Common\DXUTgui.cpp	/^inline int RectHeight( RECT &rc ) { return ( (rc).bottom - (rc).top ); }$/;"	f
RectWidth	.\Common\DXUTgui.cpp	/^inline int RectWidth( RECT &rc ) { return ( (rc).right - (rc).left ); }$/;"	f
Refresh	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::Refresh()$/;"	f	class:CD3DSettingsDlg
Refresh	.\Common\DXUTgui.cpp	/^void CDXUTControl::Refresh()$/;"	f	class:CDXUTControl
Refresh	.\Common\DXUTgui.cpp	/^void CDXUTDialog::Refresh()$/;"	f	class:CDXUTDialog
Refresh	.\Common\DXUTgui.cpp	/^void CDXUTElement::Refresh()$/;"	f	class:CDXUTElement
RefreshServerBrowser	.\GameRoot.cpp	/^VOID CGameRoot::RefreshServerBrowser(const string& s)$/;"	f	class:CGameRoot
RefreshServerList	.\NetworkRoot.cpp	/^VOID CNetworkRoot::RefreshServerList()$/;"	f	class:CNetworkRoot
RegisterDialog	.\Common\DXUTgui.cpp	/^bool CDXUTDialogResourceManager::RegisterDialog( CDXUTDialog *pDialog )$/;"	f	class:CDXUTDialogResourceManager
RegisterRPCFunction	.\Client.cpp	/^VOID CClient::RegisterRPCFunction(LPSTR pszFuncName, CGameEngine::RakNetFuncPtr pMemberFunc)$/;"	f	class:CClient
RegisterRPCFunction	.\Server.cpp	/^VOID CServer::RegisterRPCFunction(LPSTR pszFuncName, CGameEngine::RakNetFuncPtr pMemberFunc)$/;"	f	class:CServer
RegisterRPCFunctions	.\GameEngine.cpp	/^VOID CGameEngine::RegisterRPCFunctions()$/;"	f	class:CGameEngine
ReleaseAttributeTable	.\XModelHeirarchy.cpp	/^void CXModelHeirarchy::ReleaseAttributeTable( LPD3DXFRAME pFrameBase )$/;"	f	class:CXModelHeirarchy
Remove	.\Common\DXUTmisc.h	/^HRESULT CGrowableArray<TYPE>::Remove( int nIndex )$/;"	f	class:CGrowableArray
RemoveAll	.\Common\DXUTmisc.h	/^    void    RemoveAll() { SetSize(0); }$/;"	f	class:CGrowableArray
RemoveAllControls	.\Common\DXUTgui.cpp	/^void CDXUTDialog::RemoveAllControls()$/;"	f	class:CDXUTDialog
RemoveAllItems	.\Common\DXUTgui.cpp	/^void CDXUTComboBox::RemoveAllItems()$/;"	f	class:CDXUTComboBox
RemoveAllItems	.\Common\DXUTgui.cpp	/^void CDXUTListBox::RemoveAllItems()$/;"	f	class:CDXUTListBox
RemoveAllLines	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTLineManager::RemoveAllLines()$/;"	f	class:CDXUTLineManager
RemoveChar	.\Common\DXUTgui.cpp	/^bool CUniBuffer::RemoveChar( int nIndex )$/;"	f	class:CUniBuffer
RemoveControl	.\Common\DXUTgui.cpp	/^void CDXUTDialog::RemoveControl( int ID )$/;"	f	class:CDXUTDialog
RemoveItem	.\Common\DXUTgui.cpp	/^void CDXUTComboBox::RemoveItem( UINT index )$/;"	f	class:CDXUTComboBox
RemoveItem	.\Common\DXUTgui.cpp	/^void CDXUTListBox::RemoveItem( int nIndex )$/;"	f	class:CDXUTListBox
RemoveItemByData	.\Common\DXUTgui.cpp	/^void CDXUTListBox::RemoveItemByData( void *pData )$/;"	f	class:CDXUTListBox
RemoveItemByText	.\Common\DXUTgui.cpp	/^void CDXUTListBox::RemoveItemByText( WCHAR *wszText )$/;"	f	class:CDXUTListBox
RemoveLine	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTLineManager::RemoveLine( int nLineID )$/;"	f	class:CDXUTLineManager
Render	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::Render( ID3DXEffect *pEffect,$/;"	f	class:CDXUTMesh
Render	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::Render( LPDIRECT3DDEVICE9 pd3dDevice, bool bDrawOpaqueSubsets,$/;"	f	class:CDXUTMesh
Render	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMeshFile::Render( LPDIRECT3DDEVICE9 pd3dDevice, D3DXMATRIX* pmatWorldMatrix )$/;"	f	class:CDXUTMeshFile
Render	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMeshFrame::Render( LPDIRECT3DDEVICE9 pd3dDevice, bool bDrawOpaqueSubsets,$/;"	f	class:CDXUTMeshFrame
Render	.\Common\DXUTgui.cpp	/^void CDXUTButton::Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTButton
Render	.\Common\DXUTgui.cpp	/^void CDXUTCheckBox::Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTCheckBox
Render	.\Common\DXUTgui.cpp	/^void CDXUTComboBox::Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTComboBox
Render	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTEditBox
Render	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTIMEEditBox
Render	.\Common\DXUTgui.cpp	/^void CDXUTListBox::Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTListBox
Render	.\Common\DXUTgui.cpp	/^void CDXUTScrollBar::Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTScrollBar
Render	.\Common\DXUTgui.cpp	/^void CDXUTSlider::Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTSlider
Render	.\Common\DXUTgui.cpp	/^void CDXUTStatic::Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTStatic
Render	.\Common\DXUTgui.h	/^    virtual void Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime ) { };$/;"	f	class:CDXUTControl
RenderArrow	.\PhysicsRoot.cpp	/^void TAC_CALL RenderArrow(const TA::Vec3 &v3PosA, const TA::Vec3 &v3PosB, TA::u32 nColor)$/;"	f
RenderAtlas	.\ImpostorAtlas.cpp	/^VOID CImpostorAtlas::RenderAtlas(LPDIRECT3DDEVICE9 pd3dDevice, $/;"	f	class:CImpostorAtlas
RenderAtlasForShadowMap	.\ImpostorAtlas.cpp	/^VOID CImpostorAtlas::RenderAtlasForShadowMap(LPDIRECT3DDEVICE9 pd3dDevice,$/;"	f	class:CImpostorAtlas
RenderAtlasToSprite	.\ImpostorAtlas.cpp	/^VOID CImpostorAtlas::RenderAtlasToSprite(CPolySprite *pPolySprite)$/;"	f	class:CImpostorAtlas
RenderBubblesCloudsSprites	.\World.cpp	/^VOID CWorld::RenderBubblesCloudsSprites( bool bClearFlagged )$/;"	f	class:CWorld
RenderCandidateReadingWindow	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::RenderCandidateReadingWindow( IDirect3DDevice9* pd3dDevice, float fElapsedTime, bool bReading )$/;"	f	class:CDXUTIMEEditBox
RenderClouds	.\CloudSky.cpp	/^UINT CCloudSky::RenderClouds(IDirect3DDevice9* pd3dDevice, $/;"	f	class:CCloudSky
RenderCloudsToShadowMap	.\CloudSky.cpp	/^UINT CCloudSky::RenderCloudsToShadowMap(IDirect3DDevice9* pd3dDevice,$/;"	f	class:CCloudSky
RenderComposition	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::RenderComposition( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTIMEEditBox
RenderEntities	.\World.cpp	/^HRESULT CWorld::RenderEntities(const D3DXMATRIX* pShadowViewProjMtx)$/;"	f	class:CWorld
RenderImpostor	.\IImpostorable.cpp	/^HRESULT IImpostorable::RenderImpostor(IDirect3DDevice9 *pd3dDevice)$/;"	f	class:IImpostorable
RenderIndicator	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::RenderIndicator( IDirect3DDevice9* pd3dDevice, float fElapsedTime )$/;"	f	class:CDXUTIMEEditBox
RenderLine	.\PhysicsRoot.cpp	/^void TAC_CALL RenderLine(const TA::Vec3 &v3PosA, const TA::Vec3 &v3PosB, TA::u32 nColor)$/;"	f
RenderPhysics	.\GameEngine.cpp	/^VOID CGameEngine::RenderPhysics(const D3DXMATRIX* pProj, const D3DXMATRIX* pView)$/;"	f	class:CGameEngine
RenderPolygon	.\PhysicsRoot.cpp	/^void TAC_CALL RenderPolygon(int nNumVertices, const TA::Vec3 *pv3VertexList, const TA::Vec3 *pv3NormalList)$/;"	f
RenderShadowMap	.\ModelInstance.cpp	/^void CModelInstance::RenderShadowMap( IDirect3DDevice9 *pd3dDevice, $/;"	f	class:CModelInstance
RenderSky	.\CloudSky.cpp	/^UINT CCloudSky::RenderSky(IDirect3DDevice9* pd3dDevice, bool bZTest)$/;"	f	class:CCloudSky
RenderStats	.\World.cpp	/^void CWorld::RenderStats() $/;"	f	class:CWorld
RenderThruSprite	.\CloudBatch.cpp	/^HRESULT CCloud::RenderThruSprite(CPolySprite* pSprite, LPDIRECT3DTEXTURE9 pTex)$/;"	f	class:CCloud
RequestFocus	.\Common\DXUTgui.cpp	/^void CDXUTDialog::RequestFocus( CDXUTControl* pControl )$/;"	f	class:CDXUTDialog
RequestLightDirByTimeOfDay	.\World.cpp	/^VOID CWorld::RequestLightDirByTimeOfDay(float fLightDirByTimeOfDay)$/;"	f	class:CWorld
RequestRespawnPoint	.\GameEngine.cpp	/^D3DXVECTOR3 CGameEngine::RequestRespawnPoint(){$/;"	f	class:CGameEngine
RequestSunState	.\World.cpp	/^VOID CWorld::RequestSunState(GameTable::SunStates eSunState, int SunIdx)$/;"	f	class:CWorld
Reset	.\Common\DXUTmisc.cpp	/^VOID CBaseCamera::Reset()$/;"	f	class:CBaseCamera
Reset	.\Common\DXUTmisc.cpp	/^VOID CModelViewerCamera::Reset()$/;"	f	class:CModelViewerCamera
Reset	.\Common\DXUTmisc.cpp	/^void CD3DArcBall::Reset()$/;"	f	class:CD3DArcBall
Reset	.\Common\DXUTmisc.cpp	/^void CDXUTTimer::Reset()$/;"	f	class:CDXUTTimer
Reset	.\Common\DXUTsound.cpp	/^HRESULT CSound::Reset()$/;"	f	class:CSound
Reset	.\Common\DXUTsound.cpp	/^HRESULT CStreamingSound::Reset()$/;"	f	class:CStreamingSound
ResetAlpha	.\HUD.cpp	/^void CHud::ResetAlpha() { $/;"	f	class:CHud
ResetCaretBlink	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::ResetCaretBlink()$/;"	f	class:CDXUTEditBox
ResetCompositionString	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::ResetCompositionString()$/;"	f	class:CDXUTIMEEditBox
ResetFile	.\Common\DXUTsound.cpp	/^HRESULT CWaveFile::ResetFile()$/;"	f	class:CWaveFile
ResetHUDAlpha	.\GameGUI.cpp	/^VOID CGameGUI::ResetHUDAlpha(){$/;"	f	class:CGameGUI
ResetNextAnimStill	.\SpriteAnimMgr.h	/^    VOID ResetNextAnimStill()               { m_runningIt = m_lRunningAnimIdx.begin(); }$/;"	f	class:CSpriteAnimMgr
ResetPossibleDepthStencilFormats	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::ResetPossibleDepthStencilFormats()$/;"	f	class:CD3DEnumeration
ResetPossibleMultisampleTypeList	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::ResetPossibleMultisampleTypeList()$/;"	f	class:CD3DEnumeration
ResetPossiblePresentIntervalList	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::ResetPossiblePresentIntervalList()$/;"	f	class:CD3DEnumeration
Respawn	.\GameEngine.cpp	/^void CGameEngine::Respawn(SPlayer* pplayer){$/;"	f	class:CGameEngine
RestoreBuffer	.\Common\DXUTsound.cpp	/^HRESULT CSound::RestoreBuffer( LPDIRECTSOUNDBUFFER pDSB, BOOL* pbWasRestored )$/;"	f	class:CSound
RestoreDevice	.\Bubbles.cpp	/^VOID CBubbles::RestoreDevice(IDirect3DDevice9* pd3dDevice)$/;"	f	class:CBubbles
RestoreDeviceObjects	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::RestoreDeviceObjects( LPDIRECT3DDEVICE9 pd3dDevice )$/;"	f	class:CDXUTMesh
RestoreDeviceObjects	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMeshFrame::RestoreDeviceObjects( LPDIRECT3DDEVICE9 pd3dDevice )$/;"	f	class:CDXUTMeshFrame
RestoreRenderToImpostor	.\IImpostorable.cpp	/^VOID IImpostorable::RestoreRenderToImpostor()$/;"	f	class:IImpostorable
ReturnNextBlock	.\QuadTree.cpp	/^CQuadTree::QTNode * CQuadTree::CLoadArea::ReturnNextBlock()$/;"	f	class:CQuadTree::CLoadArea
RevertGameToDefault	.\GameSettings.cpp	/^VOID CGameSettings::RevertGameToDefault()$/;"	f	class:CGameSettings
RevertRenderTargets	.\PostProcEffects.cpp	/^void PostProcEffects::RevertRenderTargets()$/;"	f	class:PostProcEffects
RevertSettingsToDefault	.\GameSettings.cpp	/^VOID CGameSettings::RevertSettingsToDefault()$/;"	f	class:CGameSettings
RunningEntriesHashMap	.\SpriteAnimMgr.h	/^    typedef hash_map<int, list<SAnimStill>::iterator>  RunningEntriesHashMap;$/;"	t	class:CSpriteAnimMgr
RunningSpriteAnmHashMap	.\World.h	/^    typedef hash_map<int, SRunningSpriteAnimation> RunningSpriteAnmHashMap;$/;"	t	class:CWorld
SAFE_DELETE	.\Common\dxstdafx.h	152;"	d
SAFE_DELETE_ARRAY	.\Common\dxstdafx.h	155;"	d
SAFE_RELEASE	.\Common\dxstdafx.h	158;"	d
SAnimRequest	.\GameEngine.h	/^    struct SAnimRequest$/;"	s	class:CGameEngine
SAnimStill	.\SpriteAnimMgr.h	/^    struct SAnimStill { \/\/ Holds the unique running anim pair and anim idx$/;"	s	class:CSpriteAnimMgr
SAnimation	.\SpriteAnimMgr.h	/^    struct SAnimation { \/\/ holds the still numbers ( row = n\/maxRows; col = n%maxCols) $/;"	s	class:CSpriteAnimMgr
SAtlasEntry	.\ImpostorAtlas.h	/^    struct SAtlasEntry {$/;"	s	class:CImpostorAtlas
SAtlasEntryUpdate	.\ImpostorAtlas.h	/^    struct SAtlasEntryUpdate {  \/\/! to store previous angle \/ threshold variables        $/;"	s	class:CImpostorAtlas
SBigStar	.\Sky.cpp	/^CSky::SBigStar::SBigStar(IDirect3DDevice9 *pd3dDevice, $/;"	f	class:CSky::SBigStar
SBigStar	.\Sky.h	/^    struct SBigStar {$/;"	s	class:CSky
SBubble	.\Bubbles.cpp	/^CBubbles::SBubble::SBubble( const D3DXVECTOR3& v, float fRad, float fHorTile, float fVerTile, LPDIRECT3DTEXTURE9 _pTex, LPDIRECT3DTEXTURE9 _pNormalTex ) $/;"	f	class:CBubbles::SBubble
SBubble	.\Bubbles.h	/^        SBubble() : pTex(NULL), pNormalTex(NULL) {}$/;"	f	struct:CBubbles::SBubble
SBubble	.\Bubbles.h	/^    struct SBubble {$/;"	s	class:CBubbles
SBubbleDistSort	.\Bubbles.h	/^    struct SBubbleDistSort {$/;"	s	class:CBubbles
SBubbleInfo	.\World.h	/^    struct SBubbleInfo {$/;"	s	class:CWorld
SCREENALIGN_BILLBOARD	.\PolySprite.h	/^    static const int SCREENALIGN_BILLBOARD            =       (0x01 << 0);$/;"	m	class:CPolySprite
SCROLLBAR_ARROWCLICK_DELAY	.\Common\DXUTgui.cpp	31;"	d	file:
SCROLLBAR_ARROWCLICK_REPEAT	.\Common\DXUTgui.cpp	32;"	d	file:
SCROLLBAR_MINTHUMBSIZE	.\Common\DXUTgui.cpp	28;"	d	file:
SCameraControl	.\GameEngine.h	/^    struct SCameraControl$/;"	s	class:CGameEngine
SCameraMovement	.\World.h	/^    struct SCameraMovement {$/;"	s	class:CWorld
SClock	.\Sky.h	/^        SClock(float start_time, float clock_speed) : time(start_time), speed(clock_speed) {}$/;"	f	struct:CSky::SClock
SClock	.\Sky.h	/^    struct SClock {     \/\/ let's base it on 24 hour clock for ease of calculations        $/;"	s	class:CSky
SCloudInfo	.\CloudBatch.cpp	/^SCloudInfo::SCloudInfo() :$/;"	f	class:SCloudInfo
SCloudInfo	.\CloudBatch.cpp	/^SCloudInfo::SCloudInfo(UINT cloudType, D3DXVECTOR3 _pos, int _puffs, float _pfScale, float _width, float _height, float _depth) :$/;"	f	class:SCloudInfo
SCloudInfo	.\CloudBatch.h	/^struct SCloudInfo$/;"	s
SCloudSkyInfo	.\World.h	/^    struct SCloudSkyInfo {$/;"	s	class:CWorld
SColor	.\GUIObject.h	/^	SColor(int _r, int _g, int _b) : r(_r), g(_g), b(_b) { }$/;"	f	struct:SColor
SColor	.\GUIObject.h	/^ struct SColor$/;"	s
SEP_CHAR	.\MultiColumnList.h	9;"	d
SETP_ACCESSOR	.\Common\DXUT.cpp	39;"	d	file:
SET_ACCESSOR	.\Common\DXUT.cpp	35;"	d	file:
SEnvironment	.\GameEngine.h	/^    struct SEnvironment$/;"	s	class:CGameEngine
SGrass	.\Foliage.h	/^struct SGrass {$/;"	s
SHADOWMAP_SHADER	.\IImpostorable.cpp	5;"	d	file:
SHADOWTECHNIQUE	.\ModelInstance.cpp	6;"	d	file:
SHADOW_UPDATE_LIMIT	.\World.cpp	27;"	d	file:
SHIFT_ASCII_KEY	.\GameSettings.cpp	12;"	d	file:
SKIRT_DEPTH	.\QuadTree.cpp	12;"	d	file:
SKYCAM_HEIGHT	.\GameDefine.h	12;"	d
SKYDOME_RADIUS_MULTIPLIER	.\Sky.h	11;"	d
SKY_DEFAULT_SUN_COLOR	.\Sky.h	/^    static const D3DXVECTOR4 SKY_DEFAULT_SUN_COLOR;    $/;"	m	class:CSky
SKY_EFFECT_NAME	.\Sky.h	7;"	d
SKY_SPHERE_RESOLUTION	.\Sky.cpp	7;"	d	file:
SKY_TECHNIQUE_NAME	.\Sky.h	8;"	d
SLEEP	.\ServerFinder.h	23;"	d
SLEEP	.\ServerFinder.h	25;"	d
SLICES	.\Pillar.cpp	14;"	d	file:
SMASH	.\GameEngine.h	/^		enum { FIREBALL = 0, LIGHTNING, SWEEP, SMASH, DIVE, NUM_SLES }; $/;"	e	enum:CGameEngine::SShortLifeEntity::<anonymous>
SMASH_SPRITE	.\GameTables.h	/^        SMASH_SPRITE,$/;"	e	enum:GameTable::SpriteAnims
SM_REMOTESESSION	.\Common\DXUT.cpp	4775;"	d	file:
SMasterServerInfo	.\ServerInfo.cpp	/^SMasterServerInfo::SMasterServerInfo(void)$/;"	f	class:SMasterServerInfo
SMasterServerInfo	.\ServerInfo.h	/^struct SMasterServerInfo$/;"	s
SMeshEntity	.\MeshEntity.h	/^struct SMeshEntity {$/;"	s
SMeshEntityPtrFunctor	.\MeshEntity.h	/^struct SMeshEntityPtrFunctor {  \/\/! Functor to sort m_vVisibleEntites ( which have SMeshEntity* ).$/;"	s
SORTTEXTURE	.\PolySprite.h	/^    static const int SORTTEXTURE                      =       (0x01 << 12);$/;"	m	class:CPolySprite
SORT_IP	.\ServerInfo.h	/^    enum { SORT_IP = 0, SORT_NAME, SORT_PING };$/;"	e	enum:CServerInfoComparator::<anonymous>
SORT_NAME	.\ServerInfo.h	/^    enum { SORT_IP = 0, SORT_NAME, SORT_PING };$/;"	e	enum:CServerInfoComparator::<anonymous>
SORT_PING	.\ServerInfo.h	/^    enum { SORT_IP = 0, SORT_NAME, SORT_PING };$/;"	e	enum:CServerInfoComparator::<anonymous>
SPLINEANGLE	.\Pillar.cpp	16;"	d	file:
SPLINEHEIGHT	.\Pillar.cpp	17;"	d	file:
SPRING_ENERGY_LOSS	.\World.cpp	23;"	d	file:
SPRITE_SET_TO_LOAD	.\GPUTerrainProject.cpp	23;"	d	file:
SPillarInfo	.\Pillar.h	/^	struct SPillarInfo {$/;"	s	class:CPillar
SPillarInfo	.\QuadTree.h	/^	typedef CPillar::SPillarInfo SPillarInfo;$/;"	t	class:CQuadTree
SPillarInfo	.\World.h	/^	typedef CPillar::SPillarInfo		SPillarInfo;$/;"	t	class:CWorld
SPlayer	.\GameEngine.h	/^    struct SPlayer $/;"	s	class:CGameEngine
SPlayer	.\HUD.h	/^	typedef CGameEngine::SPlayer SPlayer;$/;"	t	class:CHud
SPlayerCmdHistory	.\GameEngine.cpp	/^CGameEngine::SPlayerCmdHistory::SPlayerCmdHistory(UCHAR _cPlayerCommand, RakNetTime _rakTime)$/;"	f	class:CGameEngine::SPlayerCmdHistory
SPlayerCmdHistory	.\GameEngine.h	/^    struct SPlayerCmdHistory$/;"	s	class:CGameEngine
SPlayerNetworkUpdate	.\GameEngine.cpp	/^CGameEngine::SPlayerNetworkUpdate::SPlayerNetworkUpdate()$/;"	f	class:CGameEngine::SPlayerNetworkUpdate
SPlayerNetworkUpdate	.\GameEngine.cpp	/^CGameEngine::SPlayerNetworkUpdate::SPlayerNetworkUpdate(RakNet::BitStream *pBitStream)$/;"	f	class:CGameEngine::SPlayerNetworkUpdate
SPlayerNetworkUpdate	.\GameEngine.cpp	/^CGameEngine::SPlayerNetworkUpdate::SPlayerNetworkUpdate(const SPlayer &player)$/;"	f	class:CGameEngine::SPlayerNetworkUpdate
SPlayerNetworkUpdate	.\GameEngine.h	/^    struct SPlayerNetworkUpdate$/;"	s	class:CGameEngine
SPlayerSpaces	.\GameEngine.cpp	/^CGameEngine::SPlayerSpaces::SPlayerSpaces()$/;"	f	class:CGameEngine::SPlayerSpaces
SPlayerSpaces	.\GameEngine.h	/^    struct SPlayerSpaces $/;"	s	class:CGameEngine
SQuadTreeInfo	.\QuadTree.h	/^    struct SQuadTreeInfo {$/;"	s	class:CQuadTree
SQuadTreeInfo	.\World.h	/^    typedef CQuadTree::SQuadTreeInfo    SQuadTreeInfo;$/;"	t	class:CWorld
SRunningSpriteAnimation	.\World.h	/^    struct SRunningSpriteAnimation$/;"	s	class:CWorld
SServerInfo	.\ServerInfo.cpp	/^SServerInfo::SServerInfo(void)$/;"	f	class:SServerInfo
SServerInfo	.\ServerInfo.h	/^struct SServerInfo$/;"	s
SShortLifeEntity	.\GameEngine.h	/^    struct SShortLifeEntity$/;"	s	class:CGameEngine
SSpriteAnimationEntry	.\World.h	/^    struct SSpriteAnimationEntry$/;"	s	class:CWorld
SStaticEntityInfo	.\World.h	/^    struct SStaticEntityInfo {$/;"	s	class:CWorld
SSubCloud	.\CloudBatch.cpp	/^CCloud::SSubCloud::SSubCloud(const RECTF &_srcRectf, const D3DXVECTOR3 &_pos, float _scale, float _rotation, float _vertInterp) :$/;"	f	class:CCloud::SSubCloud
SSubCloud	.\CloudBatch.h	/^    struct SSubCloud {        $/;"	s	class:CCloud
SSunMorphState	.\SunStates.h	/^    SSunMorphState() {}$/;"	f	struct:SSunMorphState
SSunMorphState	.\SunStates.h	/^    SSunMorphState(const D3DXVECTOR4& _color, float _fMorphTime, float _vspower, float _pspower, float _vsmult) :$/;"	f	struct:SSunMorphState
SSunMorphState	.\SunStates.h	/^struct SSunMorphState {$/;"	s
SSunStateRequest	.\GameEngine.h	/^        SSunStateRequest(GameTable::SunStates _eSunState, int _SunIdx, float _fNewLightDirByTimeOfDay) : $/;"	f	struct:CGameEngine::SSunStateRequest
SSunStateRequest	.\GameEngine.h	/^    struct SSunStateRequest$/;"	s	class:CGameEngine
STACKS	.\Pillar.cpp	13;"	d	file:
STANDARDEFFECTFILE	.\XModelHeirarchy.h	77;"	d
START_HEALTH_SETTING	.\GameTables.h	/^		START_HEALTH_SETTING,$/;"	e	enum:GameTable::Settings
START_LIVES_SETTING	.\GameTables.h	/^		START_LIVES_SETTING,$/;"	e	enum:GameTable::Settings
STATE	.\Common\DXUT.cpp	/^    struct STATE$/;"	s	class:DXUTState	file:
STRICT	.\Common\DXUTsound.cpp	10;"	d	file:
STRICT	.\Common\dxstdafx.h	13;"	d
STYLE	.\Common\DXUTgui.h	/^    enum STYLE { MULTISELECTION = 1 };$/;"	g	class:CDXUTListBox
STexture	.\SpriteAnimMgr.h	/^    struct STexture {$/;"	s	class:CSpriteAnimMgr
SUBCLOUD_DISTANCE_THRESH	.\CloudBatch.h	14;"	d
SUNSTATE_BLACKEDGE	.\GameTables.h	/^        SUNSTATE_BLACKEDGE,$/;"	e	enum:GameTable::SunStates
SUNSTATE_BLACKMORPH	.\GameTables.h	/^        SUNSTATE_BLACKMORPH,$/;"	e	enum:GameTable::SunStates
SUNSTATE_BLACKSKY	.\GameTables.h	/^        SUNSTATE_BLACKSKY,$/;"	e	enum:GameTable::SunStates
SUNSTATE_BLUEMORPH	.\GameTables.h	/^        SUNSTATE_BLUEMORPH,$/;"	e	enum:GameTable::SunStates
SUNSTATE_DEFAULT	.\GameTables.h	/^        SUNSTATE_DEFAULT,$/;"	e	enum:GameTable::SunStates
SUNSTATE_INCREMENT	.\CloudSky.h	7;"	d
SUNSTATE_NO	.\GameTables.h	/^		SUNSTATE_NO = 0,$/;"	e	enum:GameTable::SunStates
SUNSTATE_NUM	.\GameTables.h	/^        SUNSTATE_NUM$/;"	e	enum:GameTable::SunStates
SUNSTATE_WHITEEDGE	.\GameTables.h	/^        SUNSTATE_WHITEEDGE,$/;"	e	enum:GameTable::SunStates
SUNSTATE_WHITEMORPH	.\GameTables.h	/^        SUNSTATE_WHITEMORPH,$/;"	e	enum:GameTable::SunStates
SUNSTATE_WHITESKY	.\GameTables.h	/^        SUNSTATE_WHITESKY,$/;"	e	enum:GameTable::SunStates
SVertex	.\GUIObject.h	/^struct SVertex$/;"	s
SWEEP	.\GameEngine.h	/^		enum { FIREBALL = 0, LIGHTNING, SWEEP, SMASH, DIVE, NUM_SLES }; $/;"	e	enum:CGameEngine::SShortLifeEntity::<anonymous>
SWEEP_SPRITE	.\GameTables.h	/^        SWEEP_SPRITE,$/;"	e	enum:GameTable::SpriteAnims
SXHeirarchy	.\XModelHeirarchy.h	/^struct SXHeirarchy : public ID3DXAllocateHierarchy$/;"	s
S_OK	.\ISpatialSubdivision.h	8;"	d
SaveClouds	.\CloudSky.cpp	/^VOID CCloudSky::SaveClouds(LPCSTR cloudFilename)$/;"	f	class:CCloudSky
SaveShadowMap	.\GameRoot.h	/^    VOID SaveShadowMap(const string& s) { m_pWorld->SaveShadowMap(); }$/;"	f	class:CGameRoot
SaveShadowMap	.\World.h	/^    VOID SaveShadowMap()                        { m_bSaveShadowMap = true; }$/;"	f	class:CWorld
ScreenAlignQuad	.\PolySprite.cpp	/^VOID CPolySprite::ScreenAlignQuad(PolySpriteVertex *pvb)$/;"	f	class:CPolySprite
ScreenAlignedQuad	.\PostProcEffects.h	/^    ScreenAlignedQuad(void): m_Width(0), m_Height(0), m_pVB(NULL) {};$/;"	f	class:ScreenAlignedQuad
ScreenAlignedQuad	.\PostProcEffects.h	/^class ScreenAlignedQuad$/;"	c
ScreenToVector	.\Common\DXUTmisc.cpp	/^D3DXVECTOR3 CD3DArcBall::ScreenToVector( float fScreenPtX, float fScreenPtY )$/;"	f	class:CD3DArcBall
ScreenVertex	.\PostProcEffects.h	/^    ScreenVertex(float _x, float _y, float _z, float _tu, float _tv) {x=_x; y=_y; z=_z; tu=_tu; tv=_tv;}$/;"	f	struct:ScreenAlignedQuad::ScreenVertex
ScreenVertex	.\PostProcEffects.h	/^    ScreenVertex(void) {x=0; y=0; z=0; tu=0; tv=0;}$/;"	f	struct:ScreenAlignedQuad::ScreenVertex
ScreenVertex	.\PostProcEffects.h	/^    struct ScreenVertex$/;"	s	class:ScreenAlignedQuad
ScreenVertex_FVF	.\PostProcEffects.h	/^    const static DWORD ScreenVertex_FVF = D3DFVF_XYZ | D3DFVF_TEX1;$/;"	m	class:ScreenAlignedQuad
Scroll	.\Common\DXUTgui.cpp	/^void CDXUTScrollBar::Scroll( int nDelta )$/;"	f	class:CDXUTScrollBar
SelectItem	.\Common\DXUTgui.cpp	/^void CDXUTListBox::SelectItem( int nNewIndex )$/;"	f	class:CDXUTListBox
SelectNextAnimationSet	.\ModelInstance.cpp	/^void CModelInstance::SelectNextAnimationSet()$/;"	f	class:CModelInstance
SendCmdHistory	.\GameEngine.cpp	/^VOID CGameEngine::SendCmdHistory()$/;"	f	class:CGameEngine
SendCompString	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::SendCompString()$/;"	f	class:CDXUTIMEEditBox
SendEvent	.\Common\DXUTgui.cpp	/^VOID CDXUTDialog::SendEvent( UINT nEvent, bool bTriggeredByUser, CDXUTControl* pControl )$/;"	f	class:CDXUTDialog
SendKey	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::SendKey( BYTE nVirtKey )$/;"	f	class:CDXUTIMEEditBox
ServerInfoMultiSet	.\ServerInfo.h	/^typedef set<SServerInfo, CServerInfoComparator> ServerInfoMultiSet;$/;"	t
ServerInfoSet	.\ServerInfo.h	/^typedef set<SServerInfo, CServerInfoComparator> ServerInfoSet;$/;"	t
ServerPlayerCmdUpdateFromClient	.\GameEngine.cpp	/^void __cdecl CGameEngine::ServerPlayerCmdUpdateFromClient(RPCParameters *pRpcParms)$/;"	f	class:CGameEngine
ServerSpawnClient	.\GameEngine.cpp	/^void __cdecl CGameEngine::ServerSpawnClient(RPCParameters *pRpcParms)$/;"	f	class:CGameEngine
ServerSpawnSLE	.\GameEngine.cpp	/^void __cdecl CGameEngine::ServerSpawnSLE(RPCParameters *pRpcParms)$/;"	f	class:CGameEngine
ServerUpdateClients	.\GameEngine.cpp	/^VOID CGameEngine::ServerUpdateClients(float fElapsedTime)$/;"	f	class:CGameEngine
SetActive	.\Common\DXUTSettingsDlg.h	/^    void SetActive( bool bActive ) { m_bActive = bActive; if( bActive ) Refresh(); }$/;"	f	class:CD3DSettingsDlg
SetAnimType	.\AnimOb.h	/^	void SetAnimType(AnimType t) { animType = t; }$/;"	f	class:AnimOb
SetAnimationSet	.\ModelInstance.cpp	/^void CModelInstance::SetAnimationSet(UINT idx)$/;"	f	class:CModelInstance
SetAt	.\Common\DXUTmisc.h	/^HRESULT CGrowableArray<TYPE>::SetAt( int nIndex, const TYPE& value )$/;"	f	class:CGrowableArray
SetAttachCameraToModel	.\Common\DXUTmisc.h	/^    void SetAttachCameraToModel( bool bEnable = false ) { m_bAttachCameraToModel = bEnable; }$/;"	f	class:CModelViewerCamera
SetBackgroundColors	.\Common\DXUTgui.cpp	/^void CDXUTDialog::SetBackgroundColors( D3DCOLOR colorTopLeft, D3DCOLOR colorTopRight, D3DCOLOR colorBottomLeft, D3DCOLOR colorBottomRight )$/;"	f	class:CDXUTDialog
SetBackgroundColors	.\Common\DXUTgui.h	/^    void SetBackgroundColors( D3DCOLOR colorAllCorners ) { SetBackgroundColors( colorAllCorners, colorAllCorners, colorAllCorners, colorAllCorners ); }$/;"	f	class:CDXUTDialog
SetBlockPointers	.\QuadTree.cpp	/^VOID CQuadTree::CLoadArea::SetBlockPointers(QTNode *n, Block *b) $/;"	f	class:CQuadTree::CLoadArea
SetBorder	.\Common\DXUTgui.h	/^    void SetBorder( int nBorder, int nMargin ) { m_nBorder = nBorder; m_nMargin = nMargin; }$/;"	f	class:CDXUTListBox
SetBorderWidth	.\Common\DXUTgui.h	/^    void SetBorderWidth( int nBorder ) { m_nBorder = nBorder; UpdateRects(); }  \/\/ Border of the window$/;"	f	class:CDXUTEditBox
SetBroadcastInterval	.\Server.h	/^    VOID SetBroadcastInterval(float fBroadcastInterval)     {   assert(fBroadcastInterval > 0.f); m_fBroadcastInterval = fBroadcastInterval;  }$/;"	f	class:CServer
SetBufferSize	.\Common\DXUTgui.cpp	/^bool CUniBuffer::SetBufferSize( int nNewSize )$/;"	f	class:CUniBuffer
SetButtonGroup	.\Common\DXUTgui.h	/^    void SetButtonGroup( UINT nButtonGroup ) { m_nButtonGroup = nButtonGroup; }$/;"	f	class:CDXUTRadioButton
SetButtonIndex	.\Button.h	/^	void SetButtonIndex(UCHAR i) { buttonIndex = i; }$/;"	f	class:CButton
SetButtonMask	.\Common\DXUTmisc.h	/^    void        SetButtonMask( int nRotate = MOUSE_RIGHT_BUTTON ) { m_nRotateMask = nRotate; }$/;"	f	class:CDXUTDirectionWidget
SetButtonMasks	.\Common\DXUTmisc.h	/^    void SetButtonMasks( int nRotateModelButtonMask = MOUSE_LEFT_BUTTON, int nZoomButtonMask = MOUSE_WHEEL, int nRotateCameraButtonMask = MOUSE_RIGHT_BUTTON ) { m_nRotateModelButtonMask = nRotateModelButtonMask, m_nZoomButtonMask = nZoomButtonMask; m_nRotateCameraButtonMask = nRotateCameraButtonMask; }$/;"	f	class:CModelViewerCamera
SetCallback	.\Common\DXUTgui.cpp	/^void CDXUTDialog::SetCallback( PCALLBACKDXUTGUIEVENT pCallback, void* pUserContext )$/;"	f	class:CDXUTDialog
SetCallback	.\Menu.cpp	/^void CMenu::SetCallback(GUICallback funcPtr){$/;"	f	class:CMenu
SetCameraControl	.\GameRoot.h	/^    VOID SetCameraControl(bool b) { m_bControlCamera = b; m_pWorld->SetCameraControl(b); }$/;"	f	class:CGameRoot
SetCameraControl	.\World.h	/^    VOID SetCameraControl(bool b)               { m_bCameraControl = b; }$/;"	f	class:CWorld
SetCameraOffset	.\World.cpp	/^VOID CWorld::SetCameraOffset(const D3DXVECTOR3 *pvCameraPosOffset, const D3DXVECTOR3 *pvCameraLookAtOffset)$/;"	f	class:CWorld
SetCameraOrientationTarget	.\World.cpp	/^VOID CWorld::SetCameraOrientationTarget(const D3DXMATRIX* pOrientationTargetMtx)$/;"	f	class:CWorld
SetCameraSpace	.\PolySprite.cpp	/^VOID CPolySprite::SetCameraSpace(const D3DXVECTOR3 *pCameraPos,$/;"	f	class:CPolySprite
SetCameraVariables	.\World.cpp	/^VOID CWorld::SetCameraVariables(float fKCoef, $/;"	f	class:CWorld
SetCameraViewParams	.\World.cpp	/^VOID CWorld::SetCameraViewParams(D3DXVECTOR3* pEye, D3DXVECTOR3* pLookAt)$/;"	f	class:CWorld
SetCaptionHeight	.\Common\DXUTgui.h	/^    void SetCaptionHeight( int nHeight ) { m_nCaptionHeight = nHeight; }$/;"	f	class:CDXUTDialog
SetCaptionText	.\Common\DXUTgui.h	/^    void SetCaptionText( const WCHAR *pwszText ) { StringCchCopy( m_wszCaption, sizeof(m_wszCaption)\/sizeof(m_wszCaption[0]), pwszText); }$/;"	f	class:CDXUTDialog
SetCaretColor	.\Common\DXUTgui.h	/^    void SetCaretColor( D3DCOLOR Color ) { m_CaretColor = Color; }  \/\/ Caret color$/;"	f	class:CDXUTEditBox
SetCenter	.\QuadTree.h	/^        VOID SetCenter(float _x, float _z) { m_x = _x; m_z = _z; }        $/;"	f	class:CQuadTree::CLoadArea
SetCharacterAnimation	.\World.cpp	/^VOID CWorld::SetCharacterAnimation(UINT charID, UCHAR animID, bool bLoopAble, float fPeriodTime)$/;"	f	class:CWorld
SetCharacterWorldMatrix	.\World.cpp	/^VOID CWorld::SetCharacterWorldMatrix(UINT charID, const D3DXMATRIX* pWorld, bool bRequestVisible)$/;"	f	class:CWorld
SetChecked	.\Common\DXUTgui.h	/^    void SetChecked( bool bChecked ) { SetCheckedInternal( bChecked, false ); }$/;"	f	class:CDXUTCheckBox
SetChecked	.\Common\DXUTgui.h	/^    void SetChecked( bool bChecked, bool bClearGroup=true ) { SetCheckedInternal( bChecked, bClearGroup, false ); }$/;"	f	class:CDXUTRadioButton
SetCheckedForDraw	.\CloudBatch.h	/^    VOID SetCheckedForDraw(bool b) { m_bCheckedForDraw = b; }$/;"	f	class:CCloud
SetCheckedInternal	.\Common\DXUTgui.cpp	/^void CDXUTCheckBox::SetCheckedInternal( bool bChecked, bool bFromInput ) $/;"	f	class:CDXUTCheckBox
SetCheckedInternal	.\Common\DXUTgui.cpp	/^void CDXUTRadioButton::SetCheckedInternal( bool bChecked, bool bClearGroup, bool bFromInput )$/;"	f	class:CDXUTRadioButton
SetClipToBoundary	.\Common\DXUTmisc.h	/^    void SetClipToBoundary( bool bClipToBoundary, D3DXVECTOR3* pvMinBoundary, D3DXVECTOR3* pvMaxBoundary ) { m_bClipToBoundary = bClipToBoundary; if( pvMinBoundary ) m_vMinBoundary = *pvMinBoundary; if( pvMaxBoundary ) m_vMaxBoundary = *pvMaxBoundary; }$/;"	f	class:CBaseCamera
SetControlEnabled	.\Common\DXUTgui.cpp	/^void CDXUTDialog::SetControlEnabled( int ID, bool bEnabled )$/;"	f	class:CDXUTDialog
SetCurrencyDisplay	.\NumberToSprite.h	/^    VOID SetCurrencyDisplay(bool b) { m_bCurrencyDisplay = b; }$/;"	f	class:CNumberToSprite
SetDefaultElement	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::SetDefaultElement( UINT nControlType, UINT iElement, CDXUTElement* pElement )$/;"	f	class:CDXUTDialog
SetDevice	.\IImpostorable.cpp	/^HRESULT IImpostorable::SetDevice(IDirect3DDevice9 *pd3dDevice)$/;"	f	class:IImpostorable
SetDevice	.\Sphere.cpp	/^HRESULT CSphere::SetDevice(IDirect3DDevice9* pd3dDevice) { $/;"	f	class:CSphere
SetDeviceClip	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::SetDeviceClip( bool bDeviceClip )$/;"	f	class:CD3DSettingsDlg
SetDeviceSettingsFromUI	.\Common\DXUTSettingsDlg.cpp	/^HRESULT CD3DSettingsDlg::SetDeviceSettingsFromUI()$/;"	f	class:CD3DSettingsDlg
SetDrag	.\Common\DXUTmisc.h	/^    void SetDrag( bool bMovementDrag, FLOAT fTotalDragTimeToZero = 0.25f ) { m_bMovementDrag = bMovementDrag; m_fTotalDragTimeToZero = fTotalDragTimeToZero; }$/;"	f	class:CBaseCamera
SetDragRect	.\Common\DXUTmisc.cpp	/^void CModelViewerCamera::SetDragRect( RECT &rc )$/;"	f	class:CModelViewerCamera
SetDragRect	.\Common\DXUTmisc.h	/^    virtual void SetDragRect( RECT &rc ) { m_rcDrag = rc; }$/;"	f	class:CBaseCamera
SetDropHeight	.\Common\DXUTgui.h	/^    void    SetDropHeight( UINT nHeight ) { m_nDropHeight = nHeight; UpdateRects(); }$/;"	f	class:CDXUTComboBox
SetEdgeColor	.\ModelInstance.h	/^    VOID SetEdgeColor(const D3DXVECTOR3* vColor) { m_vEdgeColor = *vColor; }$/;"	f	class:CModelInstance
SetElement	.\Common\DXUTgui.cpp	/^HRESULT CDXUTControl::SetElement( UINT iElement, CDXUTElement* pElement )$/;"	f	class:CDXUTControl
SetEnablePositionMovement	.\Common\DXUTmisc.h	/^    void SetEnablePositionMovement( bool bEnablePositionMovement ) { m_bEnablePositionMovement = bEnablePositionMovement; }$/;"	f	class:CBaseCamera
SetEnableYAxisMovement	.\Common\DXUTmisc.h	/^    void SetEnableYAxisMovement( bool bEnableYAxisMovement ) { m_bEnableYAxisMovement = bEnableYAxisMovement; }$/;"	f	class:CBaseCamera
SetEnabled	.\Common\DXUTgui.h	/^    virtual void SetEnabled( bool bEnabled ) { m_bEnabled = bEnabled; }$/;"	f	class:CDXUTControl
SetEndX	.\AnimOb.h	/^	void SetEndX(int x) { endX = x; }$/;"	f	class:AnimOb
SetEndY	.\AnimOb.h	/^	void SetEndY(int y) { endY = y; }$/;"	f	class:AnimOb
SetFVF	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::SetFVF( LPDIRECT3DDEVICE9 pd3dDevice, DWORD dwFVF )$/;"	f	class:CDXUTMesh
SetFont	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::SetFont( UINT index, LPCWSTR strFaceName, LONG height, LONG weight )$/;"	f	class:CDXUTDialog
SetFont	.\Common\DXUTgui.cpp	/^void CDXUTElement::SetFont( UINT iFont, D3DCOLOR defaultFontColor, DWORD dwTextFormat )$/;"	f	class:CDXUTElement
SetFontNode	.\Common\DXUTgui.h	/^    void SetFontNode( DXUTFontNode *pFontNode ) { m_pFontNode = pFontNode; }$/;"	f	class:CUniBuffer
SetFontSize	.\Console.cpp	/^void CConsole::SetFontSize(int size){$/;"	f	class:CConsole
SetForegroundColor	.\Common\DXUTmisc.h	/^    void SetForegroundColor( D3DXCOLOR clr ) { m_clr = clr; }$/;"	f	class:CDXUTTextHelper
SetFriction	.\PhysicsRoot.h	/^	VOID SetFriction(int physicsID, float fFriction) $/;"	f	class:CPhysicsRoot
SetFrustumPlanesAndCorners	.\QuadTree.h	/^    VOID SetFrustumPlanesAndCorners(D3DXPLANE *planes, CornerIndexPair *cip) {$/;"	f	class:CQuadTree
SetGhost	.\PhysicsRoot.h	/^	VOID SetGhost(int physicsID, bool bGhost) $/;"	f	class:CPhysicsRoot
SetGravityMult	.\PhysicsRoot.h	/^	VOID SetGravityMult(int physicsID, float fGrav) $/;"	f	class:CPhysicsRoot
SetHeight	.\Button.h	/^	void SetHeight(int h) { m_nHeight = h; }$/;"	f	class:CButton
SetHeight	.\MultiColumnList.h	/^	void SetHeight(int h) { m_nHeight = h; }$/;"	f	class:CMultiColumnList
SetHotkey	.\Common\DXUTgui.h	/^    void SetHotkey( UINT nHotkey ) { m_nHotkey = nHotkey; }$/;"	f	class:CDXUTControl
SetID	.\Common\DXUTgui.h	/^    void SetID( int ID ) { m_ID = ID; }$/;"	f	class:CDXUTControl
SetInsertionPos	.\Common\DXUTmisc.h	/^    void SetInsertionPos( int x, int y ) { m_pt.x = x; m_pt.y = y; }$/;"	f	class:CDXUTTextHelper
SetInvertPitch	.\Common\DXUTmisc.h	/^    void SetInvertPitch( bool bInvertPitch ) { m_bInvertPitch = bInvertPitch; }$/;"	f	class:CBaseCamera
SetLightDir	.\QuadTree.h	/^    VOID SetLightDir(const D3DXVECTOR4* pLightDir) { m_vLightDir = *pLightDir; }$/;"	f	class:CQuadTree
SetLightDirByTimeOfDay	.\CloudSky.h	/^    VOID SetLightDirByTimeOfDay(float fLightDirByTimeOfDay) { m_pSky->SetLightDirByTimeOfDay(fLightDirByTimeOfDay); }$/;"	f	class:CCloudSky
SetLightDirByTimeOfDay	.\Sky.cpp	/^VOID CSky::SetLightDirByTimeOfDay(float fLightDirByTimeOfDay)$/;"	f	class:CSky
SetLightDirection	.\Common\DXUTmisc.h	/^    void        SetLightDirection( D3DXVECTOR3 vDir ) { m_vDefaultDir = m_vCurrentDir = vDir; };$/;"	f	class:CDXUTDirectionWidget
SetLimitPitch	.\Common\DXUTmisc.h	/^    void SetLimitPitch( bool bLimitPitch ) { m_bLimitPitch = bLimitPitch; }$/;"	f	class:CModelViewerCamera
SetLinearVelocity	.\PhysicsRoot.cpp	/^VOID CPhysicsRoot::SetLinearVelocity(int physicsID, const D3DXVECTOR3* pvVelocity)$/;"	f	class:CPhysicsRoot
SetLocation	.\Common\DXUTgui.h	/^    void SetLocation( int x, int y ) { m_x = x; m_y = y; UpdateRects(); }$/;"	f	class:CDXUTControl
SetLocation	.\Common\DXUTgui.h	/^    void SetLocation( int x, int y ) { m_x = x; m_y = y; }$/;"	f	class:CDXUTDialog
SetMatrix	.\Common\DXUTMesh.h	/^    void        SetMatrix( D3DXMATRIX* pmat ) { m_mat = *pmat; }$/;"	f	class:CDXUTMeshFrame
SetMaxLines	.\ConsoleBuffer.cpp	/^void CConsoleBuffer::SetMaxLines(int max) {$/;"	f	class:CConsoleBuffer
SetMaxLines	.\MultiColumnList.cpp	/^void CMultiColumnList::SetMaxLines(int max){$/;"	f	class:CMultiColumnList
SetMenuIndex	.\Button.h	/^	void SetMenuIndex(int i) { menuIndex = i; }$/;"	f	class:CButton
SetMinShade	.\ModelInstance.h	/^    VOID SetMinShade(int minShade) { $/;"	f	class:CModelInstance
SetMinimized	.\Common\DXUTgui.h	/^    void SetMinimized( bool bMinimized ) { m_bMinimized = bMinimized; }$/;"	f	class:CDXUTDialog
SetModelCenter	.\Common\DXUTmisc.h	/^    void SetModelCenter( D3DXVECTOR3 vModelCenter ) { m_vModelCenter = vModelCenter; }$/;"	f	class:CModelViewerCamera
SetMultisampleQualityMax	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::SetMultisampleQualityMax( UINT nMax )$/;"	f	class:CD3DEnumeration
SetMyPlayerResetCamera	.\GameEngine.h	/^	VOID SetMyPlayerResetCamera(bool b)							{ if(m_pMyPlayer) m_pMyPlayer->bResetCamera = b; }$/;"	f	class:CGameEngine
SetNextDialog	.\Common\DXUTgui.cpp	/^void CDXUTDialog::SetNextDialog( CDXUTDialog* pNextDialog )$/;"	f	class:CDXUTDialog
SetNumDecimals	.\NumberToSprite.h	/^    VOID SetNumDecimals(int nDecs) { m_nDecimals = nDecs < 14? nDecs : 14; }$/;"	f	class:CNumberToSprite
SetNumShades	.\ModelInstance.h	/^    VOID SetNumShades(int nShades) { m_fShades = (float)nShades; }$/;"	f	class:CModelInstance
SetNumberOfFramesToSmoothMouseData	.\Common\DXUTmisc.h	/^    void SetNumberOfFramesToSmoothMouseData( int nFrames ) { if( nFrames > 0 ) m_fFramesToSmoothMouseData = (float)nFrames; }$/;"	f	class:CBaseCamera
SetOffset	.\Common\DXUTmisc.h	/^    void SetOffset( INT nX, INT nY ) { m_Offset.x = nX; m_Offset.y = nY; }$/;"	f	class:CD3DArcBall
SetPageSize	.\Common\DXUTgui.h	/^    void SetPageSize( int nPageSize ) { m_nPageSize = nPageSize; Cap(); UpdateThumbRect(); }$/;"	f	class:CDXUTScrollBar
SetParam	.\Button.h	/^	void SetParam(int p) { m_nParam = p; }$/;"	f	class:CButton
SetPixelOffsets	.\ImpostorAtlas.cpp	/^VOID CImpostorAtlas::SetPixelOffsets(float *fPixelOffsets)$/;"	f	class:CImpostorAtlas
SetPlayerAnimation	.\GameEngine.cpp	/^VOID CGameEngine::SetPlayerAnimation(SPlayer* pplayer, UCHAR cAnimID, bool bLoopAble, float fPeriodTime)$/;"	f	class:CGameEngine
SetPosition	.\PhysicsRoot.h	/^    VOID SetPosition(int physicsID, const D3DXVECTOR3* pvPosition){$/;"	f	class:CPhysicsRoot
SetPossibleVertexProcessingList	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::SetPossibleVertexProcessingList( bool bSoftwareVP, bool bHardwareVP, bool bPureHarewareVP, bool bMixedVP )$/;"	f	class:CD3DEnumeration
SetPrimaryBufferFormat	.\Common\DXUTsound.cpp	/^HRESULT CSoundManager::SetPrimaryBufferFormat( DWORD dwPrimaryChannels,$/;"	f	class:CSoundManager
SetProjParams	.\Common\DXUTmisc.cpp	/^VOID CBaseCamera::SetProjParams( FLOAT fFOV, FLOAT fAspect, FLOAT fNearPlane,$/;"	f	class:CBaseCamera
SetQuatNow	.\Common\DXUTmisc.h	/^    void        SetQuatNow( D3DXQUATERNION q ) { m_qNow = q; }$/;"	f	class:CD3DArcBall
SetRadius	.\Common\DXUTmisc.h	/^    void  SetRadius( float fRadius )  { m_fRadius = fRadius; };$/;"	f	class:CDXUTDirectionWidget
SetRadius	.\Common\DXUTmisc.h	/^    void SetRadius( float fDefaultRadius=5.0f, float fMinRadius=1.0f, float fMaxRadius=FLT_MAX  ) { m_fDefaultRadius = m_fRadius = fDefaultRadius; m_fMinRadius = fMinRadius; m_fMaxRadius = fMaxRadius; m_bDragSinceLastUpdate = true; }$/;"	f	class:CModelViewerCamera
SetRange	.\Common\DXUTgui.cpp	/^void CDXUTSlider::SetRange( int nMin, int nMax ) $/;"	f	class:CDXUTSlider
SetRefreshMinMax	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::SetRefreshMinMax( UINT nMin, UINT nMax )$/;"	f	class:CD3DEnumeration
SetRefreshTime	.\Common\DXUTgui.h	/^    static void SetRefreshTime( float fTime ){ s_fTimeRefresh = fTime; }$/;"	f	class:CDXUTDialog
SetRequirePostPixelShaderBlending	.\Common\DXUTenum.h	/^    void SetRequirePostPixelShaderBlending( bool bRequire ) { m_bRequirePostPixelShaderBlending = bRequire; }$/;"	f	class:CD3DEnumeration
SetResetCursorAfterMove	.\Common\DXUTmisc.h	/^    void SetResetCursorAfterMove( bool bResetCursorAfterMove ) { m_bResetCursorAfterMove = bResetCursorAfterMove; }$/;"	f	class:CFirstPersonCamera
SetResolutionMinMax	.\Common\DXUTenum.cpp	/^void CD3DEnumeration::SetResolutionMinMax( UINT nMinWidth, UINT nMinHeight, $/;"	f	class:CD3DEnumeration
SetRotateButtons	.\Common\DXUTmisc.cpp	/^void CFirstPersonCamera::SetRotateButtons( bool bLeft, bool bMiddle, bool bRight, bool bRotateWithoutButtonDown )$/;"	f	class:CFirstPersonCamera
SetScalers	.\Common\DXUTmisc.h	/^    void SetScalers( FLOAT fRotationScaler = 0.01f, FLOAT fMoveScaler = 5.0f )  { m_fRotationScaler = fRotationScaler; m_fMoveScaler = fMoveScaler; }$/;"	f	class:CBaseCamera
SetScrollBarWidth	.\Common\DXUTgui.h	/^    void    SetScrollBarWidth( int nWidth ) { m_nSBWidth = nWidth; UpdateRects(); }$/;"	f	class:CDXUTComboBox
SetScrollBarWidth	.\Common\DXUTgui.h	/^    void SetScrollBarWidth( int nWidth ) { m_nSBWidth = nWidth; UpdateRects(); }$/;"	f	class:CDXUTListBox
SetSelectedBackColor	.\Common\DXUTgui.h	/^    void SetSelectedBackColor( D3DCOLOR Color ) { m_SelBkColor = Color; }  \/\/ Selected background color$/;"	f	class:CDXUTEditBox
SetSelectedByData	.\Common\DXUTgui.cpp	/^HRESULT CDXUTComboBox::SetSelectedByData( void* pData )$/;"	f	class:CDXUTComboBox
SetSelectedByIndex	.\Common\DXUTgui.cpp	/^HRESULT CDXUTComboBox::SetSelectedByIndex( UINT index )$/;"	f	class:CDXUTComboBox
SetSelectedByText	.\Common\DXUTgui.cpp	/^HRESULT CDXUTComboBox::SetSelectedByText( const WCHAR* strText )$/;"	f	class:CDXUTComboBox
SetSelectedTextColor	.\Common\DXUTgui.h	/^    void SetSelectedTextColor( D3DCOLOR Color ) { m_SelTextColor = Color; }  \/\/ Selected text color$/;"	f	class:CDXUTEditBox
SetShadowMap	.\ModelInstance.cpp	/^void CModelInstance::SetShadowMap( IDirect3DDevice9 *pd3dDevice, const D3DXMATRIX* pShadowMtx, LPDIRECT3DTEXTURE9 pShadowMap )$/;"	f	class:CModelInstance
SetShadowMap	.\XModelHeirarchy.cpp	/^void CXModelHeirarchy::SetShadowMap( IDirect3DDevice9 *pd3dDevice, const D3DXMATRIX* pShadowMtx, LPDIRECT3DTEXTURE9 pShadowMap )$/;"	f	class:CXModelHeirarchy
SetShadowViewMatrix	.\ShadowMap.cpp	/^VOID CShadowMap::SetShadowViewMatrix(const D3DXVECTOR3* pLightPos, $/;"	f	class:CShadowMap
SetSilhouetteThresh	.\ModelInstance.h	/^    VOID SetSilhouetteThresh(float fThresh) { m_fThreshold = fThresh; }$/;"	f	class:CModelInstance
SetSize	.\Common\DXUTgui.h	/^    void SetSize( int width, int height ) { m_width = width; m_height = height;  }$/;"	f	class:CDXUTDialog
SetSize	.\Common\DXUTgui.h	/^    void SetSize( int width, int height ) { m_width = width; m_height = height; UpdateRects(); }$/;"	f	class:CDXUTControl
SetSize	.\Common\DXUTmisc.h	/^HRESULT CGrowableArray<TYPE>::SetSize( int nNewMaxSize )$/;"	f	class:CGrowableArray
SetSizeInternal	.\Common\DXUTmisc.h	/^HRESULT CGrowableArray<TYPE>::SetSizeInternal( int nNewMaxSize )$/;"	f	class:CGrowableArray
SetSpacing	.\Common\DXUTgui.h	/^    void SetSpacing( int nSpacing ) { m_nSpacing = nSpacing; UpdateRects(); }$/;"	f	class:CDXUTEditBox
SetSpeed	.\Menu.cpp	/^void CMenu::SetSpeed(int s) { $/;"	f	class:CMenu
SetState	.\Button.h	/^	void SetState(ButtonState bs) { state = bs; }$/;"	f	class:CButton
SetStyle	.\Common\DXUTgui.h	/^    void SetStyle( DWORD dwStyle ) { m_dwStyle = dwStyle; }$/;"	f	class:CDXUTListBox
SetSunColor	.\Sky.h	/^    VOID SetSunColor(const D3DXVECTOR4& vSunColor, int idx) $/;"	f	class:CSky
SetSunPSPower	.\Sky.h	/^    VOID SetSunPSPower(float pspower, int idx) { m_CurrentSunStates[idx].pspower = pspower; m_bUpdateSun[idx] = true; }$/;"	f	class:CSky
SetSunVSMult	.\Sky.h	/^    VOID SetSunVSMult(float vsmult, int idx) { m_CurrentSunStates[idx].vsmult = vsmult; m_bUpdateSun[idx] = true; }$/;"	f	class:CSky
SetSunVSPower	.\Sky.h	/^    VOID SetSunVSPower(float vspower, int idx) { m_CurrentSunStates[idx].vspower = vspower; m_bUpdateSun[idx] = true; }$/;"	f	class:CSky
SetTex	.\FXDecl.h	/^    VOID SetTex(float _u, float _v) { u = _u; v = _v; }$/;"	f	struct:BoxVertTex
SetText	.\Button.cpp	/^void CButton::SetText(LPCSTR bText){$/;"	f	class:CButton
SetText	.\Common\DXUTgui.cpp	/^HRESULT CDXUTStatic::SetText( LPCWSTR strText )$/;"	f	class:CDXUTStatic
SetText	.\Common\DXUTgui.cpp	/^bool CUniBuffer::SetText( LPCWSTR wszText )$/;"	f	class:CUniBuffer
SetText	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::SetText( LPCWSTR wszText, bool bSelected )$/;"	f	class:CDXUTEditBox
SetTextColor	.\Common\DXUTgui.cpp	/^void CDXUTComboBox::SetTextColor( D3DCOLOR Color )$/;"	f	class:CDXUTComboBox
SetTextColor	.\Common\DXUTgui.cpp	/^void CDXUTControl::SetTextColor( D3DCOLOR Color )$/;"	f	class:CDXUTControl
SetTextColor	.\Common\DXUTgui.h	/^    virtual void SetTextColor( D3DCOLOR Color ) { m_TextColor = Color; }  \/\/ Text color$/;"	f	class:CDXUTEditBox
SetTextFloatArray	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::SetTextFloatArray( const float *pNumbers, int nCount )$/;"	f	class:CDXUTEditBox
SetTexture	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::SetTexture( UINT index, LPCWSTR strFilename )$/;"	f	class:CDXUTDialog
SetTexture	.\Common\DXUTgui.cpp	/^HRESULT CDXUTDialog::SetTexture( UINT index, LPCWSTR strResourceName, HMODULE hResourceModule )$/;"	f	class:CDXUTDialog
SetTexture	.\Common\DXUTgui.cpp	/^void CDXUTElement::SetTexture( UINT iTexture, RECT* prcTexture, D3DCOLOR defaultTextureColor )$/;"	f	class:CDXUTElement
SetTimeOfDay	.\CloudSky.h	/^    VOID SetTimeOfDay(float fClockTime) { m_pSky->SetTimeOfDay(fClockTime); }$/;"	f	class:CCloudSky
SetTimeOfDay	.\Sky.h	/^    VOID SetTimeOfDay(float fClockTime) { m_Clock.time = fClockTime; }$/;"	f	class:CSky
SetTimeOfDay	.\World.h	/^    VOID SetTimeOfDay(float fClockTime)         { m_pCloudSky->SetTimeOfDay(fClockTime); }$/;"	f	class:CWorld
SetToDesiredVelocity	.\PhysicsRoot.cpp	/^bool CPhysicsRoot::SetToDesiredVelocity(int physicsID, D3DXVECTOR3* pvVelocity, float fGroundOffset, bool bGrounded, float fDt)$/;"	f	class:CPhysicsRoot
SetTrackPos	.\Common\DXUTgui.h	/^    void SetTrackPos( int nPosition ) { m_nPosition = nPosition; Cap(); UpdateThumbRect(); }$/;"	f	class:CDXUTScrollBar
SetTrackRange	.\Common\DXUTgui.cpp	/^void CDXUTScrollBar::SetTrackRange( int nStart, int nEnd )$/;"	f	class:CDXUTScrollBar
SetTransform	.\Sprite.cpp	/^HRESULT CSprite::SetTransform(CONST D3DXMATRIX *pTransform)$/;"	f	class:CSprite
SetTranslationRadius	.\Common\DXUTmisc.h	/^    void SetTranslationRadius( FLOAT fRadiusTranslation ) { m_fRadiusTranslation = fRadiusTranslation; }$/;"	f	class:CD3DArcBall
SetUpKernel	.\PostProcEffects.cpp	/^void PostProcEffects::SetUpKernel( const Matrix3x3& m)$/;"	f	class:PostProcEffects
SetUpdateInterval	.\Client.h	/^    VOID SetUpdateInterval(float fUpdateInterval)           {   m_fUpdateInterval = fUpdateInterval;    }$/;"	f	class:CClient
SetUpdated	.\CloudBatch.h	/^    VOID SetUpdated(bool b) { m_bUpdated = b; }$/;"	f	class:CCloud
SetUserData	.\Common\DXUTgui.h	/^    void SetUserData( void *pUserData ) { m_pUserData = pUserData; }$/;"	f	class:CDXUTControl
SetValue	.\Common\DXUTgui.h	/^    void SetValue( int nValue ) { SetValueInternal( nValue, false ); }$/;"	f	class:CDXUTSlider
SetValueInternal	.\Common\DXUTgui.cpp	/^void CDXUTSlider::SetValueInternal( int nValue, bool bFromInput )$/;"	f	class:CDXUTSlider
SetVertexDecl	.\Common\DXUTMesh.cpp	/^HRESULT CDXUTMesh::SetVertexDecl( LPDIRECT3DDEVICE9 pd3dDevice, const D3DVERTEXELEMENT9 *pDecl, $/;"	f	class:CDXUTMesh
SetViewParams	.\Common\DXUTmisc.cpp	/^VOID CBaseCamera::SetViewParams( D3DXVECTOR3* pvEyePt, D3DXVECTOR3* pvLookatPt )$/;"	f	class:CBaseCamera
SetViewParams	.\Common\DXUTmisc.cpp	/^void CModelViewerCamera::SetViewParams( D3DXVECTOR3* pvEyePt, D3DXVECTOR3* pvLookatPt )$/;"	f	class:CModelViewerCamera
SetViewQuat	.\Common\DXUTmisc.h	/^    void SetViewQuat( D3DXQUATERNION q ) { m_ViewArcBall.SetQuatNow( q ); m_bDragSinceLastUpdate = true; }$/;"	f	class:CModelViewerCamera
SetVisible	.\CloudBatch.h	/^    VOID SetVisible(bool b) { m_bVisible = b; }$/;"	f	class:CCloud
SetVisible	.\Common\DXUTgui.h	/^    virtual void SetVisible( bool bVisible ) { m_bVisible = bVisible; }$/;"	f	class:CDXUTControl
SetVisible	.\Common\DXUTgui.h	/^    void SetVisible( bool bVisible ) { m_bVisible = bVisible; }$/;"	f	class:CDXUTDialog
SetWidth	.\Button.h	/^	void SetWidth(int w) { m_nWidth = w; }$/;"	f	class:CButton
SetWidth	.\MultiColumnList.h	/^	void SetWidth(int w) { m_nWidth = w; }$/;"	f	class:CMultiColumnList
SetWindow	.\Common\DXUTmisc.h	/^    void SetWindow( INT nWidth, INT nHeight, FLOAT fRadius = 0.9f ) { m_nWidth = nWidth; m_nHeight = nHeight; m_fRadius = fRadius; m_vCenter = D3DXVECTOR2(m_nWidth\/2.0f,m_nHeight\/2.0f); }$/;"	f	class:CD3DArcBall
SetWindow	.\Common\DXUTmisc.h	/^    void SetWindow( int nWidth, int nHeight, float fArcballRadius=0.9f ) { m_WorldArcBall.SetWindow( nWidth, nHeight, fArcballRadius ); m_ViewArcBall.SetWindow( nWidth, nHeight, fArcballRadius ); }$/;"	f	class:CModelViewerCamera
SetWindowed	.\Common\DXUTSettingsDlg.cpp	/^void CD3DSettingsDlg::SetWindowed( bool bWindowed )$/;"	f	class:CD3DSettingsDlg
SetWorldMatrix	.\Common\DXUTmisc.h	/^    void SetWorldMatrix( D3DXMATRIX &mWorld ) { m_mWorld = mWorld; m_bDragSinceLastUpdate = true; }$/;"	f	class:CModelViewerCamera
SetWorldOrbit	.\Sky.cpp	/^VOID CSky::SBigStar::SetWorldOrbit(const D3DXVECTOR3& center, float rad)$/;"	f	class:CSky::SBigStar
SetWorldPosition	.\Sky.cpp	/^VOID CSky::SetWorldPosition(const D3DXVECTOR3& center, float radius)$/;"	f	class:CSky
SetWorldQuat	.\Common\DXUTmisc.h	/^    void SetWorldQuat( D3DXQUATERNION q ) { m_WorldArcBall.SetQuatNow( q ); m_bDragSinceLastUpdate = true; }$/;"	f	class:CModelViewerCamera
SetWorldViewLH	.\Sprite.cpp	/^HRESULT CSprite::SetWorldViewLH( CONST D3DXMATRIX* pMatView, CONST D3DXMATRIX* pMatWorld )$/;"	f	class:CSprite
SetX	.\Button.h	/^	void SetX(int x) { m_nX = x; }$/;"	f	class:CButton
SetX	.\MultiColumnList.h	/^	void SetX(int x) { m_nX = x; }$/;"	f	class:CMultiColumnList
SetY	.\Button.h	/^	void SetY(int y) { m_nY = y; }$/;"	f	class:CButton
SetY	.\MultiColumnList.h	/^	void SetY(int y) { m_nY = y; }$/;"	f	class:CMultiColumnList
SettingIndexArray	.\GameTables.h	/^    static const NameIndexPair SettingIndexArray[] = $/;"	v
Settings	.\GameTables.h	/^	static enum Settings $/;"	g	namespace:GameTable
SettingsHashMap	.\GameSettings.h	/^	typedef hash_map<UCHAR, float> SettingsHashMap;$/;"	t	class:CGameSettings
SetupBoneMatrixPointers	.\XModelHeirarchy.cpp	/^HRESULT CXModelHeirarchy::SetupBoneMatrixPointers( LPD3DXFRAME pFrame, LPD3DXFRAME pRootFrame ) $/;"	f	class:CXModelHeirarchy
SetupBoneMatrixPointersOnMesh	.\XModelHeirarchy.cpp	/^HRESULT CXModelHeirarchy::SetupBoneMatrixPointersOnMesh( LPD3DXMESHCONTAINER pMeshContainerBase, LPD3DXFRAME pRootFrame ) $/;"	f	class:CXModelHeirarchy
SetupBrowser	.\ServerBrowser.cpp	/^void CServerBrowser::SetupBrowser(ServerInfoSet set) {$/;"	f	class:CServerBrowser
SetupConsole	.\Console.cpp	/^void CConsole::SetupConsole(LPDIRECT3DDEVICE9 pd3dDevice, WindowAnchor _anchor, float _xpercent, float _ypercent){$/;"	f	class:CConsole
SetupDevice	.\Bubbles.cpp	/^VOID CBubbles::SetupDevice(IDirect3DDevice9* pd3dDevice, $/;"	f	class:CBubbles
SetupHUD	.\GameGUI.cpp	/^VOID CGameGUI::SetupHUD(const CGameEngine::SPlayer* player){$/;"	f	class:CGameGUI
SetupHUD	.\HUD.cpp	/^void CHud::SetupHUD( LPDIRECT3DDEVICE9 pd3dDevice, const SPlayer* _myPlayer) {$/;"	f	class:CHud
SetupImeApi	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::SetupImeApi()$/;"	f	class:CDXUTIMEEditBox
SetupKernels	.\World.cpp	/^VOID CWorld::SetupKernels() $/;"	f	class:CWorld
SetupMenu	.\GameGUI.cpp	/^VOID CGameGUI::SetupMenu(LPDIRECT3DDEVICE9 pd3dDevice, CScrollingWindow::WindowAnchor _anchor, float _xpercent, float _ypercent){$/;"	f	class:CGameGUI
SetupMenu	.\Menu.cpp	/^void CMenu::SetupMenu(LPDIRECT3DDEVICE9 pd3dDevice, WindowAnchor _anchor, float _xpercent, float _ypercent)$/;"	f	class:CMenu
SetupServerBrowser	.\GameGUI.cpp	/^VOID CGameGUI::SetupServerBrowser(ServerInfoSet set){$/;"	f	class:CGameGUI
ShowItem	.\Common\DXUTgui.cpp	/^void CDXUTScrollBar::ShowItem( int nIndex )$/;"	f	class:CDXUTScrollBar
SkyVert	.\Sky.h	/^    typedef MESHVERT SkyVert;$/;"	t	class:CSky
SmashAttack	.\GameEngine.cpp	/^void CGameEngine::SmashAttack(SPlayer* pplayer){$/;"	f	class:CGameEngine
SmoothHMP	.\ITerrain.cpp	/^VOID ITerrain::SmoothHMP() {$/;"	f	class:ITerrain
SortFlag	.\ServerInfo.h	/^    const UCHAR SortFlag;$/;"	m	class:CServerInfoComparator
SortModesCallback	.\Common\DXUTenum.cpp	/^static int __cdecl SortModesCallback( const void* arg1, const void* arg2 )$/;"	f	file:
SpawnCharacter	.\GameRoot.cpp	/^VOID CGameRoot::SpawnCharacter(int nCharType)$/;"	f	class:CGameRoot
SphereTanBinVert	.\Sphere.cpp	/^CSphere::SphereTanBinVert::SphereTanBinVert(const D3DXVECTOR3& _pos, $/;"	f	class:CSphere::SphereTanBinVert
SphereTanBinVert	.\Sphere.h	/^        SphereTanBinVert() {}$/;"	f	struct:CSphere::SphereTanBinVert
SphereTanBinVert	.\Sphere.h	/^    struct SphereTanBinVert {$/;"	s	class:CSphere
SphereVert	.\Sphere.cpp	/^CSphere::SphereVert::SphereVert(const D3DXVECTOR3& _pos, const D3DXVECTOR3& _norm, float _u, float _v) :$/;"	f	class:CSphere::SphereVert
SphereVert	.\Sphere.h	/^        SphereVert() {}$/;"	f	struct:CSphere::SphereVert
SphereVert	.\Sphere.h	/^    struct SphereVert {$/;"	s	class:CSphere
SplitClouds	.\CloudSky.cpp	/^VOID CCloudSky::SplitClouds()$/;"	f	class:CCloudSky
SpriteAnims	.\GameTables.h	/^    static enum SpriteAnims $/;"	g	namespace:GameTable
SpriteAnmHashMap	.\World.h	/^	typedef hash_map<UCHAR, SSpriteAnimationEntry>	SpriteAnmHashMap;$/;"	t	class:CWorld
SpriteIndexArray	.\GameTables.h	/^    static const NameIndexPair SpriteIndexArray[] = $/;"	v
Start	.\Common\DXUTmisc.cpp	/^void CDXUTTimer::Start()$/;"	f	class:CDXUTTimer
StartAnim	.\SpriteAnimMgr.cpp	/^int CSpriteAnimMgr::StartAnim(int idxAnim)$/;"	f	class:CSpriteAnimMgr
StartRenderToAtlas	.\ImpostorAtlas.cpp	/^VOID CImpostorAtlas::StartRenderToAtlas(LPDIRECT3DDEVICE9 pd3dDevice,  \/\/ duh$/;"	f	class:CImpostorAtlas
StartServer	.\Server.cpp	/^bool CServer::StartServer(const SServerInfo& serverInfo)$/;"	f	class:CServer
StartShadowMapRender	.\ShadowMap.cpp	/^HRESULT CShadowMap::StartShadowMapRender(LPDIRECT3DDEVICE9 pd3dDevice)$/;"	f	class:CShadowMap
States	.\Common\DXUTgui.h	/^    D3DCOLOR  States[ MAX_CONTROL_STATES ]; \/\/ Modulate colors for all possible control states$/;"	m	struct:DXUTBlendColor
StaticID	.\GameEngine.cpp	/^int CGameEngine::SShortLifeEntity::StaticID = 0;$/;"	m	class:CGameEngine::SShortLifeEntity	file:
StaticID	.\GameEngine.h	/^        static int StaticID;$/;"	m	struct:CGameEngine::SShortLifeEntity
StaticMsgProc	.\Common\DXUTgui.cpp	/^bool CDXUTIMEEditBox::StaticMsgProc( UINT uMsg, WPARAM wParam, LPARAM lParam )$/;"	f	class:CDXUTIMEEditBox
StaticOnCreateDevice	.\Common\DXUTgui.cpp	/^HRESULT CDXUTIMEEditBox::StaticOnCreateDevice()$/;"	f	class:CDXUTIMEEditBox
StaticOnCreateDevice	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTDirectionWidget::StaticOnCreateDevice( IDirect3DDevice9* pd3dDevice )$/;"	f	class:CDXUTDirectionWidget
StaticOnDestroyDevice	.\Common\DXUTmisc.cpp	/^void CDXUTDirectionWidget::StaticOnDestroyDevice()$/;"	f	class:CDXUTDirectionWidget
StaticOnEvent	.\Common\DXUTSettingsDlg.cpp	/^void WINAPI CD3DSettingsDlg::StaticOnEvent( UINT nEvent, int nControlID, $/;"	f	class:CD3DSettingsDlg
StaticOnLostDevice	.\Common\DXUTmisc.cpp	/^void CDXUTDirectionWidget::StaticOnLostDevice()$/;"	f	class:CDXUTDirectionWidget
Stop	.\Common\DXUTmisc.cpp	/^void CDXUTTimer::Stop()$/;"	f	class:CDXUTTimer
Stop	.\Common\DXUTsound.cpp	/^HRESULT CSound::Stop()$/;"	f	class:CSound
StopAnim	.\SpriteAnimMgr.cpp	/^VOID CSpriteAnimMgr::StopAnim(int runningAnimIdx)$/;"	f	class:CSpriteAnimMgr
StopRenderToAtlas	.\ImpostorAtlas.cpp	/^VOID CImpostorAtlas::StopRenderToAtlas()$/;"	f	class:CImpostorAtlas
StuffBitStream	.\GameEngine.cpp	/^VOID CGameEngine::SPlayerNetworkUpdate::StuffBitStream(RakNet::BitStream *pBitStream)$/;"	f	class:CGameEngine::SPlayerNetworkUpdate
SubMenuCmdFunc	.\GameRoot.cpp	/^VOID CGameRoot::SubMenuCmdFunc(const string& s){$/;"	f	class:CGameRoot
SunIdx	.\GameEngine.h	/^        int SunIdx;$/;"	m	struct:CGameEngine::SSunStateRequest
SunStateHashMap	.\World.h	/^    typedef hash_map<UCHAR, SSunMorphState> SunStateHashMap;$/;"	t	class:CWorld
SunStateIndexArray	.\GameTables.h	/^    static const NameIndexPair SunStateIndexArray[] = $/;"	v
SunStates	.\GameTables.h	/^    static enum SunStates $/;"	g	namespace:GameTable
SunStates	.\SunStates.h	/^namespace SunStates$/;"	n
SunStop	.\GameRoot.h	/^    VOID SunStop(const string& s) { m_pWorld->SunStop(); }$/;"	f	class:CGameRoot
SunStop	.\World.cpp	/^VOID CWorld::SunStop()$/;"	f	class:CWorld
SunTest	.\GameRoot.h	/^    VOID SunTest(const string& s) { m_pWorld->SunTest(0); }$/;"	f	class:CGameRoot
SunTest	.\World.cpp	/^VOID CWorld::SunTest(int idx)$/;"	f	class:CWorld
SurfaceCenterVector	.\IImpostorable.h	/^    const D3DXVECTOR3 SurfaceCenterVector;$/;"	m	class:IImpostorable
SurfaceFormat	.\IImpostorable.h	/^    static const D3DFORMAT SurfaceFormat        =       D3DFMT_A8R8G8B8;    $/;"	m	class:IImpostorable
SurfaceHeight	.\IImpostorable.h	/^    const int SurfaceHeight;$/;"	m	class:IImpostorable
SurfaceWidth	.\IImpostorable.h	/^    const int SurfaceWidth;$/;"	m	class:IImpostorable
SwapEntry	.\ImpostorAtlas.cpp	/^int CImpostorAtlas::SwapEntry(int id)$/;"	f	class:CImpostorAtlas
SwapInputAndRenderTextures	.\PostProcEffects.cpp	/^void PostProcEffects::SwapInputAndRenderTextures( void )$/;"	f	class:PostProcEffects
SweepAttack	.\GameEngine.cpp	/^void CGameEngine::SweepAttack(SPlayer* pplayer){$/;"	f	class:CGameEngine
TECHNIQUE	.\ModelInstance.cpp	5;"	d	file:
TECHNIQUE	.\XModelHeirarchy.cpp	8;"	d	file:
TERRAINVERT	.\FXDecl.h	/^	TERRAINVERT(float _x, float _y, float _z, float _nx, float _ny, float _nz, float _d0, float _d1) :$/;"	f	struct:TERRAINVERT
TERRAINVERT	.\FXDecl.h	/^struct TERRAINVERT$/;"	s
TERRAIN_EFFECT_NAME	.\MipmapTerrain.h	8;"	d
TERRAIN_TECHNIQUE_NAME	.\MipmapTerrain.h	9;"	d
TILEAREA	.\QuadTree.h	/^    const UINT TILEAREA;$/;"	m	class:CQuadTree
TOP	.\ScrollingWindow.h	/^	enum WindowAnchor{ NONE, TOP, RIGHT, BOTTOM, LEFT };$/;"	e	enum:CScrollingWindow::WindowAnchor
TURN_SETTING	.\GameTables.h	/^        TURN_SETTING,$/;"	e	enum:GameTable::Settings
TestForPlayerDeath	.\GameEngine.cpp	/^void CGameEngine::TestForPlayerDeath(SPlayer* pplayer){$/;"	f	class:CGameEngine
TestLineForCollision	.\PhysicsRoot.cpp	/^float CPhysicsRoot::TestLineForCollision(const D3DXVECTOR3* pvStart, const D3DXVECTOR3* pvEnd, int ownerID, int *victimID){$/;"	f	class:CPhysicsRoot
TextureColor	.\Common\DXUTgui.h	/^    DXUTBlendColor TextureColor;$/;"	m	class:CDXUTElement
TextureSortFunctor	.\PolySprite.h	/^    struct TextureSortFunctor {$/;"	s	class:CPolySprite
Tile	.\QuadTree.h	/^		Tile() : LOD(0.0f), offset(0), miny(0.0f), maxy(0.0f), bTerrainVisible(false), b(NULL), vertSkirtOffset(0), horzSkirtOffset(0) {}        $/;"	f	struct:CQuadTree::Tile
Tile	.\QuadTree.h	/^	struct Tile {$/;"	s	class:CQuadTree
TileWorker	.\QuadTree.cpp	/^VOID CQuadTree::TileWorker(QTNode *n, Block *b, bool bLoad) {    $/;"	f	class:CQuadTree
ToLoad	.\QuadTree.h	/^        list<QTNode *> ToLoad, ToUnload;$/;"	m	class:CQuadTree::CLoadArea
ToUnload	.\QuadTree.h	/^        list<QTNode *> ToLoad, ToUnload;$/;"	m	class:CQuadTree::CLoadArea
Toggle	.\ScrollingWindow.cpp	/^void CScrollingWindow::Toggle() {$/;"	f	class:CScrollingWindow
Toggle	.\ServerBrowser.cpp	/^void CServerBrowser::Toggle() {$/;"	f	class:CServerBrowser
ToggleBBRender	.\GameRoot.h	/^    VOID ToggleBBRender(const string& s) { m_pWorld->ToggleDrawBoundingBoxes(); }$/;"	f	class:CGameRoot
ToggleBloom	.\PostProcEffects.cpp	/^void PostProcEffects::ToggleBloom( void )$/;"	f	class:PostProcEffects
ToggleBoundingBoxes	.\QuadTree.h	/^    VOID ToggleBoundingBoxes() { m_bDrawBoundingBoxes = !m_bDrawBoundingBoxes; }$/;"	f	class:CQuadTree
ToggleCameraControl	.\GameRoot.h	/^    VOID ToggleCameraControl(const string& s) { m_bControlCamera = !m_bControlCamera; m_pWorld->SetCameraControl(m_bControlCamera); }$/;"	f	class:CGameRoot
ToggleCameraControl	.\World.h	/^    VOID ToggleCameraControl()                  { m_bCameraControl = !m_bCameraControl; }$/;"	f	class:CWorld
ToggleCharacterVisibility	.\World.cpp	/^VOID CWorld::ToggleCharacterVisibility(UINT charID)$/;"	f	class:CWorld
ToggleClockMoving	.\Sky.h	/^    VOID ToggleClockMoving()  { m_bClockMoving = !m_bClockMoving; } \/\/! starts\/stops clock$/;"	f	class:CSky
ToggleConsole	.\Console.cpp	/^void CConsole::ToggleConsole()$/;"	f	class:CConsole
ToggleConsole	.\GameGUI.cpp	/^VOID CGameGUI::ToggleConsole() { $/;"	f	class:CGameGUI
ToggleDayMovement	.\CloudSky.h	/^    VOID ToggleDayMovement() { m_pSky->ToggleClockMoving(); }$/;"	f	class:CCloudSky
ToggleDrawBoundingBoxes	.\World.h	/^    VOID ToggleDrawBoundingBoxes()              { m_bDrawBBs = !m_bDrawBBs; }$/;"	f	class:CWorld
ToggleDrawTerrain	.\QuadTree.h	/^    VOID ToggleDrawTerrain() { m_bDrawTerrain = !m_bDrawTerrain; }$/;"	f	class:CQuadTree
ToggleEnhance	.\PostProcEffects.cpp	/^void PostProcEffects::ToggleEnhance()$/;"	f	class:PostProcEffects
ToggleGrey	.\PostProcEffects.cpp	/^void PostProcEffects::ToggleGrey( void )$/;"	f	class:PostProcEffects
ToggleHUD	.\HUD.cpp	/^void CHud::ToggleHUD(){$/;"	f	class:CHud
ToggleMenu	.\GameGUI.cpp	/^VOID CGameGUI::ToggleMenu(){ $/;"	f	class:CGameGUI
ToggleMenu	.\Menu.cpp	/^void CMenu::ToggleMenu() {$/;"	f	class:CMenu
TogglePhysicsRender	.\GameRoot.h	/^    VOID TogglePhysicsRender(const string& s) { m_bRenderPhysics = !m_bRenderPhysics; }$/;"	f	class:CGameRoot
ToggleServerBrowser	.\GameGUI.cpp	/^VOID CGameGUI::ToggleServerBrowser(){$/;"	f	class:CGameGUI
ToggleServerBrowser	.\GameRoot.cpp	/^VOID CGameRoot::ToggleServerBrowser(const string& s)$/;"	f	class:CGameRoot
TruncateCompString	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::TruncateCompString( bool bUseBackSpace, int iNewStrLen )$/;"	f	class:CDXUTIMEEditBox
Type	.\Common\DXUTmisc.h	/^    D3DRESOURCETYPE Type;$/;"	m	struct:DXUTCache_Texture
UNISCRIBE_DLLNAME	.\Common\DXUTgui.cpp	34;"	d	file:
Uninitialize	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::Uninitialize()$/;"	f	class:CDXUTIMEEditBox
Uninitialize	.\Common\DXUTgui.cpp	/^void CUniBuffer::Uninitialize()$/;"	f	class:CUniBuffer
UnloadBlocks	.\QuadTree.cpp	/^UINT CQuadTree::CLoadArea::UnloadBlocks()$/;"	f	class:CQuadTree::CLoadArea
UnlockLOD	.\QuadTree.h	/^    VOID UnlockLOD() { m_bLockLOD = false; }$/;"	f	class:CQuadTree
UnregisterDialog	.\Common\DXUTgui.cpp	/^void CDXUTDialogResourceManager::UnregisterDialog( CDXUTDialog *pDialog )$/;"	f	class:CDXUTDialogResourceManager
UpdateBounds	.\ConsoleBuffer.cpp	/^void CConsoleBuffer::UpdateBounds() {$/;"	f	class:CConsoleBuffer
UpdateBounds	.\MultiColumnList.cpp	/^void CMultiColumnList::UpdateBounds(){$/;"	f	class:CMultiColumnList
UpdateCameraOrientation	.\World.cpp	/^VOID CWorld::UpdateCameraOrientation(const float fElapsedTime)$/;"	f	class:CWorld
UpdateCameraRestState	.\World.cpp	/^VOID CWorld::UpdateCameraRestState()$/;"	f	class:CWorld
UpdateClouds	.\World.cpp	/^VOID CWorld::UpdateClouds(float fElapsedTime)$/;"	f	class:CWorld
UpdateDimensions	.\Console.cpp	/^void CConsole::UpdateDimensions(){$/;"	f	class:CConsole
UpdateDimensions	.\HUD.cpp	/^void CHud::UpdateDimensions(){$/;"	f	class:CHud
UpdateDimensions	.\Menu.cpp	/^void CMenu::UpdateDimensions(){$/;"	f	class:CMenu
UpdateDimensions	.\ProgressBar.h	/^	void UpdateDimensions(){ }$/;"	f	class:CProgressBar
UpdateDimensions	.\ScrollingWindow.cpp	/^void CScrollingWindow::UpdateDimensions(){$/;"	f	class:CScrollingWindow
UpdateDimensions	.\ServerBrowser.cpp	/^void CServerBrowser::UpdateDimensions(){$/;"	f	class:CServerBrowser
UpdateEntities	.\World.cpp	/^VOID CWorld::UpdateEntities(float fElapsedTime)$/;"	f	class:CWorld
UpdateFrameMatrices	.\XModelHeirarchy.cpp	/^void CXModelHeirarchy::UpdateFrameMatrices( LPD3DXFRAME pFrameBase, const D3DXMATRIX* pParentMatrix )$/;"	f	class:CXModelHeirarchy
UpdateGrassClusterTranslation	.\Foliage.cpp	/^VOID CFoliage::UpdateGrassClusterTranslation(SGrass* pgrass)$/;"	f	class:CFoliage
UpdateImpostor	.\CloudBatch.cpp	/^bool CCloud::UpdateImpostor(IDirect3DDevice9 *pd3dDevice, const D3DXMATRIX* pMatProj, const D3DXMATRIX* pMatView, $/;"	f	class:CCloud
UpdateLightDir	.\Common\DXUTmisc.cpp	/^HRESULT CDXUTDirectionWidget::UpdateLightDir()$/;"	f	class:CDXUTDirectionWidget
UpdateLighting	.\CloudBatch.cpp	/^VOID CCloud::UpdateLighting(const D3DXVECTOR3* pSunPos, const D3DXVECTOR3* pLightDir, $/;"	f	class:CCloud
UpdateMouseLocation	.\GameEngine.cpp	/^void CGameEngine::UpdateMouseLocation(int xPos, int yPos)$/;"	f	class:CGameEngine
UpdateObjects	.\QuadTree.cpp	/^VOID CQuadTree::UpdateObjects(const float fElapsedtime,$/;"	f	class:CQuadTree
UpdatePlayer	.\GameEngine.cpp	/^void CGameEngine::UpdatePlayer(SPlayer* pplayer, float fElapsedTime)$/;"	f	class:CGameEngine
UpdatePlayerActualVelocity	.\GameEngine.cpp	/^void CGameEngine::UpdatePlayerActualVelocity(SPlayer* pplayer)$/;"	f	class:CGameEngine
UpdatePlayerAnimation	.\GameEngine.cpp	/^void CGameEngine::UpdatePlayerAnimation(SPlayer* pplayer, float fElapsedTime){$/;"	f	class:CGameEngine
UpdatePlayerMoveSpace	.\GameEngine.cpp	/^void CGameEngine::UpdatePlayerMoveSpace(SPlayer* pplayer)$/;"	f	class:CGameEngine
UpdatePlayerMovement	.\PhysicsRoot.cpp	/^bool CPhysicsRoot::UpdatePlayerMovement(int physicsID, D3DXVECTOR3* pvVelocity, float fGroundOffset, bool bJumping, bool bUncontrollable, float fDt){$/;"	f	class:CPhysicsRoot
UpdatePlayerTimers	.\GameEngine.cpp	/^void CGameEngine::UpdatePlayerTimers(SPlayer* pplayer, float fElapsedTime){$/;"	f	class:CGameEngine
UpdatePlayerWorldMtx	.\GameEngine.cpp	/^void CGameEngine::UpdatePlayerWorldMtx(SPlayer* pplayer)$/;"	f	class:CGameEngine
UpdateRect	.\SpriteAnimMgr.cpp	/^VOID CSpriteAnimMgr::UpdateRect(const STexture &texWrap, int nStill, RECTF &frect)$/;"	f	class:CSpriteAnimMgr
UpdateRects	.\Common\DXUTgui.cpp	/^void CDXUTCheckBox::UpdateRects()$/;"	f	class:CDXUTCheckBox
UpdateRects	.\Common\DXUTgui.cpp	/^void CDXUTComboBox::UpdateRects()$/;"	f	class:CDXUTComboBox
UpdateRects	.\Common\DXUTgui.cpp	/^void CDXUTControl::UpdateRects()$/;"	f	class:CDXUTControl
UpdateRects	.\Common\DXUTgui.cpp	/^void CDXUTEditBox::UpdateRects()$/;"	f	class:CDXUTEditBox
UpdateRects	.\Common\DXUTgui.cpp	/^void CDXUTIMEEditBox::UpdateRects()$/;"	f	class:CDXUTIMEEditBox
UpdateRects	.\Common\DXUTgui.cpp	/^void CDXUTListBox::UpdateRects()$/;"	f	class:CDXUTListBox
UpdateRects	.\Common\DXUTgui.cpp	/^void CDXUTScrollBar::UpdateRects()$/;"	f	class:CDXUTScrollBar
UpdateRects	.\Common\DXUTgui.cpp	/^void CDXUTSlider::UpdateRects()$/;"	f	class:CDXUTSlider
UpdateSLE	.\PhysicsRoot.cpp	/^void CPhysicsRoot::UpdateSLE(int physicsID, int ownerID, set<int> &sVictims){$/;"	f	class:CPhysicsRoot
UpdateShadowClouds	.\CloudSky.cpp	/^UINT CCloudSky::UpdateShadowClouds(IDirect3DDevice9* pd3dDevice,$/;"	f	class:CCloudSky
UpdateShadowMap	.\World.cpp	/^HRESULT CWorld::UpdateShadowMap()$/;"	f	class:CWorld
UpdateShortLifeEntity	.\GameEngine.cpp	/^VOID CGameEngine::UpdateShortLifeEntity(SShortLifeEntity* pentity, float fElapsedTime)$/;"	f	class:CGameEngine
UpdateSkyRequest	.\GameEngine.cpp	/^VOID CGameEngine::UpdateSkyRequest(float fClockTime)$/;"	f	class:CGameEngine
UpdateSpriteAnimation	.\World.cpp	/^VOID CWorld::UpdateSpriteAnimation(int runningAnimID, const D3DXMATRIX* pWorld, float fTTL)$/;"	f	class:CWorld
UpdateSpriteAnimations	.\World.cpp	/^VOID CWorld::UpdateSpriteAnimations(float fElapsedTime)$/;"	f	class:CWorld
UpdateThumbRect	.\Common\DXUTgui.cpp	/^void CDXUTScrollBar::UpdateThumbRect()$/;"	f	class:CDXUTScrollBar
UpdateVelocity	.\Common\DXUTmisc.cpp	/^void CBaseCamera::UpdateVelocity( float fElapsedTime )$/;"	f	class:CBaseCamera
UpdateWorld	.\GameRoot.cpp	/^VOID CGameRoot::UpdateWorld()$/;"	f	class:CGameRoot
Usage	.\Common\DXUTmisc.h	/^    DWORD Usage;$/;"	m	struct:DXUTCache_Texture
UseMeshMaterials	.\Common\DXUTMesh.h	/^    void    UseMeshMaterials( bool bFlag ) { m_bUseMaterials = bFlag; }$/;"	f	class:CDXUTMesh
UseSoftwareVP	.\XModelHeirarchy.h	/^    bool                 UseSoftwareVP;$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
V	.\Common\dxstdafx.h	137;"	d
V	.\Common\dxstdafx.h	144;"	d
VECSPRITECENTER	.\CloudBatch.h	/^        static const D3DXVECTOR3 VECSPRITECENTER;$/;"	m	struct:CCloud::SSubCloud
VER_DLLNAME	.\Common\DXUTgui.cpp	45;"	d	file:
VIEWPOINTALIGN_BILLBOARD	.\PolySprite.h	/^    static const int VIEWPOINTALIGN_BILLBOARD         =       (0x01 << 1);    $/;"	m	class:CPolySprite
V_RETURN	.\Common\dxstdafx.h	140;"	d
V_RETURN	.\Common\dxstdafx.h	147;"	d
ValueFromPos	.\Common\DXUTgui.cpp	/^int CDXUTSlider::ValueFromPos( int x )$/;"	f	class:CDXUTSlider
Vec3FromD3DXVector	.\PhysicsRoot.h	/^	TA::Vec3 Vec3FromD3DXVector(const D3DXVECTOR3* vector) { return TA::Vec3(vector->x, vector->y, vector->z); }$/;"	f	class:CPhysicsRoot
VerticalAttack	.\GameEngine.cpp	/^void CGameEngine::VerticalAttack(SPlayer* pplayer){$/;"	f	class:CGameEngine
ViewFrustumCull	.\QuadTree.cpp	/^UINT CQuadTree::ViewFrustumCull(const D3DXMATRIX* pMatView, const D3DXMATRIX* pMatProj) {$/;"	f	class:CQuadTree
ViewPointAlignQuad	.\PolySprite.cpp	/^VOID CPolySprite::ViewPointAlignQuad(PolySpriteVertex *pvb, const D3DXVECTOR3 &center)$/;"	f	class:CPolySprite
WAVEFILE_READ	.\Common\DXUTsound.h	21;"	d
WAVEFILE_WRITE	.\Common\DXUTsound.h	22;"	d
WHEEL_DELTA	.\Common\DXUTgui.cpp	24;"	d	file:
WINDOW	.\AnimOb.h	/^	enum AnimType { NONE, BUTTON, WINDOW };$/;"	e	enum:AnimOb::AnimType
WINDOWED	.\GameDefine.h	21;"	d
WINVER	.\Common\dxstdafx.h	18;"	d
WM_GRAPHNOTIFY	.\resource.h	6;"	d
WM_MOUSEWHEEL	.\Common\DXUTgui.cpp	21;"	d	file:
WM_XBUTTONDOWN	.\Common\DXUTgui.cpp	15;"	d	file:
WM_XBUTTONUP	.\Common\DXUTgui.cpp	18;"	d	file:
WORLDORIENT	.\PolySprite.h	/^    static const int WORLDORIENT                      = WORLDORIENTAHEAD | WORLDORIENTUP | WORLDORIENTRIGHT;$/;"	m	class:CPolySprite
WORLDORIENTAHEAD	.\PolySprite.h	/^    static const int WORLDORIENTAHEAD                 =       (0x01 << 5); $/;"	m	class:CPolySprite
WORLDORIENTRIGHT	.\PolySprite.h	/^    static const int WORLDORIENTRIGHT                 =       (0x01 << 7);$/;"	m	class:CPolySprite
WORLDORIENTUP	.\PolySprite.h	/^    static const int WORLDORIENTUP                    =       (0x01 << 6);    $/;"	m	class:CPolySprite
WasKeyDown	.\Common\DXUTmisc.h	/^    bool WasKeyDown( BYTE key ) const { return( (key & KEY_WAS_DOWN_MASK) == KEY_WAS_DOWN_MASK ); }$/;"	f	class:CBaseCamera
Width	.\Common\DXUTmisc.h	/^    UINT Width;$/;"	m	struct:DXUTCache_Texture
WinMain	.\GPUTerrainProject.cpp	/^INT WINAPI WinMain( HINSTANCE, HINSTANCE, LPSTR, int )$/;"	f
WindowAnchor	.\ScrollingWindow.h	/^	enum WindowAnchor{ NONE, TOP, RIGHT, BOTTOM, LEFT };$/;"	g	class:CScrollingWindow
Windowed	.\Common\DXUTenum.h	/^    BOOL Windowed;$/;"	m	struct:CD3DEnumDeviceSettingsCombo
WordCharPair	.\GameTables.h	/^        WordCharPair(LPCSTR _word, UCHAR _c) : word(_word), c(_c) {}$/;"	f	struct:GameTable::WordCharPair
WordCharPair	.\GameTables.h	/^    struct WordCharPair$/;"	s	namespace:GameTable
WordVKeyArray	.\GameTables.h	/^    static const WordCharPair WordVKeyArray[NumWordChars] =$/;"	v
WorldOrientAlignQuad	.\PolySprite.cpp	/^VOID CPolySprite::WorldOrientAlignQuad(PolySpriteVertex *pvb)$/;"	f	class:CPolySprite
Write	.\Common\DXUTsound.cpp	/^HRESULT CWaveFile::Write( UINT nSizeToWrite, BYTE* pbSrcData, UINT* pnSizeWrote )$/;"	f	class:CWaveFile
WriteMMIO	.\Common\DXUTsound.cpp	/^HRESULT CWaveFile::WriteMMIO( WAVEFORMATEX *pwfxDest )$/;"	f	class:CWaveFile
XtoCP	.\Common\DXUTgui.cpp	/^HRESULT CUniBuffer::XtoCP( int nX, int *pCP, int *pnTrail )$/;"	f	class:CUniBuffer
ZeroEdges	.\ITerrain.cpp	/^void ITerrain::ZeroEdges() $/;"	f	class:ITerrain
_APS_NEXT_COMMAND_VALUE	.\resource.h	13;"	d
_APS_NEXT_CONTROL_VALUE	.\resource.h	14;"	d
_APS_NEXT_RESOURCE_VALUE	.\resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	.\resource.h	15;"	d
_CHS_HKL	.\Common\DXUTgui.cpp	5763;"	d	file:
_CHT_HKL	.\Common\DXUTgui.cpp	5761;"	d	file:
_CHT_HKL2	.\Common\DXUTgui.cpp	5762;"	d	file:
_GetFileVersionInfoA	.\Common\DXUTgui.cpp	/^BOOL (APIENTRY * CDXUTIMEEditBox::_GetFileVersionInfoA)( LPSTR, DWORD, DWORD, LPVOID )= CDXUTIMEEditBox::Dummy_GetFileVersionInfoA;$/;"	v
_GetFileVersionInfoA	.\Common\DXUTgui.h	/^    static BOOL (APIENTRY * _GetFileVersionInfoA)( LPSTR, DWORD, DWORD, LPVOID );$/;"	m	class:CDXUTIMEEditBox
_GetFileVersionInfoSizeA	.\Common\DXUTgui.cpp	/^DWORD (APIENTRY * CDXUTIMEEditBox::_GetFileVersionInfoSizeA)( LPSTR, LPDWORD ) = CDXUTIMEEditBox::Dummy_GetFileVersionInfoSizeA;$/;"	v
_GetFileVersionInfoSizeA	.\Common\DXUTgui.h	/^    static DWORD (APIENTRY * _GetFileVersionInfoSizeA)( LPSTR, LPDWORD );$/;"	m	class:CDXUTIMEEditBox
_GetReadingString	.\Common\DXUTgui.cpp	/^UINT (WINAPI * CDXUTIMEEditBox::_GetReadingString)( HIMC, UINT, LPWSTR, PINT, BOOL*, PUINT ) = CDXUTIMEEditBox::Dummy_GetReadingString; \/\/ Traditional Chinese IME$/;"	v
_GetReadingString	.\Common\DXUTgui.h	/^    static UINT (WINAPI * _GetReadingString)( HIMC, UINT, LPWSTR, PINT, BOOL*, PUINT );$/;"	m	class:CDXUTIMEEditBox
_ImmAssociateContext	.\Common\DXUTgui.cpp	/^HIMC (WINAPI * CDXUTIMEEditBox::_ImmAssociateContext)( HWND, HIMC ) = CDXUTIMEEditBox::Dummy_ImmAssociateContext;$/;"	v
_ImmAssociateContext	.\Common\DXUTgui.h	/^    static HIMC (WINAPI * _ImmAssociateContext)( HWND, HIMC );$/;"	m	class:CDXUTIMEEditBox
_ImmDisableTextFrameService	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmDisableTextFrameService)( DWORD ) = CDXUTIMEEditBox::Dummy_ImmDisableTextFrameService;$/;"	v
_ImmDisableTextFrameService	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmDisableTextFrameService)( DWORD );$/;"	m	class:CDXUTIMEEditBox
_ImmGetCandidateListW	.\Common\DXUTgui.cpp	/^DWORD (WINAPI * CDXUTIMEEditBox::_ImmGetCandidateListW)( HIMC, DWORD, LPCANDIDATELIST, DWORD ) = CDXUTIMEEditBox::Dummy_ImmGetCandidateListW;$/;"	v
_ImmGetCandidateListW	.\Common\DXUTgui.h	/^    static DWORD (WINAPI * _ImmGetCandidateListW)( HIMC, DWORD, LPCANDIDATELIST, DWORD );$/;"	m	class:CDXUTIMEEditBox
_ImmGetCompositionStringW	.\Common\DXUTgui.cpp	/^LONG (WINAPI * CDXUTIMEEditBox::_ImmGetCompositionStringW)( HIMC, DWORD, LPVOID, DWORD ) = CDXUTIMEEditBox::Dummy_ImmGetCompositionStringW;$/;"	v
_ImmGetCompositionStringW	.\Common\DXUTgui.h	/^    static LONG (WINAPI * _ImmGetCompositionStringW)( HIMC, DWORD, LPVOID, DWORD );$/;"	m	class:CDXUTIMEEditBox
_ImmGetContext	.\Common\DXUTgui.cpp	/^HIMC (WINAPI * CDXUTIMEEditBox::_ImmGetContext)( HWND ) = CDXUTIMEEditBox::Dummy_ImmGetContext;$/;"	v
_ImmGetContext	.\Common\DXUTgui.h	/^    static HIMC (WINAPI * _ImmGetContext)( HWND );$/;"	m	class:CDXUTIMEEditBox
_ImmGetConversionStatus	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmGetConversionStatus)( HIMC, LPDWORD, LPDWORD ) = CDXUTIMEEditBox::Dummy_ImmGetConversionStatus;$/;"	v
_ImmGetConversionStatus	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmGetConversionStatus)( HIMC, LPDWORD, LPDWORD );$/;"	m	class:CDXUTIMEEditBox
_ImmGetDefaultIMEWnd	.\Common\DXUTgui.cpp	/^HWND (WINAPI * CDXUTIMEEditBox::_ImmGetDefaultIMEWnd)( HWND ) = CDXUTIMEEditBox::Dummy_ImmGetDefaultIMEWnd;$/;"	v
_ImmGetDefaultIMEWnd	.\Common\DXUTgui.h	/^    static HWND (WINAPI * _ImmGetDefaultIMEWnd)( HWND );$/;"	m	class:CDXUTIMEEditBox
_ImmGetIMEFileNameA	.\Common\DXUTgui.cpp	/^UINT (WINAPI * CDXUTIMEEditBox::_ImmGetIMEFileNameA)( HKL, LPSTR, UINT ) = CDXUTIMEEditBox::Dummy_ImmGetIMEFileNameA;$/;"	v
_ImmGetIMEFileNameA	.\Common\DXUTgui.h	/^    static UINT (WINAPI * _ImmGetIMEFileNameA)( HKL, LPSTR, UINT );$/;"	m	class:CDXUTIMEEditBox
_ImmGetOpenStatus	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmGetOpenStatus)( HIMC ) = CDXUTIMEEditBox::Dummy_ImmGetOpenStatus;$/;"	v
_ImmGetOpenStatus	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmGetOpenStatus)( HIMC );$/;"	m	class:CDXUTIMEEditBox
_ImmGetVirtualKey	.\Common\DXUTgui.cpp	/^UINT (WINAPI * CDXUTIMEEditBox::_ImmGetVirtualKey)( HWND ) = CDXUTIMEEditBox::Dummy_ImmGetVirtualKey;$/;"	v
_ImmGetVirtualKey	.\Common\DXUTgui.h	/^    static UINT (WINAPI * _ImmGetVirtualKey)( HWND );$/;"	m	class:CDXUTIMEEditBox
_ImmIsIME	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmIsIME)( HKL ) = CDXUTIMEEditBox::Dummy_ImmIsIME;$/;"	v
_ImmIsIME	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmIsIME)( HKL );$/;"	m	class:CDXUTIMEEditBox
_ImmLockIMC	.\Common\DXUTgui.cpp	/^INPUTCONTEXT* (WINAPI * CDXUTIMEEditBox::_ImmLockIMC)( HIMC ) = CDXUTIMEEditBox::Dummy_ImmLockIMC;$/;"	v
_ImmLockIMC	.\Common\DXUTgui.h	/^    static INPUTCONTEXT* (WINAPI * _ImmLockIMC)( HIMC );$/;"	m	class:CDXUTIMEEditBox
_ImmLockIMCC	.\Common\DXUTgui.cpp	/^LPVOID (WINAPI * CDXUTIMEEditBox::_ImmLockIMCC)( HIMCC ) = CDXUTIMEEditBox::Dummy_ImmLockIMCC;$/;"	v
_ImmLockIMCC	.\Common\DXUTgui.h	/^    static LPVOID (WINAPI * _ImmLockIMCC)( HIMCC );$/;"	m	class:CDXUTIMEEditBox
_ImmNotifyIME	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmNotifyIME)( HIMC, DWORD, DWORD, DWORD ) = CDXUTIMEEditBox::Dummy_ImmNotifyIME;$/;"	v
_ImmNotifyIME	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmNotifyIME)( HIMC, DWORD, DWORD, DWORD );$/;"	m	class:CDXUTIMEEditBox
_ImmReleaseContext	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmReleaseContext)( HWND, HIMC ) = CDXUTIMEEditBox::Dummy_ImmReleaseContext;$/;"	v
_ImmReleaseContext	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmReleaseContext)( HWND, HIMC );$/;"	m	class:CDXUTIMEEditBox
_ImmSetConversionStatus	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmSetConversionStatus)( HIMC, DWORD, DWORD ) = CDXUTIMEEditBox::Dummy_ImmSetConversionStatus;$/;"	v
_ImmSetConversionStatus	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmSetConversionStatus)( HIMC, DWORD, DWORD );$/;"	m	class:CDXUTIMEEditBox
_ImmSetOpenStatus	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmSetOpenStatus)( HIMC, BOOL ) = CDXUTIMEEditBox::Dummy_ImmSetOpenStatus;$/;"	v
_ImmSetOpenStatus	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmSetOpenStatus)( HIMC, BOOL );$/;"	m	class:CDXUTIMEEditBox
_ImmSimulateHotKey	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmSimulateHotKey)( HWND, DWORD ) = CDXUTIMEEditBox::Dummy_ImmSimulateHotKey;$/;"	v
_ImmSimulateHotKey	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmSimulateHotKey)( HWND, DWORD );$/;"	m	class:CDXUTIMEEditBox
_ImmUnlockIMC	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmUnlockIMC)( HIMC ) = CDXUTIMEEditBox::Dummy_ImmUnlockIMC;$/;"	v
_ImmUnlockIMC	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmUnlockIMC)( HIMC );$/;"	m	class:CDXUTIMEEditBox
_ImmUnlockIMCC	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ImmUnlockIMCC)( HIMCC ) = CDXUTIMEEditBox::Dummy_ImmUnlockIMCC;$/;"	v
_ImmUnlockIMCC	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ImmUnlockIMCC)( HIMCC );$/;"	m	class:CDXUTIMEEditBox
_ScriptApplyDigitSubstitution	.\Common\DXUTgui.cpp	/^HRESULT (WINAPI *CUniBuffer::_ScriptApplyDigitSubstitution)( const SCRIPT_DIGITSUBSTITUTE*, SCRIPT_CONTROL*, SCRIPT_STATE* ) = Dummy_ScriptApplyDigitSubstitution;$/;"	v
_ScriptApplyDigitSubstitution	.\Common\DXUTgui.h	/^    static HRESULT (WINAPI *_ScriptApplyDigitSubstitution)( const SCRIPT_DIGITSUBSTITUTE*, SCRIPT_CONTROL*, SCRIPT_STATE* );$/;"	m	class:CUniBuffer
_ScriptStringAnalyse	.\Common\DXUTgui.cpp	/^HRESULT (WINAPI *CUniBuffer::_ScriptStringAnalyse)( HDC, const void *, int, int, int, DWORD, int, SCRIPT_CONTROL*, SCRIPT_STATE*, const int*, SCRIPT_TABDEF*, const BYTE*, SCRIPT_STRING_ANALYSIS* ) = Dummy_ScriptStringAnalyse;$/;"	v
_ScriptStringAnalyse	.\Common\DXUTgui.h	/^    static HRESULT (WINAPI *_ScriptStringAnalyse)( HDC, const void *, int, int, int, DWORD, int, SCRIPT_CONTROL*, SCRIPT_STATE*, const int*, SCRIPT_TABDEF*, const BYTE*, SCRIPT_STRING_ANALYSIS* );$/;"	m	class:CUniBuffer
_ScriptStringCPtoX	.\Common\DXUTgui.cpp	/^HRESULT (WINAPI *CUniBuffer::_ScriptStringCPtoX)( SCRIPT_STRING_ANALYSIS, int, BOOL, int* ) = Dummy_ScriptStringCPtoX;$/;"	v
_ScriptStringCPtoX	.\Common\DXUTgui.h	/^    static HRESULT (WINAPI *_ScriptStringCPtoX)( SCRIPT_STRING_ANALYSIS, int, BOOL, int* );$/;"	m	class:CUniBuffer
_ScriptStringFree	.\Common\DXUTgui.cpp	/^HRESULT (WINAPI *CUniBuffer::_ScriptStringFree)( SCRIPT_STRING_ANALYSIS* ) = Dummy_ScriptStringFree;$/;"	v
_ScriptStringFree	.\Common\DXUTgui.h	/^    static HRESULT (WINAPI *_ScriptStringFree)( SCRIPT_STRING_ANALYSIS* );$/;"	m	class:CUniBuffer
_ScriptStringXtoCP	.\Common\DXUTgui.cpp	/^HRESULT (WINAPI *CUniBuffer::_ScriptStringXtoCP)( SCRIPT_STRING_ANALYSIS, int, int*, int* ) = Dummy_ScriptStringXtoCP;$/;"	v
_ScriptStringXtoCP	.\Common\DXUTgui.h	/^    static HRESULT (WINAPI *_ScriptStringXtoCP)( SCRIPT_STRING_ANALYSIS, int, int*, int* );$/;"	m	class:CUniBuffer
_ScriptString_pLogAttr	.\Common\DXUTgui.cpp	/^const SCRIPT_LOGATTR* (WINAPI *CUniBuffer::_ScriptString_pLogAttr)( SCRIPT_STRING_ANALYSIS ) = Dummy_ScriptString_pLogAttr;$/;"	v
_ScriptString_pLogAttr	.\Common\DXUTgui.h	/^    static const SCRIPT_LOGATTR* (WINAPI *_ScriptString_pLogAttr)( SCRIPT_STRING_ANALYSIS );$/;"	m	class:CUniBuffer
_ScriptString_pcOutChars	.\Common\DXUTgui.cpp	/^const int* (WINAPI *CUniBuffer::_ScriptString_pcOutChars)( SCRIPT_STRING_ANALYSIS ) = Dummy_ScriptString_pcOutChars;$/;"	v
_ScriptString_pcOutChars	.\Common\DXUTgui.h	/^    static const int* (WINAPI *_ScriptString_pcOutChars)( SCRIPT_STRING_ANALYSIS );$/;"	m	class:CUniBuffer
_ShowReadingWindow	.\Common\DXUTgui.cpp	/^BOOL (WINAPI * CDXUTIMEEditBox::_ShowReadingWindow)( HIMC, BOOL ) = CDXUTIMEEditBox::Dummy_ShowReadingWindow; \/\/ Traditional Chinese IME$/;"	v
_ShowReadingWindow	.\Common\DXUTgui.h	/^    static BOOL (WINAPI * _ShowReadingWindow)( HIMC, BOOL );$/;"	m	class:CDXUTIMEEditBox
_USE_MATH_DEFINES	.\Common\dxstdafx.h	52;"	d
_VerQueryValueA	.\Common\DXUTgui.cpp	/^BOOL (APIENTRY * CDXUTIMEEditBox::_VerQueryValueA)( const LPVOID, LPSTR, LPVOID *, PUINT ) = CDXUTIMEEditBox::Dummy_VerQueryValueA;$/;"	v
_VerQueryValueA	.\Common\DXUTgui.h	/^    static BOOL (APIENTRY * _VerQueryValueA)( const LPVOID, LPSTR, LPVOID *, PUINT );$/;"	m	class:CDXUTIMEEditBox
_WIN32_WINDOWS	.\Common\dxstdafx.h	21;"	d
_WIN32_WINNT	.\Common\dxstdafx.h	24;"	d
alpha	.\HUD.h	/^	int								alpha;		\/\/! Hud visibility$/;"	m	class:CHud
alpha_multiplier	.\Sky.h	/^		float orbit_speed, angle, fLightTimeOffset, time_offset, angle_offset, alpha_multiplier;$/;"	m	struct:CSky::SBigStar
anchor	.\ScrollingWindow.h	/^	WindowAnchor		anchor;			\/\/ Where is the window docked$/;"	m	class:CScrollingWindow
angle	.\Sky.h	/^		float orbit_speed, angle, fLightTimeOffset, time_offset, angle_offset, alpha_multiplier;$/;"	m	struct:CSky::SBigStar
angle	.\World.h	/^        D3DXVECTOR3 scale, angle, pos;$/;"	m	struct:CWorld::SStaticEntityInfo
angle_offset	.\Sky.h	/^		float orbit_speed, angle, fLightTimeOffset, time_offset, angle_offset, alpha_multiplier;$/;"	m	struct:CSky::SBigStar
animRequest	.\GameEngine.h	/^        SAnimRequest animRequest;$/;"	m	struct:CGameEngine::SPlayer
animType	.\AnimOb.h	/^	AnimType animType;$/;"	m	class:AnimOb
arrCIP	.\QuadTree.h	/^    CornerIndexPair arrCIP[6]; \/\/! Array of optimized corner index entries for each frustum plane$/;"	m	class:CQuadTree
awszCandidate	.\Common\DXUTgui.h	/^        WCHAR awszCandidate[MAX_CANDLIST][256];$/;"	m	struct:CDXUTIMEEditBox::CCandList
b	.\GUIObject.h	/^	int r, g, b;$/;"	m	struct:SColor
b	.\QuadTree.h	/^		Block *b;$/;"	m	struct:CQuadTree::Tile
bAntiAlias	.\Common\DXUTmisc.h	/^        bool     bAntiAlias;$/;"	m	struct:CDXUTLineManager::LINE_NODE
bBackToFront	.\ImpostorAtlas.h	/^        bool bBackToFront;$/;"	m	struct:CImpostorAtlas::PtrEntrySort
bBlock	.\GameEngine.h	/^		bool bDive, bDash, bBlock, bCharge[4];$/;"	m	struct:CGameEngine::SPlayer
bBlock	.\QuadTree.h	/^        bool bLeaf, bBlock; \/\/! bBlock is only true if QTNode is of 129x129 AND lies on an area with terrain. (eg: rectangular HMPs have some nodes with nothing on it!)$/;"	m	struct:CQuadTree::QTNode
bCameraTurnLeft	.\GameEngine.h	/^        bool bCameraTurnLeft, bCameraTurnRight, bResetCamera;$/;"	m	struct:CGameEngine::SPlayer
bCameraTurnRight	.\GameEngine.h	/^        bool bCameraTurnLeft, bCameraTurnRight, bResetCamera;$/;"	m	struct:CGameEngine::SPlayer
bCelebrate	.\GameEngine.h	/^        bool bUncontrollable, bDazed, bCelebrate;	\/\/! Player is in dazed or uncontrollable state.$/;"	m	struct:CGameEngine::SPlayer
bCharge	.\GameEngine.h	/^		bool bDive, bDash, bBlock, bCharge[4];$/;"	m	struct:CGameEngine::SPlayer
bCollidable	.\GameEngine.h	/^        bool bCollidable, bVisualCreated;$/;"	m	struct:CGameEngine::SShortLifeEntity
bConnected	.\Common\DXUTmisc.h	/^    bool    bConnected; \/\/ If the controller is currently connected$/;"	m	struct:DXUT_GAMEPAD
bDash	.\GameEngine.h	/^		bool bDive, bDash, bBlock, bCharge[4];$/;"	m	struct:CGameEngine::SPlayer
bDazed	.\GameEngine.h	/^        bool bUncontrollable, bDazed, bCelebrate;	\/\/! Player is in dazed or uncontrollable state.$/;"	m	struct:CGameEngine::SPlayer
bDive	.\GameEngine.h	/^		bool bDive, bDash, bBlock, bCharge[4];$/;"	m	struct:CGameEngine::SPlayer
bEnabled	.\Common\DXUT.cpp	/^    bool  bEnabled;$/;"	m	struct:DXUT_TIMER	file:
bFileSource	.\Common\DXUTgui.h	/^    bool bFileSource;  \/\/ True if this texture is loaded from a file. False if from resource.$/;"	m	struct:DXUTTextureNode
bFitsInArea	.\QuadTree.h	/^        bool bFitsInArea;$/;"	m	class:CQuadTree::CLoadArea
bInserted	.\Common\DXUTmisc.h	/^    bool    bInserted;  \/\/ If the controller was inserted this frame$/;"	m	struct:DXUT_GAMEPAD
bJumping	.\GameEngine.h	/^		bool bJumping;			\/\/! Player is jumping$/;"	m	struct:CGameEngine::SPlayer
bLastLeftTrigger	.\Common\DXUTmisc.h	/^    bool    bLastLeftTrigger;$/;"	m	struct:DXUT_GAMEPAD
bLastRightTrigger	.\Common\DXUTmisc.h	/^    bool    bLastRightTrigger;$/;"	m	struct:DXUT_GAMEPAD
bLeaf	.\QuadTree.h	/^        bool bLeaf, bBlock; \/\/! bBlock is only true if QTNode is of 129x129 AND lies on an area with terrain. (eg: rectangular HMPs have some nodes with nothing on it!)$/;"	m	struct:CQuadTree::QTNode
bLeftTrigger	.\Common\DXUTmisc.h	/^    BYTE    bLeftTrigger;$/;"	m	struct:DXUT_GAMEPAD
bLoopAnim	.\GameEngine.h	/^        bool bLoopAnim; \/\/! whether to loop animation.$/;"	m	struct:CGameEngine::SAnimRequest
bMovement	.\GameEngine.h	/^        bool bMovement[4];  \/\/ movement directions: forward, backward, left, right.$/;"	m	struct:CGameEngine::SPlayer
bMovement	.\GameEngine.h	/^        bool bMovement[4];$/;"	m	struct:CGameEngine::SPlayerNetworkUpdate
bNight	.\GameEngine.h	/^        bool bNight;$/;"	m	struct:CGameEngine::SEnvironment
bOwnSprite	.\CloudBatch.h	/^    bool bOwnSprite;    $/;"	m	class:CCloudBatch
bPressedLeftTrigger	.\Common\DXUTmisc.h	/^    bool    bPressedLeftTrigger;$/;"	m	struct:DXUT_GAMEPAD
bPressedRightTrigger	.\Common\DXUTmisc.h	/^    bool    bPressedRightTrigger;$/;"	m	struct:DXUT_GAMEPAD
bRemoved	.\Common\DXUTmisc.h	/^    bool    bRemoved;   \/\/ If the controller was removed this frame$/;"	m	struct:DXUT_GAMEPAD
bRequestVisible	.\GameEngine.h	/^        bool bRequestVisible;$/;"	m	struct:CGameEngine::SPlayer
bRequestVisible	.\MeshEntity.h	/^    bool bVisible, bRequestVisible;$/;"	m	struct:SMeshEntity
bResetCamera	.\GameEngine.h	/^        bool bCameraTurnLeft, bCameraTurnRight, bResetCamera;$/;"	m	struct:CGameEngine::SPlayer
bRightTrigger	.\Common\DXUTmisc.h	/^    BYTE    bRightTrigger;$/;"	m	struct:DXUT_GAMEPAD
bSelected	.\Common\DXUTgui.h	/^    bool  bSelected;$/;"	m	struct:DXUTListBoxItem
bShowWindow	.\Common\DXUTgui.h	/^        bool  bShowWindow;   \/\/ Whether the candidate list window is visible$/;"	m	struct:CDXUTIMEEditBox::CCandList
bTerrainVisible	.\QuadTree.h	/^        bool bTerrainVisible; \/\/ although QTNode might be visible, the Terrain Tile might not be.$/;"	m	struct:CQuadTree::Tile
bToDraw	.\ImpostorAtlas.h	/^        bool bToDraw;   \/\/! Whether this entry should be drawn in RenderAtlas.$/;"	m	struct:CImpostorAtlas::SAtlasEntry
bUncontrollable	.\GameEngine.h	/^        bool bUncontrollable, bDazed, bCelebrate;	\/\/! Player is in dazed or uncontrollable state.$/;"	m	struct:CGameEngine::SPlayer
bUpdateImpostor	.\ImpostorAtlas.h	/^        bool bUseImpostor, bUpdateImpostor;$/;"	m	struct:CImpostorAtlas::SAtlasEntryUpdate
bUseImpostor	.\ImpostorAtlas.h	/^        bool bUseImpostor, bUpdateImpostor;$/;"	m	struct:CImpostorAtlas::SAtlasEntryUpdate
bUsingVerts	.\PolySprite.h	/^        bool bWorldSpace, bUsingVerts;$/;"	m	struct:CPolySprite::DrawInfo
bValid	.\ImpostorAtlas.h	/^        bool bValid;    \/\/! Whether this entry is still valid or can be invalidated and swapped.$/;"	m	struct:CImpostorAtlas::SAtlasEntry
bVisible	.\Common\DXUTgui.h	/^    bool  bVisible;$/;"	m	struct:DXUTComboBoxItem
bVisible	.\MeshEntity.h	/^    bool bVisible, bRequestVisible;$/;"	m	struct:SMeshEntity
bVisualCreated	.\GameEngine.h	/^        bool bCollidable, bVisualCreated;$/;"	m	struct:CGameEngine::SShortLifeEntity
bWorldSpace	.\PolySprite.h	/^        bool bWorldSpace, bUsingVerts;$/;"	m	struct:CPolySprite::DrawInfo
bgColor	.\ScrollingWindow.h	/^	DWORD				bgColor;		\/\/ Background color$/;"	m	class:CScrollingWindow
binormal	.\Sphere.h	/^        D3DXVECTOR3 binormal;$/;"	m	struct:CSphere::SphereTanBinVert
bl	.\QuadTree.h	/^        QTNode *tl, *tr, *bl, *br; \/\/! four children        $/;"	m	struct:CQuadTree::QTNode
br	.\QuadTree.h	/^        QTNode *tl, *tr, *bl, *br; \/\/! four children        $/;"	m	struct:CQuadTree::QTNode
buttonIndex	.\Button.h	/^	UCHAR					buttonIndex;	\/\/ Index of the Command this Button performs$/;"	m	class:CButton
buttons	.\Menu.h	/^	vector<CButtonPtr>		buttons;		\/\/ Vector of buttons$/;"	m	class:CMenu
c	.\GameTables.h	/^        UCHAR c;$/;"	m	struct:GameTable::WordCharPair
cCurAnimRequest	.\GameEngine.h	/^        UCHAR cCurAnimRequest; $/;"	m	struct:CGameEngine::SAnimRequest
cLastAnimation	.\GameEngine.h	/^		UCHAR cLastAnimation;$/;"	m	struct:CGameEngine::SPlayer
cLastAnimation	.\GameEngine.h	/^        UCHAR cLastAnimation;$/;"	m	struct:CGameEngine::SPlayerNetworkUpdate
cPlayerCommand	.\GameEngine.h	/^        UCHAR cPlayerCommand;$/;"	m	struct:CGameEngine::SPlayerCmdHistory
cSpaceIdx	.\GameEngine.h	/^        char cSpaceIdx;    \/\/! index into the SPlayerSpace that defines this player's movement. see struct below (SPlayersSpaces).$/;"	m	struct:CGameEngine::SPlayer
caps	.\Common\DXUTmisc.h	/^    XINPUT_CAPABILITIES caps;$/;"	m	struct:DXUT_GAMEPAD
cbSize	.\Common\DXUTmisc.h	/^        DWORD   cbSize;$/;"	m	struct:tagMONITORINFO
charID	.\GameEngine.h	/^        int charID, physicsID, networkID; \/\/ charID unique ID in graphics world.$/;"	m	struct:CGameEngine::SPlayer
charType	.\GameEngine.h	/^        int charType;$/;"	m	struct:CGameEngine::SPlayer
cmd	.\GameTables.h	/^        UCHAR cmd;$/;"	m	struct:GameTable::NameIndexPair
color	.\CloudBatch.h	/^        UINT color;$/;"	m	struct:CCloud::SSubCloud
color	.\Common\DXUTgui.cpp	/^    D3DCOLOR color;$/;"	m	struct:DXUT_SCREEN_VERTEX	file:
color	.\Common\DXUTgui.cpp	/^    D3DCOLOR color;$/;"	m	struct:DXUT_SCREEN_VERTEX_UNTEX	file:
color	.\FXDecl.h	/^    ULONG color;$/;"	m	struct:BoxVertTexColor
color	.\GUIObject.h	/^    unsigned long color;        \/\/ The vertex color$/;"	m	struct:SVertex
color	.\PolySprite.h	/^        UINT color;$/;"	m	struct:CPolySprite::DrawInfo
color	.\PolySprite.h	/^        ULONG color;$/;"	m	struct:CPolySprite::PolySpriteVertex
color	.\SunStates.h	/^    D3DXVECTOR4 color; \/\/ final color$/;"	m	struct:SSunMorphState
corners	.\MeshEntity.h	/^    D3DXVECTOR3 corners[8];$/;"	m	struct:SMeshEntity
corners	.\Pillar.h	/^    D3DXVECTOR3 corners[8]; \/\/! AABB corners to test for visibility. Done ala QTNode.$/;"	m	class:CPillar
corners	.\QuadTree.h	/^        D3DXVECTOR3 corners[8]; \/\/! store corners for faster tree traversal$/;"	m	struct:CQuadTree::QTNode
curveHeight	.\Pillar.h	/^		UINT curveStacks, curveHeight;$/;"	m	struct:CPillar::SPillarInfo
curveStacks	.\Pillar.h	/^		UINT curveStacks, curveHeight;$/;"	m	struct:CPillar::SPillarInfo
cylinderRadius	.\Pillar.h	/^		float cylinderRadius, splineRadius, Length;$/;"	m	struct:CPillar::SPillarInfo
depthStencilFormatList	.\Common\DXUTenum.h	/^    CGrowableArray<D3DFORMAT> depthStencilFormatList; \/\/ List of D3DFORMATs$/;"	m	struct:CD3DEnumDeviceSettingsCombo
depthhalf	.\CloudBatch.h	/^    float heighthalf, widthhalf, depthhalf; \/\/ y x z$/;"	m	struct:SCloudInfo
deviceInfoList	.\Common\DXUTenum.h	/^    CGrowableArray<CD3DEnumDeviceInfo*> deviceInfoList; \/\/ Array of CD3DEnumDeviceInfo* with unique supported DeviceTypes$/;"	m	class:CD3DEnumAdapterInfo
deviceSettingsComboList	.\Common\DXUTenum.h	/^    CGrowableArray<CD3DEnumDeviceSettingsCombo*> deviceSettingsComboList; $/;"	m	class:CD3DEnumDeviceInfo
diff0	.\FXDecl.h	/^    float diff0, diff1; \/\/ Difference between LOD$/;"	m	struct:TERRAINVERT
diff1	.\FXDecl.h	/^    float diff0, diff1; \/\/ Difference between LOD$/;"	m	struct:TERRAINVERT
displace	.\MeshEntity.h	/^    D3DXVECTOR3 displace;$/;"	m	struct:SMeshEntity
displayModeList	.\Common\DXUTenum.h	/^    CGrowableArray<D3DDISPLAYMODE> displayModeList; \/\/ Array of supported D3DDISPLAYMODEs$/;"	m	class:CD3DEnumAdapterInfo
distancex	.\QuadTree.h	/^        float distancex, distancez; \/\/! Absolute Distance from camera when last visible. Updated in DetermineDistanceLOD.       $/;"	m	struct:CQuadTree::QTNode
distancez	.\QuadTree.h	/^        float distancex, distancez; \/\/! Absolute Distance from camera when last visible. Updated in DetermineDistanceLOD.       $/;"	m	struct:CQuadTree::QTNode
dwCount	.\Common\DXUTgui.h	/^        DWORD dwCount;       \/\/ Number of valid entries in the candidate list$/;"	m	struct:CDXUTIMEEditBox::CCandList
dwFlags	.\Common\DXUTmisc.h	/^        DWORD   dwFlags;$/;"	m	struct:tagMONITORINFO
dwFlags	.\Common\DXUTmisc.h	/^    DWORD dwFlags;$/;"	m	struct:DXUTCache_Effect
dwHeight	.\Common\DXUTgui.h	/^    DWORD dwHeight;$/;"	m	struct:DXUTTextureNode
dwPageSize	.\Common\DXUTgui.h	/^        DWORD dwPageSize;$/;"	m	struct:CDXUTIMEEditBox::CCandList
dwSelection	.\Common\DXUTgui.h	/^        DWORD dwSelection;   \/\/ Currently selected candidate entry relative to page top$/;"	m	struct:CDXUTIMEEditBox::CCandList
dwTextFormat	.\Common\DXUTgui.h	/^    DWORD dwTextFormat;     \/\/ The format argument to DrawText $/;"	m	class:CDXUTElement
dwVertexListCount	.\Common\DXUTmisc.h	/^        DWORD    dwVertexListCount;$/;"	m	struct:CDXUTLineManager::LINE_NODE
dwWidth	.\Common\DXUTgui.h	/^    DWORD dwWidth;$/;"	m	struct:DXUTTextureNode
eAdapterFormat	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eAdapterFormat;$/;"	m	struct:DXUTMatchOptions
eAdapterOrdinal	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eAdapterOrdinal;$/;"	m	struct:DXUTMatchOptions
eBackBufferCount	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eBackBufferCount;$/;"	m	struct:DXUTMatchOptions
eBackBufferFormat	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eBackBufferFormat;$/;"	m	struct:DXUTMatchOptions
eDepthFormat	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eDepthFormat;$/;"	m	struct:DXUTMatchOptions
eDeviceType	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eDeviceType;$/;"	m	struct:DXUTMatchOptions
eMultiSample	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eMultiSample;$/;"	m	struct:DXUTMatchOptions
ePresentFlags	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE ePresentFlags;$/;"	m	struct:DXUTMatchOptions
ePresentInterval	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE ePresentInterval;$/;"	m	struct:DXUTMatchOptions
eRefreshRate	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eRefreshRate;$/;"	m	struct:DXUTMatchOptions
eResolution	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eResolution;$/;"	m	struct:DXUTMatchOptions
eStencilFormat	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eStencilFormat;$/;"	m	struct:DXUTMatchOptions
eSunState	.\GameEngine.h	/^        GameTable::SunStates eSunState;$/;"	m	struct:CGameEngine::SSunStateRequest
eSwapEffect	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eSwapEffect;$/;"	m	struct:DXUTMatchOptions
eVertexProcessing	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eVertexProcessing;$/;"	m	struct:DXUTMatchOptions
eWindowed	.\Common\DXUT.h	/^    DXUT_MATCH_TYPE eWindowed;$/;"	m	struct:DXUTMatchOptions
east	.\QuadTree.h	/^		QTNode *north, *south, *east, *west; \/\/! Pointer to neighbors. TODO: Remove since not needed for strips and not made properly.$/;"	m	struct:CQuadTree::QTNode
effects	.\PostProcEffects.h	/^    vector<ID3DXEffect*>    effects;$/;"	m	class:PostProcEffects
endX	.\AnimOb.h	/^	int endX, endY;$/;"	m	class:AnimOb
endY	.\AnimOb.h	/^	int endX, endY;$/;"	m	class:AnimOb
fAttackDelay	.\GameEngine.h	/^        float fAttackDelay; \/\/! grogginess\/delay after attack$/;"	m	struct:CGameEngine::SPlayer
fCountdown	.\Common\DXUT.cpp	/^    float fCountdown;$/;"	m	struct:DXUT_TIMER	file:
fCurrCharge	.\GameEngine.h	/^		float fCurrCharge, fMaxCharge;$/;"	m	struct:CGameEngine::SPlayer
fCurrDamage	.\GameEngine.h	/^		float fCurrDamage;$/;"	m	struct:CGameEngine::SPlayer
fCurrentClockTime	.\GameEngine.h	/^        float fCurrentClockTime;$/;"	m	struct:CGameEngine::SEnvironment
fData	.\GameEngine.h	/^        float fData;$/;"	m	struct:CGameEngine::SShortLifeEntity
fDistSq	.\Bubbles.h	/^        float fRadius, fRadiusSq, fDistSq;$/;"	m	struct:CBubbles::SBubble
fElapsedTime	.\SpriteAnimMgr.h	/^        float fElapsedTime;$/;"	m	struct:CSpriteAnimMgr::SAnimStill
fGroundOffset	.\GameEngine.h	/^		float fGroundOffset;$/;"	m	struct:CGameEngine::SPlayer
fHorTile	.\World.h	/^        float fHorTile, fVerTile;$/;"	m	struct:CWorld::SBubbleInfo
fHorizInterv	.\SpriteAnimMgr.h	/^        float fHorizInterv, fVertInterv;$/;"	m	struct:CSpriteAnimMgr::STexture
fLightTimeOffset	.\Sky.h	/^		float orbit_speed, angle, fLightTimeOffset, time_offset, angle_offset, alpha_multiplier;$/;"	m	struct:CSky::SBigStar
fLivableSphereRadius	.\GameEngine.h	/^		float fLivableSphereRadius;$/;"	m	struct:CGameEngine::SEnvironment
fLookAtVelMagnitude	.\World.h	/^        float fRelVelMag, fWorldVelMag, fLookAtVelMagnitude;        $/;"	m	struct:CWorld::SCameraMovement
fMaxCharge	.\GameEngine.h	/^		float fCurrCharge, fMaxCharge;$/;"	m	struct:CGameEngine::SPlayer
fMorphTime	.\SunStates.h	/^    float fMorphTime; \/\/! speed of morph. Independent to speed of Clock.$/;"	m	struct:SSunMorphState
fNewLightDirByTimeOfDay	.\GameEngine.h	/^        float fNewLightDirByTimeOfDay;  \/\/! 0 == 24 is dawn.$/;"	m	struct:CGameEngine::SSunStateRequest
fNum	.\Pillar.h	/^	int fNum;$/;"	m	class:CPillar
fPeriodTime	.\GameEngine.h	/^        float fPeriodTime; $/;"	m	struct:CGameEngine::SAnimRequest
fRadius	.\Bubbles.h	/^        float fRadius, fRadiusSq, fDistSq;$/;"	m	struct:CBubbles::SBubble
fRadius	.\GameEngine.h	/^        float fTimeToLive, fRadius;$/;"	m	struct:CGameEngine::SShortLifeEntity
fRadius	.\World.h	/^        float fRadius;$/;"	m	struct:CWorld::SBubbleInfo
fRadiusSq	.\Bubbles.h	/^        float fRadius, fRadiusSq, fDistSq;$/;"	m	struct:CBubbles::SBubble
fRelVelMag	.\World.h	/^        float fRelVelMag, fWorldVelMag, fLookAtVelMagnitude;        $/;"	m	struct:CWorld::SCameraMovement
fScale	.\Foliage.h	/^    float fScale;$/;"	m	struct:SGrass
fScaleRatio	.\Common\DXUTmisc.h	/^        float    fScaleRatio;$/;"	m	struct:CDXUTLineManager::LINE_NODE
fSkyRadius	.\World.h	/^        float fSkyRadius;$/;"	m	struct:CWorld::SCloudSkyInfo
fSpeed	.\World.h	/^        float fSpeed;        $/;"	m	struct:CWorld::SSpriteAnimationEntry
fTextureTile	.\QuadTree.h	/^        float fTextureTile;$/;"	m	struct:CQuadTree::SQuadTreeInfo
fThumbLX	.\Common\DXUTmisc.h	/^    float   fThumbLX;$/;"	m	struct:DXUT_GAMEPAD
fThumbLY	.\Common\DXUTmisc.h	/^    float   fThumbLY;$/;"	m	struct:DXUT_GAMEPAD
fThumbRX	.\Common\DXUTmisc.h	/^    float   fThumbRX;$/;"	m	struct:DXUT_GAMEPAD
fThumbRY	.\Common\DXUTmisc.h	/^    float   fThumbRY;$/;"	m	struct:DXUT_GAMEPAD
fTiles	.\Bubbles.h	/^        float fTiles[2];$/;"	m	struct:CBubbles::SBubble
fTimeToLive	.\GameEngine.h	/^        float fTimeToLive, fRadius;$/;"	m	struct:CGameEngine::SShortLifeEntity
fTimeoutInSecs	.\Common\DXUT.cpp	/^    float fTimeoutInSecs;$/;"	m	struct:DXUT_TIMER	file:
fUncontrollableTimeLeft	.\GameEngine.h	/^		float fUncontrollableTimeLeft;$/;"	m	struct:CGameEngine::SPlayer
fVerTile	.\World.h	/^        float fHorTile, fVerTile;$/;"	m	struct:CWorld::SBubbleInfo
fVertInterv	.\SpriteAnimMgr.h	/^        float fHorizInterv, fVertInterv;$/;"	m	struct:CSpriteAnimMgr::STexture
fWidth	.\Common\DXUTmisc.h	/^        float    fWidth;$/;"	m	struct:CDXUTLineManager::LINE_NODE
fWorldVelMag	.\World.h	/^        float fRelVelMag, fWorldVelMag, fLookAtVelMagnitude;        $/;"	m	struct:CWorld::SCameraMovement
findCircleCenter	.\Pillar.cpp	/^void CPillar::findCircleCenter(UINT slice)$/;"	f	class:CPillar
frect	.\SpriteAnimMgr.h	/^        RECTF frect;$/;"	m	struct:CSpriteAnimMgr::SAnimStill
g	.\GUIObject.h	/^	int r, g, b;$/;"	m	struct:SColor
g_DXUTArrowMeshSrcData	.\Common\DXUTRes.cpp	/^static const DWORD g_DXUTArrowMeshSrcData[] =$/;"	v	file:
g_DXUTArrowMeshSrcDataSizeInBytes	.\Common\DXUTRes.cpp	/^static const UINT g_DXUTArrowMeshSrcDataSizeInBytes = 2193;$/;"	v	file:
g_DXUTGUITextureSrcData	.\Common\DXUTRes.cpp	/^static const DWORD g_DXUTGUITextureSrcData[] =$/;"	v	file:
g_DXUTGUITextureSrcDataSizeInBytes	.\Common\DXUTRes.cpp	/^static const UINT g_DXUTGUITextureSrcDataSizeInBytes = 262272;$/;"	v	file:
g_DeviceSettings	.\Common\DXUTSettingsDlg.cpp	/^DXUTDeviceSettings g_DeviceSettings;$/;"	v
g_HUD	.\GPUTerrainProject.cpp	/^CDXUTDialog             g_HUD;                   \/\/! dialog for standard controls$/;"	v
g_SettingsDlg	.\GPUTerrainProject.cpp	/^CD3DSettingsDlg         g_SettingsDlg;          \/\/! Device settings dialog$/;"	v
g_UI	.\GPUTerrainProject.cpp	/^CDXUTDialog             g_UI;              \/\/! dialog for sample specific controls$/;"	v
g_bThreadSafe	.\Common\DXUT.cpp	/^bool g_bThreadSafe = true;$/;"	v
g_cs	.\Common\DXUT.cpp	/^CRITICAL_SECTION g_cs;  $/;"	v
g_pGameRoot	.\GPUTerrainProject.cpp	/^CGameRoot*              g_pGameRoot;        \/\/! da game!$/;"	v
geomID	.\MeshEntity.h	/^    int geomID;$/;"	m	struct:SMeshEntity
geomID	.\World.h	/^        int geomID;$/;"	m	struct:CWorld::SStaticEntityInfo
getCircleXZCoord	.\Pillar.cpp	/^void CPillar::getCircleXZCoord(float &x, float &z, UINT slice)$/;"	f	class:CPillar
getColor	.\PostProcEffects.h	/^    float getColor(void) {return m_color;};$/;"	f	class:PostProcEffects
getSplineCoordsAndNormals	.\Pillar.cpp	/^void CPillar::getSplineCoordsAndNormals(float &x, float &y, float &z, float &nx, float &ny, float &nz, UINT stack, UINT slice)$/;"	f	class:CPillar
h	.\Common\DXUTgui.cpp	/^    float x, y, z, h;$/;"	m	struct:DXUT_SCREEN_VERTEX	file:
h	.\Common\DXUTgui.cpp	/^    float x, y, z, h;$/;"	m	struct:DXUT_SCREEN_VERTEX_UNTEX	file:
hResourceModule	.\Common\DXUTgui.h	/^    HMODULE hResourceModule;$/;"	m	struct:DXUTTextureNode
hSrcModule	.\Common\DXUTmisc.h	/^    HMODULE hSrcModule;$/;"	m	struct:DXUTCache_Effect
hSrcModule	.\Common\DXUTmisc.h	/^    HMODULE hSrcModule;$/;"	m	struct:DXUTCache_Texture
heighthalf	.\CloudBatch.h	/^    float heighthalf, widthhalf, depthhalf; \/\/ y x z$/;"	m	struct:SCloudInfo
hidden	.\ScrollingWindow.h	/^	bool				hidden;			$/;"	m	class:CScrollingWindow
horzSkirtOffset	.\QuadTree.h	/^		int horzSkirtOffset; \/\/offset for drawing horizontal skirt$/;"	m	struct:CQuadTree::Tile
iAttributeSW	.\XModelHeirarchy.h	/^    DWORD                iAttributeSW;     \/\/ used to denote the split between SW and HW if necessary for non-indexed skinning$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
iElement	.\Common\DXUTgui.h	/^    UINT iElement;$/;"	m	struct:DXUTElementHolder
iFont	.\Common\DXUTgui.h	/^    UINT iFont;             \/\/ Index of the font for this Element$/;"	m	class:CDXUTElement
iTexture	.\Common\DXUTgui.h	/^    UINT iTexture;          \/\/ Index of the texture for this Element $/;"	m	class:CDXUTElement
idxAnim	.\SpriteAnimMgr.h	/^        int idxRunning, idxAnim, idxStill;                $/;"	m	struct:CSpriteAnimMgr::SAnimStill
idxAnim	.\World.h	/^        int idxTex, idxAnim;$/;"	m	struct:CWorld::SSpriteAnimationEntry
idxRunning	.\SpriteAnimMgr.h	/^        int idxRunning, idxAnim, idxStill;                $/;"	m	struct:CSpriteAnimMgr::SAnimStill
idxStill	.\SpriteAnimMgr.h	/^        int idxRunning, idxAnim, idxStill;                $/;"	m	struct:CSpriteAnimMgr::SAnimStill
idxTex	.\World.h	/^        int idxTex, idxAnim;$/;"	m	struct:CWorld::SSpriteAnimationEntry
incCylLength	.\Pillar.cpp	/^void CPillar::incCylLength(float delta)$/;"	f	class:CPillar
incCylRadius	.\Pillar.cpp	/^void CPillar::incCylRadius(float delta)$/;"	f	class:CPillar
incCylStacks	.\Pillar.cpp	/^void CPillar::incCylStacks(int delta)$/;"	f	class:CPillar
incSlices	.\Pillar.cpp	/^void CPillar::incSlices(int delta)$/;"	f	class:CPillar
incSplineAngle	.\Pillar.cpp	/^void CPillar::incSplineAngle(float delta)$/;"	f	class:CPillar
incSplineHeight	.\Pillar.cpp	/^void CPillar::incSplineHeight(float delta)$/;"	f	class:CPillar
incSplineRadius	.\Pillar.cpp	/^void CPillar::incSplineRadius(float delta)$/;"	f	class:CPillar
incSplineStacks	.\Pillar.cpp	/^void CPillar::incSplineStacks(int delta)$/;"	f	class:CPillar
incTexWrap	.\Pillar.cpp	/^void CPillar::incTexWrap(int delta)$/;"	f	class:CPillar
initEffects	.\PostProcEffects.cpp	/^void PostProcEffects::initEffects( void )$/;"	f	class:PostProcEffects
initRTS	.\PostProcEffects.cpp	/^void PostProcEffects::initRTS( void )$/;"	f	class:PostProcEffects
initX	.\ScrollingWindow.h	/^	int					initX, initY;	\/\/ Initial screen X,Y coordinates of window's top left$/;"	m	class:CScrollingWindow
initY	.\ScrollingWindow.h	/^	int					initX, initY;	\/\/ Initial screen X,Y coordinates of window's top left$/;"	m	class:CScrollingWindow
inv_height	.\PostProcEffects.h	/^    float inv_width, inv_height;$/;"	m	class:PostProcEffects
inv_width	.\PostProcEffects.h	/^    float inv_width, inv_height;$/;"	m	class:PostProcEffects
isInteractive	.\Pillar.cpp	/^bool CPillar::isInteractive(void)$/;"	f	class:CPillar
kMergeTransitionTime	.\XModelHeirarchy.h	/^const float kMergeTransitionTime = 0.25f;$/;"	v
length	.\QuadTree.h	/^        int midx, midz, length, maxy, miny, midy;    \/\/! mid point and length of quad$/;"	m	struct:CQuadTree::QTNode
lightDir	.\Sky.h	/^        D3DXVECTOR3 start_pos, pos, lightPos, lightDir;$/;"	m	struct:CSky::SBigStar
lightPos	.\Sky.h	/^        D3DXVECTOR3 start_pos, pos, lightPos, lightDir;$/;"	m	struct:CSky::SBigStar
mCameraTarget	.\GameEngine.h	/^        D3DXMATRIX mCameraTarget;   \/\/ for normal movement, just set = to mSpace.$/;"	m	struct:CGameEngine::SCameraControl
mScale	.\Sky.h	/^        D3DXMATRIX mWorld, mScale;$/;"	m	struct:CSky::SBigStar
mSpace	.\GameEngine.h	/^		D3DXMATRIX mSpace;	\/\/! this defines the players world space. His forward(run), up and right. 4th vector is position.$/;"	m	struct:CGameEngine::SPlayer
mSpaces	.\GameEngine.h	/^        D3DXMATRIX mSpaces[4];$/;"	m	struct:CGameEngine::SPlayerSpaces
mTarget	.\World.h	/^        D3DXMATRIX mTarget; \/\/! Target destination \/ orientation.$/;"	m	struct:CWorld::SCameraMovement
mWorld	.\Bubbles.h	/^        D3DXMATRIX mWorld;$/;"	m	struct:CBubbles::SBubble
mWorld	.\CloudBatch.h	/^        D3DXMATRIX mWorld;  \/\/ SRT transformation for sprite in the world$/;"	m	struct:CCloud::SSubCloud
mWorld	.\Foliage.h	/^    D3DXMATRIX mWorld;$/;"	m	struct:SGrass
mWorld	.\GameEngine.h	/^        D3DXMATRIX mWorld;  \/\/! this defines the player's world rendering matrix. Specifically, the position and direction facing.        $/;"	m	struct:CGameEngine::SPlayer
mWorld	.\GameEngine.h	/^        D3DXMATRIX mWorld;$/;"	m	struct:CGameEngine::SShortLifeEntity
mWorld	.\MeshEntity.h	/^    D3DXMATRIX mWorld;        $/;"	m	struct:SMeshEntity
mWorld	.\Sky.h	/^        D3DXMATRIX mWorld, mScale;$/;"	m	struct:CSky::SBigStar
mWorld	.\World.h	/^        D3DXMATRIX mWorld;$/;"	m	struct:CWorld::SRunningSpriteAnimation
mWorld	.\World.h	/^        D3DXMATRIX mWorld;$/;"	m	struct:CWorld::SSpriteAnimationEntry
m_Active	.\Common\DXUT.cpp	/^        bool  m_Active;                     \/\/ if true, then the app is the active top level window$/;"	m	struct:DXUTState::STATE	file:
m_AdapterInfoList	.\Common\DXUTenum.h	/^    CGrowableArray<CD3DEnumAdapterInfo*> m_AdapterInfoList;  $/;"	m	class:CD3DEnumeration
m_AdapterMonitor	.\Common\DXUT.cpp	/^        HMONITOR m_AdapterMonitor;          \/\/ the monitor of the adapter $/;"	m	struct:DXUTState::STATE	file:
m_AllowShortcutKeys	.\Common\DXUT.cpp	/^        bool  m_AllowShortcutKeys;          \/\/ if true, then shortcut keys are currently disabled (Windows key, etc)$/;"	m	struct:DXUTState::STATE	file:
m_AllowShortcutKeysWhenFullscreen	.\Common\DXUT.cpp	/^        bool  m_AllowShortcutKeysWhenFullscreen; \/\/ if true, when fullscreen enable shortcut keys (Windows keys, StickyKeys shortcut, ToggleKeys shortcut, FilterKeys shortcut) $/;"	m	struct:DXUTState::STATE	file:
m_AllowShortcutKeysWhenWindowed	.\Common\DXUT.cpp	/^        bool  m_AllowShortcutKeysWhenWindowed;   \/\/ if true, when windowed enable shortcut keys (Windows keys, StickyKeys shortcut, ToggleKeys shortcut, FilterKeys shortcut) $/;"	m	struct:DXUTState::STATE	file:
m_AlphaTexture	.\ITerrain.h	/^    LPDIRECT3DTEXTURE9              m_AlphaTexture;$/;"	m	class:ITerrain
m_Analysis	.\Common\DXUTgui.h	/^    SCRIPT_STRING_ANALYSIS m_Analysis;  \/\/ Analysis for the current string$/;"	m	class:CUniBuffer
m_ArcBall	.\Common\DXUTmisc.h	/^    CD3DArcBall    m_ArcBall;$/;"	m	class:CDXUTDirectionWidget
m_Arrow	.\Common\DXUTgui.h	/^    ARROWSTATE m_Arrow; \/\/ State of the arrows$/;"	m	class:CDXUTScrollBar
m_AutoChangeAdapter	.\Common\DXUT.cpp	/^        bool  m_AutoChangeAdapter;          \/\/ if true, then the adapter will automatically change if the window is different monitor$/;"	m	struct:DXUTState::STATE	file:
m_Automation	.\Common\DXUT.cpp	/^        bool  m_Automation;                 \/\/ if true, automation is enabled$/;"	m	struct:DXUTState::STATE	file:
m_BLOOMFLAGCOLOR	.\World.h	/^    const gdef::COLOR                   m_BLOOMFLAGCOLOR;$/;"	m	class:CWorld
m_BackBufferSurfaceDesc	.\Common\DXUT.cpp	/^        D3DSURFACE_DESC      m_BackBufferSurfaceDesc;   \/\/ back buffer surface description$/;"	m	struct:DXUTState::STATE	file:
m_BatchID	.\CloudBatch.h	/^    UINT m_BatchID; \/\/! Which CCloudBatch this cloud belongs to.$/;"	m	class:CCloud
m_BlendTexture	.\ITerrain.h	/^    LPDIRECT3DTEXTURE9              m_BlendTexture;$/;"	m	class:ITerrain
m_BlueTexture	.\ITerrain.h	/^    LPDIRECT3DTEXTURE9              m_BlueTexture;$/;"	m	class:ITerrain
m_Buffer	.\Common\DXUTgui.h	/^    CUniBuffer m_Buffer;     \/\/ Buffer to hold text$/;"	m	class:CDXUTEditBox
m_CallDefWindowProc	.\Common\DXUT.cpp	/^        bool  m_CallDefWindowProc;          \/\/ if true, DXUTStaticWndProc will call DefWindowProc for unhandled messages. Applications rendering to a dialog may need to set this to false.$/;"	m	struct:DXUTState::STATE	file:
m_Camera	.\World.h	/^    CFirstPersonCamera                  m_Camera;$/;"	m	class:CWorld
m_CameraMovement	.\World.h	/^    SCameraMovement                     m_CameraMovement;$/;"	m	class:CWorld
m_CameraPosHandle	.\ModelInstance.h	/^                                m_CameraPosHandle,$/;"	m	class:CModelInstance
m_CandidateColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CandidateColor;      \/\/ Candidate string color$/;"	m	class:CDXUTIMEEditBox
m_CandidateSelBkColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CandidateSelBkColor; \/\/ Selected candidate background color$/;"	m	class:CDXUTIMEEditBox
m_CandidateSelColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CandidateSelColor;   \/\/ Selected candidate string color$/;"	m	class:CDXUTIMEEditBox
m_CandidateWinColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CandidateWinColor;   \/\/ Candidate window color$/;"	m	class:CDXUTIMEEditBox
m_CapElement	.\Common\DXUTgui.h	/^    CDXUTElement m_CapElement;  \/\/ Element for the caption$/;"	m	class:CDXUTDialog
m_Caps	.\Common\DXUT.cpp	/^        D3DCAPS9             m_Caps;                    \/\/ D3D caps for current device$/;"	m	struct:DXUTState::STATE	file:
m_CaretColor	.\Common\DXUTgui.h	/^    D3DCOLOR m_CaretColor;   \/\/ Caret color$/;"	m	class:CDXUTEditBox
m_CellSpacing	.\ITerrain.h	/^    int m_CellSpacing;$/;"	m	class:ITerrain
m_Center	.\IImpostorable.h	/^    D3DXVECTOR3 m_vecPrevWorldUp, m_vecPrevLookAt, m_Center;$/;"	m	class:IImpostorable
m_ClipCursorWhenFullScreen	.\Common\DXUT.cpp	/^        bool  m_ClipCursorWhenFullScreen;   \/\/ if true, then DXUT will keep the cursor from going outside the window when full screen$/;"	m	struct:DXUTState::STATE	file:
m_Clock	.\Sky.h	/^    SClock                          m_Clock;$/;"	m	class:CSky
m_CloudBatchID	.\CloudBatch.h	/^    UINT m_CloudBatchID; \/\/ Unique ID that marks the CClouds created with which batch it belongs to. Helpful for rendering.$/;"	m	class:CCloudBatch
m_CloudInfo	.\CloudBatch.h	/^    SCloudInfo m_CloudInfo; $/;"	m	class:CCloud
m_CloudSkyInfo	.\World.h	/^    SCloudSkyInfo                       m_CloudSkyInfo; \/\/! Only one cloudsky Info per world.$/;"	m	class:CWorld
m_ClusterTranslationHandle	.\Foliage.h	/^                                    m_ClusterTranslationHandle;$/;"	m	class:CFoliage
m_CompCaretColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CompCaretColor;      \/\/ Composition string caret color$/;"	m	class:CDXUTIMEEditBox
m_CompColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CompColor;           \/\/ Composition string color$/;"	m	class:CDXUTIMEEditBox
m_CompTargetBkColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CompTargetBkColor;   \/\/ Composition string target converted background$/;"	m	class:CDXUTIMEEditBox
m_CompTargetColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CompTargetColor;     \/\/ Composition string target converted color$/;"	m	class:CDXUTIMEEditBox
m_CompTargetNonBkColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CompTargetNonBkColor;\/\/ Composition string target non-converted background$/;"	m	class:CDXUTIMEEditBox
m_CompTargetNonColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CompTargetNonColor;  \/\/ Composition string target non-converted color$/;"	m	class:CDXUTIMEEditBox
m_CompWinColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_CompWinColor;        \/\/ Composition string window color$/;"	m	class:CDXUTIMEEditBox
m_ConstantFrameTime	.\Common\DXUT.cpp	/^        bool  m_ConstantFrameTime;          \/\/ if true, then elapsed frame time will always be 0.05f seconds which is good for debugging or automated capture$/;"	m	struct:DXUTState::STATE	file:
m_Controls	.\Common\DXUTgui.h	/^    CGrowableArray< CDXUTControl* > m_Controls;$/;"	m	class:CDXUTDialog
m_CurrentDeviceSettings	.\Common\DXUT.cpp	/^        DXUTDeviceSettings*  m_CurrentDeviceSettings;   \/\/ current device settings$/;"	m	struct:DXUTState::STATE	file:
m_CurrentFrameNumber	.\Common\DXUT.cpp	/^        int   m_CurrentFrameNumber;         \/\/ the current frame number$/;"	m	struct:DXUTState::STATE	file:
m_CurrentSunStates	.\Sky.h	/^    SSunMorphState                  m_CurrentSunStates[2];$/;"	m	class:CSky
m_D3D	.\Common\DXUT.cpp	/^        IDirect3D9*          m_D3D;                     \/\/ the main D3D object$/;"	m	struct:DXUTState::STATE	file:
m_D3DDevice	.\Common\DXUT.cpp	/^        IDirect3DDevice9*    m_D3DDevice;               \/\/ the D3D rendering device$/;"	m	struct:DXUTState::STATE	file:
m_D3DEnumeration	.\Common\DXUT.cpp	/^        CD3DEnumeration*     m_D3DEnumeration;          \/\/ CD3DEnumeration object$/;"	m	struct:DXUTState::STATE	file:
m_DXUTInitCalled	.\Common\DXUT.cpp	/^        bool  m_DXUTInitCalled;             \/\/ if true, then DXUTInit() was called$/;"	m	struct:DXUTState::STATE	file:
m_DXUTInited	.\Common\DXUT.cpp	/^        bool  m_DXUTInited;                 \/\/ if true, then DXUTInit() has succeeded$/;"	m	struct:DXUTState::STATE	file:
m_DefaultElements	.\Common\DXUTgui.h	/^    CGrowableArray< DXUTElementHolder* > m_DefaultElements;$/;"	m	class:CDXUTDialog
m_DepthStecilPossibleList	.\Common\DXUTenum.h	/^    CGrowableArray<D3DFORMAT> m_DepthStecilPossibleList;$/;"	m	class:CD3DEnumeration
m_DeviceCreateCalled	.\Common\DXUT.cpp	/^        bool  m_DeviceCreateCalled;         \/\/ if true, then DXUTCreateDevice*() or DXUTSetDevice() was called$/;"	m	struct:DXUTState::STATE	file:
m_DeviceCreated	.\Common\DXUT.cpp	/^        bool  m_DeviceCreated;              \/\/ if true, then DXUTCreateDevice*() or DXUTSetDevice() has succeeded$/;"	m	struct:DXUTState::STATE	file:
m_DeviceCreatedFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKDEVICECREATED         m_DeviceCreatedFunc;        \/\/ device created callback$/;"	m	struct:DXUTState::STATE	file:
m_DeviceCreatedFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_DeviceCreatedFuncUserContext;        \/\/ user context for device created callback$/;"	m	struct:DXUTState::STATE	file:
m_DeviceCreatedUserContext	.\Common\DXUT.cpp	/^        void*                               m_DeviceCreatedUserContext;            \/\/ user context for device created callback$/;"	m	struct:DXUTState::STATE	file:
m_DeviceDestroyedFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKDEVICEDESTROYED       m_DeviceDestroyedFunc;      \/\/ device destroyed callback$/;"	m	struct:DXUTState::STATE	file:
m_DeviceDestroyedFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_DeviceDestroyedFuncUserContext;      \/\/ user context for device destroyed callback$/;"	m	struct:DXUTState::STATE	file:
m_DeviceLost	.\Common\DXUT.cpp	/^        bool  m_DeviceLost;                 \/\/ if true, then the device is lost and needs to be reset$/;"	m	struct:DXUTState::STATE	file:
m_DeviceLostFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKDEVICELOST            m_DeviceLostFunc;           \/\/ device lost callback$/;"	m	struct:DXUTState::STATE	file:
m_DeviceLostFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_DeviceLostFuncUserContext;           \/\/ user context for device lost callback$/;"	m	struct:DXUTState::STATE	file:
m_DeviceObjectsCreated	.\Common\DXUT.cpp	/^        bool  m_DeviceObjectsCreated;       \/\/ if true, then DeviceCreated callback has been called (if non-NULL)$/;"	m	struct:DXUTState::STATE	file:
m_DeviceObjectsReset	.\Common\DXUT.cpp	/^        bool  m_DeviceObjectsReset;         \/\/ if true, then DeviceReset callback has been called (if non-NULL)$/;"	m	struct:DXUTState::STATE	file:
m_DeviceResetFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKDEVICERESET           m_DeviceResetFunc;          \/\/ device reset callback$/;"	m	struct:DXUTState::STATE	file:
m_DeviceResetFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_DeviceResetFuncUserContext;          \/\/ user context for device reset callback$/;"	m	struct:DXUTState::STATE	file:
m_DeviceStats	.\Common\DXUT.cpp	/^        WCHAR                        m_DeviceStats[256];                \/\/ device stats (description, device type, etc)$/;"	m	struct:DXUTState::STATE	file:
m_Dialog	.\Common\DXUTSettingsDlg.h	/^    CDXUTDialog m_Dialog;$/;"	m	class:CD3DSettingsDlg
m_Dialogs	.\Common\DXUTgui.h	/^    CGrowableArray< CDXUTDialog* > m_Dialogs;            \/\/ Dialogs registered$/;"	m	class:CDXUTDialogResourceManager
m_DiffMap	.\ITerrain.h	/^	float *m_DiffMap[2];$/;"	m	class:ITerrain
m_EdgeColorHandle	.\ModelInstance.h	/^                                m_EdgeColorHandle,$/;"	m	class:CModelInstance
m_EffectCache	.\Common\DXUTmisc.h	/^    CGrowableArray< DXUTCache_Effect > m_EffectCache;$/;"	m	class:CDXUTResourceCache
m_ElapsedTime	.\Common\DXUT.cpp	/^        float m_ElapsedTime;                \/\/ time elapsed since last frame$/;"	m	struct:DXUTState::STATE	file:
m_Elements	.\Common\DXUTgui.h	/^    CGrowableArray< CDXUTElement* > m_Elements;  \/\/ All display elements$/;"	m	class:CDXUTControl
m_Environment	.\GameEngine.h	/^    SEnvironment                        m_Environment;$/;"	m	class:CGameEngine
m_ExitCode	.\Common\DXUT.cpp	/^        int   m_ExitCode;                   \/\/ the exit code to be returned to the command line$/;"	m	struct:DXUTState::STATE	file:
m_FPS	.\Common\DXUT.cpp	/^        float m_FPS;                        \/\/ frames per second$/;"	m	struct:DXUTState::STATE	file:
m_FPSStats	.\Common\DXUT.cpp	/^        WCHAR                        m_FPSStats[64];                    \/\/ fps stats$/;"	m	struct:DXUTState::STATE	file:
m_Flags	.\PolySprite.h	/^    UINT m_Flags;   $/;"	m	class:CPolySprite
m_FontCache	.\Common\DXUTgui.h	/^    CGrowableArray< DXUTFontNode* > m_FontCache;         \/\/ Shared fonts$/;"	m	class:CDXUTDialogResourceManager
m_FontCache	.\Common\DXUTmisc.h	/^    CGrowableArray< DXUTCache_Font > m_FontCache;$/;"	m	class:CDXUTResourceCache
m_Fonts	.\Common\DXUTgui.h	/^    CGrowableArray< int > m_Fonts;      \/\/ Index into m_FontCache;$/;"	m	class:CDXUTDialog
m_Format	.\Menu.h	/^	DWORD					m_Format;		\/\/ Button text format$/;"	m	class:CMenu
m_FrameMoveFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKFRAMEMOVE             m_FrameMoveFunc;            \/\/ frame move callback$/;"	m	struct:DXUTState::STATE	file:
m_FrameMoveFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_FrameMoveFuncUserContext;            \/\/ user context for frame move callback$/;"	m	struct:DXUTState::STATE	file:
m_FrameRenderFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKFRAMERENDER           m_FrameRenderFunc;          \/\/ frame render callback$/;"	m	struct:DXUTState::STATE	file:
m_FrameRenderFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_FrameRenderFuncUserContext;          \/\/ user context for frame render callback$/;"	m	struct:DXUTState::STATE	file:
m_FrameStats	.\Common\DXUT.cpp	/^        WCHAR                        m_FrameStats[256];                 \/\/ frame stats (fps, width, etc)$/;"	m	struct:DXUTState::STATE	file:
m_FrustumPlanes	.\QuadTree.h	/^    D3DXPLANE m_FrustumPlanes[6]; \/\/ Planes that make up the View Frustum$/;"	m	class:CQuadTree
m_FrustumPlanes	.\World.h	/^    D3DXPLANE                           m_FrustumPlanes[6]; \/\/ Planes that make up the View Frustum$/;"	m	class:CWorld
m_FullScreenBackBufferHeightAtModeChange	.\Common\DXUT.cpp	/^        UINT m_FullScreenBackBufferHeightAtModeChange; \/\/ back buffer size of fullscreen mode right before switching to windowed mode.  Used to restore to same resolution when toggling back to fullscreen$/;"	m	struct:DXUTState::STATE	file:
m_FullScreenBackBufferWidthAtModeChange	.\Common\DXUT.cpp	/^        UINT m_FullScreenBackBufferWidthAtModeChange;  \/\/ back buffer size of fullscreen mode right before switching to windowed mode.  Used to restore to same resolution when toggling back to fullscreen$/;"	m	struct:DXUTState::STATE	file:
m_GamePad	.\Common\DXUTmisc.h	/^    DXUT_GAMEPAD          m_GamePad[DXUT_MAX_CONTROLLERS]; \/\/ XInput controller state$/;"	m	class:CBaseCamera
m_GamePadLastActive	.\Common\DXUTmisc.h	/^    double                m_GamePadLastActive[DXUT_MAX_CONTROLLERS];$/;"	m	class:CBaseCamera
m_GrassTechnique	.\Foliage.h	/^    D3DXHANDLE                      m_GrassTechnique, $/;"	m	class:CFoliage
m_GrassTextureHandle	.\Foliage.h	/^                                    m_GrassTextureHandle,$/;"	m	class:CFoliage
m_GreenTexture	.\ITerrain.h	/^    LPDIRECT3DTEXTURE9              m_GreenTexture;$/;"	m	class:ITerrain
m_HInstance	.\Common\DXUT.cpp	/^        HINSTANCE m_HInstance;              \/\/ handle to the app instance$/;"	m	struct:DXUTState::STATE	file:
m_HWNDDeviceFullScreen	.\Common\DXUT.cpp	/^        HWND  m_HWNDDeviceFullScreen;       \/\/ the main app device window in fullscreen mode$/;"	m	struct:DXUTState::STATE	file:
m_HWNDDeviceWindowed	.\Common\DXUT.cpp	/^        HWND  m_HWNDDeviceWindowed;         \/\/ the main app device window in windowed mode$/;"	m	struct:DXUTState::STATE	file:
m_HWNDFocus	.\Common\DXUT.cpp	/^        HWND  m_HWNDFocus;                  \/\/ the main app focus window$/;"	m	struct:DXUTState::STATE	file:
m_HandleAltEnter	.\Common\DXUT.cpp	/^        bool  m_HandleAltEnter;             \/\/ if true, then DXUT will handle Alt-Enter$/;"	m	struct:DXUTState::STATE	file:
m_HandleDefaultHotkeys	.\Common\DXUT.cpp	/^        bool  m_HandleDefaultHotkeys;       \/\/ if true, then DXUT will handle some default hotkeys$/;"	m	struct:DXUTState::STATE	file:
m_Height	.\ITerrain.h	/^    UINT m_Width, m_Height;$/;"	m	class:ITerrain
m_Height	.\PostProcEffects.h	/^    UINT m_Width, m_Height;$/;"	m	class:PostProcEffects
m_Height	.\PostProcEffects.h	/^    UINT m_Width, m_Height;$/;"	m	class:ScreenAlignedQuad
m_Height	.\QuadTree.h	/^    UINT m_Width, m_Length, m_Height;$/;"	m	class:CQuadTree
m_HeightMap	.\ITerrain.h	/^    float *m_HeightMap;$/;"	m	class:ITerrain
m_HeightSpacing	.\ITerrain.h	/^    int m_HeightSpacing;    $/;"	m	class:ITerrain
m_ID	.\Common\DXUTgui.h	/^    int  m_ID;                 \/\/ ID number$/;"	m	class:CDXUTControl
m_ITWorldHandle	.\ITerrain.h	/^                                    m_ITWorldHandle,$/;"	m	class:ITerrain
m_IgnoreSizeChange	.\Common\DXUT.cpp	/^        bool  m_IgnoreSizeChange;           \/\/ if true, DXUT won't reset the device upon HWND size change$/;"	m	struct:DXUTState::STATE	file:
m_InSizeMove	.\Common\DXUT.cpp	/^        bool  m_InSizeMove;                 \/\/ if true, app is inside a WM_ENTERSIZEMOVE$/;"	m	struct:DXUTState::STATE	file:
m_Index	.\Common\DXUTgui.h	/^    UINT m_Index;              \/\/ Index within the control list$/;"	m	class:CDXUTControl
m_IndicatorBkColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_IndicatorBkColor;    \/\/ Indicator text background color$/;"	m	class:CDXUTIMEEditBox
m_IndicatorEngColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_IndicatorEngColor;   \/\/ Indicator text color for English$/;"	m	class:CDXUTIMEEditBox
m_IndicatorImeColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_IndicatorImeColor;   \/\/ Indicator text color for IME$/;"	m	class:CDXUTIMEEditBox
m_Info	.\QuadTree.h	/^    SQuadTreeInfo m_Info;$/;"	m	class:CQuadTree
m_InsideDeviceCallback	.\Common\DXUT.cpp	/^        bool  m_InsideDeviceCallback;       \/\/ if true, then the framework is inside an app device callback$/;"	m	struct:DXUTState::STATE	file:
m_InsideMainloop	.\Common\DXUT.cpp	/^        bool  m_InsideMainloop;             \/\/ if true, then the framework is inside the main loop$/;"	m	struct:DXUTState::STATE	file:
m_InvTransWorld	.\Sky.h	/^    D3DXMATRIX                      m_World, m_InvTransWorld;$/;"	m	class:CSky
m_InvTransWorldHandle	.\Sky.h	/^                                    m_InvTransWorldHandle,$/;"	m	class:CSky
m_IsDeviceAcceptableFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKISDEVICEACCEPTABLE    m_IsDeviceAcceptableFunc;   \/\/ is device acceptable callback$/;"	m	struct:DXUTState::STATE	file:
m_IsDeviceAcceptableFunc	.\Common\DXUTenum.h	/^    LPDXUTCALLBACKISDEVICEACCEPTABLE m_IsDeviceAcceptableFunc;$/;"	m	class:CD3DEnumeration
m_IsDeviceAcceptableFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_IsDeviceAcceptableFuncUserContext;   \/\/ user context for is device acceptable callback$/;"	m	struct:DXUTState::STATE	file:
m_Items	.\Common\DXUTgui.h	/^    CGrowableArray< DXUTComboBoxItem* > m_Items;$/;"	m	class:CDXUTComboBox
m_Items	.\Common\DXUTgui.h	/^    CGrowableArray< DXUTListBoxItem* > m_Items;$/;"	m	class:CDXUTListBox
m_KeyboardFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKKEYBOARD              m_KeyboardFunc;             \/\/ keyboard callback$/;"	m	struct:DXUTState::STATE	file:
m_KeyboardFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_KeyboardFuncUserContext;             \/\/ user context for keyboard callback$/;"	m	struct:DXUTState::STATE	file:
m_KeyboardHook	.\Common\DXUT.cpp	/^        HHOOK m_KeyboardHook;               \/\/ handle to keyboard hook$/;"	m	struct:DXUTState::STATE	file:
m_Keys	.\Common\DXUT.cpp	/^        bool                         m_Keys[256];                       \/\/ array of key state$/;"	m	struct:DXUTState::STATE	file:
m_LOD	.\ITerrain.h	/^    UINT m_LOD; \/\/! unfortunately, this value, because of our GeoMorphing, has become fixed at 3.$/;"	m	class:ITerrain
m_LODDistanceThreshold	.\QuadTree.h	/^    const float m_LODDistanceThreshold;    $/;"	m	class:CQuadTree
m_LODThreshold	.\QuadTree.h	/^    const float m_LODThreshold;$/;"	m	class:CQuadTree
m_LastMouse	.\Common\DXUTgui.h	/^    POINT m_LastMouse;\/\/ Last mouse position$/;"	m	class:CDXUTScrollBar
m_LastStatsUpdateFrames	.\Common\DXUT.cpp	/^        DWORD m_LastStatsUpdateFrames;      \/\/ frames count since last time the stats were updated$/;"	m	struct:DXUTState::STATE	file:
m_LastStatsUpdateTime	.\Common\DXUT.cpp	/^        double m_LastStatsUpdateTime;       \/\/ last time the stats were updated$/;"	m	struct:DXUTState::STATE	file:
m_Length	.\Pillar.h	/^	float m_cylinderRadius, m_splineRadius, m_Length;$/;"	m	class:CPillar
m_Length	.\QuadTree.h	/^    UINT m_Width, m_Length, m_Height;$/;"	m	class:CQuadTree
m_LightColorHandle	.\ITerrain.h	/^                                    m_LightColorHandle,$/;"	m	class:ITerrain
m_LightDir	.\Sky.h	/^    D3DXVECTOR4                     m_LightDir;$/;"	m	class:CSky
m_LightDirHandle	.\Bubbles.h	/^                                    m_LightDirHandle,$/;"	m	class:CBubbles
m_LightDirHandle	.\Foliage.h	/^                                    m_LightDirHandle, $/;"	m	class:CFoliage
m_LightDirHandle	.\ITerrain.h	/^                                    m_LightDirHandle,$/;"	m	class:ITerrain
m_LightDirHandle	.\ModelInstance.h	/^                                m_LightDirHandle,$/;"	m	class:CModelInstance
m_LightDirHandle	.\Sky.h	/^                                    m_LightDirHandle, $/;"	m	class:CSky
m_LightPosHandle	.\Bubbles.h	/^                                    m_LightPosHandle,$/;"	m	class:CBubbles
m_LightRight	.\Sky.h	/^    D3DXVECTOR3                     m_LightRight, m_LightUp;$/;"	m	class:CSky
m_LightUp	.\Sky.h	/^    D3DXVECTOR3                     m_LightRight, m_LightUp;$/;"	m	class:CSky
m_LinesList	.\Common\DXUTmisc.h	/^    CGrowableArray<LINE_NODE*> m_LinesList;$/;"	m	class:CDXUTLineManager
m_LoadArea	.\QuadTree.h	/^    CLoadArea m_LoadArea;    \/\/! Class to handle the loading of terrain blocks!    $/;"	m	class:CQuadTree
m_LocalHostInfo	.\NetworkRoot.h	/^    SServerInfo                                     m_LocalHostInfo;$/;"	m	class:CNetworkRoot
m_LockedLOD	.\QuadTree.h	/^    UINT m_LockedLOD;$/;"	m	class:CQuadTree
m_Maximized	.\Common\DXUT.cpp	/^        bool  m_Maximized;                  \/\/ if true, the HWND is maximized$/;"	m	struct:DXUTState::STATE	file:
m_Menu	.\Common\DXUT.cpp	/^        HMENU m_Menu;                       \/\/ handle to menu$/;"	m	struct:DXUTState::STATE	file:
m_MinShadeHandle	.\ModelInstance.h	/^                                m_MinShadeHandle,$/;"	m	class:CModelInstance
m_Minimized	.\Common\DXUT.cpp	/^        bool  m_Minimized;                  \/\/ if true, the HWND is minimized$/;"	m	struct:DXUTState::STATE	file:
m_MinimizedWhileFullscreen	.\Common\DXUT.cpp	/^        bool  m_MinimizedWhileFullscreen;   \/\/ if true, the HWND is minimized due to a focus switch away when fullscreen mode$/;"	m	struct:DXUTState::STATE	file:
m_ModifyDeviceSettingsFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKMODIFYDEVICESETTINGS  m_ModifyDeviceSettingsFunc; \/\/ modify device settings callback$/;"	m	struct:DXUTState::STATE	file:
m_ModifyDeviceSettingsFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_ModifyDeviceSettingsFuncUserContext; \/\/ user context for modify device settings callback$/;"	m	struct:DXUTState::STATE	file:
m_MouseButtons	.\Common\DXUT.cpp	/^        bool                         m_MouseButtons[5];                 \/\/ array of mouse states$/;"	m	struct:DXUTState::STATE	file:
m_MouseFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKMOUSE                 m_MouseFunc;                \/\/ mouse callback$/;"	m	struct:DXUTState::STATE	file:
m_MouseFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_MouseFuncUserContext;                \/\/ user context for mouse callback$/;"	m	struct:DXUTState::STATE	file:
m_MultiSampleTypeList	.\Common\DXUTenum.h	/^    CGrowableArray<D3DMULTISAMPLE_TYPE> m_MultiSampleTypeList;$/;"	m	class:CD3DEnumeration
m_NetworkID	.\Client.h	/^    NetworkID                               m_NetworkID;$/;"	m	class:CClient
m_NetworkID	.\Server.h	/^    NetworkID                               m_NetworkID;$/;"	m	class:CServer
m_NoStats	.\Common\DXUT.cpp	/^        bool  m_NoStats;                    \/\/ if true, then DXUTGetFrameStats() and DXUTGetDeviceStats() will return blank strings$/;"	m	struct:DXUTState::STATE	file:
m_NormalMap	.\ITerrain.h	/^    D3DXVECTOR3 *m_NormalMap;    $/;"	m	class:ITerrain
m_NormalMapHandle	.\Bubbles.h	/^                                    m_NormalMapHandle,$/;"	m	class:CBubbles
m_NotifyOnMouseMove	.\Common\DXUT.cpp	/^        bool  m_NotifyOnMouseMove;          \/\/ if true, include WM_MOUSEMOVE in mousecallback$/;"	m	struct:DXUTState::STATE	file:
m_ObjectHeightHandle	.\Foliage.h	/^                                    m_ObjectHeightHandle,$/;"	m	class:CFoliage
m_Offset	.\Common\DXUTmisc.h	/^    POINT          m_Offset;   \/\/ window offset, or upper-left corner of window$/;"	m	class:CD3DArcBall
m_OldFillMode	.\PostProcEffects.h	/^    DWORD m_OldFillMode;$/;"	m	class:PostProcEffects
m_OldStates	.\PolySprite.h	/^    ULONG m_OldStates[10]; \/\/! To Save states at begin and restore at end.$/;"	m	class:CPolySprite
m_OldSunStates	.\Sky.h	/^    SSunMorphState                  m_OldSunStates[2];$/;"	m	class:CSky
m_OverrideAdapterOrdinal	.\Common\DXUT.cpp	/^        int   m_OverrideAdapterOrdinal;     \/\/ if != -1, then override to use this adapter ordinal$/;"	m	struct:DXUTState::STATE	file:
m_OverrideConstantFrameTime	.\Common\DXUT.cpp	/^        bool  m_OverrideConstantFrameTime;  \/\/ if true, then force to constant frame time$/;"	m	struct:DXUTState::STATE	file:
m_OverrideConstantTimePerFrame	.\Common\DXUT.cpp	/^        float m_OverrideConstantTimePerFrame; \/\/ the constant time per frame in seconds if m_OverrideConstantFrameTime==true$/;"	m	struct:DXUTState::STATE	file:
m_OverrideForceHAL	.\Common\DXUT.cpp	/^        bool  m_OverrideForceHAL;           \/\/ if true, then force to HAL device (failing if one doesn't exist)$/;"	m	struct:DXUTState::STATE	file:
m_OverrideForceHWVP	.\Common\DXUT.cpp	/^        bool  m_OverrideForceHWVP;          \/\/ if true, then force to use HWVP (failing if device doesn't support it)$/;"	m	struct:DXUTState::STATE	file:
m_OverrideForcePureHWVP	.\Common\DXUT.cpp	/^        bool  m_OverrideForcePureHWVP;      \/\/ if true, then force to use pure HWVP (failing if device doesn't support it)$/;"	m	struct:DXUTState::STATE	file:
m_OverrideForceREF	.\Common\DXUT.cpp	/^        bool  m_OverrideForceREF;           \/\/ if true, then force to REF device (failing if one doesn't exist)$/;"	m	struct:DXUTState::STATE	file:
m_OverrideForceSWVP	.\Common\DXUT.cpp	/^        bool  m_OverrideForceSWVP;          \/\/ if true, then force to use SWVP $/;"	m	struct:DXUTState::STATE	file:
m_OverrideForceVsync	.\Common\DXUT.cpp	/^        int   m_OverrideForceVsync;         \/\/ if == 0, then it will force the app to use D3DPRESENT_INTERVAL_IMMEDIATE, if == 1 force use of D3DPRESENT_INTERVAL_DEFAULT$/;"	m	struct:DXUTState::STATE	file:
m_OverrideFullScreen	.\Common\DXUT.cpp	/^        bool  m_OverrideFullScreen;         \/\/ if true, then force to start full screen$/;"	m	struct:DXUTState::STATE	file:
m_OverrideHeight	.\Common\DXUT.cpp	/^        int   m_OverrideHeight;             \/\/ if != 0, then override to this height$/;"	m	struct:DXUTState::STATE	file:
m_OverrideQuitAfterFrame	.\Common\DXUT.cpp	/^        int   m_OverrideQuitAfterFrame;     \/\/ if != 0, then it will force the app to quit after that frame$/;"	m	struct:DXUTState::STATE	file:
m_OverrideRelaunchMCE	.\Common\DXUT.cpp	/^        bool  m_OverrideRelaunchMCE;          \/\/ if true, then force relaunch of MCE at exit$/;"	m	struct:DXUTState::STATE	file:
m_OverrideStartX	.\Common\DXUT.cpp	/^        int   m_OverrideStartX;             \/\/ if != -1, then override to this X position of the window$/;"	m	struct:DXUTState::STATE	file:
m_OverrideStartY	.\Common\DXUT.cpp	/^        int   m_OverrideStartY;             \/\/ if != -1, then override to this Y position of the window$/;"	m	struct:DXUTState::STATE	file:
m_OverrideWidth	.\Common\DXUT.cpp	/^        int   m_OverrideWidth;              \/\/ if != 0, then override to this width$/;"	m	struct:DXUTState::STATE	file:
m_OverrideWindowed	.\Common\DXUT.cpp	/^        bool  m_OverrideWindowed;           \/\/ if true, then force to start windowed$/;"	m	struct:DXUTState::STATE	file:
m_PauseRenderingCount	.\Common\DXUT.cpp	/^        int   m_PauseRenderingCount;        \/\/ pause rendering ref count$/;"	m	struct:DXUTState::STATE	file:
m_PauseTimeCount	.\Common\DXUT.cpp	/^        int   m_PauseTimeCount;             \/\/ pause time ref count$/;"	m	struct:DXUTState::STATE	file:
m_PlayerSpaces	.\GameEngine.h	/^    const SPlayerSpaces                 m_PlayerSpaces; \/\/! holds the possible player movement spaces.$/;"	m	class:CGameEngine
m_PresentIntervalList	.\Common\DXUTenum.h	/^    CGrowableArray<UINT> m_PresentIntervalList;$/;"	m	class:CD3DEnumeration
m_PrevDistance	.\IImpostorable.h	/^    float m_PrevDistance;$/;"	m	class:IImpostorable
m_Process	.\PostProcEffects.h	/^    int     m_Process;$/;"	m	class:PostProcEffects
m_RakClientMultiplayer	.\Client.h	/^    Multiplayer<RakClientInterface>         m_RakClientMultiplayer;$/;"	m	class:CClient
m_RakServerMultiplayer	.\Server.h	/^    Multiplayer<RakServerInterface>         m_RakServerMultiplayer;$/;"	m	class:CServer
m_ReadingColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_ReadingColor;        \/\/ Reading string color$/;"	m	class:CDXUTIMEEditBox
m_ReadingSelBkColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_ReadingSelBkColor;   \/\/ Background color for selected char in reading str$/;"	m	class:CDXUTIMEEditBox
m_ReadingSelColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_ReadingSelColor;     \/\/ Selected character in reading string$/;"	m	class:CDXUTIMEEditBox
m_ReadingWinColor	.\Common\DXUTgui.h	/^    D3DCOLOR       m_ReadingWinColor;     \/\/ Reading window color$/;"	m	class:CDXUTIMEEditBox
m_RedTexture	.\ITerrain.h	/^    LPDIRECT3DTEXTURE9              m_RedTexture;$/;"	m	class:ITerrain
m_RefractTechnique	.\Bubbles.h	/^    D3DXHANDLE                      m_RefractTechnique,  \/\/! Cache handles of effect$/;"	m	class:CBubbles
m_RenderingPaused	.\Common\DXUT.cpp	/^        bool  m_RenderingPaused;            \/\/ if true, then rendering is paused$/;"	m	struct:DXUTState::STATE	file:
m_RunningID	.\SpriteAnimMgr.h	/^    int m_RunningID;$/;"	m	class:CSpriteAnimMgr
m_ScrollBar	.\Common\DXUTgui.h	/^    CDXUTScrollBar m_ScrollBar;$/;"	m	class:CDXUTComboBox
m_ScrollBar	.\Common\DXUTgui.h	/^    CDXUTScrollBar m_ScrollBar;$/;"	m	class:CDXUTListBox
m_SelBkColor	.\Common\DXUTgui.h	/^    D3DCOLOR m_SelBkColor;   \/\/ Selected background color$/;"	m	class:CDXUTEditBox
m_SelTextColor	.\Common\DXUTgui.h	/^    D3DCOLOR m_SelTextColor; \/\/ Selected text color$/;"	m	class:CDXUTEditBox
m_ServerFinder	.\NetworkRoot.h	/^    CServerFinder                                   m_ServerFinder; $/;"	m	class:CNetworkRoot
m_ServerInfo	.\Client.h	/^    SServerInfo                             m_ServerInfo;$/;"	m	class:CClient
m_ServerInfo	.\Server.h	/^    SServerInfo                             m_ServerInfo;$/;"	m	class:CServer
m_ShadesHandle	.\ModelInstance.h	/^    D3DXHANDLE                  m_ShadesHandle, $/;"	m	class:CModelInstance
m_ShadowMapHandle	.\ITerrain.h	/^                                    m_ShadowMapHandle; $/;"	m	class:ITerrain
m_ShadowMapHandle	.\ModelInstance.h	/^                                m_ShadowMapHandle,$/;"	m	class:CModelInstance
m_ShadowMapHandle	.\XModelHeirarchy.h	/^    D3DXHANDLE                  m_ShadowMtxHandle, m_ShadowMapHandle;$/;"	m	class:CXModelHeirarchy
m_ShadowMtxHandle	.\ITerrain.h	/^                                    m_ShadowMtxHandle,$/;"	m	class:ITerrain
m_ShadowMtxHandle	.\ModelInstance.h	/^                                m_ShadowMtxHandle,$/;"	m	class:CModelInstance
m_ShadowMtxHandle	.\XModelHeirarchy.h	/^    D3DXHANDLE                  m_ShadowMtxHandle, m_ShadowMapHandle;$/;"	m	class:CXModelHeirarchy
m_ShowCursorWhenFullScreen	.\Common\DXUT.cpp	/^        bool  m_ShowCursorWhenFullScreen;   \/\/ if true, then DXUT will show a cursor when full screen$/;"	m	struct:DXUTState::STATE	file:
m_ShowMsgBoxOnError	.\Common\DXUT.cpp	/^        bool  m_ShowMsgBoxOnError;          \/\/ if true, then msgboxes are displayed upon errors$/;"	m	struct:DXUTState::STATE	file:
m_SkyDecl	.\Sky.h	/^    IDirect3DVertexDeclaration9*    m_SkyDecl; \/\/! Vertex decl for sky rendering$/;"	m	class:CSky
m_SkyEffect	.\Sky.h	/^    ID3DXEffect*                    m_SkyEffect; \/\/! D3DX effect interface$/;"	m	class:CSky
m_SkyTechnique	.\Sky.h	/^    D3DXHANDLE                      m_SkyTechnique, $/;"	m	class:CSky
m_Sprite	.\HUD.h	/^	LPD3DXSPRITE					m_Sprite;	\/\/! our sprite interface$/;"	m	class:CHud
m_Sprite	.\Menu.h	/^	LPD3DXSPRITE			m_Sprite;		\/\/ our sprite interface$/;"	m	class:CMenu
m_StartupFilterKeys	.\Common\DXUT.cpp	/^        FILTERKEYS m_StartupFilterKeys;     \/\/ FilterKey settings upon startup so they can be restored later$/;"	m	struct:DXUTState::STATE	file:
m_StartupStickyKeys	.\Common\DXUT.cpp	/^        STICKYKEYS m_StartupStickyKeys;     \/\/ StickyKey settings upon startup so they can be restored later$/;"	m	struct:DXUTState::STATE	file:
m_StartupToggleKeys	.\Common\DXUT.cpp	/^        TOGGLEKEYS m_StartupToggleKeys;     \/\/ ToggleKey settings upon startup so they can be restored later$/;"	m	struct:DXUTState::STATE	file:
m_StaticFrameStats	.\Common\DXUT.cpp	/^        WCHAR                        m_StaticFrameStats[256];           \/\/ static part of frames stats $/;"	m	struct:DXUTState::STATE	file:
m_SunColorHandle	.\Sky.h	/^                                    m_SunColorHandle[2],$/;"	m	class:CSky
m_SunPixelShaderPowerHandle	.\Sky.h	/^                                    m_SunPixelShaderPowerHandle[2],$/;"	m	class:CSky
m_SunVertexShaderMultiplierHandle	.\Sky.h	/^                                    m_SunVertexShaderMultiplierHandle[2];$/;"	m	class:CSky
m_SunVertexShaderPowerHandle	.\Sky.h	/^                                    m_SunVertexShaderPowerHandle[2],$/;"	m	class:CSky
m_TerrainDecl	.\ITerrain.h	/^    IDirect3DVertexDeclaration9*    m_TerrainDecl; \/\/! Vertex decl for terrain rendering$/;"	m	class:ITerrain
m_TerrainEffect	.\ITerrain.h	/^    ID3DXEffect*                    m_TerrainEffect;        \/\/! D3DX effect interface$/;"	m	class:ITerrain
m_TerrainTechnique	.\ITerrain.h	/^    D3DXHANDLE                      m_TerrainTechnique, $/;"	m	class:ITerrain
m_TextColor	.\Common\DXUTgui.h	/^    D3DCOLOR m_TextColor;    \/\/ Text color$/;"	m	class:CDXUTEditBox
m_Texture	.\HUD.h	/^	LPDIRECT3DTEXTURE9				m_Texture;	\/\/! our texture$/;"	m	class:CHud
m_Texture	.\Menu.h	/^	LPDIRECT3DTEXTURE9		m_Texture;		\/\/ our texture$/;"	m	class:CMenu
m_TextureCache	.\Common\DXUTgui.h	/^    CGrowableArray< DXUTTextureNode* > m_TextureCache;   \/\/ Shared textures$/;"	m	class:CDXUTDialogResourceManager
m_TextureCache	.\Common\DXUTmisc.h	/^    CGrowableArray< DXUTCache_Texture > m_TextureCache;$/;"	m	class:CDXUTResourceCache
m_TextureFileName	.\ITerrain.h	/^    WCHAR m_TextureFileName[MAX_FILENAME_LENGTH];$/;"	m	class:ITerrain
m_TextureHandle	.\Bubbles.h	/^                                    m_TextureHandle;    $/;"	m	class:CBubbles
m_Textures	.\Common\DXUTgui.h	/^    CGrowableArray< int > m_Textures;   \/\/ Index into m_TextureCache;$/;"	m	class:CDXUTDialog
m_ThresholdHandle	.\ModelInstance.h	/^                                m_ThresholdHandle,$/;"	m	class:CModelInstance
m_TileSize	.\ITerrain.h	/^    UINT m_TileSize;$/;"	m	class:ITerrain
m_TilesHandle	.\Bubbles.h	/^                                    m_TilesHandle,$/;"	m	class:CBubbles
m_Time	.\Common\DXUT.cpp	/^        double m_Time;                      \/\/ current time in seconds$/;"	m	struct:DXUTState::STATE	file:
m_TimeOfDayHandle	.\Sky.h	/^                                    m_TimeOfDayHandle,$/;"	m	class:CSky
m_TimePaused	.\Common\DXUT.cpp	/^        bool  m_TimePaused;                 \/\/ if true, then time is paused$/;"	m	struct:DXUTState::STATE	file:
m_TimePerFrame	.\Common\DXUT.cpp	/^        float m_TimePerFrame;               \/\/ the constant time per frame in seconds, only valid if m_ConstantFrameTime==true$/;"	m	struct:DXUTState::STATE	file:
m_TimerList	.\Common\DXUT.cpp	/^        CGrowableArray<DXUT_TIMER>*  m_TimerList;                       \/\/ list of DXUT_TIMER structs$/;"	m	struct:DXUTState::STATE	file:
m_TopmostWhileWindowed	.\Common\DXUT.cpp	/^        bool  m_TopmostWhileWindowed;       \/\/ if true, the windowed HWND is topmost $/;"	m	struct:DXUTState::STATE	file:
m_TweenHandle	.\ITerrain.h	/^                                    m_TweenHandle,$/;"	m	class:ITerrain
m_Type	.\Common\DXUTgui.h	/^    DXUT_CONTROL_TYPE m_Type;  \/\/ Control type, set once in constructor  $/;"	m	class:CDXUTControl
m_UniqueCloudBatchID	.\CloudBatch.cpp	/^UINT CCloudBatch::m_UniqueCloudBatchID = 0;$/;"	m	class:CCloudBatch	file:
m_UniqueCloudBatchID	.\CloudBatch.h	/^    static UINT m_UniqueCloudBatchID; \/\/! Passed to CCloud to identify which Batch it belongs to$/;"	m	class:CCloudBatch
m_Vertices	.\IImpostorable.h	/^    BoxVertTex m_Vertices[4]; \/\/! Vertices to store impostor!        $/;"	m	class:IImpostorable
m_ViewArcBall	.\Common\DXUTmisc.h	/^    CD3DArcBall  m_ViewArcBall;$/;"	m	class:CModelViewerCamera
m_ViewHandle	.\Bubbles.h	/^                                    m_ViewHandle,$/;"	m	class:CBubbles
m_ViewPort	.\ImpostorAtlas.h	/^    D3DVIEWPORT9 m_ViewPort;    \/\/! Viewport that holds most of the constants for RenderToAtlas;    $/;"	m	class:CImpostorAtlas
m_ViewPort	.\World.h	/^    D3DVIEWPORT9                        m_ViewPort;$/;"	m	class:CWorld
m_ViewProjHandle	.\ITerrain.h	/^                                    m_ViewProjHandle,$/;"	m	class:ITerrain
m_ViewProjHandle	.\ModelInstance.h	/^                                m_ViewProjHandle,$/;"	m	class:CModelInstance
m_Width	.\ITerrain.h	/^    UINT m_Width, m_Height;$/;"	m	class:ITerrain
m_Width	.\PostProcEffects.h	/^    UINT m_Width, m_Height;$/;"	m	class:PostProcEffects
m_Width	.\PostProcEffects.h	/^    UINT m_Width, m_Height;$/;"	m	class:ScreenAlignedQuad
m_Width	.\QuadTree.h	/^    UINT m_Width, m_Length, m_Height;$/;"	m	class:CQuadTree
m_WindowBackBufferHeightAtModeChange	.\Common\DXUT.cpp	/^        UINT m_WindowBackBufferHeightAtModeChange; \/\/ back buffer size of windowed mode right before switching to fullscreen mode.  Used to restore to same resolution when toggling back to windowed mode$/;"	m	struct:DXUTState::STATE	file:
m_WindowBackBufferWidthAtModeChange	.\Common\DXUT.cpp	/^        UINT m_WindowBackBufferWidthAtModeChange;  \/\/ back buffer size of windowed mode right before switching to fullscreen mode.  Used to restore to same resolution when toggling back to windowed mode$/;"	m	struct:DXUTState::STATE	file:
m_WindowCreateCalled	.\Common\DXUT.cpp	/^        bool  m_WindowCreateCalled;         \/\/ if true, then DXUTCreateWindow() or DXUTSetWindow() was called$/;"	m	struct:DXUTState::STATE	file:
m_WindowCreated	.\Common\DXUT.cpp	/^        bool  m_WindowCreated;              \/\/ if true, then DXUTCreateWindow() or DXUTSetWindow() has succeeded$/;"	m	struct:DXUTState::STATE	file:
m_WindowCreatedWithDefaultPositions	.\Common\DXUT.cpp	/^        bool  m_WindowCreatedWithDefaultPositions; \/\/ if true, then CW_USEDEFAULT was used and the window should be moved to the right adapter$/;"	m	struct:DXUTState::STATE	file:
m_WindowMsgFunc	.\Common\DXUT.cpp	/^        LPDXUTCALLBACKMSGPROC               m_WindowMsgFunc;            \/\/ window messages callback$/;"	m	struct:DXUTState::STATE	file:
m_WindowMsgFuncUserContext	.\Common\DXUT.cpp	/^        void*                               m_WindowMsgFuncUserContext;            \/\/ user context for window messages callback$/;"	m	struct:DXUTState::STATE	file:
m_WindowTitle	.\Common\DXUT.cpp	/^        WCHAR                        m_WindowTitle[256];                \/\/ window title$/;"	m	struct:DXUTState::STATE	file:
m_WindowedPlacement	.\Common\DXUT.cpp	/^        WINDOWPLACEMENT m_WindowedPlacement; \/\/ record of windowed HWND position\/show state\/etc$/;"	m	struct:DXUTState::STATE	file:
m_WindowedStyleAtModeChange	.\Common\DXUT.cpp	/^        DWORD m_WindowedStyleAtModeChange;  \/\/ window style$/;"	m	struct:DXUTState::STATE	file:
m_WireframeMode	.\Common\DXUT.cpp	/^        bool  m_WireframeMode;              \/\/ if true, then D3DRS_FILLMODE==D3DFILL_WIREFRAME else D3DRS_FILLMODE==D3DFILL_SOLID $/;"	m	struct:DXUTState::STATE	file:
m_World	.\Sky.h	/^    D3DXMATRIX                      m_World, m_InvTransWorld;$/;"	m	class:CSky
m_WorldArcBall	.\Common\DXUTmisc.h	/^    CD3DArcBall  m_WorldArcBall;$/;"	m	class:CModelViewerCamera
m_WorldHandle	.\ITerrain.h	/^                                    m_WorldHandle,$/;"	m	class:ITerrain
m_WorldHandle	.\ModelInstance.h	/^                                m_WorldHandle;$/;"	m	class:CModelInstance
m_WorldViewHandle	.\Bubbles.h	/^                                    m_WorldViewHandle,$/;"	m	class:CBubbles
m_WorldViewProjHandle	.\Bubbles.h	/^                                    m_WorldViewProjHandle,$/;"	m	class:CBubbles
m_WorldViewProjHandle	.\Foliage.h	/^                                    m_WorldViewProjHandle,$/;"	m	class:CFoliage
m_WorldViewProjHandle	.\Sky.h	/^                                    m_WorldViewProjHandle, $/;"	m	class:CSky
m_aKeys	.\Common\DXUTmisc.h	/^    BYTE                  m_aKeys[CAM_MAX_KEYS];  \/\/ State of input - KEY_WAS_DOWN_MASK|KEY_IS_DOWN_MASK$/;"	m	class:CBaseCamera
m_animThresh	.\Sprite.h	/^    float m_animThresh; \/\/! time needed to pass until animating.$/;"	m	class:CSprite
m_apDSBuffer	.\Common\DXUTsound.h	/^    LPDIRECTSOUNDBUFFER* m_apDSBuffer;$/;"	m	class:CSound
m_arrCIP	.\World.h	/^    CornerIndexPair                     m_arrCIP[6]; \/\/! Array of optimized corner index entries for each frustum plane    $/;"	m	class:CWorld
m_bActive	.\Common\DXUTSettingsDlg.h	/^    bool m_bActive; $/;"	m	class:CD3DSettingsDlg
m_bActive	.\Console.h	/^	bool								m_bActive; \/\/! Whether the console is currently active$/;"	m	class:CConsole
m_bAnalyseRequired	.\Common\DXUTgui.h	/^    bool m_bAnalyseRequired;            \/\/ True if the string has changed since last analysis.$/;"	m	class:CUniBuffer
m_bAttachCameraToModel	.\Common\DXUTmisc.h	/^    bool         m_bAttachCameraToModel;$/;"	m	class:CModelViewerCamera
m_bBackToFront	.\PolySprite.h	/^        bool m_bBackToFront;$/;"	m	struct:CPolySprite::DepthSortFunctor
m_bCameraControl	.\World.h	/^    bool                                m_bInit, m_bDrawBBs, m_bSaveShadowMap, m_bCameraControl, m_bFirstRun;$/;"	m	class:CWorld
m_bCaption	.\Common\DXUTgui.h	/^    bool m_bCaption;$/;"	m	class:CDXUTDialog
m_bCaretOn	.\Common\DXUTgui.h	/^    bool     m_bCaretOn;     \/\/ Flag to indicate whether caret is currently visible$/;"	m	class:CDXUTEditBox
m_bChanged	.\Pillar.h	/^	bool m_bChanged;$/;"	m	class:CPillar
m_bChangedColor	.\CloudBatch.h	/^    bool m_bVisible, m_bUpdated, m_bCheckedForDraw, m_bChangedColor, m_bUsingImpostor;$/;"	m	class:CCloud
m_bChecked	.\Common\DXUTgui.h	/^    bool m_bChecked;$/;"	m	class:CDXUTCheckBox
m_bCheckedForDraw	.\CloudBatch.h	/^    bool m_bVisible, m_bUpdated, m_bCheckedForDraw, m_bChangedColor, m_bUsingImpostor;$/;"	m	class:CCloud
m_bClipToBoundary	.\Common\DXUTmisc.h	/^    bool                  m_bClipToBoundary;      \/\/ If true, then the camera will be clipped to the boundary$/;"	m	class:CBaseCamera
m_bClockMoving	.\Sky.h	/^    bool                            m_bClockMoving;$/;"	m	class:CSky
m_bConnect	.\Client.h	/^    bool                                    m_bConnect;$/;"	m	class:CClient
m_bControlCamera	.\GameRoot.h	/^    bool                                m_bControlCamera;   \/\/! whether to turn camera control on or off.    $/;"	m	class:CGameRoot
m_bCurrencyDisplay	.\NumberToSprite.h	/^    bool m_bCurrencyDisplay;$/;"	m	class:CNumberToSprite
m_bDoBloom	.\PostProcEffects.h	/^    bool m_bDoBloom, m_bDoGrey, m_bDoFish, m_bEnhance;$/;"	m	class:PostProcEffects
m_bDoFish	.\PostProcEffects.h	/^    bool m_bDoBloom, m_bDoGrey, m_bDoFish, m_bEnhance;$/;"	m	class:PostProcEffects
m_bDoGrey	.\PostProcEffects.h	/^    bool m_bDoBloom, m_bDoGrey, m_bDoFish, m_bEnhance;$/;"	m	class:PostProcEffects
m_bDrag	.\Common\DXUTgui.h	/^    bool m_bDrag;       \/\/ Whether the user is dragging the mouse to select$/;"	m	class:CDXUTListBox
m_bDrag	.\Common\DXUTgui.h	/^    bool m_bDrag;$/;"	m	class:CDXUTDialog
m_bDrag	.\Common\DXUTgui.h	/^    bool m_bDrag;$/;"	m	class:CDXUTScrollBar
m_bDrag	.\Common\DXUTmisc.h	/^    bool           m_bDrag;             \/\/ Whether user is dragging arc ball$/;"	m	class:CD3DArcBall
m_bDragSinceLastUpdate	.\Common\DXUTmisc.h	/^    bool         m_bDragSinceLastUpdate; \/\/ True if mouse drag has happened since last time FrameMove is called.$/;"	m	class:CModelViewerCamera
m_bDrawBBs	.\World.h	/^    bool                                m_bInit, m_bDrawBBs, m_bSaveShadowMap, m_bCameraControl, m_bFirstRun;$/;"	m	class:CWorld
m_bDrawBoundingBoxes	.\QuadTree.h	/^    bool m_bInit, m_bDrawBoundingBoxes;$/;"	m	class:CQuadTree
m_bDrawPillar	.\QuadTree.h	/^    bool m_bLockLOD, m_bDrawTerrain, m_bDrawPillar;$/;"	m	class:CQuadTree
m_bDrawTerrain	.\QuadTree.h	/^    bool m_bLockLOD, m_bDrawTerrain, m_bDrawPillar;$/;"	m	class:CQuadTree
m_bEditPillar	.\World.h	/^	bool m_bEditPillar;		\/\/ make sure this is removed$/;"	m	class:CWorld
m_bEnablePositionMovement	.\Common\DXUTmisc.h	/^    bool                  m_bEnablePositionMovement; \/\/ If true, then the user can translate the camera\/model $/;"	m	class:CBaseCamera
m_bEnableYAxisMovement	.\Common\DXUTmisc.h	/^    bool                  m_bEnableYAxisMovement; \/\/ If true, then camera can move in the y-axis$/;"	m	class:CBaseCamera
m_bEnabled	.\Common\DXUTgui.h	/^    bool m_bEnabled;           \/\/ Enabled\/disabled flag$/;"	m	class:CDXUTControl
m_bEnhance	.\PostProcEffects.h	/^    bool m_bDoBloom, m_bDoGrey, m_bDoFish, m_bEnhance;$/;"	m	class:PostProcEffects
m_bFillNextNotificationWithSilence	.\Common\DXUTsound.h	/^    BOOL  m_bFillNextNotificationWithSilence;$/;"	m	class:CStreamingSound
m_bFirstRun	.\World.h	/^    bool                                m_bInit, m_bDrawBBs, m_bSaveShadowMap, m_bCameraControl, m_bFirstRun;$/;"	m	class:CWorld
m_bHardwareVP	.\Common\DXUTenum.h	/^    bool m_bHardwareVP;$/;"	m	class:CD3DEnumeration
m_bHasFocus	.\Common\DXUTgui.h	/^    bool m_bHasFocus;               \/\/ Control has input focus$/;"	m	class:CDXUTControl
m_bHeirarchy	.\XModelHeirarchy.h	/^    bool                        m_bHeirarchy;$/;"	m	class:CXModelHeirarchy
m_bHosting	.\GameEngine.h	/^    const bool                          m_bHosting;$/;"	m	class:CGameEngine
m_bIMEStaticMsgProcCalled	.\Common\DXUTgui.cpp	/^bool      CDXUTIMEEditBox::m_bIMEStaticMsgProcCalled = false;$/;"	m	class:CDXUTIMEEditBox	file:
m_bIMEStaticMsgProcCalled	.\Common\DXUTgui.h	/^    static bool    m_bIMEStaticMsgProcCalled;$/;"	m	class:CDXUTIMEEditBox
m_bIndices	.\MipmapTerrain.h	/^	bool m_bIndices;    $/;"	m	class:CMipmapTerrain
m_bInit	.\ITerrain.h	/^    bool m_bInit;$/;"	m	class:ITerrain
m_bInit	.\QuadTree.h	/^    bool m_bInit, m_bDrawBoundingBoxes;$/;"	m	class:CQuadTree
m_bInit	.\Server.h	/^    bool                                    m_bInit;$/;"	m	class:CServer
m_bInit	.\World.h	/^    bool                                m_bInit, m_bDrawBBs, m_bSaveShadowMap, m_bCameraControl, m_bFirstRun;$/;"	m	class:CWorld
m_bInsertMode	.\Common\DXUTgui.h	/^    bool     m_bInsertMode;  \/\/ If true, control is in insert mode. Else, overwrite mode.$/;"	m	class:CDXUTEditBox
m_bInteractive	.\Pillar.h	/^	bool m_bInteractive;$/;"	m	class:CPillar
m_bInvertPitch	.\Common\DXUTmisc.h	/^    bool                  m_bInvertPitch;         \/\/ Invert the pitch axis$/;"	m	class:CBaseCamera
m_bIsDefault	.\Common\DXUTgui.h	/^    bool m_bIsDefault;              \/\/ Is the default control$/;"	m	class:CDXUTControl
m_bIsReadingFromMemory	.\Common\DXUTsound.h	/^    BOOL          m_bIsReadingFromMemory;$/;"	m	class:CWaveFile
m_bKeyboard	.\GameSettings.h	/^    bool m_bKeyboard[256];  \/\/! Entry is true if the key is down.        $/;"	m	class:CGameSettings
m_bKeyboardInput	.\Common\DXUTgui.h	/^    bool m_bKeyboardInput;$/;"	m	class:CDXUTDialog
m_bLimitPitch	.\Common\DXUTmisc.h	/^    bool         m_bLimitPitch;$/;"	m	class:CModelViewerCamera
m_bLockLOD	.\QuadTree.h	/^    bool m_bLockLOD, m_bDrawTerrain, m_bDrawPillar;$/;"	m	class:CQuadTree
m_bMinimized	.\Common\DXUTgui.h	/^    bool m_bMinimized;$/;"	m	class:CDXUTDialog
m_bMixedVP	.\Common\DXUTenum.h	/^    bool m_bMixedVP;$/;"	m	class:CD3DEnumeration
m_bMouse	.\GameSettings.h	/^    bool m_bMouse[NUM_MOUSE_BUTTONS];   \/\/! Entry is true if the key is down.        $/;"	m	class:CGameSettings
m_bMouseDrag	.\Common\DXUTgui.h	/^    bool m_bMouseDrag;       \/\/ True to indicate drag in progress$/;"	m	class:CDXUTEditBox
m_bMouseInput	.\Common\DXUTgui.h	/^    bool m_bMouseInput;$/;"	m	class:CDXUTDialog
m_bMouseLButtonDown	.\Common\DXUTmisc.h	/^    bool                  m_bMouseLButtonDown;    \/\/ True if left button is down $/;"	m	class:CBaseCamera
m_bMouseMButtonDown	.\Common\DXUTmisc.h	/^    bool                  m_bMouseMButtonDown;    \/\/ True if middle button is down $/;"	m	class:CBaseCamera
m_bMouseOver	.\Common\DXUTgui.h	/^    bool m_bMouseOver;              \/\/ Mouse pointer is above control$/;"	m	class:CDXUTControl
m_bMouseRButtonDown	.\Common\DXUTmisc.h	/^    bool                  m_bMouseRButtonDown;    \/\/ True if right button is down $/;"	m	class:CBaseCamera
m_bMovementDrag	.\Common\DXUTmisc.h	/^    bool                  m_bMovementDrag;        \/\/ If true, then camera movement will slow to a stop otherwise movement is instant$/;"	m	class:CBaseCamera
m_bNonUserEvents	.\Common\DXUTgui.h	/^    bool m_bNonUserEvents;$/;"	m	class:CDXUTDialog
m_bNormalsPointIn	.\Sphere.h	/^    bool m_bNormalsPointIn;$/;"	m	class:CSphere
m_bOpened	.\Common\DXUTgui.h	/^    bool    m_bOpened;$/;"	m	class:CDXUTComboBox
m_bPressed	.\Common\DXUTgui.h	/^    bool m_bPressed;$/;"	m	class:CDXUTButton
m_bPressed	.\Common\DXUTgui.h	/^    bool m_bPressed;$/;"	m	class:CDXUTSlider
m_bPureHarewareVP	.\Common\DXUTenum.h	/^    bool m_bPureHarewareVP;$/;"	m	class:CD3DEnumeration
m_bRenderPhysics	.\GameRoot.h	/^    bool                                m_bRenderPhysics;$/;"	m	class:CGameRoot
m_bRequirePostPixelShaderBlending	.\Common\DXUTenum.h	/^    bool m_bRequirePostPixelShaderBlending;$/;"	m	class:CD3DEnumeration
m_bResetCursorAfterMove	.\Common\DXUTmisc.h	/^    bool       m_bResetCursorAfterMove;\/\/ If true, the class will reset the cursor position so that the cursor always has space to move $/;"	m	class:CFirstPersonCamera
m_bRotateWithoutButtonDown	.\Common\DXUTmisc.h	/^	bool	   m_bRotateWithoutButtonDown;$/;"	m	class:CFirstPersonCamera
m_bSaveShadowMap	.\World.h	/^    bool                                m_bInit, m_bDrawBBs, m_bSaveShadowMap, m_bCameraControl, m_bFirstRun;$/;"	m	class:CWorld
m_bSetCalled	.\PolySprite.h	/^    bool m_bSetCalled;$/;"	m	class:CPolySprite
m_bShift	.\Console.h	/^	bool								m_bShift;$/;"	m	class:CConsole
m_bShowThumb	.\Common\DXUTgui.h	/^    bool m_bShowThumb;$/;"	m	class:CDXUTScrollBar
m_bSoftwareVP	.\Common\DXUTenum.h	/^    bool m_bSoftwareVP;$/;"	m	class:CD3DEnumeration
m_bStartMorph	.\Sky.h	/^    bool                            m_bStartMorph[2];$/;"	m	class:CSky
m_bTileVisible	.\QuadTree.h	/^    bool m_bTileVisible; \/\/! Says if at least one tile is visible$/;"	m	class:CQuadTree
m_bTimerStopped	.\Common\DXUTmisc.h	/^    bool m_bTimerStopped;$/;"	m	class:CDXUTTimer
m_bUpdateImpostor	.\IImpostorable.h	/^    bool m_bUseImpostor, m_bUpdateImpostor;$/;"	m	class:IImpostorable
m_bUpdateSun	.\Sky.h	/^    bool                            m_bUpdateSun[2];$/;"	m	class:CSky
m_bUpdated	.\CloudBatch.h	/^    bool m_bVisible, m_bUpdated, m_bCheckedForDraw, m_bChangedColor, m_bUsingImpostor;$/;"	m	class:CCloud
m_bUseImpostor	.\IImpostorable.h	/^    bool m_bUseImpostor, m_bUpdateImpostor;$/;"	m	class:IImpostorable
m_bUseMaterials	.\Common\DXUTMesh.h	/^    bool                    m_bUseMaterials;$/;"	m	class:CDXUTMesh
m_bUseTangents	.\Sphere.h	/^    bool m_bUseTangents;$/;"	m	class:CSphere
m_bUsingImpostor	.\CloudBatch.h	/^    bool m_bVisible, m_bUpdated, m_bCheckedForDraw, m_bChangedColor, m_bUsingImpostor;$/;"	m	class:CCloud
m_bUsingQPF	.\Common\DXUTmisc.h	/^    bool m_bUsingQPF;$/;"	m	class:CDXUTTimer
m_bVaryExposure	.\PostProcEffects.h	/^    bool	m_bVaryExposure;$/;"	m	class:PostProcEffects
m_bVisible	.\CloudBatch.h	/^    bool m_bVisible, m_bUpdated, m_bCheckedForDraw, m_bChangedColor, m_bUsingImpostor;$/;"	m	class:CCloud
m_bVisible	.\Common\DXUTgui.h	/^    bool m_bVisible;                \/\/ Shown\/hidden flag$/;"	m	class:CDXUTControl
m_bVisible	.\Common\DXUTgui.h	/^    bool m_bVisible;$/;"	m	class:CDXUTDialog
m_cAltKeyBoard	.\GameSettings.h	/^    UCHAR m_cAltKeyBoard[256];$/;"	m	class:CGameSettings
m_cCtrlKeyBoard	.\GameSettings.h	/^    UCHAR m_cCtrlKeyBoard[256];$/;"	m	class:CGameSettings
m_cKeyBoard	.\GameSettings.h	/^    UCHAR m_cKeyBoard[256];    $/;"	m	class:CGameSettings
m_cKeysDown	.\Common\DXUTmisc.h	/^    int                   m_cKeysDown;            \/\/ Number of camera keys that are down.$/;"	m	class:CBaseCamera
m_cLastModifierKey	.\GameSettings.h	/^    UCHAR m_cLastModifierKey, m_cLastNonModifierKey;$/;"	m	class:CGameSettings
m_cLastNonModifierKey	.\GameSettings.h	/^    UCHAR m_cLastModifierKey, m_cLastNonModifierKey;$/;"	m	class:CGameSettings
m_cMouse	.\GameSettings.h	/^    UCHAR m_cMouse[NUM_MOUSE_BUTTONS]; \/\/! 3 mouse buttons!$/;"	m	class:CGameSettings
m_cShiftKeyBoard	.\GameSettings.h	/^    UCHAR m_cShiftKeyBoard[256];$/;"	m	class:CGameSettings
m_circleCenter	.\Pillar.h	/^	D3DVECTOR m_circleCenter;$/;"	m	class:CPillar
m_ck	.\Common\DXUTsound.h	/^    MMCKINFO      m_ck;          \/\/ Multimedia RIFF chunk$/;"	m	class:CWaveFile
m_ckRiff	.\Common\DXUTsound.h	/^    MMCKINFO      m_ckRiff;      \/\/ Use in opening a WAVE file$/;"	m	class:CWaveFile
m_clr	.\Common\DXUTmisc.h	/^    D3DXCOLOR    m_clr;$/;"	m	class:CDXUTTextHelper
m_color	.\PostProcEffects.h	/^    float m_color;$/;"	m	class:PostProcEffects
m_colorBottomLeft	.\Common\DXUTgui.h	/^    D3DCOLOR m_colorBottomLeft;$/;"	m	class:CDXUTDialog
m_colorBottomRight	.\Common\DXUTgui.h	/^    D3DCOLOR m_colorBottomRight;$/;"	m	class:CDXUTDialog
m_colorTopLeft	.\Common\DXUTgui.h	/^    D3DCOLOR m_colorTopLeft;$/;"	m	class:CDXUTDialog
m_colorTopRight	.\Common\DXUTgui.h	/^    D3DCOLOR m_colorTopRight;$/;"	m	class:CDXUTDialog
m_corners	.\CloudBatch.h	/^    D3DXVECTOR3 m_corners[8]; \/\/! store AABB$/;"	m	class:CCloud
m_curveHeight	.\Pillar.h	/^	UINT m_curveStacks, m_curveHeight;$/;"	m	class:CPillar
m_curveStacks	.\Pillar.h	/^	UINT m_curveStacks, m_curveHeight;$/;"	m	class:CPillar
m_cylinderRadius	.\Pillar.h	/^	float m_cylinderRadius, m_splineRadius, m_Length;$/;"	m	class:CPillar
m_dArrowTS	.\Common\DXUTgui.h	/^    double m_dArrowTS;  \/\/ Timestamp of last arrow event.$/;"	m	class:CDXUTScrollBar
m_dSunStates	.\Sky.h	/^    deque<SSunMorphState>           m_dSunStates[2]; $/;"	m	class:CSky
m_delimiter	.\MultiColumnList.h	/^	string								m_delimiter;$/;"	m	class:CMultiColumnList
m_dfBlink	.\Common\DXUTgui.h	/^    double   m_dfBlink;      \/\/ Caret blink time in milliseconds$/;"	m	class:CDXUTEditBox
m_dfLastBlink	.\Common\DXUTgui.h	/^    double   m_dfLastBlink;  \/\/ Last timestamp of caret blink$/;"	m	class:CDXUTEditBox
m_dwBehaviorFlags	.\XModelHeirarchy.h	/^    DWORD                       m_dwBehaviorFlags;      \/\/ Behavior flags of the 3D device$/;"	m	class:CXModelHeirarchy
m_dwBytesPerVertex	.\Common\DXUTMesh.h	/^    DWORD                   m_dwBytesPerVertex;$/;"	m	class:CDXUTMesh
m_dwCreationFlags	.\Common\DXUTsound.h	/^    DWORD                m_dwCreationFlags;$/;"	m	class:CSound
m_dwDSBufferSize	.\Common\DXUTsound.h	/^    DWORD                m_dwDSBufferSize;$/;"	m	class:CSound
m_dwFlags	.\Common\DXUTsound.h	/^    DWORD         m_dwFlags;$/;"	m	class:CWaveFile
m_dwLastPlayPos	.\Common\DXUTsound.h	/^    DWORD m_dwLastPlayPos;$/;"	m	class:CStreamingSound
m_dwNextWriteOffset	.\Common\DXUTsound.h	/^    DWORD m_dwNextWriteOffset;$/;"	m	class:CStreamingSound
m_dwNotifySize	.\Common\DXUTsound.h	/^    DWORD m_dwNotifySize;$/;"	m	class:CStreamingSound
m_dwNumBuffers	.\Common\DXUTsound.h	/^    DWORD                m_dwNumBuffers;$/;"	m	class:CSound
m_dwNumFaces	.\Common\DXUTMesh.h	/^    DWORD                   m_dwNumFaces;$/;"	m	class:CDXUTMesh
m_dwNumMaterials	.\Common\DXUTMesh.h	/^    DWORD                   m_dwNumMaterials; \/\/ Materials for the mesh$/;"	m	class:CDXUTMesh
m_dwNumVertices	.\Common\DXUTMesh.h	/^    DWORD                   m_dwNumVertices;$/;"	m	class:CDXUTMesh
m_dwPlayProgress	.\Common\DXUTsound.h	/^    DWORD m_dwPlayProgress;$/;"	m	class:CStreamingSound
m_dwSize	.\Common\DXUTsound.h	/^    DWORD         m_dwSize;      \/\/ The size of the wave file$/;"	m	class:CWaveFile
m_dwStyle	.\Common\DXUTgui.h	/^    DWORD m_dwStyle;    \/\/ List box style$/;"	m	class:CDXUTListBox
m_end	.\ConsoleBuffer.h	/^	UINT								m_end;   \/\/! lines are currently visible$/;"	m	class:CConsoleBuffer
m_end	.\MultiColumnList.h	/^	UINT								m_end;   \/\/! lines are currently visible$/;"	m	class:CMultiColumnList
m_eyePt	.\PolySprite.h	/^        D3DXVECTOR3 m_lookAt, m_eyePt;$/;"	m	struct:CPolySprite::DepthSortFunctor
m_fAspect	.\Common\DXUTmisc.h	/^    float                 m_fAspect;              \/\/ Aspect ratio$/;"	m	class:CBaseCamera
m_fBounce	.\PhysicsRoot.h	/^    float m_fGravMult, m_fMass, m_fFriction, m_fBounce;$/;"	m	class:CPhysicsRoot
m_fBroadcastInterval	.\Server.h	/^    float                                   m_fBroadcastInterval; \/\/! ms in between broadcast to all clients 'reality checks'$/;"	m	class:CServer
m_fCameraPitchAngle	.\Common\DXUTmisc.h	/^    float                 m_fCameraPitchAngle;    \/\/ Pitch angle of camera$/;"	m	class:CBaseCamera
m_fCameraYawAngle	.\Common\DXUTmisc.h	/^    float                 m_fCameraYawAngle;      \/\/ Yaw angle of camera$/;"	m	class:CBaseCamera
m_fColorTimeThresh	.\CloudBatch.h	/^    float m_fTimeSinceLastColorUpdate, m_fColorTimeThresh;$/;"	m	class:CCloud
m_fCurrentTime	.\ModelInstance.h	/^    float                       m_fCurrentTime;$/;"	m	class:CModelInstance
m_fDefaultRadius	.\Common\DXUTmisc.h	/^    float        m_fDefaultRadius;       \/\/ Distance from the camera to model $/;"	m	class:CModelViewerCamera
m_fDragTimer	.\Common\DXUTmisc.h	/^    FLOAT                 m_fDragTimer;           \/\/ Countdown timer to apply drag$/;"	m	class:CBaseCamera
m_fExposureLevel	.\PostProcEffects.h	/^    float	m_fExposureLevel;$/;"	m	class:PostProcEffects
m_fFOV	.\Common\DXUTmisc.h	/^    float                 m_fFOV;                 \/\/ Field of view$/;"	m	class:CBaseCamera
m_fFarPlane	.\Common\DXUTmisc.h	/^    float                 m_fFarPlane;            \/\/ Far plane$/;"	m	class:CBaseCamera
m_fFramesToSmoothMouseData	.\Common\DXUTmisc.h	/^    float                 m_fFramesToSmoothMouseData; \/\/ Number of frames to smooth mouse data over$/;"	m	class:CBaseCamera
m_fFriction	.\PhysicsRoot.h	/^    float m_fGravMult, m_fMass, m_fFriction, m_fBounce;$/;"	m	class:CPhysicsRoot
m_fGravMult	.\PhysicsRoot.h	/^    float m_fGravMult, m_fMass, m_fFriction, m_fBounce;$/;"	m	class:CPhysicsRoot
m_fHorizontalTile	.\Sphere.h	/^    float m_fHorizontalTile, m_fVerticalTile;$/;"	m	class:CSphere
m_fLargestDim	.\CloudBatch.h	/^    float m_fLargestDim; \/\/! Largest dimension of AABB. Used to determine furthest distance before using Impostor.$/;"	m	class:CCloud
m_fMass	.\PhysicsRoot.h	/^    float m_fGravMult, m_fMass, m_fFriction, m_fBounce;$/;"	m	class:CPhysicsRoot
m_fMaxRadius	.\Common\DXUTmisc.h	/^    float        m_fMaxRadius;           \/\/ Max radius$/;"	m	class:CModelViewerCamera
m_fMinRadius	.\Common\DXUTmisc.h	/^    float        m_fMinRadius;           \/\/ Min radius$/;"	m	class:CModelViewerCamera
m_fMinShade	.\ModelInstance.h	/^    float                       m_fShades, m_fMinShade;$/;"	m	class:CModelInstance
m_fMorphTime	.\Sky.h	/^    float                           m_fMorphTime[2];$/;"	m	class:CSky
m_fMoveScaler	.\Common\DXUTmisc.h	/^    float                 m_fMoveScaler;          \/\/ Scaler for movement$/;"	m	class:CBaseCamera
m_fNearPlane	.\Common\DXUTmisc.h	/^    float                 m_fNearPlane;           \/\/ Near plane$/;"	m	class:CBaseCamera
m_fObjectRadius	.\XModelHeirarchy.h	/^    FLOAT                       m_fObjectRadius;        \/\/ Radius of bounding sphere of object$/;"	m	class:CXModelHeirarchy
m_fPixelOffsets	.\ImpostorAtlas.h	/^    float m_fPixelOffsets[12]; \/\/! Since DirectX renders to the middle of the pixel, but tex coordinates are top left, we offset this.$/;"	m	class:CImpostorAtlas
m_fRadius	.\Common\DXUTmisc.h	/^    FLOAT          m_fRadius;  \/\/ arc ball's radius in screen coords$/;"	m	class:CD3DArcBall
m_fRadius	.\Common\DXUTmisc.h	/^    float          m_fRadius;$/;"	m	class:CDXUTDirectionWidget
m_fRadius	.\Common\DXUTmisc.h	/^    float        m_fRadius;              \/\/ Distance from the camera to model $/;"	m	class:CModelViewerCamera
m_fRadiusTranslation	.\Common\DXUTmisc.h	/^    FLOAT          m_fRadiusTranslation; \/\/ arc ball's radius for translating the target$/;"	m	class:CD3DArcBall
m_fRotationScaler	.\Common\DXUTmisc.h	/^    float                 m_fRotationScaler;      \/\/ Scaler for rotation$/;"	m	class:CBaseCamera
m_fShades	.\ModelInstance.h	/^    float                       m_fShades, m_fMinShade;$/;"	m	class:CModelInstance
m_fSkyRadius	.\Sky.h	/^    float                           m_fSkyRadius;$/;"	m	class:CSky
m_fTextureTileScale	.\MipmapTerrain.h	/^    float m_fTextureTileScale;$/;"	m	class:CMipmapTerrain
m_fThreshold	.\ModelInstance.h	/^    float                       m_fThreshold;$/;"	m	class:CModelInstance
m_fTimeLastRefresh	.\Common\DXUTgui.h	/^    double m_fTimeLastRefresh;$/;"	m	class:CDXUTDialog
m_fTimeRemainder	.\PhysicsRoot.h	/^    float                                       m_fTimeRemainder; \/\/! Reminaing time since last iteration if less tha time step.$/;"	m	class:CPhysicsRoot
m_fTimeSinceBroadcast	.\Server.h	/^    float                                   m_fTimeSinceBroadcast; \/\/! accumulated time since last broadcast.$/;"	m	class:CServer
m_fTimeSinceLastColorUpdate	.\CloudBatch.h	/^    float m_fTimeSinceLastColorUpdate, m_fColorTimeThresh;$/;"	m	class:CCloud
m_fTimeSinceUpdate	.\Client.h	/^    float                                   m_fTimeSinceUpdate;$/;"	m	class:CClient
m_fTimeStep	.\PhysicsRoot.h	/^    float                                       m_fTimeStep; \/\/! Constant time step for engine.$/;"	m	class:CPhysicsRoot
m_fTotalDragTimeToZero	.\Common\DXUTmisc.h	/^    FLOAT                 m_fTotalDragTimeToZero; \/\/ Time it takes for velocity to go from full to 0$/;"	m	class:CBaseCamera
m_fUpdateInterval	.\Client.h	/^    float                                   m_fUpdateInterval;$/;"	m	class:CClient
m_fVerticalTile	.\Sphere.h	/^    float m_fHorizontalTile, m_fVerticalTile;$/;"	m	class:CSphere
m_fishSpeedInc	.\PostProcEffects.h	/^    float m_fishSpeedInc;$/;"	m	class:PostProcEffects
m_font	.\Button.h	/^	LPD3DXFONT				m_font;			\/\/ Font for Button text$/;"	m	class:CButton
m_font	.\Console.h	/^	LPD3DXFONT							m_font;$/;"	m	class:CConsole
m_font	.\HUD.h	/^	LPD3DXFONT						m_font;		\/\/! Font for text$/;"	m	class:CHud
m_font	.\MultiColumnList.h	/^	LPD3DXFONT							m_font;		\/\/! Font for text$/;"	m	class:CMultiColumnList
m_fullRectf	.\PolySprite.h	/^    RECTF m_fullRectf;$/;"	m	class:CPolySprite
m_hKL	.\Common\DXUTgui.h	/^        HKL   m_hKL;            \/\/ Keyboard layout$/;"	m	struct:CDXUTIMEEditBox::CInputLocale
m_height	.\Common\DXUTgui.h	/^    int m_height;$/;"	m	class:CDXUTDialog
m_height	.\Common\DXUTgui.h	/^    int m_width, m_height;$/;"	m	class:CDXUTControl
m_hmAnmEntries	.\World.h	/^	SpriteAnmHashMap					m_hmAnmEntries;	\/\/! Holds the sprite animation entries loaded in by .lal file and index in with key from GameTable.h$/;"	m	class:CWorld
m_hmCommands	.\GameGUI.h	/^	hash_map<UCHAR, GameCommandPtr>		m_hmCommands;$/;"	m	class:CGameGUI
m_hmDynamicObjects	.\PhysicsRoot.h	/^    DynamicObjectsHashMap                       m_hmDynamicObjects;$/;"	m	class:CPhysicsRoot
m_hmEntities	.\World.h	/^    EntityHashMap                       m_hmEntities; \/\/! playable characters and obstacles with meshes.$/;"	m	class:CWorld
m_hmPlayerCommands	.\GameEngine.h	/^    PlayerCommandHashMap                m_hmPlayerCommands;$/;"	m	class:CGameEngine
m_hmPlayers	.\GameEngine.h	/^    PlayerHashMap			            m_hmPlayers;$/;"	m	class:CGameEngine
m_hmRunningIterators	.\SpriteAnimMgr.h	/^    RunningEntriesHashMap m_hmRunningIterators; \/\/! Stores all the running iterators and indices.$/;"	m	class:CSpriteAnimMgr
m_hmRunningSpriteAnims	.\World.h	/^    RunningSpriteAnmHashMap             m_hmRunningSpriteAnims;$/;"	m	class:CWorld
m_hmSettings	.\GameSettings.h	/^	SettingsHashMap m_hmSettings;	\/\/ uses the enums in GameTable.h as keys to the setting.$/;"	m	class:CGameSettings
m_hmSunStates	.\World.h	/^    SunStateHashMap                     m_hmSunStates;  $/;"	m	class:CWorld
m_hmmio	.\Common\DXUTsound.h	/^    HMMIO         m_hmmio;       \/\/ MM I\/O handle for the WAVE$/;"	m	class:CWaveFile
m_iFocused	.\Common\DXUTgui.h	/^    int     m_iFocused;$/;"	m	class:CDXUTComboBox
m_iFontSize	.\Console.h	/^	int									m_iFontSize;$/;"	m	class:CConsole
m_iMaxLines	.\ConsoleBuffer.h	/^	UINT								m_iMaxLines; \/\/! Max number of lines visible$/;"	m	class:CConsoleBuffer
m_iMaxLines	.\MultiColumnList.h	/^	UINT								m_iMaxLines; \/\/! Max number of lines visible$/;"	m	class:CMultiColumnList
m_iSelected	.\Common\DXUTgui.h	/^    int     m_iSelected;$/;"	m	class:CDXUTComboBox
m_lRunningAnimIdx	.\SpriteAnimMgr.h	/^    list<SAnimStill> m_lRunningAnimIdx;   \/\/ The Currently active animations$/;"	m	class:CSpriteAnimMgr
m_lShortLives	.\GameEngine.h	/^    list<SShortLifeEntity>              m_lShortLives;$/;"	m	class:CGameEngine
m_llBaseTime	.\Common\DXUTmisc.h	/^    LONGLONG m_llBaseTime;$/;"	m	class:CDXUTTimer
m_llLastElapsedTime	.\Common\DXUTmisc.h	/^    LONGLONG m_llLastElapsedTime;$/;"	m	class:CDXUTTimer
m_llQPFTicksPerSec	.\Common\DXUTmisc.h	/^    LONGLONG m_llQPFTicksPerSec;$/;"	m	class:CDXUTTimer
m_llStopTime	.\Common\DXUTmisc.h	/^    LONGLONG m_llStopTime;$/;"	m	class:CDXUTTimer
m_lookAt	.\PolySprite.h	/^        D3DXVECTOR3 m_lookAt, m_eyePt;$/;"	m	struct:CPolySprite::DepthSortFunctor
m_mCameraRotLast	.\Common\DXUTmisc.h	/^    D3DXMATRIX   m_mCameraRotLast;$/;"	m	class:CModelViewerCamera
m_mCameraWorld	.\Common\DXUTmisc.h	/^    D3DXMATRIX m_mCameraWorld;       \/\/ World matrix of the camera (inverse of the view matrix)$/;"	m	class:CFirstPersonCamera
m_mGaussianKernel	.\World.h	/^    gdef::Matrix3x3                     m_mGaussianKernel;	$/;"	m	class:CWorld
m_mIdentity	.\World.h	/^    D3DXMATRIX                          m_mIdentity;$/;"	m	class:CWorld
m_mModelLastRot	.\Common\DXUTmisc.h	/^    D3DXMATRIX   m_mModelLastRot;        \/\/ Last arcball rotation matrix for model $/;"	m	class:CModelViewerCamera
m_mModelRot	.\Common\DXUTmisc.h	/^    D3DXMATRIX   m_mModelRot;            \/\/ Rotation matrix of model$/;"	m	class:CModelViewerCamera
m_mProj	.\Common\DXUTmisc.h	/^    D3DXMATRIX            m_mProj;              \/\/ Projection matrix$/;"	m	class:CBaseCamera
m_mProjection	.\PostProcEffects.h	/^    D3DXMATRIX m_mProjection;$/;"	m	class:ScreenAlignedQuad
m_mRot	.\Common\DXUTmisc.h	/^    D3DXMATRIXA16  m_mRot;$/;"	m	class:CDXUTDirectionWidget
m_mRotSnapshot	.\Common\DXUTmisc.h	/^    D3DXMATRIXA16  m_mRotSnapshot;$/;"	m	class:CDXUTDirectionWidget
m_mRotation	.\Common\DXUTmisc.h	/^    D3DXMATRIXA16  m_mRotation;         \/\/ Matrix for arc ball's orientation$/;"	m	class:CD3DArcBall
m_mShadowView	.\ShadowMap.h	/^    D3DXMATRIX                          m_mShadowView;$/;"	m	class:CShadowMap
m_mTranslation	.\Common\DXUTmisc.h	/^    D3DXMATRIXA16  m_mTranslation;      \/\/ Matrix for arc ball's position$/;"	m	class:CD3DArcBall
m_mTranslationDelta	.\Common\DXUTmisc.h	/^    D3DXMATRIXA16  m_mTranslationDelta; \/\/ Matrix for arc ball's position$/;"	m	class:CD3DArcBall
m_mView	.\Common\DXUTmisc.h	/^    D3DXMATRIX            m_mView;              \/\/ View matrix $/;"	m	class:CBaseCamera
m_mView	.\Common\DXUTmisc.h	/^    D3DXMATRIX     m_mView;$/;"	m	class:CDXUTDirectionWidget
m_mWorld	.\Common\DXUTmisc.h	/^    D3DXMATRIX   m_mWorld;               \/\/ World matrix of model$/;"	m	class:CModelViewerCamera
m_mWorld	.\Pillar.h	/^	D3DXMATRIX	m_mWorld;$/;"	m	class:CPillar
m_mWorld	.\QuadTree.h	/^    D3DXMATRIX m_mWorld;    \/\/! The QuadTree acts as if it's created at 0,0,0 until displaced by this world matrix when rendering and culling.    $/;"	m	class:CQuadTree
m_mat	.\Common\DXUTMesh.h	/^    D3DXMATRIX m_mat;$/;"	m	class:CDXUTMeshFrame
m_mmioinfoOut	.\Common\DXUTsound.h	/^    MMIOINFO      m_mmioinfoOut;$/;"	m	class:CWaveFile
m_mtxIdentity	.\PolySprite.h	/^    D3DXMATRIX m_mtxIdentity;$/;"	m	class:CPolySprite
m_nActiveButtonMask	.\Common\DXUTmisc.h	/^    int        m_nActiveButtonMask;  \/\/ Mask to determine which button to enable for rotation$/;"	m	class:CFirstPersonCamera
m_nAtlasHeight	.\ImpostorAtlas.h	/^    const int m_nAtlasWidth, m_nAtlasHeight;$/;"	m	class:CImpostorAtlas
m_nAtlasId	.\CloudBatch.h	/^    int m_nAtlasId;$/;"	m	class:CCloud
m_nAtlasWidth	.\ImpostorAtlas.h	/^    const int m_nAtlasWidth, m_nAtlasHeight;$/;"	m	class:CImpostorAtlas
m_nBorder	.\Common\DXUTgui.h	/^    int      m_nBorder;      \/\/ Border of the window$/;"	m	class:CDXUTEditBox
m_nBorder	.\Common\DXUTgui.h	/^    int m_nBorder;$/;"	m	class:CDXUTListBox
m_nBufferSize	.\Common\DXUTgui.h	/^    int    m_nBufferSize;   \/\/ Size of the buffer allocated, in characters$/;"	m	class:CUniBuffer
m_nButtonGroup	.\Common\DXUTgui.h	/^    UINT m_nButtonGroup;$/;"	m	class:CDXUTRadioButton
m_nButtonX	.\Common\DXUTgui.h	/^    int m_nButtonX;$/;"	m	class:CDXUTSlider
m_nCaptionHeight	.\Common\DXUTgui.h	/^    int m_nCaptionHeight;$/;"	m	class:CDXUTDialog
m_nCaret	.\Common\DXUTgui.h	/^    int      m_nCaret;       \/\/ Caret position, in characters$/;"	m	class:CDXUTEditBox
m_nCellSpacing	.\CloudSky.h	/^    int m_nCellSpacing, m_nHeightSpacing;$/;"	m	class:CCloudSky
m_nCellSpacing	.\Foliage.h	/^	UINT							m_nMaxWidth, m_nMaxLength, m_nCellSpacing, m_nHeightSpacing;    $/;"	m	class:CFoliage
m_nCharacterKey	.\World.h	/^    UINT                                m_nCharacterKey;$/;"	m	class:CWorld
m_nColumns	.\MultiColumnList.h	/^	UINT								m_nColumns;$/;"	m	class:CMultiColumnList
m_nCurrent	.\ProgressBar.h	/^	int m_nCurrent, m_nMax;$/;"	m	class:CProgressBar
m_nCurrentAnimationSet	.\ModelInstance.h	/^    UINT                        m_nCurrentAnimationSet;$/;"	m	class:CModelInstance
m_nCurrentButtonMask	.\Common\DXUTmisc.h	/^    int                   m_nCurrentButtonMask;   \/\/ mask of which buttons are down$/;"	m	class:CBaseCamera
m_nCurrentTrack	.\ModelInstance.h	/^    DWORD                       m_nCurrentTrack;$/;"	m	class:CModelInstance
m_nDecimals	.\NumberToSprite.h	/^    int m_nDecimals;$/;"	m	class:CNumberToSprite
m_nDefaultControlID	.\Common\DXUTgui.h	/^    int m_nDefaultControlID;$/;"	m	class:CDXUTDialog
m_nDragOffset	.\Common\DXUTgui.h	/^    int m_nDragOffset; \/\/ Drag offset from the center of the button$/;"	m	class:CDXUTSlider
m_nDragX	.\Common\DXUTgui.h	/^    int m_nDragX;      \/\/ Mouse position at start of drag$/;"	m	class:CDXUTSlider
m_nDropHeight	.\Common\DXUTgui.h	/^    int     m_nDropHeight;$/;"	m	class:CDXUTComboBox
m_nEnd	.\Common\DXUTgui.h	/^    int m_nEnd;       \/\/ The index after the last item$/;"	m	class:CDXUTScrollBar
m_nEntries	.\ImpostorAtlas.h	/^    int m_nEntries;$/;"	m	class:CImpostorAtlas
m_nFirstVisible	.\Common\DXUTgui.h	/^    int      m_nFirstVisible;\/\/ First visible character in the edit control$/;"	m	class:CDXUTEditBox
m_nFlaggedToDraw	.\ImpostorAtlas.h	/^    int m_nFlaggedToDraw;$/;"	m	class:CImpostorAtlas
m_nHeight	.\Common\DXUTmisc.h	/^    INT            m_nHeight;  \/\/ arc ball's window height$/;"	m	class:CD3DArcBall
m_nHeight	.\GUIObject.h	/^	int						m_nHeight, m_nWidth;	\/\/! dimensions$/;"	m	class:CGUIObject
m_nHeightSpacing	.\CloudSky.h	/^    int m_nCellSpacing, m_nHeightSpacing;$/;"	m	class:CCloudSky
m_nHeightSpacing	.\Foliage.h	/^	UINT							m_nMaxWidth, m_nMaxLength, m_nCellSpacing, m_nHeightSpacing;    $/;"	m	class:CFoliage
m_nHotkey	.\Common\DXUTgui.h	/^    UINT m_nHotkey;            \/\/ Virtual key code for this control's hotkey$/;"	m	class:CDXUTControl
m_nImpostorHeight	.\ImpostorAtlas.h	/^    const int m_nImpostorWidth, m_nImpostorHeight;$/;"	m	class:CImpostorAtlas
m_nImpostorWidth	.\ImpostorAtlas.h	/^    const int m_nImpostorWidth, m_nImpostorHeight;$/;"	m	class:CImpostorAtlas
m_nIndicatorWidth	.\Common\DXUTgui.h	/^    int            m_nIndicatorWidth;     \/\/ Width of the indicator symbol$/;"	m	class:CDXUTIMEEditBox
m_nIndices	.\Sky.h	/^    UINT                            m_nVertices, m_nIndices, m_nSphereTriangles;    $/;"	m	class:CSky
m_nIndices	.\Sphere.h	/^    int m_nVertices, m_nIndices;$/;"	m	class:CSphere
m_nKeysDown	.\GameSettings.h	/^    int m_nKeysDown;    $/;"	m	class:CGameSettings
m_nLineHeight	.\Common\DXUTmisc.h	/^    int          m_nLineHeight;$/;"	m	class:CDXUTTextHelper
m_nMargin	.\Common\DXUTgui.h	/^    int m_nMargin;$/;"	m	class:CDXUTListBox
m_nMax	.\Common\DXUTgui.h	/^    int m_nMax;$/;"	m	class:CDXUTSlider
m_nMax	.\ProgressBar.h	/^	int m_nCurrent, m_nMax;$/;"	m	class:CProgressBar
m_nMaxHeight	.\Common\DXUTenum.h	/^    UINT m_nMaxHeight;$/;"	m	class:CD3DEnumeration
m_nMaxImpostors	.\ImpostorAtlas.h	/^    const int m_nMaxImpostors;$/;"	m	class:CImpostorAtlas
m_nMaxLength	.\Foliage.h	/^	UINT							m_nMaxWidth, m_nMaxLength, m_nCellSpacing, m_nHeightSpacing;    $/;"	m	class:CFoliage
m_nMaxSize	.\Common\DXUTmisc.h	/^    int m_nMaxSize;     \/\/ max allocated$/;"	m	class:CGrowableArray
m_nMaxWidth	.\Common\DXUTenum.h	/^    UINT m_nMaxWidth;$/;"	m	class:CD3DEnumeration
m_nMaxWidth	.\Foliage.h	/^	UINT							m_nMaxWidth, m_nMaxLength, m_nCellSpacing, m_nHeightSpacing;    $/;"	m	class:CFoliage
m_nMin	.\Common\DXUTgui.h	/^    int m_nMin;$/;"	m	class:CDXUTSlider
m_nMinHeight	.\Common\DXUTenum.h	/^    UINT m_nMinHeight;$/;"	m	class:CD3DEnumeration
m_nMinWidth	.\Common\DXUTenum.h	/^    UINT m_nMinWidth;$/;"	m	class:CD3DEnumeration
m_nMouseWheelDelta	.\Common\DXUTmisc.h	/^    int                   m_nMouseWheelDelta;     \/\/ Amount of middle wheel scroll (+\/-) $/;"	m	class:CBaseCamera
m_nMouseWheelDelta	.\GameEngine.h	/^    int                                 m_nMouseX, m_nMouseY, m_nMouseWheelDelta;$/;"	m	class:CGameEngine
m_nMouseX	.\GameEngine.h	/^    int                                 m_nMouseX, m_nMouseY, m_nMouseWheelDelta;$/;"	m	class:CGameEngine
m_nMouseY	.\GameEngine.h	/^    int                                 m_nMouseX, m_nMouseY, m_nMouseWheelDelta;$/;"	m	class:CGameEngine
m_nMultisampleQualityMax	.\Common\DXUTenum.h	/^    UINT m_nMultisampleQualityMax;$/;"	m	class:CD3DEnumeration
m_nPageSize	.\Common\DXUTgui.h	/^    int m_nPageSize;  \/\/ How many items are displayable in one page$/;"	m	class:CDXUTScrollBar
m_nParam	.\Button.h	/^	int						m_nParam;		\/\/ (Optional) parameter that refers to this Button$/;"	m	class:CButton
m_nPlayerGroupID	.\PhysicsRoot.h	/^	int											m_nPlayerGroupID, m_nSLEGroupID; \/\/! Group IDs $/;"	m	class:CPhysicsRoot
m_nPosition	.\Common\DXUTgui.h	/^    int m_nPosition;  \/\/ Position of the first displayed item$/;"	m	class:CDXUTScrollBar
m_nRefreshMax	.\Common\DXUTenum.h	/^    UINT m_nRefreshMax;$/;"	m	class:CD3DEnumeration
m_nRefreshMin	.\Common\DXUTenum.h	/^    UINT m_nRefreshMin;$/;"	m	class:CD3DEnumeration
m_nRings	.\Sphere.h	/^    int m_nRings, m_nSegments;$/;"	m	class:CSphere
m_nRotateCameraButtonMask	.\Common\DXUTmisc.h	/^    int          m_nRotateCameraButtonMask;$/;"	m	class:CModelViewerCamera
m_nRotateMask	.\Common\DXUTmisc.h	/^    int            m_nRotateMask;$/;"	m	class:CDXUTDirectionWidget
m_nRotateModelButtonMask	.\Common\DXUTmisc.h	/^    int          m_nRotateModelButtonMask;$/;"	m	class:CModelViewerCamera
m_nRowHeight	.\MultiColumnList.h	/^	int									m_nRowHeight;$/;"	m	class:CMultiColumnList
m_nSBWidth	.\Common\DXUTgui.h	/^    int     m_nSBWidth;$/;"	m	class:CDXUTComboBox
m_nSBWidth	.\Common\DXUTgui.h	/^    int m_nSBWidth;$/;"	m	class:CDXUTListBox
m_nSLEGroupID	.\PhysicsRoot.h	/^	int											m_nPlayerGroupID, m_nSLEGroupID; \/\/! Group IDs $/;"	m	class:CPhysicsRoot
m_nSYMBOLS	.\NumberToSprite.h	/^    static const int m_nSYMBOLS = 13; \/\/! number of symbols horizontal in texture$/;"	m	class:CNumberToSprite
m_nSegments	.\Sphere.h	/^    int m_nRings, m_nSegments;$/;"	m	class:CSphere
m_nSelStart	.\Common\DXUTgui.h	/^    int      m_nSelStart;    \/\/ Starting position of the selection. The caret marks the end.$/;"	m	class:CDXUTEditBox
m_nSelStart	.\Common\DXUTgui.h	/^    int m_nSelStart;    \/\/ Index of the item where selection starts (for handling multi-selection)$/;"	m	class:CDXUTListBox
m_nSelected	.\Common\DXUTgui.h	/^    int m_nSelected;    \/\/ Index of the selected item for single selection list box$/;"	m	class:CDXUTListBox
m_nShadowUpdateCount	.\World.h	/^    int                                 m_nShadowUpdateLimit, m_nShadowUpdateCount;$/;"	m	class:CWorld
m_nShadowUpdateLimit	.\World.h	/^    int                                 m_nShadowUpdateLimit, m_nShadowUpdateCount;$/;"	m	class:CWorld
m_nSize	.\Common\DXUTmisc.h	/^    int m_nSize;        \/\/ # of elements (upperBound - 1)$/;"	m	class:CGrowableArray
m_nSpacing	.\Common\DXUTgui.h	/^    int      m_nSpacing;     \/\/ Spacing between the text and the edge of border$/;"	m	class:CDXUTEditBox
m_nSphereTriangles	.\Sky.h	/^    UINT                            m_nVertices, m_nIndices, m_nSphereTriangles;    $/;"	m	class:CSky
m_nSphereTriangles	.\Sphere.h	/^    int m_nSphereTriangles;$/;"	m	class:CSphere
m_nStart	.\Common\DXUTgui.h	/^    int m_nStart;     \/\/ First item$/;"	m	class:CDXUTScrollBar
m_nTex	.\Sprite.h	/^    int m_nTex;    $/;"	m	class:CSprite
m_nTextHeight	.\Common\DXUTgui.h	/^    int m_nTextHeight;  \/\/ Height of a single line of text$/;"	m	class:CDXUTListBox
m_nValue	.\Common\DXUTgui.h	/^    int m_nValue;$/;"	m	class:CDXUTSlider
m_nVertices	.\Sky.h	/^    UINT                            m_nVertices, m_nIndices, m_nSphereTriangles;    $/;"	m	class:CSky
m_nVertices	.\Sphere.h	/^    int m_nVertices, m_nIndices;$/;"	m	class:CSphere
m_nWidth	.\Common\DXUTmisc.h	/^    INT            m_nWidth;   \/\/ arc ball's window width$/;"	m	class:CD3DArcBall
m_nWidth	.\GUIObject.h	/^	int						m_nHeight, m_nWidth;	\/\/! dimensions$/;"	m	class:CGUIObject
m_nX	.\GUIObject.h	/^	int						m_nX, m_nY;				\/\/! screen coordinates$/;"	m	class:CGUIObject
m_nY	.\GUIObject.h	/^	int						m_nX, m_nY;				\/\/! screen coordinates$/;"	m	class:CGUIObject
m_nZoomButtonMask	.\Common\DXUTmisc.h	/^    int          m_nZoomButtonMask;$/;"	m	class:CModelViewerCamera
m_numIndices	.\Pillar.h	/^	UINT m_numVertices, m_numIndices;$/;"	m	class:CPillar
m_numSlices	.\Pillar.h	/^	UINT m_numSlices, m_numStacks;$/;"	m	class:CPillar
m_numStacks	.\Pillar.h	/^	UINT m_numSlices, m_numStacks;$/;"	m	class:CPillar
m_numVertices	.\Pillar.h	/^	UINT m_numVertices, m_numIndices;$/;"	m	class:CPillar
m_oldFishSpeed	.\PostProcEffects.h	/^    float m_oldFishSpeed;       \/\/ old speed used for the fisheye$/;"	m	class:PostProcEffects
m_pAdjacencyBuffer	.\XModelHeirarchy.h	/^    LPD3DXBUFFER                m_pAdjacencyBuffer, m_pMaterialsBuffer;$/;"	m	class:CXModelHeirarchy
m_pAhead	.\ImpostorAtlas.h	/^        const D3DXVECTOR3 *m_pEyePt, *m_pAhead;$/;"	m	struct:CImpostorAtlas::PtrEntrySort
m_pAnimController	.\ModelInstance.h	/^    ID3DXAnimationController*   m_pAnimController;  \/\/ Animation controller for this instance.$/;"	m	class:CModelInstance
m_pAnimController	.\XModelHeirarchy.h	/^    ID3DXAnimationController*   m_pAnimController;$/;"	m	class:CXModelHeirarchy
m_pBasinIndices	.\QuadTree.h	/^	IDirect3DIndexBuffer9  *m_pBasinIndices;$/;"	m	class:CQuadTree
m_pBasinTexture	.\QuadTree.h	/^	IDirect3DTexture9      *m_pBasinTexture;$/;"	m	class:CQuadTree
m_pBasinVertices	.\QuadTree.h	/^	IDirect3DVertexBuffer9 *m_pBasinVertices;$/;"	m	class:CQuadTree
m_pBindPoseFrameRoot	.\XModelHeirarchy.h	/^    LPD3DXFRAME                 m_pBindPoseFrameRoot;$/;"	m	class:CXModelHeirarchy
m_pBlurX	.\PostProcEffects.h	/^    LPD3DXEFFECT            m_pBlurX; \/\/ Effect for BlurX.fx$/;"	m	class:PostProcEffects
m_pBlurXSurface	.\PostProcEffects.h	/^    LPDIRECT3DSURFACE9      m_pBlurXSurface; \/\/ Corresponding surface$/;"	m	class:PostProcEffects
m_pBlurXTexture	.\PostProcEffects.h	/^    LPDIRECT3DTEXTURE9      m_pBlurXTexture; \/\/ Texture used for horizontal blurring$/;"	m	class:PostProcEffects
m_pBlurY	.\PostProcEffects.h	/^    LPD3DXEFFECT            m_pBlurY; \/\/ Effect for BlurY.fx$/;"	m	class:PostProcEffects
m_pBlurYSurface	.\PostProcEffects.h	/^    LPDIRECT3DSURFACE9      m_pBlurYSurface; \/\/ Corresponding surface$/;"	m	class:PostProcEffects
m_pBlurYTexture	.\PostProcEffects.h	/^    LPDIRECT3DTEXTURE9      m_pBlurYTexture; \/\/ Texture used for vertical blurring$/;"	m	class:PostProcEffects
m_pBubbles	.\World.h	/^    CBubbles*                           m_pBubbles;     \/\/! bubbles around islands$/;"	m	class:CWorld
m_pBuffer	.\Console.h	/^	CConsoleBuffer*						m_pBuffer;$/;"	m	class:CConsole
m_pCallbackEvent	.\Common\DXUTgui.h	/^    PCALLBACKDXUTGUIEVENT m_pCallbackEvent;$/;"	m	class:CDXUTDialog
m_pCallbackEventUserContext	.\Common\DXUTgui.h	/^    void* m_pCallbackEventUserContext;$/;"	m	class:CDXUTDialog
m_pChild	.\Common\DXUTMesh.h	/^    CDXUTMeshFrame* m_pChild;$/;"	m	class:CDXUTMeshFrame
m_pClient	.\GameEngine.h	/^    CClient*                            m_pClient;      \/\/! Network client that makes requests to connected server (if present).$/;"	m	class:CGameEngine
m_pCloudAtlas	.\CloudSky.h	/^    LPDIRECT3DTEXTURE9 m_pCloudAtlas; \/\/! The Cloud Atlas from which the CClouds blocks are taken.$/;"	m	class:CCloudSky
m_pCloudSky	.\World.h	/^    CCloudSky*                          m_pCloudSky;$/;"	m	class:CWorld
m_pCloudSprite	.\CloudBatch.h	/^    CPolySprite* m_pCloudSprite; \/\/! Sprite that holds the texture atlas for the clouds, a 512x512. NOT OWNER$/;"	m	class:CCloudBatch
m_pConsole	.\GameGUI.h	/^	CConsole*				m_pConsole;		\/\/! Console, owned$/;"	m	class:CGameGUI
m_pControlMouseOver	.\Common\DXUTgui.h	/^    CDXUTControl* m_pControlMouseOver;           \/\/ The control which is hovered over$/;"	m	class:CDXUTDialog
m_pD3D	.\Common\DXUTenum.h	/^    IDirect3D9* m_pD3D;                                    $/;"	m	class:CD3DEnumeration
m_pD3DXLine	.\Common\DXUTmisc.h	/^    ID3DXLine* m_pD3DXLine;$/;"	m	class:CDXUTLineManager
m_pD3DXSprite	.\Sprite.h	/^    LPD3DXSPRITE m_pD3DXSprite;$/;"	m	class:CSprite
m_pDS	.\Common\DXUTsound.h	/^    IDirectSound8* m_pDS;$/;"	m	class:CSoundManager
m_pData	.\Common\DXUTmisc.h	/^    TYPE* m_pData;      \/\/ the actual array of data$/;"	m	class:CGrowableArray
m_pDecl	.\Common\DXUTMesh.h	/^    IDirect3DVertexDeclaration9* m_pDecl;$/;"	m	class:CDXUTMesh
m_pDialog	.\Common\DXUTgui.h	/^    CDXUTDialog* m_pDialog;    \/\/ Parent container$/;"	m	class:CDXUTControl
m_pDownSample	.\PostProcEffects.h	/^    LPD3DXEFFECT            m_pDownSample; \/\/ Effect for Downsample.fx$/;"	m	class:PostProcEffects
m_pDownSampleSurface	.\PostProcEffects.h	/^    LPDIRECT3DSURFACE9      m_pDownSampleSurface; \/\/ Downsample surface$/;"	m	class:PostProcEffects
m_pDownSampleTexture	.\PostProcEffects.h	/^    LPDIRECT3DTEXTURE9      m_pDownSampleTexture; \/\/ Downsample texture - used$/;"	m	class:PostProcEffects
m_pDynamicTexture	.\IImpostorable.h	/^    LPDIRECT3DTEXTURE9      m_pDynamicTexture;$/;"	m	class:IImpostorable
m_pEdges	.\PostProcEffects.h	/^    LPD3DXEFFECT            m_pEdges;$/;"	m	class:PostProcEffects
m_pEffect	.\XModelHeirarchy.h	/^    ID3DXEffect*                m_pEffect;       \/\/ D3DX effect interface$/;"	m	class:CXModelHeirarchy
m_pEngine	.\GameRoot.h	/^    CGameEngine*                        m_pEngine;  \/\/! Listens to player, drives character, and handles collision events.    $/;"	m	class:CGameRoot
m_pEyePt	.\ImpostorAtlas.h	/^        const D3DXVECTOR3 *m_pEyePt, *m_pAhead;$/;"	m	struct:CImpostorAtlas::PtrEntrySort
m_pFishEye	.\PostProcEffects.h	/^    LPD3DXEFFECT            m_pFishEye;$/;"	m	class:PostProcEffects
m_pFoliage	.\QuadTree.h	/^    CFoliage* m_pFoliage;       \/\/! TODO: Pointer to foliage (animated grass meadow)$/;"	m	class:CQuadTree
m_pFont	.\Common\DXUTmisc.h	/^    ID3DXFont*   m_pFont;$/;"	m	class:CDXUTTextHelper
m_pFont	.\World.h	/^    ID3DXFont*                          m_pFont;          \/\/! Font for drawing text$/;"	m	class:CWorld
m_pFontNode	.\Common\DXUTgui.h	/^    DXUTFontNode* m_pFontNode;          \/\/ Font node for the font that this buffer uses$/;"	m	class:CUniBuffer
m_pFrameRoot	.\ModelInstance.h	/^    LPD3DXFRAME                 m_pFrameRoot;   \/\/ Frame Root of this Instance for heirarchies$/;"	m	class:CModelInstance
m_pFullBuffer	.\PostProcEffects.h	/^    LPDIRECT3DVERTEXBUFFER9  m_pFullBuffer; \/\/ Full-screen quad vertex buffer$/;"	m	class:PostProcEffects
m_pFunc	.\Console.h	/^	GUICallback							m_pFunc;		\/\/ pointer to command function$/;"	m	class:CConsole
m_pFunc	.\Menu.h	/^	GUICallback				m_pFunc;		\/\/ pointer to command function$/;"	m	class:CMenu
m_pGUI	.\Console.h	/^	CGameGUI*							m_pGUI;$/;"	m	class:CConsole
m_pGUI	.\GameRoot.h	/^	CGameGUI*							m_pGUI;		\/\/! GUI wrapper object (contains menu and console)$/;"	m	class:CGameRoot
m_pGUI	.\Menu.h	/^	CGameGUI*				m_pGUI;			\/\/ pointer to GUI wrapper object$/;"	m	class:CMenu
m_pGameRoot	.\Console.h	/^	CGameRoot*							m_pGameRoot;$/;"	m	class:CConsole
m_pGameRoot	.\GameGUI.h	/^	CGameRoot*				m_pGameRoot;	\/\/! NOT OWNED BY THIS CLASS, SO NOT CLEANED UP ON DESTRUCTION$/;"	m	class:CGameGUI
m_pGameSettings	.\GameEngine.h	/^    CGameSettings*                      m_pGameSettings;    \/\/! Not owner dipshit. don't delete.$/;"	m	class:CGameEngine
m_pGrassDecl	.\Foliage.h	/^    IDirect3DVertexDeclaration9*    m_pGrassDecl; \/\/! Vertex decl for sky rendering$/;"	m	class:CFoliage
m_pGrassEffect	.\Foliage.h	/^    ID3DXEffect*                    m_pGrassEffect; \/\/! D3DX effect interface$/;"	m	class:CFoliage
m_pGrey	.\PostProcEffects.h	/^    LPD3DXEFFECT			      m_pGrey;$/;"	m	class:PostProcEffects
m_pHalfBuffer	.\PostProcEffects.h	/^    LPDIRECT3DVERTEXBUFFER9  m_pHalfBuffer; \/\/ Half-screen quad vertex buffer$/;"	m	class:PostProcEffects
m_pHost	.\GameEngine.h	/^    CServer*                            m_pHost;    \/\/! If hosting game, responds to client requests.$/;"	m	class:CGameEngine
m_pHud	.\GameGUI.h	/^	CHud*					m_pHud;			\/\/! HUD, owned$/;"	m	class:CGameGUI
m_pIB	.\Common\DXUTMesh.h	/^    IDirect3DIndexBuffer9*  m_pIB;$/;"	m	class:CDXUTMesh
m_pIB	.\Foliage.h	/^    LPDIRECT3DINDEXBUFFER9          m_pIB;$/;"	m	class:CFoliage
m_pIB	.\Pillar.h	/^	IDirect3DIndexBuffer9  *m_pIB;$/;"	m	class:CPillar
m_pIB	.\Sphere.h	/^    LPDIRECT3DINDEXBUFFER9          m_pIB;$/;"	m	class:CSphere
m_pImpostorAtlas	.\CloudBatch.h	/^    CImpostorAtlas* m_pImpostorAtlas; \/\/ not owner dont do shit. This is where clouds render their impostor. NOT OWNER$/;"	m	class:CCloudBatch
m_pImpostorAtlas	.\CloudBatch.h	/^    CImpostorAtlas* m_pImpostorAtlas; \/\/! Not owner, don't do shit.$/;"	m	class:CCloud
m_pImpostorAtlas	.\CloudSky.h	/^    CImpostorAtlas *m_pImpostorAtlas;   \/\/! Atlas for where clouds render their impostor.$/;"	m	class:CCloudSky
m_pImpostorAtlasShadow	.\CloudSky.h	/^    CImpostorAtlas *m_pImpostorAtlasShadow;   \/\/! Atlas for where clouds render their impostor for shadowmap lightspace.$/;"	m	class:CCloudSky
m_pIndexedVertexShader	.\XModelHeirarchy.h	/^    IDirect3DVertexShader9*     m_pIndexedVertexShader[4];$/;"	m	class:CXModelHeirarchy
m_pInputSurface	.\PostProcEffects.h	/^    LPDIRECT3DSURFACE9      m_pInputSurface, m_pRenderToSurface, m_pRenderToDepthBuffer;$/;"	m	class:PostProcEffects
m_pInputTexture	.\PostProcEffects.h	/^    LPDIRECT3DTEXTURE9      m_pInputTexture, m_pRenderToTexture;$/;"	m	class:PostProcEffects
m_pIsDeviceAcceptableFuncUserContext	.\Common\DXUTenum.h	/^    void* m_pIsDeviceAcceptableFuncUserContext;$/;"	m	class:CD3DEnumeration
m_pKernelOps	.\PostProcEffects.h	/^    LPD3DXEFFECT            m_pKernelOps;$/;"	m	class:PostProcEffects
m_pKernelOpsSurface	.\PostProcEffects.h	/^    LPDIRECT3DSURFACE9      m_pKernelOpsSurface;$/;"	m	class:PostProcEffects
m_pKernelOpsTexture	.\PostProcEffects.h	/^    LPDIRECT3DTEXTURE9		  m_pKernelOpsTexture;$/;"	m	class:PostProcEffects
m_pLine	.\Console.h	/^	CConsoleLine*						m_pLine;$/;"	m	class:CConsole
m_pList	.\ServerBrowser.h	/^	CMultiColumnList*					m_pList;$/;"	m	class:CServerBrowser
m_pMP3Player	.\GameRoot.h	/^    Cmp3player*                         m_pMP3Player;   \/\/! umm for music, duh.    $/;"	m	class:CGameRoot
m_pManager	.\Common\DXUTgui.h	/^    CDXUTDialogResourceManager* m_pManager;$/;"	m	class:CDXUTDialog
m_pMaterials	.\Common\DXUTMesh.h	/^    D3DMATERIAL9*           m_pMaterials;$/;"	m	class:CDXUTMesh
m_pMaterialsBuffer	.\XModelHeirarchy.h	/^    LPD3DXBUFFER                m_pAdjacencyBuffer, m_pMaterialsBuffer;$/;"	m	class:CXModelHeirarchy
m_pMenu	.\Button.h	/^	CMenu*					m_pMenu;		\/\/ Pointer to menu, not cleaned up on destruction$/;"	m	class:CButton
m_pMenu	.\GameGUI.h	/^	CMenu*					m_pMenu;		\/\/! Menu, owned$/;"	m	class:CGameGUI
m_pMesh	.\Common\DXUTMesh.h	/^    CDXUTMesh*  m_pMesh;$/;"	m	class:CDXUTMeshFrame
m_pMesh	.\Common\DXUTMesh.h	/^    LPD3DXMESH              m_pMesh;   \/\/ Managed mesh$/;"	m	class:CDXUTMesh
m_pMyPlayer	.\GameEngine.h	/^	SPlayer*							m_pMyPlayer;$/;"	m	class:CGameEngine
m_pNetworkRoot	.\GameRoot.h	/^    CNetworkRoot*                       m_pNetworkRoot; \/\/! Top network layer that finds internet and lan servers.$/;"	m	class:CGameRoot
m_pNext	.\Common\DXUTMesh.h	/^    CDXUTMeshFrame* m_pNext;$/;"	m	class:CDXUTMeshFrame
m_pNextDialog	.\Common\DXUTgui.h	/^    CDXUTDialog* m_pNextDialog;$/;"	m	class:CDXUTDialog
m_pNotBloomMap	.\World.h	/^    LPDIRECT3DTEXTURE9                  m_pNotBloomMap; \/\/! A RENDERTARGET Used to store what not to bloom.$/;"	m	class:CWorld
m_pNotBloomMapSurface	.\World.h	/^    LPDIRECT3DSURFACE9                  m_pNotBloomMapSurface; \/\/ to render to above.    $/;"	m	class:CWorld
m_pOldDepthBuffer	.\PostProcEffects.h	/^    LPDIRECT3DSURFACE9		  m_pOldRT, m_pOldDepthBuffer;$/;"	m	class:PostProcEffects
m_pOldRT	.\PostProcEffects.h	/^    LPDIRECT3DSURFACE9		  m_pOldRT, m_pOldDepthBuffer;$/;"	m	class:PostProcEffects
m_pOldRt	.\ShadowMap.h	/^    LPDIRECT3DSURFACE9                  m_pOldRt;       \/\/ stores old render target to be restored when EndShadowMap$/;"	m	class:CShadowMap
m_pOldZBuffer	.\ShadowMap.h	/^    LPDIRECT3DSURFACE9                  m_pOldZBuffer;  \/\/! stores old z buffer$/;"	m	class:CShadowMap
m_pPPEffects	.\World.h	/^    PostProcEffects*        			m_pPPEffects;   \/\/! PP Effects such as bloom and edge detection.$/;"	m	class:CWorld
m_pPhysicsRoot	.\GameEngine.h	/^    CPhysicsRoot*                       m_pPhysicsRoot; $/;"	m	class:CGameEngine
m_pPillar	.\QuadTree.h	/^	CPillar* m_pPillar;$/;"	m	class:CQuadTree
m_pPolySprite	.\CloudSky.h	/^    CPolySprite *m_pPolySprite; \/\/! Sprite that uses quads as opposed to point sprites.$/;"	m	class:CCloudSky
m_pPolySprite	.\World.h	/^    CPolySprite*                        m_pPolySprite;  \/\/! Render the damn spriteAnimMgr stuff.$/;"	m	class:CWorld
m_pPolySpriteShadow	.\CloudSky.h	/^    CPolySprite *m_pPolySpriteShadow; \/\/! Sprite that uses quads as opposed to point sprites. For shadow clouds.$/;"	m	class:CCloudSky
m_pPrevDialog	.\Common\DXUTgui.h	/^    CDXUTDialog* m_pPrevDialog;$/;"	m	class:CDXUTDialog
m_pQuadBuffer	.\PostProcEffects.h	/^    LPDIRECT3DVERTEXBUFFER9  m_pQuadBuffer; \/\/ Quad vertex buffer$/;"	m	class:PostProcEffects
m_pQuadTexture	.\PostProcEffects.h	/^    LPDIRECT3DTEXTURE9      m_pQuadTexture; \/\/ Light probe texture$/;"	m	class:PostProcEffects
m_pRakClient	.\Client.h	/^    RakClientInterface*                     m_pRakClient;    $/;"	m	class:CClient
m_pRakServer	.\Server.h	/^    RakServerInterface*                     m_pRakServer;$/;"	m	class:CServer
m_pRefractEffect	.\Bubbles.h	/^    ID3DXEffect*                    m_pRefractEffect; \/\/! D3DX effect interface            $/;"	m	class:CBubbles
m_pRenderToDepthBuffer	.\PostProcEffects.h	/^    LPDIRECT3DSURFACE9      m_pInputSurface, m_pRenderToSurface, m_pRenderToDepthBuffer;$/;"	m	class:PostProcEffects
m_pRenderToSurface	.\IImpostorable.h	/^    LPD3DXRENDERTOSURFACE   m_pRenderToSurface;$/;"	m	class:IImpostorable
m_pRenderToSurface	.\PostProcEffects.h	/^    LPDIRECT3DSURFACE9      m_pInputSurface, m_pRenderToSurface, m_pRenderToDepthBuffer;$/;"	m	class:PostProcEffects
m_pRenderToTexture	.\PostProcEffects.h	/^    LPDIRECT3DTEXTURE9      m_pInputTexture, m_pRenderToTexture;$/;"	m	class:PostProcEffects
m_pResourceBuffer	.\Common\DXUTsound.h	/^    CHAR*         m_pResourceBuffer;$/;"	m	class:CWaveFile
m_pServerBrowser	.\GameGUI.h	/^	CServerBrowser*			m_pServerBrowser;	\/\/! Server browser, owned$/;"	m	class:CGameGUI
m_pShadowMap	.\World.h	/^    CShadowMap*                         m_pShadowMap;$/;"	m	class:CWorld
m_pShadowMapEffect	.\IImpostorable.h	/^    ID3DXEffect*            m_pShadowMapEffect;       \/\/ D3DX effect interface$/;"	m	class:IImpostorable
m_pShadowMapSurface	.\ShadowMap.h	/^    LPDIRECT3DSURFACE9                  m_pShadowMapSurface;    \/\/  surface of above.$/;"	m	class:CShadowMap
m_pShadowMapTex	.\ShadowMap.h	/^    LPDIRECT3DTEXTURE9                  m_pShadowMapTex;   \/\/ where we render the shadowmap (duh)$/;"	m	class:CShadowMap
m_pShadowZBufferSurface	.\ShadowMap.h	/^    LPDIRECT3DSURFACE9                  m_pShadowZBufferSurface;$/;"	m	class:CShadowMap
m_pSky	.\CloudSky.h	/^    CSky* m_pSky;    $/;"	m	class:CCloudSky
m_pSkyDomeIB	.\Sky.h	/^    LPDIRECT3DINDEXBUFFER9          m_pSkyDomeIB;$/;"	m	class:CSky
m_pSkyDomeVB	.\Sky.h	/^    LPDIRECT3DVERTEXBUFFER9         m_pSkyDomeVB;  \/\/! VB holding the actual sky dome$/;"	m	class:CSky
m_pSkyTone	.\Sky.h	/^    LPDIRECT3DTEXTURE9              m_pSkyTone; \/\/! Sky tone to be used to interpolate colors from zenith to horizon.$/;"	m	class:CSky
m_pSphere	.\Bubbles.h	/^    CSphere*                        m_pSphere;$/;"	m	class:CBubbles
m_pSphereTanVertDecl	.\Sphere.h	/^    LPDIRECT3DVERTEXDECLARATION9    m_pSphereTanVertDecl; \/\/ Vertex declartion if needing tangent vector.    $/;"	m	class:CSphere
m_pSprite	.\CloudBatch.h	/^    CPolySprite* m_pSprite; \/\/! NOT OWNER, don't do shit.$/;"	m	class:CCloud
m_pSprite	.\Common\DXUTgui.h	/^    ID3DXSprite*          m_pSprite;          \/\/ Sprite used for drawing$/;"	m	class:CDXUTDialogResourceManager
m_pSprite	.\Common\DXUTmisc.h	/^    ID3DXSprite* m_pSprite;$/;"	m	class:CDXUTTextHelper
m_pSprite	.\NumberToSprite.h	/^    LPD3DXSPRITE m_pSprite;$/;"	m	class:CNumberToSprite
m_pSpriteAnimMgr	.\World.h	/^    CSpriteAnimMgr*                     m_pSpriteAnimMgr;   \/\/! Used for player summons and effects$/;"	m	class:CWorld
m_pStandardMesh	.\XModelHeirarchy.h	/^    ID3DXMesh*                  m_pStandardMesh;$/;"	m	class:CXModelHeirarchy
m_pStateBlock	.\Common\DXUTSettingsDlg.h	/^    IDirect3DStateBlock9* m_pStateBlock;$/;"	m	class:CD3DSettingsDlg
m_pStateBlock	.\Common\DXUTgui.h	/^    IDirect3DStateBlock9* m_pStateBlock;$/;"	m	class:CDXUTDialogResourceManager
m_pTerrain	.\QuadTree.h	/^    ITerrain* m_pTerrain;       \/\/! Owner$/;"	m	class:CQuadTree
m_pTextSprite	.\World.h	/^    ID3DXSprite*                        m_pTextSprite;    \/\/! Sprite for batching draw text calls$/;"	m	class:CWorld
m_pTexture	.\Pillar.h	/^	IDirect3DTexture9 *m_pTexture;$/;"	m	class:CPillar
m_pTextureSurface	.\IImpostorable.h	/^    LPDIRECT3DSURFACE9      m_pTextureSurface;$/;"	m	class:IImpostorable
m_pTextures	.\Common\DXUTMesh.h	/^    IDirect3DBaseTexture9** m_pTextures;$/;"	m	class:CDXUTMesh
m_pToneMapping	.\PostProcEffects.h	/^    LPD3DXEFFECT            m_pToneMapping; \/\/ Effect for Tonemapping.fx$/;"	m	class:PostProcEffects
m_pUserData	.\Common\DXUTgui.h	/^    void *m_pUserData;         \/\/ Data associated with this control that is set by user.$/;"	m	class:CDXUTControl
m_pVB	.\Common\DXUTMesh.h	/^    IDirect3DVertexBuffer9* m_pVB;$/;"	m	class:CDXUTMesh
m_pVB	.\Foliage.h	/^    LPDIRECT3DVERTEXBUFFER9         m_pVB;$/;"	m	class:CFoliage
m_pVB	.\Pillar.h	/^	IDirect3DVertexBuffer9 *m_pVB;$/;"	m	class:CPillar
m_pVB	.\PolySprite.h	/^    LPDIRECT3DVERTEXBUFFER9 m_pVB;  \/\/! VB holding trilist to polysprites. OWNER$/;"	m	class:CPolySprite
m_pVB	.\PostProcEffects.h	/^    LPDIRECT3DVERTEXBUFFER9 m_pVB;$/;"	m	class:ScreenAlignedQuad
m_pVB	.\Sphere.h	/^    LPDIRECT3DVERTEXBUFFER9         m_pVB;$/;"	m	class:CSphere
m_pVanillaStateBlock	.\GameRoot.h	/^    LPDIRECT3DSTATEBLOCK9               m_pVanillaStateBlock;   \/\/! original state block that d3d starts in.$/;"	m	class:CGameRoot
m_pWaveFile	.\Common\DXUTsound.h	/^    CWaveFile*           m_pWaveFile;$/;"	m	class:CSound
m_pWorld	.\GameRoot.h	/^    CWorld*                             m_pWorld;   \/\/! Top graphical layer$/;"	m	class:CGameRoot
m_pXmodel	.\ModelInstance.h	/^    CXModelHeirarchy*           m_pXmodel;  \/\/ Pointer to the actual Geometry of this instance. NOT OWNER.$/;"	m	class:CModelInstance
m_pbData	.\Common\DXUTsound.h	/^    BYTE*         m_pbData;$/;"	m	class:CWaveFile
m_pbDataCur	.\Common\DXUTsound.h	/^    BYTE*         m_pbDataCur;$/;"	m	class:CWaveFile
m_pd3dDevice	.\Common\DXUTgui.h	/^    IDirect3DDevice9* m_pd3dDevice;$/;"	m	class:CDXUTDialogResourceManager
m_pd3dDevice	.\Common\DXUTmisc.h	/^    IDirect3DDevice9* m_pd3dDevice;$/;"	m	class:CDXUTLineManager
m_pd3dDevice	.\GameRoot.h	/^    LPDIRECT3DDEVICE9                   m_pd3dDevice;   \/\/!   the d3d device    $/;"	m	class:CGameRoot
m_pd3dDevice	.\Pillar.h	/^	IDirect3DDevice9 *m_pd3dDevice;		\/\/ this should only be used in the modify functions and taken out $/;"	m	class:CPillar
m_pd3dDevice	.\PolySprite.h	/^    LPDIRECT3DDEVICE9 m_pd3dDevice;    $/;"	m	class:CPolySprite
m_pd3dDevice	.\PostProcEffects.h	/^    LPDIRECT3DDEVICE9		    m_pd3dDevice;$/;"	m	class:PostProcEffects
m_pd3dDevice	.\QuadTree.h	/^    LPDIRECT3DDEVICE9 m_pd3dDevice; \/\/! NOT THE OWNER OF pd3dDevice$/;"	m	class:CQuadTree
m_pd3dDevice	.\SpriteAnimMgr.h	/^    LPDIRECT3DDEVICE9 m_pd3dDevice;$/;"	m	class:CSpriteAnimMgr
m_pd3dDevice	.\World.h	/^    LPDIRECT3DDEVICE9                   m_pd3dDevice;$/;"	m	class:CWorld
m_pt	.\Common\DXUTmisc.h	/^    POINT        m_pt;$/;"	m	class:CDXUTTextHelper
m_ptLastMouse	.\Common\DXUTmisc.h	/^    POINT          m_ptLastMouse;      \/\/ position of last mouse point$/;"	m	class:CD3DArcBall
m_ptLastMousePosition	.\Common\DXUTmisc.h	/^    POINT                 m_ptLastMousePosition;  \/\/ Last absolute position of mouse cursor$/;"	m	class:CBaseCamera
m_pwfx	.\Common\DXUTsound.h	/^    WAVEFORMATEX* m_pwfx;        \/\/ Pointer to WAVEFORMATEX structure$/;"	m	class:CWaveFile
m_pwszBuffer	.\Common\DXUTgui.h	/^    WCHAR* m_pwszBuffer;    \/\/ Buffer to hold text$/;"	m	class:CUniBuffer
m_qDown	.\Common\DXUTmisc.h	/^    D3DXQUATERNION m_qDown;             \/\/ Quaternion before button down$/;"	m	class:CD3DArcBall
m_qNow	.\Common\DXUTmisc.h	/^    D3DXQUATERNION m_qNow;              \/\/ Composite quaternion for current drag$/;"	m	class:CD3DArcBall
m_rcBoundingBox	.\Common\DXUTgui.h	/^    RECT m_rcBoundingBox;      \/\/ Rectangle defining the active region of the control$/;"	m	class:CDXUTControl
m_rcButton	.\Common\DXUTgui.h	/^    RECT m_rcButton;$/;"	m	class:CDXUTCheckBox
m_rcButton	.\Common\DXUTgui.h	/^    RECT m_rcButton;$/;"	m	class:CDXUTComboBox
m_rcButton	.\Common\DXUTgui.h	/^    RECT m_rcButton;$/;"	m	class:CDXUTSlider
m_rcDownButton	.\Common\DXUTgui.h	/^    RECT m_rcDownButton;$/;"	m	class:CDXUTScrollBar
m_rcDrag	.\Common\DXUTmisc.h	/^    RECT                  m_rcDrag;               \/\/ Rectangle within which a drag can be initiated.$/;"	m	class:CBaseCamera
m_rcDropdown	.\Common\DXUTgui.h	/^    RECT m_rcDropdown;$/;"	m	class:CDXUTComboBox
m_rcDropdownText	.\Common\DXUTgui.h	/^    RECT m_rcDropdownText;$/;"	m	class:CDXUTComboBox
m_rcIndicator	.\Common\DXUTgui.h	/^    RECT           m_rcIndicator;         \/\/ Rectangle for drawing the indicator button$/;"	m	class:CDXUTIMEEditBox
m_rcRender	.\Common\DXUTgui.h	/^    RECT     m_rcRender[9];  \/\/ Convenient rectangles for rendering elements$/;"	m	class:CDXUTEditBox
m_rcSelection	.\Common\DXUTgui.h	/^    RECT m_rcSelection; \/\/ Selection box bound$/;"	m	class:CDXUTListBox
m_rcText	.\Common\DXUTgui.h	/^    RECT     m_rcText;       \/\/ Bounding rectangle for the text$/;"	m	class:CDXUTEditBox
m_rcText	.\Common\DXUTgui.h	/^    RECT m_rcText;      \/\/ Text rendering bound$/;"	m	class:CDXUTListBox
m_rcText	.\Common\DXUTgui.h	/^    RECT m_rcText;$/;"	m	class:CDXUTCheckBox
m_rcText	.\Common\DXUTgui.h	/^    RECT m_rcText;$/;"	m	class:CDXUTComboBox
m_rcThumb	.\Common\DXUTgui.h	/^    RECT m_rcThumb;$/;"	m	class:CDXUTScrollBar
m_rcTrack	.\Common\DXUTgui.h	/^    RECT m_rcTrack;$/;"	m	class:CDXUTScrollBar
m_rcUpButton	.\Common\DXUTgui.h	/^    RECT m_rcUpButton;$/;"	m	class:CDXUTScrollBar
m_root	.\QuadTree.h	/^    QTNode *m_root; \/\/! Root node of Quad Tree!. The Ultimate private member variable!$/;"	m	class:CQuadTree
m_runningIt	.\SpriteAnimMgr.h	/^    list<SAnimStill>::iterator m_runningIt; \/\/ running iterator;$/;"	m	class:CSpriteAnimMgr
m_sServers	.\NetworkRoot.h	/^    ServerInfoSet                                   m_sServers; \/\/! unique set of servers sorted by ip and port$/;"	m	class:CNetworkRoot
m_selected	.\MultiColumnList.h	/^	int								m_selected;	\/\/! Currently selected line$/;"	m	class:CMultiColumnList
m_setActualClouds	.\CloudSky.h	/^    set<CCloud*> m_setActualClouds; \/\/! Stores which clouds should be rendered with sprites while CloudImpostorAtlas holds the impostors.$/;"	m	class:CCloudSky
m_speed	.\ScrollingWindow.h	/^	int					m_speed;		\/\/ How fast the window scrolls (default = 10)$/;"	m	class:CScrollingWindow
m_splineAngle	.\Pillar.h	/^	float m_splineAngle;$/;"	m	class:CPillar
m_splineRadius	.\Pillar.h	/^	float m_cylinderRadius, m_splineRadius, m_Length;$/;"	m	class:CPillar
m_start	.\ConsoleBuffer.h	/^	UINT								m_start; \/\/! These integers tell which$/;"	m	class:CConsoleBuffer
m_start	.\MultiColumnList.h	/^	UINT								m_start; \/\/! These integers tell which$/;"	m	class:CMultiColumnList
m_state	.\Common\DXUT.cpp	/^    STATE m_state;$/;"	m	class:DXUTState	file:
m_strCharacterFile	.\GameRoot.h	/^    string                              m_strWorldFile, m_strModelFile, m_strCharacterFile, m_strSpriteFile, m_strMasterServersFile; $/;"	m	class:CGameRoot
m_strCharacterFileName	.\World.h	/^    string                              m_strWorldFileName, m_strModelFileName, m_strCharacterFileName, m_strSpriteFileName;      $/;"	m	class:CWorld
m_strCloudAtlasTex	.\CloudSky.h	/^    string m_strCloudMap, m_strCloudAtlasTex, m_strSkyToneTex;$/;"	m	class:CCloudSky
m_strCloudMap	.\CloudSky.h	/^    string m_strCloudMap, m_strCloudAtlasTex, m_strSkyToneTex;$/;"	m	class:CCloudSky
m_strGameSettingsFile	.\GameSettings.h	/^    string m_strGameSettingsFile, m_strHostSettingsFile;$/;"	m	class:CGameSettings
m_strHostSettingsFile	.\GameSettings.h	/^    string m_strGameSettingsFile, m_strHostSettingsFile;$/;"	m	class:CGameSettings
m_strMasterServersFile	.\GameRoot.h	/^    string                              m_strWorldFile, m_strModelFile, m_strCharacterFile, m_strSpriteFile, m_strMasterServersFile; $/;"	m	class:CGameRoot
m_strMaterials	.\Common\DXUTMesh.h	/^    CHAR					(*m_strMaterials)[MAX_PATH];$/;"	m	class:CDXUTMesh
m_strModelFile	.\GameRoot.h	/^    string                              m_strWorldFile, m_strModelFile, m_strCharacterFile, m_strSpriteFile, m_strMasterServersFile; $/;"	m	class:CGameRoot
m_strModelFileName	.\World.h	/^    string                              m_strWorldFileName, m_strModelFileName, m_strCharacterFileName, m_strSpriteFileName;      $/;"	m	class:CWorld
m_strName	.\Common\DXUTMesh.h	/^    WCHAR                   m_strName[512];$/;"	m	class:CDXUTMesh
m_strName	.\Common\DXUTMesh.h	/^    WCHAR      m_strName[512];$/;"	m	class:CDXUTMeshFrame
m_strSkyToneTex	.\CloudSky.h	/^    string m_strCloudMap, m_strCloudAtlasTex, m_strSkyToneTex;$/;"	m	class:CCloudSky
m_strSpriteFile	.\GameRoot.h	/^    string                              m_strWorldFile, m_strModelFile, m_strCharacterFile, m_strSpriteFile, m_strMasterServersFile; $/;"	m	class:CGameRoot
m_strSpriteFileName	.\World.h	/^    string                              m_strWorldFileName, m_strModelFileName, m_strCharacterFileName, m_strSpriteFileName;      $/;"	m	class:CWorld
m_strTexName	.\Pillar.h	/^	string m_strTexName;$/;"	m	class:CPillar
m_strText	.\Button.h	/^	string					m_strText;		\/\/ Button Text$/;"	m	class:CButton
m_strText	.\Common\DXUTgui.h	/^    WCHAR m_strText[MAX_PATH];      \/\/ Window text  $/;"	m	class:CDXUTStatic
m_strText	.\ConsoleLine.h	/^	string					m_strText;$/;"	m	class:CConsoleLine
m_strWorldFile	.\GameRoot.h	/^    string                              m_strWorldFile, m_strModelFile, m_strCharacterFile, m_strSpriteFile, m_strMasterServersFile; $/;"	m	class:CGameRoot
m_strWorldFileName	.\World.h	/^    string                              m_strWorldFileName, m_strModelFileName, m_strCharacterFileName, m_strSpriteFileName;      $/;"	m	class:CWorld
m_textureWrapLength	.\Pillar.h	/^	UINT m_textureWrapLength;$/;"	m	class:CPillar
m_theta	.\Pillar.h	/^	float m_theta;$/;"	m	class:CPillar
m_ulDataSize	.\Common\DXUTsound.h	/^    ULONG         m_ulDataSize;$/;"	m	class:CWaveFile
m_vAnimPeriods	.\XModelHeirarchy.h	/^    vector<double>              m_vAnimPeriods; \/\/! Vector of the durations of time for one period of an animation.$/;"	m	class:CXModelHeirarchy
m_vAnimations	.\SpriteAnimMgr.h	/^    vector<SAnimation> m_vAnimations;$/;"	m	class:CSpriteAnimMgr
m_vBoundingBoxes	.\QuadTree.h	/^    vector<QTNode *> m_vBoundingBoxes; \/\/! Just holds the QTNodes that are to be drawn in DrawBoundingBoxes$/;"	m	class:CQuadTree
m_vBubbleInfo	.\World.h	/^    vector<SBubbleInfo>                 m_vBubbleInfo;$/;"	m	class:CWorld
m_vBubbles	.\Bubbles.h	/^    vector<SBubble>                 m_vBubbles;     $/;"	m	class:CBubbles
m_vCenter	.\Common\DXUTmisc.h	/^    D3DXVECTOR2    m_vCenter;  \/\/ center of arc ball $/;"	m	class:CD3DArcBall
m_vCharIDs	.\World.h	/^    vector<UINT>			    		m_vCharIDs;	\/\/! Holds the created char ids$/;"	m	class:CWorld
m_vCmdHistory	.\GameEngine.h	/^    vector<SPlayerCmdHistory>           m_vCmdHistory; $/;"	m	class:CGameEngine
m_vCurrentDir	.\Common\DXUTmisc.h	/^    D3DXVECTOR3    m_vCurrentDir;$/;"	m	class:CDXUTDirectionWidget
m_vCurrentPt	.\Common\DXUTmisc.h	/^    D3DXVECTOR3    m_vCurrentPt;        \/\/ current point of rotation arc$/;"	m	class:CD3DArcBall
m_vDefaultDir	.\Common\DXUTmisc.h	/^    D3DXVECTOR3    m_vDefaultDir;$/;"	m	class:CDXUTDirectionWidget
m_vDefaultEye	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vDefaultEye;          \/\/ Default camera eye position$/;"	m	class:CBaseCamera
m_vDefaultLookAt	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vDefaultLookAt;       \/\/ Default LookAt position$/;"	m	class:CBaseCamera
m_vDownPt	.\Common\DXUTmisc.h	/^    D3DXVECTOR3    m_vDownPt;           \/\/ starting point of rotation arc$/;"	m	class:CD3DArcBall
m_vEdgeColor	.\ModelInstance.h	/^    D3DXVECTOR3                 m_vEdgeColor;$/;"	m	class:CModelInstance
m_vEntries	.\ImpostorAtlas.h	/^    vector<SAtlasEntry> m_vEntries;    \/\/! TRILIST of Impostor vertices that have appropriate texture coordinates.$/;"	m	class:CImpostorAtlas
m_vEye	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vEye;                 \/\/ Camera eye position$/;"	m	class:CBaseCamera
m_vFocus	.\GameGUI.h	/^	vector<bool>			m_vFocus;		\/\/! Stores which window currently has focus$/;"	m	class:CGameGUI
m_vGamePadLeftThumb	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vGamePadLeftThumb;$/;"	m	class:CBaseCamera
m_vGamePadRightThumb	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vGamePadRightThumb;$/;"	m	class:CBaseCamera
m_vGeometryFilenames	.\World.h	/^    vector<string>                      m_vGeometryFilenames;    $/;"	m	class:CWorld
m_vInvalidRectsToClear	.\ImpostorAtlas.h	/^    vector<RECT> m_vInvalidRectsToClear;    \/\/! Holds the ids of the entries to be CLEARed. The ids correspond to the position in the atlas tex.$/;"	m	class:CImpostorAtlas
m_vIslandInfo	.\World.h	/^    vector<SQuadTreeInfo>               m_vIslandInfo;$/;"	m	class:CWorld
m_vKeyboardDirection	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vKeyboardDirection;   \/\/ Direction vector of keyboard input$/;"	m	class:CBaseCamera
m_vLODIndexBuffers	.\MipmapTerrain.h	/^	vector<IDirect3DIndexBuffer9*> m_vLODIndexBuffers;	\/\/ IB at LOD$/;"	m	class:CMipmapTerrain
m_vLightDir	.\QuadTree.h	/^    D3DXVECTOR4 m_vLightDir;    \/\/! light direction to do realtime lighting via normals of terrain.    $/;"	m	class:CQuadTree
m_vLightPos	.\ShadowMap.h	/^    D3DXVECTOR3                         m_vLookAt, m_vLightPos, m_vLightUp; \/\/! The light's space.$/;"	m	class:CShadowMap
m_vLightUp	.\ShadowMap.h	/^    D3DXVECTOR3                         m_vLookAt, m_vLightPos, m_vLightUp; \/\/! The light's space.$/;"	m	class:CShadowMap
m_vLines	.\ConsoleBuffer.h	/^	vector<CConsoleLine*>				m_vLines; \/\/! Vector of CLines$/;"	m	class:CConsoleBuffer
m_vLookAt	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vLookAt;              \/\/ LookAt position$/;"	m	class:CBaseCamera
m_vLookAt	.\ShadowMap.h	/^    D3DXVECTOR3                         m_vLookAt, m_vLightPos, m_vLightUp; \/\/! The light's space.$/;"	m	class:CShadowMap
m_vMasterServers	.\NetworkRoot.h	/^    vector<SMasterServerInfo>                       m_vMasterServers;   \/\/! vector of master servers available to query    $/;"	m	class:CNetworkRoot
m_vMaxBoundary	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vMaxBoundary;         \/\/ Max point in clip boundary$/;"	m	class:CBaseCamera
m_vMinBoundary	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vMinBoundary;         \/\/ Min point in clip boundary$/;"	m	class:CBaseCamera
m_vModelCenter	.\Common\DXUTmisc.h	/^    D3DXVECTOR3  m_vModelCenter;$/;"	m	class:CModelViewerCamera
m_vMouseDelta	.\Common\DXUTmisc.h	/^    D3DXVECTOR2           m_vMouseDelta;          \/\/ Mouse relative delta smoothed over a few frames$/;"	m	class:CBaseCamera
m_vNumTillTexSwap	.\PolySprite.h	/^    vector<int> m_vNumTillTexSwap; \/\/ Number of sprites ( = draw primitives * 2) until texture swap.$/;"	m	class:CPolySprite
m_vObjectCenter	.\XModelHeirarchy.h	/^    D3DXVECTOR3                 m_vObjectCenter;        \/\/ Center of bounding sphere of object$/;"	m	class:CXModelHeirarchy
m_vObjectExtremities	.\XModelHeirarchy.h	/^    D3DXVECTOR3                 m_vObjectExtremities;$/;"	m	class:CXModelHeirarchy
m_vPillarInfo	.\World.h	/^	vector<SPillarInfo>                 m_vPillarInfo;$/;"	m	class:CWorld
m_vQuadCoordinates	.\PolySprite.h	/^    vector<D3DXVECTOR3> m_vQuadCoordinates, m_vScreenAlignedCoordinates;$/;"	m	class:CPolySprite
m_vRotVelocity	.\Common\DXUTmisc.h	/^    D3DXVECTOR2           m_vRotVelocity;         \/\/ Velocity of camera$/;"	m	class:CBaseCamera
m_vRows	.\MultiColumnList.h	/^	vector<string>						m_vRows; \/\/! Vector of strings$/;"	m	class:CMultiColumnList
m_vScreenAlignedCoordinates	.\PolySprite.h	/^    vector<D3DXVECTOR3> m_vQuadCoordinates, m_vScreenAlignedCoordinates;$/;"	m	class:CPolySprite
m_vSkirt	.\MipmapTerrain.h	/^	vector<LPDIRECT3DINDEXBUFFER9> m_vSkirt;$/;"	m	class:CMipmapTerrain
m_vSpacing	.\NumberToSprite.h	/^    vector<float> m_vSpacing;$/;"	m	class:CNumberToSprite
m_vStaticEntityInfo	.\World.h	/^    vector<SStaticEntityInfo>           m_vStaticEntityInfo;$/;"	m	class:CWorld
m_vSubClouds	.\CloudBatch.h	/^    vector<SSubCloud> m_vSubClouds; \/\/! The subclouds, individual sprites, make up the cloud, a cluster of sprites.$/;"	m	class:CCloud
m_vSunStateRequests	.\GameEngine.h	/^    vector<SSunStateRequest>            m_vSunStateRequests;$/;"	m	class:CGameEngine
m_vToDraw	.\PolySprite.h	/^    vector<DrawInfo> m_vToDraw; $/;"	m	class:CPolySprite
m_vTranslation	.\QuadTree.h	/^    D3DXVECTOR3 m_vTranslation; \/\/! translation for island.$/;"	m	class:CQuadTree
m_vTraversalQueue	.\QuadTree.h	/^	list<QTNode *> m_vTraversalQueue; \/\/! Used to calculate QTNode's neighbors. TODO: Fix DetermineNeighbors$/;"	m	class:CQuadTree
m_vTrianglesAtLOD	.\MipmapTerrain.h	/^	vector<int>	m_vTrianglesAtLOD;  \/\/ # of triangles at LOD$/;"	m	class:CMipmapTerrain
m_vUpdates	.\ImpostorAtlas.h	/^    vector<SAtlasEntryUpdate> m_vUpdates;   \/\/! Holds the previous entry's update values to be checked if the current frame requires a new update.$/;"	m	class:CImpostorAtlas
m_vVelocity	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vVelocity;            \/\/ Velocity of camera$/;"	m	class:CBaseCamera
m_vVelocityDrag	.\Common\DXUTmisc.h	/^    D3DXVECTOR3           m_vVelocityDrag;        \/\/ Velocity drag force$/;"	m	class:CBaseCamera
m_vVisibilityList	.\QuadTree.h	/^    vector<QTNode *> m_vVisibilityList; $/;"	m	class:CQuadTree
m_vVisibilityList	.\World.h	/^    vector<QTNode*>                     m_vVisibilityList;  \/\/! Used to stuff the returned visible qtnodes from the islands.$/;"	m	class:CWorld
m_vVisibleEntites	.\World.h	/^    vector<SMeshEntity*>                m_vVisibleEntites; \/\/! VISIBLE player characters sorted by geomID used for rendering.     $/;"	m	class:CWorld
m_vWorldCenter	.\Sky.h	/^    D3DXVECTOR3                     m_vWorldCenter;$/;"	m	class:CSky
m_vecCalcWorldAhead	.\PolySprite.h	/^    D3DXVECTOR3 m_vecCalcWorldAhead, m_vecCalcWorldUp, m_vecCalcWorldRight;$/;"	m	class:CPolySprite
m_vecCalcWorldRight	.\PolySprite.h	/^    D3DXVECTOR3 m_vecCalcWorldAhead, m_vecCalcWorldUp, m_vecCalcWorldRight;$/;"	m	class:CPolySprite
m_vecCalcWorldUp	.\PolySprite.h	/^    D3DXVECTOR3 m_vecCalcWorldAhead, m_vecCalcWorldUp, m_vecCalcWorldRight;$/;"	m	class:CPolySprite
m_vecCameraAhead	.\PolySprite.h	/^    D3DXVECTOR3 m_vecCameraAhead, m_vecCameraUp, m_vecCameraRight, m_vecCameraPos;$/;"	m	class:CPolySprite
m_vecCameraPos	.\PolySprite.h	/^    D3DXVECTOR3 m_vecCameraAhead, m_vecCameraUp, m_vecCameraRight, m_vecCameraPos;$/;"	m	class:CPolySprite
m_vecCameraRight	.\PolySprite.h	/^    D3DXVECTOR3 m_vecCameraAhead, m_vecCameraUp, m_vecCameraRight, m_vecCameraPos;$/;"	m	class:CPolySprite
m_vecCameraUp	.\PolySprite.h	/^    D3DXVECTOR3 m_vecCameraAhead, m_vecCameraUp, m_vecCameraRight, m_vecCameraPos;$/;"	m	class:CPolySprite
m_vecDefaultWorldAhead	.\PolySprite.h	/^    D3DXVECTOR3 m_vecDefaultWorldUp, m_vecDefaultWorldRight, m_vecDefaultWorldAhead; $/;"	m	class:CPolySprite
m_vecDefaultWorldRight	.\PolySprite.h	/^    D3DXVECTOR3 m_vecDefaultWorldUp, m_vecDefaultWorldRight, m_vecDefaultWorldAhead; $/;"	m	class:CPolySprite
m_vecDefaultWorldUp	.\PolySprite.h	/^    D3DXVECTOR3 m_vecDefaultWorldUp, m_vecDefaultWorldRight, m_vecDefaultWorldAhead; $/;"	m	class:CPolySprite
m_vecPrevLookAt	.\IImpostorable.h	/^    D3DXVECTOR3 m_vecPrevWorldUp, m_vecPrevLookAt, m_Center;$/;"	m	class:IImpostorable
m_vecPrevWorldUp	.\IImpostorable.h	/^    D3DXVECTOR3 m_vecPrevWorldUp, m_vecPrevLookAt, m_Center;$/;"	m	class:IImpostorable
m_vfSpeedAdjust	.\ModelInstance.h	/^    vector<float>               m_vfSpeedAdjust; \/\/ divides fElapsedTime in Model's elapsed time to slow down animation.    $/;"	m	class:CModelInstance
m_vhmAnimationKeyIndex	.\World.h	/^    vector<AnimationKeyIndexHashMap>    m_vhmAnimationKeyIndex; $/;"	m	class:CWorld
m_vpBigStars	.\Sky.h	/^    vector<SBigStar*>               m_vpBigStars;$/;"	m	class:CSky
m_vpCharacterModels	.\World.h	/^    vector<CXModelHeirarchy*>           m_vpCharacterModels; \/\/ the actual geometries of players$/;"	m	class:CWorld
m_vpCloudBatches	.\CloudSky.h	/^    vector<CCloudBatch*> m_vpCloudBatches; \/\/!Clouds Batched by their Texture Atlas     $/;"	m	class:CCloudSky
m_vpCloudBatchesShadow	.\CloudSky.h	/^    vector<CCloudBatch*> m_vpCloudBatchesShadow; \/\/!Clouds Batched by their Texture Atlas     $/;"	m	class:CCloudSky
m_vpCloudImpostorQueue	.\World.h	/^    deque<CCloud*>                      m_vpCloudImpostorQueue;$/;"	m	class:CWorld
m_vpClouds	.\CloudBatch.h	/^    vector<CCloud*> m_vpClouds; \/\/! vector of clouds that make up the entire batch of clouds.$/;"	m	class:CCloudBatch
m_vpGrass	.\Foliage.h	/^    vector<SGrass*>                 m_vpGrass; \/\/ inherently sorted by grasstex because of loadgrassmap.$/;"	m	class:CFoliage
m_vpGrassTex	.\Foliage.h	/^	vector<LPDIRECT3DTEXTURE9>      m_vpGrassTex;$/;"	m	class:CFoliage
m_vpIslands	.\World.h	/^    vector<CQuadTree*>                  m_vpIslands;    \/\/! The islands that comprise this world.$/;"	m	class:CWorld
m_vpLimboClouds	.\World.h	/^    vector<CCloud*>                     m_vpLimboClouds; \/\/! Clouds that do fall within an island and are in 'limbo' to be culled separate.$/;"	m	class:CWorld
m_vpStaticModels	.\World.h	/^    vector<CXModelHeirarchy*>           m_vpStaticModels; \/\/ the actual geometries of obstacles.$/;"	m	class:CWorld
m_vpStaticObjects	.\PhysicsRoot.h	/^	vector<TA::StaticObject*>					m_vpStaticObjects;$/;"	m	class:CPhysicsRoot
m_vpTex	.\NumberToSprite.h	/^    vector<LPDIRECT3DTEXTURE9> m_vpTex;$/;"	m	class:CNumberToSprite
m_vpTex	.\Sprite.h	/^    vector<LPDIRECT3DTEXTURE9> m_vpTex;$/;"	m	class:CSprite
m_vpTexs	.\SpriteAnimMgr.h	/^    vector<STexture> m_vpTexs;$/;"	m	class:CSpriteAnimMgr
m_vpTextures	.\XModelHeirarchy.h	/^    vector<LPDIRECT3DTEXTURE9>  m_vpTextures;    $/;"	m	class:CXModelHeirarchy
m_vsGrassTexFN	.\Foliage.h	/^	vector<string>					m_vsGrassTexFN;$/;"	m	class:CFoliage
m_width	.\Common\DXUTgui.h	/^    int m_width, m_height;$/;"	m	class:CDXUTControl
m_width	.\Common\DXUTgui.h	/^    int m_width;$/;"	m	class:CDXUTDialog
m_wszCaption	.\Common\DXUTgui.h	/^    WCHAR m_wszCaption[256];$/;"	m	class:CDXUTDialog
m_wszLang	.\Common\DXUTgui.h	/^        WCHAR m_wszLang[64];    \/\/ Localized language name$/;"	m	struct:CDXUTIMEEditBox::CInputLocale
m_wszLangAbb	.\Common\DXUTgui.h	/^        WCHAR m_wszLangAbb[3];  \/\/ Language abbreviation$/;"	m	struct:CDXUTIMEEditBox::CInputLocale
m_wszShaderSource	.\XModelHeirarchy.h	/^    WCHAR*                      m_wszShaderSource[4];   \/\/ holds shader source for assemly shaders.$/;"	m	class:CXModelHeirarchy
m_x	.\Common\DXUTgui.h	/^    int m_x, m_y;$/;"	m	class:CDXUTControl
m_x	.\Common\DXUTgui.h	/^    int m_x;$/;"	m	class:CDXUTDialog
m_x	.\QuadTree.h	/^        float m_x, m_z;$/;"	m	class:CQuadTree::CLoadArea
m_y	.\Common\DXUTgui.h	/^    int m_x, m_y;$/;"	m	class:CDXUTControl
m_y	.\Common\DXUTgui.h	/^    int m_y;$/;"	m	class:CDXUTDialog
m_z	.\QuadTree.h	/^        float m_x, m_z;$/;"	m	class:CQuadTree::CLoadArea
magnitude	.\Sky.cpp	/^float CSky::SBigStar::magnitude = 0.0f;$/;"	m	class:CSky::SBigStar	file:
magnitude	.\Sky.h	/^        static float magnitude;$/;"	m	struct:CSky::SBigStar
max	.\Common\DXUT.cpp	10;"	d	file:
max	.\Common\DXUTMesh.cpp	14;"	d	file:
max	.\Common\DXUTSettingsDlg.cpp	12;"	d	file:
max	.\Common\DXUTenum.cpp	10;"	d	file:
max	.\Common\DXUTgui.cpp	12;"	d	file:
max	.\Common\DXUTmisc.cpp	12;"	d	file:
max	.\Common\DXUTsound.cpp	16;"	d	file:
maxErrorIndex	.\QuadTree.h	/^        int maxErrorIndex;$/;"	m	struct:CQuadTree::Tile
maxErrorPoints	.\QuadTree.h	/^		vector<D3DXVECTOR3> maxErrorPoints; \/\/! Error Vertex per LOD$/;"	m	struct:CQuadTree::Tile
maxY	.\Pillar.h	/^	double maxY;$/;"	m	class:CPillar
maxy	.\QuadTree.h	/^        float LOD, miny, maxy; \/\/ LOD, lowest\/highest terrain point$/;"	m	struct:CQuadTree::Tile
maxy	.\QuadTree.h	/^        int midx, midz, length, maxy, miny, midy;    \/\/! mid point and length of quad$/;"	m	struct:CQuadTree::QTNode
menuIndex	.\Button.h	/^	int						menuIndex;		\/\/ Index of the submenu this Button belongs to$/;"	m	class:CButton
midx	.\QuadTree.h	/^        int midx, midz, length, maxy, miny, midy;    \/\/! mid point and length of quad$/;"	m	struct:CQuadTree::QTNode
midy	.\QuadTree.h	/^        int midx, midz, length, maxy, miny, midy;    \/\/! mid point and length of quad$/;"	m	struct:CQuadTree::QTNode
midz	.\QuadTree.h	/^        int midx, midz, length, maxy, miny, midy;    \/\/! mid point and length of quad$/;"	m	struct:CQuadTree::QTNode
min	.\Common\DXUT.cpp	9;"	d	file:
min	.\Common\DXUTMesh.cpp	13;"	d	file:
min	.\Common\DXUTSettingsDlg.cpp	11;"	d	file:
min	.\Common\DXUTenum.cpp	9;"	d	file:
min	.\Common\DXUTgui.cpp	11;"	d	file:
min	.\Common\DXUTmisc.cpp	11;"	d	file:
min	.\Common\DXUTsound.cpp	15;"	d	file:
miny	.\QuadTree.h	/^        float LOD, miny, maxy; \/\/ LOD, lowest\/highest terrain point$/;"	m	struct:CQuadTree::Tile
miny	.\QuadTree.h	/^        int midx, midz, length, maxy, miny, midy;    \/\/! mid point and length of quad$/;"	m	struct:CQuadTree::QTNode
mtx	.\PolySprite.h	/^        D3DXMATRIX mtx;$/;"	m	struct:CPolySprite::DrawInfo
mul	.\Pillar.cpp	/^D3DXVECTOR4 CPillar::mul(D3DXMATRIX m, D3DXVECTOR4 v)$/;"	f	class:CPillar
multiSampleQualityList	.\Common\DXUTenum.h	/^    CGrowableArray<DWORD> multiSampleQualityList; \/\/ List of number of quality levels for each multisample type$/;"	m	struct:CD3DEnumDeviceSettingsCombo
multiSampleTypeList	.\Common\DXUTenum.h	/^    CGrowableArray<D3DMULTISAMPLE_TYPE> multiSampleTypeList; \/\/ List of D3DMULTISAMPLE_TYPEs$/;"	m	struct:CD3DEnumDeviceSettingsCombo
nBoneMatricesMax	.\XModelHeirarchy.h	/^    UINT                 nBoneMatricesMax;$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
nCellSpacing	.\QuadTree.h	/^        int nCellSpacing, nHeightSpacing;$/;"	m	struct:CQuadTree::SQuadTreeInfo
nCols	.\SpriteAnimMgr.h	/^        int nRows, nCols;    $/;"	m	struct:CSpriteAnimMgr::STexture
nControlType	.\Common\DXUTgui.h	/^    UINT nControlType;$/;"	m	struct:DXUTElementHolder
nData	.\GameEngine.h	/^		int nData; \/\/ integer used for whatever each specific type of sle needs$/;"	m	struct:CGameEngine::SShortLifeEntity
nDimension	.\QuadTree.h	/^        int nDimension;$/;"	m	struct:CQuadTree::Block
nFirstSelected	.\Common\DXUTgui.h	/^        int   nFirstSelected; \/\/ First character position of the selected string in HoriCand$/;"	m	struct:CDXUTIMEEditBox::CCandList
nGrassTex	.\Foliage.h	/^	UINT nGrassTex;	\/\/ index of the grass texture$/;"	m	struct:SGrass
nHeight	.\Common\DXUTgui.h	/^    LONG  nHeight;$/;"	m	struct:DXUTFontNode
nHeight	.\SpriteAnimMgr.h	/^        int nWidth, nHeight;$/;"	m	struct:CSpriteAnimMgr::STexture
nHeightSpacing	.\QuadTree.h	/^        int nCellSpacing, nHeightSpacing;$/;"	m	struct:CQuadTree::SQuadTreeInfo
nHoriSelectedLen	.\Common\DXUTgui.h	/^        int   nHoriSelectedLen; \/\/ Length of the selected string in HoriCand$/;"	m	struct:CDXUTIMEEditBox::CCandList
nJumps	.\GameEngine.h	/^		int nJumps;$/;"	m	struct:CGameEngine::SPlayer
nLineID	.\Common\DXUTmisc.h	/^        int      nLineID;$/;"	m	struct:CDXUTLineManager::LINE_NODE
nLives	.\GameEngine.h	/^		int nLives;$/;"	m	struct:CGameEngine::SPlayer
nMaxPlayers	.\ServerInfo.h	/^    int nPlayers, nMaxPlayers;$/;"	m	struct:SServerInfo
nPing	.\ServerInfo.h	/^    int nPing;$/;"	m	struct:SServerInfo
nPlayers	.\ServerInfo.h	/^    int nPlayers, nMaxPlayers;$/;"	m	struct:SServerInfo
nPort	.\ServerInfo.h	/^    unsigned short nPort;$/;"	m	struct:SMasterServerInfo
nPort	.\ServerInfo.h	/^    unsigned short nPort;$/;"	m	struct:SServerInfo
nPuffs	.\CloudBatch.h	/^    int nPuffs;$/;"	m	struct:SCloudInfo
nPwdLength	.\ServerInfo.h	/^    int nPwdLength;$/;"	m	struct:SMasterServerInfo
nReadingError	.\Common\DXUTgui.h	/^        int   nReadingError; \/\/ Index of the error character$/;"	m	struct:CDXUTIMEEditBox::CCandList
nResourceID	.\Common\DXUTgui.h	/^    int nResourceID;   \/\/ Resource ID. If 0, string-based ID is used and stored in strFilename.$/;"	m	struct:DXUTTextureNode
nRows	.\SpriteAnimMgr.h	/^        int nRows, nCols;    $/;"	m	struct:CSpriteAnimMgr::STexture
nSunAffiliation	.\GameEngine.h	/^        int nSunAffiliation;    \/\/ The idx of the sun player spawned from.$/;"	m	struct:CGameEngine::SShortLifeEntity
nWeight	.\Common\DXUTgui.h	/^    LONG  nWeight;$/;"	m	struct:DXUTFontNode
nWidth	.\SpriteAnimMgr.h	/^        int nWidth, nHeight;$/;"	m	struct:CSpriteAnimMgr::STexture
networkID	.\GameEngine.h	/^        int charID, physicsID, networkID; \/\/ charID unique ID in graphics world.$/;"	m	struct:CGameEngine::SPlayer
norm	.\FXDecl.h	/^    D3DXVECTOR3 norm;$/;"	m	struct:MESHVERT
norm	.\Foliage.h	/^    D3DXVECTOR3 norm;$/;"	m	struct:GRASSVERT
norm	.\Sphere.h	/^        D3DXVECTOR3 norm;        $/;"	m	struct:CSphere::SphereTanBinVert
norm	.\Sphere.h	/^        D3DXVECTOR3 norm;$/;"	m	struct:CSphere::SphereVert
north	.\QuadTree.h	/^		QTNode *north, *south, *east, *west; \/\/! Pointer to neighbors. TODO: Remove since not needed for strips and not made properly.$/;"	m	struct:CQuadTree::QTNode
numSlices	.\Pillar.h	/^		UINT numSlices, numStacks;$/;"	m	struct:CPillar::SPillarInfo
numStacks	.\Pillar.h	/^		UINT numSlices, numStacks;$/;"	m	struct:CPillar::SPillarInfo
nx	.\FXDecl.h	/^    float nx, ny, nz;   \/\/ Normal    $/;"	m	struct:TERRAINVERT
ny	.\FXDecl.h	/^    float nx, ny, nz;   \/\/ Normal    $/;"	m	struct:TERRAINVERT
nz	.\FXDecl.h	/^    float nx, ny, nz;   \/\/ Normal    $/;"	m	struct:TERRAINVERT
offset	.\QuadTree.h	/^		int offset; \/\/ offset in VB$/;"	m	struct:CQuadTree::Tile
operator ()	.\Bubbles.h	/^        bool operator() (const SBubble& lhs, const SBubble& rhs) const {$/;"	f	struct:CBubbles::SBubbleDistSort
operator ()	.\ImpostorAtlas.h	/^        bool operator() (const SAtlasEntry *pLeft, const SAtlasEntry *pRight) const$/;"	f	struct:CImpostorAtlas::PtrEntrySort
operator ()	.\MeshEntity.h	/^    bool operator() ( const SMeshEntity* lhs, const SMeshEntity* rhs ) {$/;"	f	struct:SMeshEntityPtrFunctor
operator ()	.\PolySprite.cpp	/^bool CPolySprite::DepthSortFunctor::operator () (const DrawInfo &di1, const DrawInfo &di2) const$/;"	f	class:CPolySprite::DepthSortFunctor
operator ()	.\PolySprite.cpp	/^bool CPolySprite::TextureSortFunctor::operator() (const DrawInfo &di1, const DrawInfo &di2) const$/;"	f	class:CPolySprite::TextureSortFunctor
operator ()	.\QuadTree.h	/^        bool operator()(const QTNode* lhs, const QTNode* rhs) const {$/;"	f	class:CQuadTree::QTNodeLessThanFunctor
operator ()	.\ServerInfo.cpp	/^bool CServerInfoComparator::operator() (const SServerInfo &lhs, const SServerInfo &rhs) const$/;"	f	class:CServerInfoComparator
operator <	.\World.h	/^        bool operator < (const SStaticEntityInfo& rhs) const {$/;"	f	struct:CWorld::SStaticEntityInfo
operator <<	.\CloudBatch.cpp	/^ostream& operator<< (ostream &os, const SCloudInfo& ci) $/;"	f
operator =	.\Common\DXUTmisc.h	/^    CGrowableArray& operator=( const CGrowableArray<TYPE>& a ) { if( this == &a ) return *this; RemoveAll(); for( int i=0; i < a.m_nSize; i++ ) Add( a.m_pData[i] ); return *this; }$/;"	f	class:CGrowableArray
operator >>	.\CloudBatch.cpp	/^istream& operator>> (istream &is, SCloudInfo& ci)$/;"	f
operator []	.\Common\DXUTgui.cpp	/^WCHAR& CUniBuffer::operator[]( int n )  \/\/ No param checking$/;"	f	class:CUniBuffer
operator []	.\Common\DXUTgui.h	/^    const WCHAR& operator[]( int n ) const { return m_pwszBuffer[n]; }$/;"	f	class:CUniBuffer
operator []	.\Common\DXUTmisc.h	/^    TYPE& operator[]( int nIndex ) { return GetAt( nIndex ); }$/;"	f	class:CGrowableArray
operator []	.\Common\DXUTmisc.h	/^    const TYPE& operator[]( int nIndex ) const { return GetAt( nIndex ); }$/;"	f	class:CGrowableArray
orbit_speed	.\Sky.h	/^		float orbit_speed, angle, fLightTimeOffset, time_offset, angle_offset, alpha_multiplier;$/;"	m	struct:CSky::SBigStar
ownerID	.\GameEngine.h	/^		int ownerID; \/\/ ID of the physics object (player) that created this sse$/;"	m	struct:CGameEngine::SShortLifeEntity
pAdapterInfo	.\Common\DXUTenum.h	/^    CD3DEnumAdapterInfo* pAdapterInfo;$/;"	m	struct:CD3DEnumDeviceSettingsCombo
pAttributeTable	.\XModelHeirarchy.h	/^    LPD3DXATTRIBUTERANGE pAttributeTable;$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
pBlock	.\QuadTree.h	/^        Block *pBlock; \/\/! pointer to block struct holding VBs for Tiles$/;"	m	struct:CQuadTree::QTNode
pBoneCombinationBuf	.\XModelHeirarchy.h	/^    LPD3DXBUFFER         pBoneCombinationBuf;$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
pBoneMatrices	.\XModelHeirarchy.h	/^    D3DXMATRIXA16*       pBoneMatrices;$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
pBoneOffsetMatrices	.\XModelHeirarchy.h	/^    D3DXMATRIX*          pBoneOffsetMatrices;$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
pCallbackTimer	.\Common\DXUT.cpp	/^    LPDXUTCALLBACKTIMER pCallbackTimer;$/;"	m	struct:DXUT_TIMER	file:
pCallbackUserContext	.\Common\DXUT.cpp	/^    void* pCallbackUserContext;$/;"	m	struct:DXUT_TIMER	file:
pData	.\Common\DXUTgui.h	/^    void*  pData;$/;"	m	struct:DXUTComboBoxItem
pData	.\Common\DXUTgui.h	/^    void*  pData;$/;"	m	struct:DXUTListBoxItem
pDeviceInfo	.\Common\DXUTenum.h	/^    CD3DEnumDeviceInfo* pDeviceInfo;$/;"	m	struct:CD3DEnumDeviceSettingsCombo
pEffect	.\Common\DXUTmisc.h	/^    ID3DXEffect *pEffect;$/;"	m	struct:DXUTCache_Effect
pFont	.\Common\DXUTgui.h	/^    ID3DXFont* pFont;$/;"	m	struct:DXUTFontNode
pFont	.\Common\DXUTmisc.h	/^    ID3DXFont *pFont;$/;"	m	struct:DXUTCache_Font
pModelInst	.\MeshEntity.h	/^    CModelInstance* pModelInst;        $/;"	m	struct:SMeshEntity
pMyPlayer	.\HUD.h	/^	const SPlayer*					pMyPlayer;	\/\/! not owned don't delete$/;"	m	class:CHud
pNormalTex	.\Bubbles.h	/^        LPDIRECT3DTEXTURE9 pTex, pNormalTex;$/;"	m	struct:CBubbles::SBubble
pOrigMesh	.\XModelHeirarchy.h	/^    LPD3DXMESH           pOrigMesh;$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
pSound	.\SpriteAnimMgr.h	/^        CSound *pSound;$/;"	m	struct:CSpriteAnimMgr::SAnimation
pSound	.\World.h	/^        CSound* pSound;        $/;"	m	struct:CWorld::SSpriteAnimationEntry
pTex	.\Bubbles.h	/^        LPDIRECT3DTEXTURE9 pTex, pNormalTex;$/;"	m	struct:CBubbles::SBubble
pTex	.\PolySprite.h	/^        LPDIRECT3DTEXTURE9 pTex;$/;"	m	struct:CPolySprite::DrawInfo
pTex	.\Sky.h	/^        LPDIRECT3DTEXTURE9 pTex;$/;"	m	struct:CSky::SBigStar
pTex	.\SpriteAnimMgr.h	/^        LPDIRECT3DTEXTURE9 pTex;$/;"	m	struct:CSpriteAnimMgr::STexture
pTex	.\World.h	/^        LPDIRECT3DTEXTURE9 pTex;$/;"	m	struct:CWorld::SRunningSpriteAnimation
pTexture	.\Common\DXUTgui.h	/^    IDirect3DTexture9* pTexture;$/;"	m	struct:DXUTTextureNode
pTexture	.\Common\DXUTmisc.h	/^    IDirect3DBaseTexture9 *pTexture;$/;"	m	struct:DXUTCache_Texture
pTile	.\QuadTree.h	/^	    Tile *pTile; \/\/! pointer to Tile which holds data for different LODs$/;"	m	struct:CQuadTree::QTNode
pVB	.\QuadTree.h	/^		IDirect3DVertexBuffer9 *pVB;$/;"	m	struct:CQuadTree::Block
pVB	.\Sky.cpp	/^LPDIRECT3DVERTEXBUFFER9 CSky::SBigStar::pVB = NULL;$/;"	m	class:CSky::SBigStar	file:
pVB	.\Sky.h	/^        static LPDIRECT3DVERTEXBUFFER9 pVB;$/;"	m	struct:CSky::SBigStar
pVertexList	.\Common\DXUTmisc.h	/^        D3DXVECTOR2* pVertexList;$/;"	m	struct:CDXUTLineManager::LINE_NODE
physicsID	.\GameEngine.h	/^		int physicsID; \/\/ ID of the physics representation of this sse$/;"	m	struct:CGameEngine::SShortLifeEntity
physicsID	.\GameEngine.h	/^        int charID, physicsID, networkID; \/\/ charID unique ID in graphics world.$/;"	m	struct:CGameEngine::SPlayer
pos	.\CloudBatch.h	/^        D3DXVECTOR3 pos; \/\/ this is position relative to cloud SCloudInfo position in world$/;"	m	struct:CCloud::SSubCloud
pos	.\CloudBatch.h	/^    D3DXVECTOR3 pos;$/;"	m	struct:SCloudInfo
pos	.\FXDecl.h	/^    D3DXVECTOR3 pos; \/\/ position$/;"	m	struct:MESHVERT
pos	.\FXDecl.h	/^    D3DXVECTOR3 pos;$/;"	m	struct:BoxVertTex
pos	.\FXDecl.h	/^    D3DXVECTOR3 pos;$/;"	m	struct:BoxVertTexColor
pos	.\Foliage.h	/^    D3DXVECTOR3 pos; \/\/ position$/;"	m	struct:GRASSVERT
pos	.\PolySprite.h	/^        D3DXVECTOR3 pos;                $/;"	m	struct:CPolySprite::PolySpriteVertex
pos	.\Sky.h	/^        D3DXVECTOR3 start_pos, pos, lightPos, lightDir;$/;"	m	struct:CSky::SBigStar
pos	.\Sphere.h	/^        D3DXVECTOR3 pos; \/\/ position$/;"	m	struct:CSphere::SphereTanBinVert
pos	.\Sphere.h	/^        D3DXVECTOR3 pos; \/\/ position$/;"	m	struct:CSphere::SphereVert
pos	.\World.h	/^        D3DXVECTOR3 scale, angle, pos;$/;"	m	struct:CWorld::SStaticEntityInfo
pp	.\Common\DXUT.h	/^    D3DPRESENT_PARAMETERS pp;$/;"	m	struct:DXUTDeviceSettings
ppBoneMatrixPtrs	.\XModelHeirarchy.h	/^    D3DXMATRIX**         ppBoneMatrixPtrs;$/;"	m	struct:D3DXMESHCONTAINER_DERIVED
ppTextures	.\XModelHeirarchy.h	/^    LPDIRECT3DTEXTURE9*  ppTextures;       \/\/ array of textures, entries are NULL if no texture specified    $/;"	m	struct:D3DXMESHCONTAINER_DERIVED
presentIntervalList	.\Common\DXUTenum.h	/^    CGrowableArray<UINT> presentIntervalList; \/\/ List of D3DPRESENT flags$/;"	m	struct:CD3DEnumDeviceSettingsCombo
prevDistance	.\ImpostorAtlas.h	/^        float prevDistance;$/;"	m	struct:CImpostorAtlas::SAtlasEntryUpdate
processEffects	.\PostProcEffects.cpp	/^void PostProcEffects::processEffects(float speed, float timeOfDay)$/;"	f	class:PostProcEffects
pspower	.\SunStates.h	/^    float vspower, pspower, vsmult; \/\/ shader vars for sun size\/look.$/;"	m	struct:SSunMorphState
pszPwdData	.\ServerInfo.h	/^    char pszPwdData[256];$/;"	m	struct:SMasterServerInfo
puffScale	.\CloudBatch.h	/^    float puffScale;$/;"	m	struct:SCloudInfo
r	.\GUIObject.h	/^	int r, g, b;$/;"	m	struct:SColor
rakTime	.\GameEngine.h	/^        RakNetTime rakTime;$/;"	m	struct:CGameEngine::SPlayerCmdHistory
rcActive	.\Common\DXUTgui.h	/^    RECT  rcActive;$/;"	m	struct:DXUTComboBoxItem
rcActive	.\Common\DXUTgui.h	/^    RECT  rcActive;$/;"	m	struct:DXUTListBoxItem
rcCandidate	.\Common\DXUTgui.h	/^        RECT  rcCandidate;   \/\/ Candidate rectangle computed and filled each time before rendered$/;"	m	struct:CDXUTIMEEditBox::CCandList
rcMonitor	.\Common\DXUTmisc.h	/^        RECT    rcMonitor;$/;"	m	struct:tagMONITORINFO
rcTexture	.\Common\DXUTgui.h	/^    RECT rcTexture;         \/\/ Bounding rect of this element on the composite texture$/;"	m	class:CDXUTElement
rcWork	.\Common\DXUTmisc.h	/^        RECT    rcWork;$/;"	m	struct:tagMONITORINFO
rect	.\ImpostorAtlas.h	/^        RECT rect;  \/\/! The rect on the ImpostorAtlas texture that holds this entry's impostor.$/;"	m	struct:CImpostorAtlas::SAtlasEntry
rectf	.\ImpostorAtlas.h	/^        RECTF rectf;    \/\/! Same as above but in normalized floating point version.$/;"	m	struct:CImpostorAtlas::SAtlasEntry
rectf	.\PolySprite.h	/^        RECTF rectf; \/\/ Rect on tex to display$/;"	m	struct:CPolySprite::DrawInfo
rectf	.\World.h	/^        gdef::RECTF rectf;$/;"	m	struct:CWorld::SRunningSpriteAnimation
rhw	.\FXDecl.h	/^    float x, y, z, rhw;$/;"	m	struct:PPVERT
rhw	.\GUIObject.h	/^    float x, y, z, rhw; \/\/ The transformed position for the vertex$/;"	m	struct:SVertex
rotation	.\CloudBatch.h	/^        float rotation; \/\/! rotation of sprite on camera's near plane. so parallel.        $/;"	m	struct:CCloud::SSubCloud
runningAnimId	.\GameEngine.h	/^        int runningAnimId;  \/\/! the anim running in spriteanimmgr.$/;"	m	struct:CGameEngine::SShortLifeEntity
runningAnimIdx	.\World.h	/^        int runningAnimIdx;$/;"	m	struct:CWorld::SRunningSpriteAnimation
sThumbLX	.\Common\DXUTmisc.h	/^    SHORT   sThumbLX;$/;"	m	struct:DXUT_GAMEPAD
sThumbLY	.\Common\DXUTmisc.h	/^    SHORT   sThumbLY;$/;"	m	struct:DXUT_GAMEPAD
sThumbRX	.\Common\DXUTmisc.h	/^    SHORT   sThumbRX;$/;"	m	struct:DXUT_GAMEPAD
sThumbRY	.\Common\DXUTmisc.h	/^    SHORT   sThumbRY;$/;"	m	struct:DXUT_GAMEPAD
s_CandList	.\Common\DXUTgui.cpp	/^CDXUTIMEEditBox::CCandList CDXUTIMEEditBox::s_CandList;       \/\/ Data relevant to the candidate list$/;"	m	class:CDXUTIMEEditBox	file:
s_CandList	.\Common\DXUTgui.h	/^    static CCandList s_CandList;          \/\/ Data relevant to the candidate list$/;"	m	class:CDXUTIMEEditBox
s_CompString	.\Common\DXUTgui.cpp	/^CUniBuffer CDXUTIMEEditBox::s_CompString = CUniBuffer( 0 );$/;"	m	class:CDXUTIMEEditBox	file:
s_CompString	.\Common\DXUTgui.h	/^    static CUniBuffer s_CompString;       \/\/ Buffer to hold the composition string (we fix its length)$/;"	m	class:CDXUTIMEEditBox
s_DynamicD3DPERF_BeginEvent	.\Common\DXUTmisc.cpp	/^static LPD3DPERF_BEGINEVENT s_DynamicD3DPERF_BeginEvent = NULL;$/;"	v	file:
s_DynamicD3DPERF_EndEvent	.\Common\DXUTmisc.cpp	/^static LPD3DPERF_ENDEVENT s_DynamicD3DPERF_EndEvent = NULL;$/;"	v	file:
s_DynamicD3DPERF_GetStatus	.\Common\DXUTmisc.cpp	/^static LPD3DPERF_GETSTATUS s_DynamicD3DPERF_GetStatus = NULL;$/;"	v	file:
s_DynamicD3DPERF_QueryRepeatFrame	.\Common\DXUTmisc.cpp	/^static LPD3DPERF_QUERYREPEATFRAME s_DynamicD3DPERF_QueryRepeatFrame = NULL;$/;"	v	file:
s_DynamicD3DPERF_SetMarker	.\Common\DXUTmisc.cpp	/^static LPD3DPERF_SETMARKER s_DynamicD3DPERF_SetMarker = NULL;$/;"	v	file:
s_DynamicD3DPERF_SetOptions	.\Common\DXUTmisc.cpp	/^static LPD3DPERF_SETOPTIONS s_DynamicD3DPERF_SetOptions = NULL;$/;"	v	file:
s_DynamicD3DPERF_SetRegion	.\Common\DXUTmisc.cpp	/^static LPD3DPERF_SETREGION s_DynamicD3DPERF_SetRegion = NULL;$/;"	v	file:
s_DynamicDirect3DCreate9	.\Common\DXUTmisc.cpp	/^static LPDIRECT3DCREATE9 s_DynamicDirect3DCreate9 = NULL;$/;"	v	file:
s_ImeState	.\Common\DXUTgui.cpp	/^CDXUTIMEEditBox::IMESTATE  CDXUTIMEEditBox::s_ImeState = IMEUI_STATE_OFF;$/;"	m	class:CDXUTIMEEditBox	file:
s_ImeState	.\Common\DXUTgui.h	/^    static IMESTATE  s_ImeState;          \/\/ IME global state$/;"	m	class:CDXUTIMEEditBox
s_Locale	.\Common\DXUTgui.cpp	/^CGrowableArray< CDXUTIMEEditBox::CInputLocale > CDXUTIMEEditBox::s_Locale; \/\/ Array of loaded keyboard layout on system$/;"	m	class:CDXUTIMEEditBox	file:
s_Locale	.\Common\DXUTgui.h	/^    static CGrowableArray< CInputLocale > s_Locale; \/\/ Array of loaded keyboard layout on system$/;"	m	class:CDXUTIMEEditBox
s_OldStates	.\IImpostorable.cpp	/^ULONG IImpostorable::s_OldStates[10] = {0};$/;"	m	class:IImpostorable	file:
s_OldStates	.\IImpostorable.h	/^    static ULONG s_OldStates[10]; \/\/! To Save state before SetDevice and Clear Device afterwards.$/;"	m	class:IImpostorable
s_abCompStringAttr	.\Common\DXUTgui.cpp	/^BYTE      CDXUTIMEEditBox::s_abCompStringAttr[MAX_COMPSTRING_SIZE];$/;"	m	class:CDXUTIMEEditBox	file:
s_abCompStringAttr	.\Common\DXUTgui.h	/^    static BYTE    s_abCompStringAttr[MAX_COMPSTRING_SIZE];$/;"	m	class:CDXUTIMEEditBox
s_adwCompStringClause	.\Common\DXUTgui.cpp	/^DWORD     CDXUTIMEEditBox::s_adwCompStringClause[MAX_COMPSTRING_SIZE];$/;"	m	class:CDXUTIMEEditBox	file:
s_adwCompStringClause	.\Common\DXUTgui.h	/^    static DWORD   s_adwCompStringClause[MAX_COMPSTRING_SIZE];$/;"	m	class:CDXUTIMEEditBox
s_aszIndicator	.\Common\DXUTgui.cpp	/^WCHAR     CDXUTIMEEditBox::s_aszIndicator[5][3] = \/\/ String to draw to indicate current input locale$/;"	m	class:CDXUTIMEEditBox	file:
s_aszIndicator	.\Common\DXUTgui.h	/^    static WCHAR   s_aszIndicator[5][3];  \/\/ String to draw to indicate current input locale$/;"	m	class:CDXUTIMEEditBox
s_bChineseIME	.\Common\DXUTgui.cpp	/^bool      CDXUTIMEEditBox::s_bChineseIME;$/;"	m	class:CDXUTIMEEditBox	file:
s_bChineseIME	.\Common\DXUTgui.h	/^    static bool    s_bChineseIME;$/;"	m	class:CDXUTIMEEditBox
s_bEnableImeSystem	.\Common\DXUTgui.cpp	/^bool      CDXUTIMEEditBox::s_bEnableImeSystem;  \/\/ Whether the IME system is active$/;"	m	class:CDXUTIMEEditBox	file:
s_bEnableImeSystem	.\Common\DXUTgui.h	/^    static bool    s_bEnableImeSystem;    \/\/ Whether the IME system is active$/;"	m	class:CDXUTIMEEditBox
s_bHideCaret	.\Common\DXUTgui.cpp	/^bool CDXUTEditBox::s_bHideCaret;   \/\/ If true, we don't render the caret.$/;"	m	class:CDXUTEditBox	file:
s_bHideCaret	.\Common\DXUTgui.h	/^    static bool s_bHideCaret;   \/\/ If true, we don't render the caret.$/;"	m	class:CDXUTEditBox
s_bHorizontalReading	.\Common\DXUTgui.cpp	/^bool      CDXUTIMEEditBox::s_bHorizontalReading; \/\/ Indicates whether the reading window is vertical or horizontal$/;"	m	class:CDXUTIMEEditBox	file:
s_bHorizontalReading	.\Common\DXUTgui.h	/^    static bool    s_bHorizontalReading;  \/\/ Indicates whether the reading window is vertical or horizontal$/;"	m	class:CDXUTIMEEditBox
s_bInsertOnType	.\Common\DXUTgui.cpp	/^bool      CDXUTIMEEditBox::s_bInsertOnType;     \/\/ Insert the character as soon as a key is pressed (Korean behavior)$/;"	m	class:CDXUTIMEEditBox	file:
s_bInsertOnType	.\Common\DXUTgui.h	/^    static bool    s_bInsertOnType;       \/\/ Insert the character as soon as a key is pressed (Korean behavior)$/;"	m	class:CDXUTIMEEditBox
s_bShowReadingWindow	.\Common\DXUTgui.cpp	/^bool      CDXUTIMEEditBox::s_bShowReadingWindow; \/\/ Indicates whether reading window is visible$/;"	m	class:CDXUTIMEEditBox	file:
s_bShowReadingWindow	.\Common\DXUTgui.h	/^    static bool    s_bShowReadingWindow;  \/\/ Indicates whether reading window is visible$/;"	m	class:CDXUTIMEEditBox
s_bUseSoftwareVP	.\XModelHeirarchy.cpp	/^bool            CXModelHeirarchy::s_bUseSoftwareVP = false;$/;"	m	class:CXModelHeirarchy	file:
s_bUseSoftwareVP	.\XModelHeirarchy.h	/^    static bool                 s_bUseSoftwareVP;    $/;"	m	class:CXModelHeirarchy
s_bVerticalCand	.\Common\DXUTgui.cpp	/^bool      CDXUTIMEEditBox::s_bVerticalCand;  \/\/ Indicates that the candidates are listed vertically$/;"	m	class:CDXUTIMEEditBox	file:
s_bVerticalCand	.\Common\DXUTgui.h	/^    static bool    s_bVerticalCand;       \/\/ Indicates that the candidates are listed vertically$/;"	m	class:CDXUTIMEEditBox
s_fTimeRefresh	.\Common\DXUTgui.cpp	/^double        CDXUTDialog::s_fTimeRefresh = 0.0f;$/;"	m	class:CDXUTDialog	file:
s_fTimeRefresh	.\Common\DXUTgui.h	/^    static double s_fTimeRefresh;$/;"	m	class:CDXUTDialog
s_hDll	.\Common\DXUTgui.cpp	/^HINSTANCE CUniBuffer::s_hDll = NULL;$/;"	m	class:CUniBuffer	file:
s_hDll	.\Common\DXUTgui.h	/^    static HINSTANCE s_hDll;  \/\/ Uniscribe DLL handle$/;"	m	class:CUniBuffer
s_hDllIme	.\Common\DXUTgui.cpp	/^HINSTANCE CDXUTIMEEditBox::s_hDllIme;           \/\/ Instance handle of the current IME module$/;"	m	class:CDXUTIMEEditBox	file:
s_hDllIme	.\Common\DXUTgui.h	/^    static HINSTANCE s_hDllIme;           \/\/ Instance handle of the current IME module$/;"	m	class:CDXUTIMEEditBox
s_hDllImm32	.\Common\DXUTgui.cpp	/^HINSTANCE CDXUTIMEEditBox::s_hDllImm32;      \/\/ IMM32 DLL handle$/;"	m	class:CDXUTIMEEditBox	file:
s_hDllImm32	.\Common\DXUTgui.h	/^    static HINSTANCE s_hDllImm32;         \/\/ IMM32 DLL handle$/;"	m	class:CDXUTIMEEditBox
s_hDllVer	.\Common\DXUTgui.cpp	/^HINSTANCE CDXUTIMEEditBox::s_hDllVer;        \/\/ Version DLL handle$/;"	m	class:CDXUTIMEEditBox	file:
s_hDllVer	.\Common\DXUTgui.h	/^    static HINSTANCE s_hDllVer;           \/\/ Version DLL handle$/;"	m	class:CDXUTIMEEditBox
s_hImcDef	.\Common\DXUTgui.cpp	/^HIMC      CDXUTIMEEditBox::s_hImcDef;           \/\/ Default input context$/;"	m	class:CDXUTIMEEditBox	file:
s_hImcDef	.\Common\DXUTgui.h	/^    static HIMC      s_hImcDef;           \/\/ Default input context$/;"	m	class:CDXUTIMEEditBox
s_hModD3D9	.\Common\DXUTmisc.cpp	/^static HMODULE s_hModD3D9 = NULL;$/;"	v	file:
s_hklCurrent	.\Common\DXUTgui.cpp	/^HKL       CDXUTIMEEditBox::s_hklCurrent;     \/\/ Current keyboard layout of the process$/;"	m	class:CDXUTIMEEditBox	file:
s_hklCurrent	.\Common\DXUTgui.h	/^    static HKL     s_hklCurrent;          \/\/ Current keyboard layout of the process$/;"	m	class:CDXUTIMEEditBox
s_nCompCaret	.\Common\DXUTgui.cpp	/^int       CDXUTIMEEditBox::s_nCompCaret;$/;"	m	class:CDXUTIMEEditBox	file:
s_nCompCaret	.\Common\DXUTgui.h	/^    static int     s_nCompCaret;          \/\/ Caret position of the composition string$/;"	m	class:CDXUTIMEEditBox
s_nFirstTargetConv	.\Common\DXUTgui.cpp	/^int       CDXUTIMEEditBox::s_nFirstTargetConv;  \/\/ Index of the first target converted char in comp string.  If none, -1.$/;"	m	class:CDXUTIMEEditBox	file:
s_nFirstTargetConv	.\Common\DXUTgui.h	/^    static int     s_nFirstTargetConv;    \/\/ Index of the first target converted char in comp string.  If none, -1.$/;"	m	class:CDXUTIMEEditBox
s_pControlFocus	.\Common\DXUTgui.cpp	/^CDXUTControl* CDXUTDialog::s_pControlFocus = NULL;        \/\/ The control which has focus$/;"	m	class:CDXUTDialog	file:
s_pControlFocus	.\Common\DXUTgui.h	/^    static CDXUTControl* s_pControlFocus;        \/\/ The control which has focus$/;"	m	class:CDXUTDialog
s_pControlPressed	.\Common\DXUTgui.cpp	/^CDXUTControl* CDXUTDialog::s_pControlPressed = NULL;      \/\/ The control currently pressed$/;"	m	class:CDXUTDialog	file:
s_pControlPressed	.\Common\DXUTgui.h	/^    static CDXUTControl* s_pControlPressed;      \/\/ The control currently pressed$/;"	m	class:CDXUTDialog
s_pEffect	.\Common\DXUTmisc.cpp	/^ID3DXEffect*      CDXUTDirectionWidget::s_pEffect = NULL;       $/;"	m	class:CDXUTDirectionWidget	file:
s_pEffect	.\Common\DXUTmisc.h	/^    static ID3DXEffect* s_pEffect;       $/;"	m	class:CDXUTDirectionWidget
s_pMesh	.\Common\DXUTmisc.cpp	/^ID3DXMesh*        CDXUTDirectionWidget::s_pMesh = NULL;    $/;"	m	class:CDXUTDirectionWidget	file:
s_pMesh	.\Common\DXUTmisc.h	/^    static ID3DXMesh*   s_pMesh;    $/;"	m	class:CDXUTDirectionWidget
s_pd3dDevice	.\Common\DXUTmisc.cpp	/^IDirect3DDevice9* CDXUTDirectionWidget::s_pd3dDevice = NULL;$/;"	m	class:CDXUTDirectionWidget	file:
s_pd3dDevice	.\Common\DXUTmisc.h	/^    static IDirect3DDevice9* s_pd3dDevice;$/;"	m	class:CDXUTDirectionWidget
s_ptCompString	.\Common\DXUTgui.cpp	/^POINT     CDXUTIMEEditBox::s_ptCompString;      \/\/ Composition string position. Updated every frame.$/;"	m	class:CDXUTIMEEditBox	file:
s_ptCompString	.\Common\DXUTgui.h	/^    static POINT   s_ptCompString;        \/\/ Composition string position. Updated every frame.$/;"	m	class:CDXUTIMEEditBox
s_wszCurrIndicator	.\Common\DXUTgui.cpp	/^LPWSTR    CDXUTIMEEditBox::s_wszCurrIndicator = CDXUTIMEEditBox::s_aszIndicator[0];  \/\/ Points to an indicator string that corresponds to current input locale$/;"	m	class:CDXUTIMEEditBox	file:
s_wszCurrIndicator	.\Common\DXUTgui.h	/^    static LPWSTR  s_wszCurrIndicator;    \/\/ Points to an indicator string that corresponds to current input locale$/;"	m	class:CDXUTIMEEditBox
s_wszReadingString	.\Common\DXUTgui.cpp	/^WCHAR     CDXUTIMEEditBox::s_wszReadingString[32];$/;"	m	class:CDXUTIMEEditBox	file:
s_wszReadingString	.\Common\DXUTgui.h	/^    static WCHAR   s_wszReadingString[32];\/\/ Used only with horizontal reading window (why?)$/;"	m	class:CDXUTIMEEditBox
scale	.\CloudBatch.h	/^        float scale;    \/\/ for SRT$/;"	m	struct:CCloud::SSubCloud
scale	.\World.h	/^        D3DXVECTOR3 scale, angle, pos;$/;"	m	struct:CWorld::SStaticEntityInfo
screen	.\PostProcEffects.h	/^    ScreenAlignedQuad		    screen;$/;"	m	class:PostProcEffects
setEffectParams	.\PostProcEffects.cpp	/^void PostProcEffects::setEffectParams( void )$/;"	f	class:PostProcEffects
setIndices	.\Pillar.cpp	/^void CPillar::setIndices(WORD *indices, UINT totalStacks)$/;"	f	class:CPillar
shutDown	.\PostProcEffects.cpp	/^void PostProcEffects::shutDown(void)$/;"	f	class:PostProcEffects
skirtBuffer	.\QuadTree.h	/^		IDirect3DVertexBuffer9 *skirtBuffer;$/;"	m	struct:CQuadTree::Block
sleType	.\GameEngine.h	/^		UCHAR sleType;$/;"	m	struct:CGameEngine::SShortLifeEntity
south	.\QuadTree.h	/^		QTNode *north, *south, *east, *west; \/\/! Pointer to neighbors. TODO: Remove since not needed for strips and not made properly.$/;"	m	struct:CQuadTree::QTNode
speed	.\Sky.h	/^        float time, speed;$/;"	m	struct:CSky::SClock
speed	.\SpriteAnimMgr.h	/^        float speed;$/;"	m	struct:CSpriteAnimMgr::SAnimation
splineAngle	.\Pillar.h	/^		float splineAngle;$/;"	m	struct:CPillar::SPillarInfo
splineRadius	.\Pillar.h	/^		float cylinderRadius, splineRadius, Length;$/;"	m	struct:CPillar::SPillarInfo
spriteAnimTableID	.\GameEngine.h	/^		UCHAR spriteAnimTableID;    \/\/! ID used to index which texture to use as defined in GameTables.h $/;"	m	struct:CGameEngine::SShortLifeEntity
srcRectf	.\CloudBatch.h	/^        RECTF srcRectf;   \/\/ source rect on cloud texture$/;"	m	struct:CCloud::SSubCloud
sseID	.\GameEngine.h	/^        int sseID;  \/\/ unique ID of this short life entity (sse).$/;"	m	struct:CGameEngine::SShortLifeEntity
start_pos	.\Sky.h	/^        D3DXVECTOR3 start_pos, pos, lightPos, lightDir;$/;"	m	struct:CSky::SBigStar
state	.\Button.h	/^	ButtonState				state;			$/;"	m	class:CButton
str	.\GameTables.h	/^        LPCSTR str;$/;"	m	struct:GameTable::NameIndexPair
strAlias	.\GameEngine.h	/^        string strAlias;    \/\/! alias in game. (crackie, bobschmackee, dimroc)$/;"	m	struct:CGameEngine::SPlayer
strAlphaTexture	.\QuadTree.h	/^        string strRedTexture, strGreenTexture, strBlueTexture, strAlphaTexture;$/;"	m	struct:CQuadTree::SQuadTreeInfo
strBlendMap	.\QuadTree.h	/^        string strBlendMap;$/;"	m	struct:CQuadTree::SQuadTreeInfo
strBlueTexture	.\QuadTree.h	/^        string strRedTexture, strGreenTexture, strBlueTexture, strAlphaTexture;$/;"	m	struct:CQuadTree::SQuadTreeInfo
strCloudAtlasTex	.\World.h	/^        string strCloudAtlasTex;$/;"	m	struct:CWorld::SCloudSkyInfo
strCloudMap	.\World.h	/^        string strCloudMap;$/;"	m	struct:CWorld::SCloudSkyInfo
strFace	.\Common\DXUTgui.h	/^    WCHAR strFace[MAX_PATH];$/;"	m	struct:DXUTFontNode
strFilename	.\Common\DXUTgui.h	/^    WCHAR strFilename[MAX_PATH];$/;"	m	struct:DXUTTextureNode
strGreenTexture	.\QuadTree.h	/^        string strRedTexture, strGreenTexture, strBlueTexture, strAlphaTexture;$/;"	m	struct:CQuadTree::SQuadTreeInfo
strHMP	.\QuadTree.h	/^        string strHMP;$/;"	m	struct:CQuadTree::SQuadTreeInfo
strIP	.\ServerInfo.h	/^    string strIP;$/;"	m	struct:SMasterServerInfo
strIP	.\ServerInfo.h	/^    string strIP;$/;"	m	struct:SServerInfo
strName	.\ServerInfo.h	/^    string strName;   $/;"	m	struct:SServerInfo
strNormalMap	.\World.h	/^        string strTex, strNormalMap;$/;"	m	struct:CWorld::SBubbleInfo
strPillarTexture	.\QuadTree.h	/^        string strPillarTexture;$/;"	m	struct:CQuadTree::SQuadTreeInfo
strRedTexture	.\QuadTree.h	/^        string strRedTexture, strGreenTexture, strBlueTexture, strAlphaTexture;$/;"	m	struct:CQuadTree::SQuadTreeInfo
strSkyToneTex	.\World.h	/^        string strSkyToneTex;$/;"	m	struct:CWorld::SCloudSkyInfo
strTableName	.\ServerInfo.h	/^    string strTableName, strTablePassword;$/;"	m	struct:SMasterServerInfo
strTablePassword	.\ServerInfo.h	/^    string strTableName, strTablePassword;$/;"	m	struct:SMasterServerInfo
strTex	.\World.h	/^        string strTex, strNormalMap;$/;"	m	struct:CWorld::SBubbleInfo
strTexName	.\Pillar.h	/^        string strTexName;$/;"	m	struct:CPillar::SPillarInfo
strText	.\Common\DXUTgui.h	/^    WCHAR strText[256];$/;"	m	struct:DXUTComboBoxItem
strText	.\Common\DXUTgui.h	/^    WCHAR strText[256];$/;"	m	struct:DXUTListBoxItem
swapid	.\ImpostorAtlas.h	/^        int swapid;$/;"	m	struct:CImpostorAtlas::SAtlasEntry
szDevice	.\Common\DXUTmisc.h	/^        WCHAR       szDevice[CCHDEVICENAME];$/;"	m	struct:tagMONITORINFOEXW
szUniqueDescription	.\Common\DXUTenum.h	/^    WCHAR szUniqueDescription[256];$/;"	m	class:CD3DEnumAdapterInfo
tagMONITORINFO	.\Common\DXUTmisc.h	/^    typedef struct tagMONITORINFO$/;"	s
tagMONITORINFOEXW	.\Common\DXUTmisc.h	/^    typedef struct tagMONITORINFOEXW : public tagMONITORINFO$/;"	s
tan	.\Sphere.h	/^        D3DXVECTOR3 tan;$/;"	m	struct:CSphere::SphereTanBinVert
texIdx	.\SpriteAnimMgr.h	/^        int texIdx;$/;"	m	struct:CSpriteAnimMgr::SAnimation
texWrapLength	.\Pillar.h	/^		UINT texWrapLength;$/;"	m	struct:CPillar::SPillarInfo
time	.\Sky.h	/^        float time, speed;$/;"	m	struct:CSky::SClock
timeLeft	.\HUD.h	/^	float							timeLeft;	\/\/! Time until next auto lowering of alpha$/;"	m	class:CHud
time_offset	.\Sky.h	/^		float orbit_speed, angle, fLightTimeOffset, time_offset, angle_offset, alpha_multiplier;$/;"	m	struct:CSky::SBigStar
tl	.\QuadTree.h	/^        QTNode *tl, *tr, *bl, *br; \/\/! four children        $/;"	m	struct:CQuadTree::QTNode
toggleInteractiveMode	.\Pillar.cpp	/^void CPillar::toggleInteractiveMode(void)$/;"	f	class:CPillar
tr	.\QuadTree.h	/^        QTNode *tl, *tr, *bl, *br; \/\/! four children        $/;"	m	struct:CQuadTree::QTNode
ttl	.\World.h	/^        float ttl;  \/\/ time to live.        $/;"	m	struct:CWorld::SRunningSpriteAnimation
tu	.\Common\DXUTgui.cpp	/^    float tu, tv;$/;"	m	struct:DXUT_SCREEN_VERTEX	file:
tu	.\FXDecl.h	/^    float tu, tv;       \/\/ Texcoord for post-process source$/;"	m	struct:PPVERT
tu	.\FXDecl.h	/^    float tu, tv; \/\/ tex coordinate$/;"	m	struct:MESHVERT
tu	.\Foliage.h	/^    float tu, tv; \/\/ tex coordinate    $/;"	m	struct:GRASSVERT
tu	.\PostProcEffects.h	/^    float tu, tv;$/;"	m	struct:ScreenAlignedQuad::ScreenVertex
tu	.\Sphere.h	/^        float tu, tv; \/\/ tex coordinate$/;"	m	struct:CSphere::SphereTanBinVert
tu	.\Sphere.h	/^        float tu, tv; \/\/ tex coordinate$/;"	m	struct:CSphere::SphereVert
tu2	.\FXDecl.h	/^    float tu2, tv2;     \/\/ Texcoord for the original scene$/;"	m	struct:PPVERT
tv	.\Common\DXUTgui.cpp	/^    float tu, tv;$/;"	m	struct:DXUT_SCREEN_VERTEX	file:
tv	.\FXDecl.h	/^    float tu, tv;       \/\/ Texcoord for post-process source$/;"	m	struct:PPVERT
tv	.\FXDecl.h	/^    float tu, tv; \/\/ tex coordinate$/;"	m	struct:MESHVERT
tv	.\Foliage.h	/^    float tu, tv; \/\/ tex coordinate    $/;"	m	struct:GRASSVERT
tv	.\PostProcEffects.h	/^    float tu, tv;$/;"	m	struct:ScreenAlignedQuad::ScreenVertex
tv	.\Sphere.h	/^        float tu, tv; \/\/ tex coordinate$/;"	m	struct:CSphere::SphereTanBinVert
tv	.\Sphere.h	/^        float tu, tv; \/\/ tex coordinate$/;"	m	struct:CSphere::SphereVert
tv2	.\FXDecl.h	/^    float tu2, tv2;     \/\/ Texcoord for the original scene$/;"	m	struct:PPVERT
u	.\FXDecl.h	/^    float u,v;$/;"	m	struct:BoxVertTex
u	.\FXDecl.h	/^    float u,v;$/;"	m	struct:BoxVertTexColor
u	.\PolySprite.h	/^        float u,v;$/;"	m	struct:CPolySprite::PolySpriteVertex
v	.\FXDecl.h	/^    float u,v;$/;"	m	struct:BoxVertTex
v	.\FXDecl.h	/^    float u,v;$/;"	m	struct:BoxVertTexColor
v	.\PolySprite.h	/^        float u,v;$/;"	m	struct:CPolySprite::PolySpriteVertex
vCameraLookAtOffset	.\World.h	/^        D3DXVECTOR3 vCameraOffset, vCameraLookAtOffset;$/;"	m	struct:CWorld::SCameraMovement
vCameraOffset	.\World.h	/^        D3DXVECTOR3 vCameraOffset, vCameraLookAtOffset;$/;"	m	struct:CWorld::SCameraMovement
vCenter	.\Bubbles.h	/^        D3DXVECTOR3 vCenter;$/;"	m	struct:CBubbles::SBubble
vCenter	.\ImpostorAtlas.h	/^        D3DXVECTOR3 vCenter;$/;"	m	struct:CImpostorAtlas::SAtlasEntry
vCenter	.\PolySprite.h	/^        D3DXVECTOR3 vCenter;$/;"	m	struct:CPolySprite::DrawInfo
vCenter	.\World.h	/^        D3DXVECTOR3 vCenter; $/;"	m	struct:CWorld::SBubbleInfo
vClusterTranslation	.\Foliage.h	/^    D3DXVECTOR4 vClusterTranslation;$/;"	m	struct:SGrass
vLastDirection	.\GameEngine.h	/^        D3DXVECTOR3 vLastDirection; \/\/! to render world mtx if player stops moving.$/;"	m	struct:CGameEngine::SPlayer
vLastLookAt	.\World.h	/^        D3DXVECTOR3 vLastRelativePos, vLastWorldPos, vLastLookAt;$/;"	m	struct:CWorld::SCameraMovement
vLastRelativePos	.\World.h	/^        D3DXVECTOR3 vLastRelativePos, vLastWorldPos, vLastLookAt;$/;"	m	struct:CWorld::SCameraMovement
vLastVel	.\GameEngine.h	/^        D3DXVECTOR3 vVel, vLastVel;  \/\/! player relative velocity. Not actual world velcotiy (affects such as grav etc).$/;"	m	struct:CGameEngine::SPlayer
vLastWorldPos	.\World.h	/^        D3DXVECTOR3 vLastRelativePos, vLastWorldPos, vLastLookAt;$/;"	m	struct:CWorld::SCameraMovement
vLivableSphereCenter	.\GameEngine.h	/^		D3DXVECTOR3 vLivableSphereCenter;$/;"	m	struct:CGameEngine::SEnvironment
vLookAtOffset	.\GameEngine.h	/^        D3DXVECTOR3 vPosOffSet, vLookAtOffset;$/;"	m	struct:CGameEngine::SCameraControl
vPos	.\Foliage.h	/^    D3DXVECTOR3 vPos; \/\/ position of grass object center.$/;"	m	struct:SGrass
vPos	.\GameEngine.h	/^        D3DXVECTOR3 vPos, vScale;$/;"	m	struct:CGameEngine::SShortLifeEntity
vPos	.\GameEngine.h	/^        D3DXVECTOR3 vPos, vVel;$/;"	m	struct:CGameEngine::SPlayerNetworkUpdate
vPosOffSet	.\GameEngine.h	/^        D3DXVECTOR3 vPosOffSet, vLookAtOffset;$/;"	m	struct:CGameEngine::SCameraControl
vScale	.\GameEngine.h	/^        D3DXVECTOR3 vPos, vScale;$/;"	m	struct:CGameEngine::SShortLifeEntity
vStills	.\SpriteAnimMgr.h	/^        vector<int> vStills;$/;"	m	struct:CSpriteAnimMgr::SAnimation
vStills	.\World.h	/^        vector<int> vStills;$/;"	m	struct:CWorld::SSpriteAnimationEntry
vTranslation	.\QuadTree.h	/^        D3DXVECTOR3 vTranslation;$/;"	m	struct:CQuadTree::SQuadTreeInfo
vVel	.\GameEngine.h	/^        D3DXVECTOR3 vPos, vVel;$/;"	m	struct:CGameEngine::SPlayerNetworkUpdate
vVel	.\GameEngine.h	/^        D3DXVECTOR3 vVel, vLastVel;  \/\/! player relative velocity. Not actual world velcotiy (affects such as grav etc).$/;"	m	struct:CGameEngine::SPlayer
vecCenter	.\ImpostorAtlas.h	/^        D3DXVECTOR3 vecPrevWorldUp, vecPrevLookAt, vecCenter;$/;"	m	struct:CImpostorAtlas::SAtlasEntryUpdate
vecPrevLookAt	.\ImpostorAtlas.h	/^        D3DXVECTOR3 vecPrevWorldUp, vecPrevLookAt, vecCenter;$/;"	m	struct:CImpostorAtlas::SAtlasEntryUpdate
vecPrevWorldUp	.\ImpostorAtlas.h	/^        D3DXVECTOR3 vecPrevWorldUp, vecPrevLookAt, vecCenter;$/;"	m	struct:CImpostorAtlas::SAtlasEntryUpdate
vertInterp	.\CloudBatch.h	/^        float vertInterp; \/\/! a value between 0-1 inclusive that represents the subclouds position from top to bottom. used for lighting to darken bottom.$/;"	m	struct:CCloud::SSubCloud
vertSkirtOffset	.\QuadTree.h	/^		int vertSkirtOffset; \/\/offset for drawing vertical skirt$/;"	m	struct:CQuadTree::Tile
verts	.\ImpostorAtlas.h	/^        BoxVertTex verts[6]; \/\/ world space vertices of this impostor entry.$/;"	m	struct:CImpostorAtlas::SAtlasEntry
verts	.\PolySprite.h	/^        PolySpriteVertex verts[6]; \/\/ Used only if user sends in world space vertices.        $/;"	m	struct:CPolySprite::DrawInfo
vpClouds	.\QuadTree.h	/^        vector<CCloud*> vpClouds;   \/\/! Clouds in the _Leaf_ node.$/;"	m	struct:CQuadTree::QTNode
vpGrass	.\QuadTree.h	/^        vector<SGrass*> vpGrass;    \/\/! Grass objects in leaf node.$/;"	m	struct:CQuadTree::QTNode
vsmult	.\SunStates.h	/^    float vspower, pspower, vsmult; \/\/ shader vars for sun size\/look.$/;"	m	struct:SSunMorphState
vspower	.\SunStates.h	/^    float vspower, pspower, vsmult; \/\/ shader vars for sun size\/look.$/;"	m	struct:SSunMorphState
wButtons	.\Common\DXUTmisc.h	/^    WORD    wButtons;$/;"	m	struct:DXUT_GAMEPAD
wLastButtons	.\Common\DXUTmisc.h	/^    WORD    wLastButtons;$/;"	m	struct:DXUT_GAMEPAD
wPressedButtons	.\Common\DXUTmisc.h	/^    WORD    wPressedButtons;$/;"	m	struct:DXUT_GAMEPAD
west	.\QuadTree.h	/^		QTNode *north, *south, *east, *west; \/\/! Pointer to neighbors. TODO: Remove since not needed for strips and not made properly.$/;"	m	struct:CQuadTree::QTNode
widthhalf	.\CloudBatch.h	/^    float heighthalf, widthhalf, depthhalf; \/\/ y x z$/;"	m	struct:SCloudInfo
word	.\GameTables.h	/^        LPCSTR word;$/;"	m	struct:GameTable::WordCharPair
worldcenter	.\Sky.cpp	/^D3DXVECTOR3 CSky::SBigStar::worldcenter;$/;"	m	class:CSky::SBigStar	file:
worldcenter	.\Sky.h	/^        static D3DXVECTOR3 worldcenter;$/;"	m	struct:CSky::SBigStar
writeValsToFile	.\Pillar.cpp	/^void CPillar::writeValsToFile(void)$/;"	f	class:CPillar
wszSource	.\Common\DXUTmisc.h	/^    WCHAR wszSource[MAX_PATH];$/;"	m	struct:DXUTCache_Effect
wszSource	.\Common\DXUTmisc.h	/^    WCHAR wszSource[MAX_PATH];$/;"	m	struct:DXUTCache_Texture
x	.\Common\DXUTgui.cpp	/^    float x, y, z, h;$/;"	m	struct:DXUT_SCREEN_VERTEX	file:
x	.\Common\DXUTgui.cpp	/^    float x, y, z, h;$/;"	m	struct:DXUT_SCREEN_VERTEX_UNTEX	file:
x	.\FXDecl.h	/^    float x, y, z, rhw;$/;"	m	struct:PPVERT
x	.\FXDecl.h	/^    float x, y, z;      \/\/ Position$/;"	m	struct:TERRAINVERT
x	.\GUIObject.h	/^    float x, y, z, rhw; \/\/ The transformed position for the vertex$/;"	m	struct:SVertex
x	.\PostProcEffects.h	/^    {	float x, y, z;$/;"	m	struct:ScreenAlignedQuad::ScreenVertex
xPercent	.\ScrollingWindow.h	/^	float				xPercent;		\/\/ What percentage of the window is taken up by the window (between 0 and 1)$/;"	m	class:CScrollingWindow
y	.\Common\DXUTgui.cpp	/^    float x, y, z, h;$/;"	m	struct:DXUT_SCREEN_VERTEX	file:
y	.\Common\DXUTgui.cpp	/^    float x, y, z, h;$/;"	m	struct:DXUT_SCREEN_VERTEX_UNTEX	file:
y	.\FXDecl.h	/^    float x, y, z, rhw;$/;"	m	struct:PPVERT
y	.\FXDecl.h	/^    float x, y, z;      \/\/ Position$/;"	m	struct:TERRAINVERT
y	.\GUIObject.h	/^    float x, y, z, rhw; \/\/ The transformed position for the vertex$/;"	m	struct:SVertex
y	.\PostProcEffects.h	/^    {	float x, y, z;$/;"	m	struct:ScreenAlignedQuad::ScreenVertex
yPercent	.\ScrollingWindow.h	/^	float				yPercent;$/;"	m	class:CScrollingWindow
z	.\Common\DXUTgui.cpp	/^    float x, y, z, h;$/;"	m	struct:DXUT_SCREEN_VERTEX	file:
z	.\Common\DXUTgui.cpp	/^    float x, y, z, h;$/;"	m	struct:DXUT_SCREEN_VERTEX_UNTEX	file:
z	.\FXDecl.h	/^    float x, y, z, rhw;$/;"	m	struct:PPVERT
z	.\FXDecl.h	/^    float x, y, z;      \/\/ Position$/;"	m	struct:TERRAINVERT
z	.\GUIObject.h	/^    float x, y, z, rhw; \/\/ The transformed position for the vertex$/;"	m	struct:SVertex
z	.\PostProcEffects.h	/^    {	float x, y, z;$/;"	m	struct:ScreenAlignedQuad::ScreenVertex
~Block	.\QuadTree.h	/^		~Block() { SAFE_RELEASE(pVB); SAFE_RELEASE(skirtBuffer); }$/;"	f	struct:CQuadTree::Block
~CBubbles	.\Bubbles.cpp	/^CBubbles::~CBubbles(void)$/;"	f	class:CBubbles
~CButton	.\Button.cpp	/^CButton::~CButton() { $/;"	f	class:CButton
~CClient	.\Client.cpp	/^CClient::~CClient()$/;"	f	class:CClient
~CCloud	.\CloudBatch.cpp	/^CCloud::~CCloud(void)$/;"	f	class:CCloud
~CCloudBatch	.\CloudBatch.cpp	/^CCloudBatch::~CCloudBatch(void)$/;"	f	class:CCloudBatch
~CCloudSky	.\CloudSky.cpp	/^CCloudSky::~CCloudSky(void)$/;"	f	class:CCloudSky
~CConsole	.\Console.cpp	/^CConsole::~CConsole() { $/;"	f	class:CConsole
~CConsoleBuffer	.\ConsoleBuffer.cpp	/^CConsoleBuffer::~CConsoleBuffer() {$/;"	f	class:CConsoleBuffer
~CD3DEnumAdapterInfo	.\Common\DXUTenum.cpp	/^CD3DEnumAdapterInfo::~CD3DEnumAdapterInfo( void )$/;"	f	class:CD3DEnumAdapterInfo
~CD3DEnumDeviceInfo	.\Common\DXUTenum.cpp	/^CD3DEnumDeviceInfo::~CD3DEnumDeviceInfo( void )$/;"	f	class:CD3DEnumDeviceInfo
~CD3DEnumeration	.\Common\DXUTenum.cpp	/^CD3DEnumeration::~CD3DEnumeration()$/;"	f	class:CD3DEnumeration
~CD3DSettingsDlg	.\Common\DXUTSettingsDlg.cpp	/^CD3DSettingsDlg::~CD3DSettingsDlg()$/;"	f	class:CD3DSettingsDlg
~CDXUTComboBox	.\Common\DXUTgui.cpp	/^CDXUTComboBox::~CDXUTComboBox()$/;"	f	class:CDXUTComboBox
~CDXUTControl	.\Common\DXUTgui.cpp	/^CDXUTControl::~CDXUTControl()$/;"	f	class:CDXUTControl
~CDXUTDialog	.\Common\DXUTgui.cpp	/^CDXUTDialog::~CDXUTDialog()$/;"	f	class:CDXUTDialog
~CDXUTDialogResourceManager	.\Common\DXUTgui.cpp	/^CDXUTDialogResourceManager::~CDXUTDialogResourceManager()$/;"	f	class:CDXUTDialogResourceManager
~CDXUTEditBox	.\Common\DXUTgui.cpp	/^CDXUTEditBox::~CDXUTEditBox()$/;"	f	class:CDXUTEditBox
~CDXUTIMEEditBox	.\Common\DXUTgui.cpp	/^CDXUTIMEEditBox::~CDXUTIMEEditBox()$/;"	f	class:CDXUTIMEEditBox
~CDXUTLineManager	.\Common\DXUTmisc.cpp	/^CDXUTLineManager::~CDXUTLineManager()$/;"	f	class:CDXUTLineManager
~CDXUTListBox	.\Common\DXUTgui.cpp	/^CDXUTListBox::~CDXUTListBox()$/;"	f	class:CDXUTListBox
~CDXUTMesh	.\Common\DXUTMesh.cpp	/^CDXUTMesh::~CDXUTMesh()$/;"	f	class:CDXUTMesh
~CDXUTMeshFrame	.\Common\DXUTMesh.cpp	/^CDXUTMeshFrame::~CDXUTMeshFrame()$/;"	f	class:CDXUTMeshFrame
~CDXUTPerfEventGenerator	.\Common\DXUTmisc.h	/^    ~CDXUTPerfEventGenerator( void ) { DXUT_EndPerfEvent(); }$/;"	f	class:CDXUTPerfEventGenerator
~CDXUTResourceCache	.\Common\DXUTmisc.cpp	/^CDXUTResourceCache::~CDXUTResourceCache()$/;"	f	class:CDXUTResourceCache
~CDXUTScrollBar	.\Common\DXUTgui.cpp	/^CDXUTScrollBar::~CDXUTScrollBar()$/;"	f	class:CDXUTScrollBar
~CFoliage	.\Foliage.cpp	/^CFoliage::~CFoliage(void)$/;"	f	class:CFoliage
~CGameEngine	.\GameEngine.cpp	/^CGameEngine::~CGameEngine(void)$/;"	f	class:CGameEngine
~CGameGUI	.\GameGUI.cpp	/^CGameGUI::~CGameGUI(){ $/;"	f	class:CGameGUI
~CGameRoot	.\GameRoot.cpp	/^CGameRoot::~CGameRoot(void)$/;"	f	class:CGameRoot
~CGameSettings	.\GameSettings.cpp	/^CGameSettings::~CGameSettings(void)$/;"	f	class:CGameSettings
~CGrowableArray	.\Common\DXUTmisc.h	/^    ~CGrowableArray() { RemoveAll(); }$/;"	f	class:CGrowableArray
~CHud	.\HUD.cpp	/^CHud::~CHud() { $/;"	f	class:CHud
~CImpostorAtlas	.\ImpostorAtlas.cpp	/^CImpostorAtlas::~CImpostorAtlas(void)$/;"	f	class:CImpostorAtlas
~CLoadArea	.\QuadTree.h	/^        ~CLoadArea() {}$/;"	f	class:CQuadTree::CLoadArea
~CMenu	.\Menu.cpp	/^CMenu::~CMenu() $/;"	f	class:CMenu
~CMipmapTerrain	.\MipmapTerrain.cpp	/^CMipmapTerrain::~CMipmapTerrain() {$/;"	f	class:CMipmapTerrain
~CModelInstance	.\ModelInstance.cpp	/^CModelInstance::~CModelInstance(void)$/;"	f	class:CModelInstance
~CMultiColumnList	.\MultiColumnList.cpp	/^CMultiColumnList::~CMultiColumnList() {$/;"	f	class:CMultiColumnList
~CNetworkRoot	.\NetworkRoot.cpp	/^CNetworkRoot::~CNetworkRoot()$/;"	f	class:CNetworkRoot
~CNumberToSprite	.\NumberToSprite.cpp	/^CNumberToSprite::~CNumberToSprite(void)$/;"	f	class:CNumberToSprite
~CPhysicsRoot	.\PhysicsRoot.cpp	/^CPhysicsRoot::~CPhysicsRoot()$/;"	f	class:CPhysicsRoot
~CPillar	.\Pillar.cpp	/^CPillar::~CPillar( void )$/;"	f	class:CPillar
~CPolySprite	.\PolySprite.cpp	/^CPolySprite::~CPolySprite(void)$/;"	f	class:CPolySprite
~CProgressBar	.\ProgressBar.h	/^	~CProgressBar() { }$/;"	f	class:CProgressBar
~CQuadTree	.\QuadTree.cpp	/^CQuadTree::~CQuadTree(void)$/;"	f	class:CQuadTree
~CScrollingWindow	.\ScrollingWindow.h	/^	~CScrollingWindow() { }$/;"	f	class:CScrollingWindow
~CServer	.\Server.cpp	/^CServer::~CServer(void)$/;"	f	class:CServer
~CServerBrowser	.\ServerBrowser.cpp	/^CServerBrowser::~CServerBrowser(){$/;"	f	class:CServerBrowser
~CShadowMap	.\ShadowMap.cpp	/^CShadowMap::~CShadowMap(void)$/;"	f	class:CShadowMap
~CSky	.\Sky.cpp	/^CSky::~CSky(void)$/;"	f	class:CSky
~CSound	.\Common\DXUTsound.cpp	/^CSound::~CSound()$/;"	f	class:CSound
~CSoundManager	.\Common\DXUTsound.cpp	/^CSoundManager::~CSoundManager()$/;"	f	class:CSoundManager
~CSphere	.\Sphere.cpp	/^CSphere::~CSphere(void)$/;"	f	class:CSphere
~CSprite	.\Sprite.cpp	/^CSprite::~CSprite(void)$/;"	f	class:CSprite
~CSpriteAnimMgr	.\SpriteAnimMgr.cpp	/^CSpriteAnimMgr::~CSpriteAnimMgr(void)$/;"	f	class:CSpriteAnimMgr
~CStreamingSound	.\Common\DXUTsound.cpp	/^CStreamingSound::~CStreamingSound()$/;"	f	class:CStreamingSound
~CUniBuffer	.\Common\DXUTgui.cpp	/^CUniBuffer::~CUniBuffer()$/;"	f	class:CUniBuffer
~CWaveFile	.\Common\DXUTsound.cpp	/^CWaveFile::~CWaveFile()$/;"	f	class:CWaveFile
~CWorld	.\World.cpp	/^CWorld::~CWorld(void)$/;"	f	class:CWorld
~CXModelHeirarchy	.\XModelHeirarchy.cpp	/^CXModelHeirarchy::~CXModelHeirarchy(void)$/;"	f	class:CXModelHeirarchy
~DXUTLock	.\Common\DXUT.cpp	/^    inline ~DXUTLock() { if( g_bThreadSafe ) LeaveCriticalSection( &g_cs ); }$/;"	f	class:DXUTLock
~DXUTState	.\Common\DXUT.cpp	/^    ~DXUTState() { Destroy(); }$/;"	f	class:DXUTState
~IImpostorable	.\IImpostorable.cpp	/^IImpostorable::~IImpostorable(void)$/;"	f	class:IImpostorable
~ISpatialSubdivision	.\ISpatialSubdivision.h	/^    virtual ~ISpatialSubdivision(void) { $/;"	f	class:ISpatialSubdivision
~ITerrain	.\ITerrain.h	/^      virtual ~ITerrain(void) { $/;"	f	class:ITerrain
~PostProcEffects	.\PostProcEffects.cpp	/^PostProcEffects::~PostProcEffects(void)$/;"	f	class:PostProcEffects
~QTNode	.\QuadTree.cpp	/^CQuadTree::QTNode::~QTNode() {$/;"	f	class:CQuadTree::QTNode
~SBigStar	.\Sky.cpp	/^CSky::SBigStar::~SBigStar()$/;"	f	class:CSky::SBigStar
~SClock	.\Sky.h	/^        ~SClock() {}$/;"	f	struct:CSky::SClock
~SCloudInfo	.\CloudBatch.cpp	/^SCloudInfo::~SCloudInfo()$/;"	f	class:SCloudInfo
~SMasterServerInfo	.\ServerInfo.cpp	/^SMasterServerInfo::~SMasterServerInfo(void)$/;"	f	class:SMasterServerInfo
~SPlayerNetworkUpdate	.\GameEngine.cpp	/^CGameEngine::SPlayerNetworkUpdate::~SPlayerNetworkUpdate()$/;"	f	class:CGameEngine::SPlayerNetworkUpdate
~SPlayerSpaces	.\GameEngine.h	/^        ~SPlayerSpaces() {}$/;"	f	struct:CGameEngine::SPlayerSpaces
~SServerInfo	.\ServerInfo.cpp	/^SServerInfo::~SServerInfo(void)$/;"	f	class:SServerInfo
~SSubCloud	.\CloudBatch.h	/^        ~SSubCloud() {}$/;"	f	struct:CCloud::SSubCloud
~ScreenAlignedQuad	.\PostProcEffects.h	/^    ~ScreenAlignedQuad(void) {	SAFE_RELEASE(m_pVB); };$/;"	f	class:ScreenAlignedQuad
