
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>GameDev.net - In Memory Data Compression and Decompression</title>
  <link rel=stylesheet href="/css/reference.css" type="text/css">
  <link rel="icon" href="/pics/gdicon.png" type="image/png">
</head>
<body marginwidth="0" marginheight="0" leftmargin="0" topmargin="0" bgcolor="#FFFFFF" background="/reference/pics/watermark.gif" text="#000000" link="#666699" alink="#000000" vlink="#666699">

<table border=0 cellpadding=3 cellspacing=0 width=100%>
  <tr>
    <td class="tblhdr">In Memory Data Compression and Decompression</td>
    <td class="tblhdr" nowrap align="right"><img src="/reference/pics/littleg.gif" align="absbottom" width="16" height="16">&nbsp;<a href="http://www.gamedev.net"><span style="color: white; text-decoration: none">GameDev.net</a></span></td>
  </tr>
  <tr>
    <td colspan="2" align="center">
<!-- Begin Ban Man Pro Banner Code -  Zone: GameDev.net variable width -->
<SCRIPT LANGUAGE="JAVASCRIPT">
<!--
var browName = navigator.appName;
var browDateTime = (new Date()).getTime();
var browVersion = parseInt(navigator.appVersion);
var ua=navigator.userAgent.toLowerCase();
var adcode='';
if (browName=='Netscape'){
     if (browVersion>=5) 
          { document.write('<ifr'+'ame src="http://www.gamedev.net/banman/banman.asp?ZoneID=13&Task=Get&Browser=NETSCAPE6&X=' + browDateTime + '" width=728 height=90 Marginwidth=0 Marginheight=0 Hspace=0 Vspace=0 Frameborder=0 Scrolling=No></ifr'+'ame>'); }
     else if ((browVersion>=4)&&(ua.indexOf("mac")==-1))
          { document.write('<S'+'CRIPT src="http://www.gamedev.net/banman/banman.asp?ZoneID=13&Task=Get&Browser=NETSCAPE4">');
          document.write('</'+'scr'+'ipt>');
          document.write(adcode); }
     else if (browVersion>=3) 
          { document.write('<A HREF="http://www.gamedev.net/banman/banman.asp?ZoneID=13&Task=Click&Mode=HTML&PageID=' + browDateTime + '&RandomNumber=' + browDateTime + '" target="_new"><IMG SRC="http://www.gamedev.net/banman/banman.asp?ZoneID=13&Task=Get&Mode=HTML&PageID=' + browDateTime + '&RandomNumber=' + browDateTime + '" width="728" height="90" border="0"></A>'); } }
if (browName=='Microsoft Internet Explorer')
     { document.write('<ifr'+'ame src="http://www.gamedev.net/banman/banman.asp?ZoneID=13&Task=Get&X=' + browDateTime + '" width=728 height=90 Marginwidth=0 Marginheight=0 Hspace=0 Vspace=0 Frameborder=0 Scrolling=No></ifr'+'ame>'); }
// --> 
</script>
<noscript>
    <a href="http://www.gamedev.net/banman/banman.asp?ZoneID=13&Task=Click&Mode=HTML&PageID=30781" target="_new">
    <img src="http://www.gamedev.net/banman/banman.asp?ZoneID=13&Task=Get&Mode=HTML&PageID=30781" width="728" height="90" border="0"></a>
</noscript>
<!-- End Ban Man Pro Banner Code -  Zone: GameDev.net variable width --></td>
  </tr>
</table>
<table cellpadding="5" cellspacing="0" border="0" width="100%"><tr><td>

    <p align="center"><span class="title">In Memory Data Compression and Decompression</span>
    
      <br><span class="author">by <a href="mailto:spudder@blueyonder.co.uk">Lee Millward</a></span></p>
    
    <table align="right" border="0" cellpadding="5" cellspacing="0" width="310"><tr><td align="center"><br><span class="maintext-2">ADVERTISEMENT</span>
<!-- Begin Ban Man Pro Banner Code -  Zone: GameDev.net Box -->
<SCRIPT LANGUAGE="JAVASCRIPT">
<!--
var browName = navigator.appName;
var browDateTime = (new Date()).getTime();
var browVersion = parseInt(navigator.appVersion);
var ua=navigator.userAgent.toLowerCase();
var adcode='';
if (browName=='Netscape'){
     if (browVersion>=5) 
          { document.write('<ifr'+'ame src="http://www.gamedev.net/banman/banman.asp?ZoneID=26&Task=Get&Browser=NETSCAPE6&X=' + browDateTime + '" width=300 height=250 Marginwidth=0 Marginheight=0 Hspace=0 Vspace=0 Frameborder=0 Scrolling=No></ifr'+'ame>'); }
     else if ((browVersion>=4)&&(ua.indexOf("mac")==-1))
          { document.write('<S'+'CRIPT src="http://www.gamedev.net/banman/banman.asp?ZoneID=26&Task=Get&Browser=NETSCAPE4">');
          document.write('</'+'scr'+'ipt>');
          document.write(adcode); }
     else if (browVersion>=3) 
          { document.write('<A HREF="http://www.gamedev.net/banman/banman.asp?ZoneID=26&Task=Click&Mode=HTML&PageID=' + browDateTime + '&RandomNumber=' + browDateTime + '" target="_new"><IMG SRC="http://www.gamedev.net/banman/banman.asp?ZoneID=26&Task=Get&Mode=HTML&PageID=' + browDateTime + '&RandomNumber=' + browDateTime + '" width="300" height="250" border="0"></A>'); } }
if (browName=='Microsoft Internet Explorer')
     { document.write('<ifr'+'ame src="http://www.gamedev.net/banman/banman.asp?ZoneID=26&Task=Get&X=' + browDateTime + '" width=300 height=250 Marginwidth=0 Marginheight=0 Hspace=0 Vspace=0 Frameborder=0 Scrolling=No></ifr'+'ame>'); }
// --> 
</script>
<noscript>
    <a href="http://www.gamedev.net/banman/banman.asp?ZoneID=26&Task=Click&Mode=HTML&PageID=94538" target="_new">
    <img src="http://www.gamedev.net/banman/banman.asp?ZoneID=26&Task=Get&Mode=HTML&PageID=94538" width="300" height="250" border="0"></a>
</noscript>
<!-- End Ban Man Pro Banner Code -  Zone: GameDev.net Box --></td></tr></table>
  
<h1>Part One - Compression</h1>
<p>This Sweet Snippet will show you how easy it can be to perform compression/decompression between data buffers in memory using the zlib library. We will go the easy route to get a simple example application going which will read in the contents of a file into memory, compress that data, and then write it back out to file. In the second part we will use the output from part one to decompress the data, then write it back out to disk so we can check the results.</p>
<p>What you will need:<br>
 - <a href="http://www.gzip.org/zlib/">zlib 1.2.2</a></p>
<p>Zlib provides two different functions for in-memory buffer-to-buffer compression so let's have a look at them. Located in zlib.h at line 876 you will find the following declaration:</p>

<pre class="code">
<span class="codekeyword">int</span> ZEXPORT compress(Bytef* dest, uLongf *destLen, <span class="codekeyword">const</span> Bytef *source,
                     uLong SourceLen);
</pre>
<ul>
  <i>dest</i> - Pointer to the destination buffer where the compressed data will be written to.<br>
  <i>destLen</i> - After the function has returned, this value will be the size in bytes of the destination buffer.<br>
  <i>source</i> - Pointer to the source buffer which contains the data to be compressed.<br>
  <i>sourceLen</i> - Length of the source data in bytes.
</ul>
<p>This function is pretty simple to use - pass it pointers to two memory buffers, one containing the source data and one empty buffer for the compressed data. But what if you'd like a little more control about exactly <i>how</i> the data is compressed? For that you would need to use the following function instead which is at line 891 in zlib.h:</span></p>

<pre class="code">
<span class="codekeyword">int</span> ZEXPORT compress2(Bytef *dest, uLongf *destLen, <span class="codekeyword">const</span> Bytef *source,
                      uLong SourceLen, <span class="codekeyword">int</span> level);
</pre>

<p>The parameters are identical to <i>compress</i> except for the addition of a new one: <i>level</i>. The value of this parameter will determine how the data is compressed - allowing you to achieve a trade-off between speed and compression ratio. The possible values are:</p>
<ul>
  <i>Z_NO_COMPRESSION</i> - data is not compressed.<br>
  <i>Z_BEST_SPEED</i> - sacrifices compression ratio for improved speed.<br>
  <i>Z_BEST_COMPRESSION</i> - gain improved compression ratios but at a cost of execution speed.<br>
  <i>Z_DEFAULT_COMPRESSION</i> - this is a compromise between compression ratios and speed of execution.
</ul>
<p>Both of these functions will return <i>Z_OK</i> on success, otherwise an error code detailing a little more information about exactly why the call failed will be returned instead.</p>
<p>Now that you know what functions we can use, let's go through a simple example:</p>

<pre class="code">
<span class="codecomment">//input and output files</span>
FILE *FileIn = fopen("FileIn.bmp", "rb");
FILE *FileOut = fopen("FileOut.dat", "wb");

<span class="codecomment">//get the file size of the input file</span>
fseek(FileIn, 0, SEEK_END);
<span class="codekeyword">unsigned long</span> FileInSize = ftell(FileIn);

<span class="codecomment">//buffers for the raw and compressed data</span>
<span class="codekeyword">void</span> *RawDataBuff = malloc(FileInSize);
<span class="codekeyword">void</span> *CompDataBuff = NULL;

<span class="codecomment">
//zlib states that the source buffer must be at least 0.1
//times larger than the source buffer plus 12 bytes
//to cope with the overhead of zlib data streams</span>
uLongf CompBuffSize = (uLongf)(FileInSize + (FileInSize * 0.1) + 12);
CompDataBuff = malloc((size_t)(CompBuffSize));

<span class="codecomment">//read in the contents of the file into the source buffer</span>
fseek(FileIn, 0, SEEK_SET);
fread(RawDataBuff, FileInSize, 1, FileIn);

<span class="codecomment">//now compress the data</span>
uLongf DestBuffSize;
compress2((Bytef*)CompDataBuff, (uLongf*)&DestBuffSize,
          (<span class="codekeyword">const</span> Bytef*)RawDataBuff, (uLongf)FileInSize, Z_BEST_COMPRESSION);

<span class="codecomment">//write the compressed data to disk</span>
fwrite(CompDataBuff, DestBuffSize, 1, FileOut);
</pre>

<p>I've not included any error checking in the above code for reasons of clarity; this is something you would obviously want to include in your own applications.</p>

<h1>Part Two - Decompression</h1>
<p>Having compressed data is of no use to anyone without a way of decompressing it back to the original form. Fortunately zlib provides the following utility function to decompress a data buffer in memory:</p>

<pre class="code">
<span class="codekeyword">int</span> uncompress(Bytef *dest, uLongf *destLen, <span class="codekeyword">const</span> Bytef *source, uLongf sourceLen);
</pre>

<ul>
  <i>dest</i> - Pointer to the destination buffer where the decompressed data will be written to.<br>
  <i>destLen</i> - After the function has returned, this value will be the size in bytes of the decompressed data.<br>
  <i>source</i> - Pointer to the source buffer which contains the data to be decompressed.<br>
  <i>sourceLen</i> - Length of the compressed data buffer in bytes
</ul>

<p>Unlike its compression counterpart, there is only a single version of the decompression function since there is not much customisation you can apply to decompression - you generally want the function to operate as fast as possible. The <i>uncompress</i> function returns the same set of values as its compression counterparts regarding success and failures.</p>
<p>Now let's move onto an example of how to use the above function to decompress the data from the file in part one before writing the original contents back out to disk:</p>

<pre class="code">
<span class="codecomment">//the input file, this is the output file from part one</span>
FILE *FileIn = fopen("FileOut.dat", "rb");

<span class="codecomment">//output file</span>
FILE *FileOut = fopen("OrigFile.bmp", "wb");

<span class="codecomment">//get the file size of the input file</span>
fseek(FileIn, 0, SEEK_END);</span></p>
<span class="codekeyword">unsigned long</span> FileInSize = ftell(FileIn);

<span class="codecomment">//buffers for the raw and uncompressed data</span>
<span class="codekeyword">void</span> *RawDataBuff = malloc(FileInSize);
<span class="codekeyword">void</span> *UnCompDataBuff = NULL;

<span class="codecomment">//read in the contents of the file into the source buffer</span>
fseek(FileIn, 0, SEEK_SET);
fread(RawDataBuff, FileInSize, 1, FileIn);
<span class="codecomment">//allocate a buffer big enough to hold the uncompressed data, we can cheat here
//because we know the file size of the original</span>
uLongf UnCompSize = 482000;
UnCompDataBuff = malloc(UnCompSize);

<span class="codecomment">
//all data we require is ready so compress it into the source buffer, the exact
//size will be stored in UnCompSize</span>
uncompress((Bytef*)UnCompDataBuff, &UnCompSize, (<span class="codekeyword">const</span> Bytef*)RawDataBuff, FileInSize);

<span class="codecomment">//write the decompressed data to disk</span>
fwrite(UnCompDataBuff, UnCompSize, 1, FileOut);
</pre>

<p>Again error checking has been removed for this example; we also use a fixed file size for the uncompressed data since we know how big the original file is. Ideally you would want to store the size of the original uncompressed data along with the actual data itself for use when decompressing it.</p>
<p>That sums up compression between buffers in memory. The code for compression/decompression is ideally suitable for being as utility functions to hide away all those details of buffer allocation/checking return values etc.</p>

<p align="center"><b><a href="/community/forums/topic.asp?key=featart&uid=2279&forum_id=35&Topic_Title=In+Memory+Data+Compression+and+Decompression">Discuss this article in the forums</a></b></p>
<p>
<br><span class="maintext-2">Date this article was posted to GameDev.net: <b>12/12/2005</b>
<br>(Note that this date does not necessarily correspond to the date the article was written)</span>
<p><b>See Also:</b><br>

<a href="/reference/list.asp?categoryid=125">Compression Algorithms  </a><br>

<a href="/reference/list.asp?categoryid=53">Sweet Snippets  </a><br>

<p align="center">&copy; 1999-2006 Gamedev.net. All rights reserved. <a href="/info/legal.htm#copyright"><u>Terms of Use</u></a> <a href="/info/legal.htm#privacy"><u>Privacy Policy</u></a>
<br><span class="maintext-1">Comments? Questions? Feedback? <a href="mailto:webmaster@gamedev.net">Send us an e-mail!</a></span></p>

</td></tr></table>


<!-- start Vibrant Media IntelliTXT Tooltip style sheet -->
<style type="text/css">
.iTt{
    FONT-FAMILY:       Verdana, Arial, Helvetica;
    FONT-SIZE:         11px;
    FONT-STYLE:        normal;
    FONT-WEIGHT:       normal;
    COLOR:             black;
    BACKGROUND-COLOR:  lightyellow;
    BORDER:            black 1px solid;
    PADDING:           2px;
}
.iTt a {
    COLOR:             0000CC;
}
.iTt a:visited {
    COLOR:             0000CC;
}
.iTt a:hover {
    COLOR:             6666CC;
}
.iTt TD {
   COLOR:              999999;
}
</style>
<!-- end Vibrant Media IntelliTXT style sheet -->
<!-- start Vibrant Media IntelliTXT script section -->
<script type="text/javascript" src="http://gamedev.us.intellitxt.com/intellitxt/front.asp?ipid=1966"></script>
<!-- end Vibrant Media IntelliTXT script section -->

</body>
</html>
